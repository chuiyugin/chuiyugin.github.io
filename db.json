{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"source/img/1.jpg","path":"img/1.jpg","modified":1,"renderable":0},{"_id":"source/img/2.jpg","path":"img/2.jpg","modified":1,"renderable":0},{"_id":"source/img/3.jpg","path":"img/3.jpg","modified":1,"renderable":0},{"_id":"source/img/4.png","path":"img/4.png","modified":1,"renderable":0},{"_id":"source/img/6.jpg","path":"img/6.jpg","modified":1,"renderable":0},{"_id":"source/img/5.png","path":"img/5.png","modified":1,"renderable":0},{"_id":"source/img/8.png","path":"img/8.png","modified":1,"renderable":0},{"_id":"source/img/7.png","path":"img/7.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/Assembly_language.md","hash":"3b6ec96aaff0263b60d8d07a0019cbba0a772de7","modified":1699840971000},{"_id":"source/_posts/Autohotkey.md","hash":"924acaed268663a425ceba9157c57dadc1b75e9f","modified":1699840971000},{"_id":"source/_posts/Fliplt.md","hash":"4bd95ca3685c1b22df59eedaf3048ff427ee73b7","modified":1699840971000},{"_id":"source/_posts/Josephus.md","hash":"21802035ef565338698292f7ab57bef4fae9d3f6","modified":1699840971000},{"_id":"source/_posts/Deep_laerning.md","hash":"d989c25f1a853a525e071212f8cb6b8d80d1320d","modified":1699840971000},{"_id":"source/_posts/Myexe.md","hash":"41e147208cb2348b5418e431842d84da0b9a2a71","modified":1699840971000},{"_id":"source/_posts/algorithm.md","hash":"3be46c693ac3e92c37fd7d9fb71a86c657595d43","modified":1699840971000},{"_id":"source/_posts/Web.md","hash":"acf56e848957401916b4e29a0c522efd981fe891","modified":1699840971000},{"_id":"source/_posts/exercise2.md","hash":"a242065ca4e3461aed6f36cc8584fde1802b117d","modified":1699840971000},{"_id":"source/_posts/exercise1.md","hash":"b4d9129318089225ec45d25f7c39e386d12e06fb","modified":1699840971000},{"_id":"source/_posts/hello-world.md","hash":"60eece0fcd5824c02e29fc4fd7c80a543f5d16f2","modified":1699840971000},{"_id":"source/_posts/signal_2.md","hash":"1fc47cda474d17342a6c032a1422384574aeff9f","modified":1699840971000},{"_id":"source/_posts/graph counts.md","hash":"596f2b855bbd6df6db7d493b427e146c90385e16","modified":1699840971000},{"_id":"source/_posts/signal_1.md","hash":"beac93556c831d0ca850837bf9662b51e5d1e9dc","modified":1699840971000},{"_id":"source/_posts/points.md","hash":"023c31cfa0d70f8d5608e612cb8b6ab2d33dd343","modified":1699840971000},{"_id":"source/_posts/signal_3.md","hash":"b9cac0fecfae53874e9c5e96812c6fe5dada478e","modified":1699840971000},{"_id":"source/_posts/sort.md","hash":"9066824e1f4721b077ef3cf8f6627deacca1bd70","modified":1699840971000},{"_id":"source/_posts/signal_4.md","hash":"6159c3dd3f7dc59295899c6a223dbcd8c68e6938","modified":1699840971000},{"_id":"source/_posts/signal_5.md","hash":"9beb95ec5b6120226ae52f99098af2042fcf3b78","modified":1699840971000},{"_id":"source/_posts/vue_learning.md","hash":"e9df92b5fdc0de7427ebbd94f3d0d55783013ed2","modified":1699840971000},{"_id":"source/about/index.md","hash":"bff11a8cb83f10afa352b580193a6c789e95d9f3","modified":1699840971000},{"_id":"source/categories/index.md","hash":"275c6e238f46c9624dd3f0a492ed69c8b5367111","modified":1699840971000},{"_id":"source/img/4.png","hash":"4bbbb05112c0b0899c2d9cc613833dfbcb022aaf","modified":1699840971000},{"_id":"source/img/6.jpg","hash":"0e03182e58c04594426c046588ac3abdb59ae291","modified":1699840971000},{"_id":"source/img/5.png","hash":"90eaf3e6df93a0e002e48d04fc62ab444d01454e","modified":1699840971000},{"_id":"source/img/7.png","hash":"7e58ada729a6277bd57b50a670d92954ebf34ac5","modified":1699840971000},{"_id":"source/_posts/algorithm2.md","hash":"f75229243a9978c0fc54b080369921fa728e5b4c","modified":1699840971000},{"_id":"source/img/2.jpg","hash":"8a85ac493d59763b3a1e7ccbf669502f04ab13a4","modified":1699840971000},{"_id":"source/img/8.png","hash":"91c96d8a2f1c216443a84d5ae855cf45b1caa16d","modified":1699840971000},{"_id":"source/img/3.jpg","hash":"e1cf6d0a3fcdbf94ecb38dfb3c06c61252a4d17e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1699840971000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1699840971000},{"_id":"source/img/1.jpg","hash":"b3abed845fa25c414eb99dbc3a1c05baeeb3147f","modified":1699840971000},{"_id":"public/search.xml","hash":"7d95826572957468ff11ec9042e7dc85b8ab4b10","modified":1699849223476},{"_id":"public/local-search.xml","hash":"c72763992d283bfd2faddfe752822e4297c35f68","modified":1699849223476},{"_id":"public/archives/index.html","hash":"2a105f5ea2f2e4e533cdecf796ae1851cdf43c77","modified":1699849223476},{"_id":"public/archives/page/2/index.html","hash":"11618e40d235af478dc94186dfd2bfab8331fb8f","modified":1699849223476},{"_id":"public/archives/page/3/index.html","hash":"356701bc83e391b9cafa07a43f6c17773c40f852","modified":1699849223476},{"_id":"public/archives/2021/index.html","hash":"a2956d20ab6d84a4482fa40b014a6395977758b5","modified":1699849223476},{"_id":"public/archives/2021/11/index.html","hash":"9d7769accd43929ef5717360b50fac044cf67aca","modified":1699849223476},{"_id":"public/archives/2021/12/index.html","hash":"bdcbb9a0293e3e5fbff8109a8b074a6508702e02","modified":1699849223476},{"_id":"public/archives/2022/index.html","hash":"e9b0c543c61b382fe4de56ceb010dac586db2cc3","modified":1699849223476},{"_id":"public/archives/2022/09/index.html","hash":"ebbb748bfed856f6382fcb8724bd6e142ea83897","modified":1699849223476},{"_id":"public/archives/2022/10/index.html","hash":"79036180909acbf03c2e5c6937a1ed109c14989e","modified":1699849223476},{"_id":"public/archives/2022/11/index.html","hash":"b987e8c25b6797f1104ccf2be04f5b69f767b8b9","modified":1699849223476},{"_id":"public/archives/2022/12/index.html","hash":"2f36e599a8698129ee16a18bb9298c8bc1d4ecca","modified":1699849223476},{"_id":"public/archives/2023/index.html","hash":"402dd6cc1f3c7326a71b7f6a0c9c8b5d6a6b3955","modified":1699849223476},{"_id":"public/archives/2023/01/index.html","hash":"bc3e046b8706ba3cfbd848494f42226b7266c9b7","modified":1699849223476},{"_id":"public/archives/2023/04/index.html","hash":"c412fda8294ae47d3a238854ca3c0deb788ba395","modified":1699849223476},{"_id":"public/archives/2023/06/index.html","hash":"113a19f48641ef400b2d4a2a665cd155655b5382","modified":1699849223476},{"_id":"public/archives/2023/07/index.html","hash":"5155593602c78918d375cde7144bb0ffbea53eca","modified":1699849223476},{"_id":"public/archives/2023/10/index.html","hash":"95c6a0bd5c5ceaf802f001e8f298b7be7f4a8766","modified":1699849223476},{"_id":"public/archives/2023/11/index.html","hash":"e10f8825d13cb7670be750c7884e6dfa9e58f60d","modified":1699849223476},{"_id":"public/categories/汇编语言/index.html","hash":"009bb3a440c94c57092d468504901a60b60a165b","modified":1699849223476},{"_id":"public/categories/Autohotkey/index.html","hash":"ea3153f349f3f3f22416e6666347382b655fe399","modified":1699849223476},{"_id":"public/categories/深度学习/index.html","hash":"0cbb68235e49e53a992e6ab797e29faed5d5c2e5","modified":1699849223476},{"_id":"public/categories/Fliplt/index.html","hash":"ba8db0db08132390cfe19a91e9d224763814adee","modified":1699849223476},{"_id":"public/categories/数据结构/index.html","hash":"d7865ba1681cda2087e096ba71b8df2ffdd4f288","modified":1699849223476},{"_id":"public/categories/可执行文件/index.html","hash":"66c307d5ab07a97715e4fa18b38fd34b4c32b0b5","modified":1699849223476},{"_id":"public/categories/Web/index.html","hash":"26f0b49d32ed1ae53806b09695a4b5ddfa0d6515","modified":1699849223476},{"_id":"public/categories/JAVA/index.html","hash":"f882efc354e850ac647f138e8955665cceaedef6","modified":1699849223476},{"_id":"public/categories/HEXO部署/index.html","hash":"8c9d79f76d69712bbcab0320d35b35f6d3bfdea5","modified":1699849223476},{"_id":"public/categories/数字信号处理/index.html","hash":"33a647d7694485cf583b0a63274b211f2717746f","modified":1699849223476},{"_id":"public/categories/Vue/index.html","hash":"24ba9d0b085aac20366575b123d50ffd04579b4f","modified":1699849223476},{"_id":"public/page/3/index.html","hash":"a075be2fa2b3c085529a2071196c1de1f9266247","modified":1699849223476},{"_id":"public/tags/汇编语言/index.html","hash":"eac72a3e6c45a58b4641d43abc89af673f01e926","modified":1699849223476},{"_id":"public/tags/Autohotkey/index.html","hash":"a5a5cd0cb9c4f0b03f4d25e831e768372c970bfe","modified":1699849223476},{"_id":"public/tags/深度学习/index.html","hash":"01faf5fa1f4b62dcc58205bdce65aad7a399b914","modified":1699849223476},{"_id":"public/tags/Fliplt/index.html","hash":"40a59bd297b54951f70f778902c5a60399630f9a","modified":1699849223476},{"_id":"public/tags/数据结构/index.html","hash":"2d5f56f8e622c0dfd4ce91c5f33c3e6700949a44","modified":1699849223476},{"_id":"public/tags/c语言/index.html","hash":"7e018335742e9ee450f15975e21822081383c0a5","modified":1699849223476},{"_id":"public/tags/PYTHON/index.html","hash":"f9a893725101273c6a600bfd7345f15780e911c9","modified":1699849223476},{"_id":"public/tags/exe/index.html","hash":"1203579d0ba933734b3dd4ed7b0031779de59839","modified":1699849223476},{"_id":"public/tags/Web/index.html","hash":"19cf7c3ef7b17eb59a36ac52988789cd95d1071e","modified":1699849223476},{"_id":"public/tags/HTML/index.html","hash":"7a92a05742fb3d07e3d9bf953b55b2e41b8f94a1","modified":1699849223476},{"_id":"public/tags/JAVA/index.html","hash":"826d2a9c82982440c4157d974cbc0210aa6f9267","modified":1699849223476},{"_id":"public/tags/程序设计/index.html","hash":"779dfc4c7f447268104b7e3b392371bb59ba38fa","modified":1699849223476},{"_id":"public/tags/图/index.html","hash":"de35643d535517d48a9ef9839ad9a5b08c331f1d","modified":1699849223476},{"_id":"public/tags/Hexo/index.html","hash":"4d675e01eeb3f090c37e135cd32150fd921c0fc0","modified":1699849223476},{"_id":"public/tags/部署/index.html","hash":"585f295ff88eea8286dbd4b7385edb3b84408f08","modified":1699849223476},{"_id":"public/tags/分治法/index.html","hash":"279d8dc0608094d1e2482b6c5c08a0b0cbd55cf5","modified":1699849223476},{"_id":"public/tags/数字信号处理/index.html","hash":"1f3f678fb36b7db7f3755ce208f5b49ac60ae2e4","modified":1699849223476},{"_id":"public/tags/算法/index.html","hash":"02f9a057329d0964c58457d5654a8d8d51545f5d","modified":1699849223476},{"_id":"public/tags/排序/index.html","hash":"0717129f695b4c2a769dab623c845e730ef563fe","modified":1699849223476},{"_id":"public/tags/Vue/index.html","hash":"0dc36a9b679affa9758c89024124daef16083e02","modified":1699849223476},{"_id":"public/404.html","hash":"9b0fde9b8b286e6550dba48096b9d7fcc1a0f742","modified":1699849223476},{"_id":"public/tags/index.html","hash":"292604a99d07fd5ead356351f37554ac6d5a6ef9","modified":1699849223476},{"_id":"public/links/index.html","hash":"3e525291227272e9b6997b8c7c2fe667b5b34d6e","modified":1699849223476},{"_id":"public/about/index.html","hash":"104ca00f5a13a8e5da434965eaa742d335b4c8f5","modified":1699849223476},{"_id":"public/categories/index.html","hash":"7ffef62d16a1ab2da712d31471720803b8403ebf","modified":1699849223476},{"_id":"public/2023/11/05/algorithm2/index.html","hash":"ba734c9910efb7abf22372a63bac708104b8ba93","modified":1699849223476},{"_id":"public/2023/10/10/Assembly_language/index.html","hash":"828d49211691cb74e8e0882f205b77391deedbb6","modified":1699849223476},{"_id":"public/2023/07/04/Deep_laerning/index.html","hash":"ff02a69614517a2f9bed4e901d8644a4010e13cb","modified":1699849223476},{"_id":"public/2023/06/17/algorithm/index.html","hash":"bb74fc304e2a9b3773a0757457bec60cc84445e3","modified":1699849223476},{"_id":"public/2023/04/25/vue_learning/index.html","hash":"0fe0ceca78291d0148f216f766903dee321f748f","modified":1699849223476},{"_id":"public/2023/01/16/Fliplt/index.html","hash":"6aa75c6a898e2605c83ca5a327ee89287aaf8ab5","modified":1699849223476},{"_id":"public/2022/12/25/Autohotkey/index.html","hash":"f1dbe5d7145f4c113938ca059ca45eaa3e51ce9c","modified":1699849223476},{"_id":"public/2022/12/22/Web/index.html","hash":"35df7e1f3603906018a6ec23eb9060eba440eab9","modified":1699849223476},{"_id":"public/2022/12/21/signal_5/index.html","hash":"39747f8d07a07d3fc89e3bc55935ebb52b333ecd","modified":1699849223476},{"_id":"public/2022/12/21/signal_4/index.html","hash":"fd6f6d7df688ff50975434e8e17ef3094d11e0b3","modified":1699849223476},{"_id":"public/2022/11/14/signal_3/index.html","hash":"db45e11bed22fd99ff13178e8d16798bbb3001c0","modified":1699849223476},{"_id":"public/2022/10/28/exercise2/index.html","hash":"c74e861dfaaffe7d68e0b064ef70624d035517d5","modified":1699849223476},{"_id":"public/2022/10/13/signal_2/index.html","hash":"4b2f9f4d6d939225cfed5b2b5372e6793e813ce1","modified":1699849223476},{"_id":"public/2022/09/29/exercise1/index.html","hash":"2eeedf579c28669fabc890753aa2f299d319c973","modified":1699849223476},{"_id":"public/2022/09/22/signal_1/index.html","hash":"efbe916c34be36cca7599ca0e976df63a101b61f","modified":1699849223476},{"_id":"public/2022/09/06/Myexe/index.html","hash":"11ca9f28e840d8b568e3ad012e54487225904080","modified":1699849223476},{"_id":"public/2021/12/12/graph counts/index.html","hash":"e5a16c8b308b1fd4228b2816ab39492c3954daca","modified":1699849223476},{"_id":"public/2021/12/12/points/index.html","hash":"9f956f2c44bb554823402ec3cb9b02b49c104715","modified":1699849223476},{"_id":"public/2021/11/23/sort/index.html","hash":"e5105745877e121a4532d315e89155d29a215bfe","modified":1699849223476},{"_id":"public/2021/11/20/Josephus/index.html","hash":"6ecbff6c02f7eeb655b614f78e9921a5bbdd8ff8","modified":1699849223476},{"_id":"public/2021/11/20/hello-world/index.html","hash":"f118e8d327a6c1f48a09a8fed0497822e468189a","modified":1699849223476},{"_id":"public/index.html","hash":"d2c38b3569863e4df1933052de31948f697ef04b","modified":1699849223476},{"_id":"public/page/2/index.html","hash":"3b092d9ae18ebfbb427da0b3aa4fd2aa1cf2cf39","modified":1699849223476},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1699849223476},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1699849223476},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1699849223476},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1699849223476},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1699849223476},{"_id":"public/img/4.png","hash":"4bbbb05112c0b0899c2d9cc613833dfbcb022aaf","modified":1699849223476},{"_id":"public/live2dw/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1699849223476},{"_id":"public/img/5.png","hash":"90eaf3e6df93a0e002e48d04fc62ab444d01454e","modified":1699849223476},{"_id":"public/img/6.jpg","hash":"0e03182e58c04594426c046588ac3abdb59ae291","modified":1699849223476},{"_id":"public/img/7.png","hash":"7e58ada729a6277bd57b50a670d92954ebf34ac5","modified":1699849223476},{"_id":"public/live2dw/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1699849223476},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1699849223476},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1699849223476},{"_id":"public/img/2.jpg","hash":"8a85ac493d59763b3a1e7ccbf669502f04ab13a4","modified":1699849223476},{"_id":"public/img/8.png","hash":"91c96d8a2f1c216443a84d5ae855cf45b1caa16d","modified":1699849223476},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1699849223476},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1699849223476},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1699849223476},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1699849223476},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1699849223476},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1699849223476},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1699849223476},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1699849223476},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1699849223476},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1699849223476},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1699849223476},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1699849223476},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1699849223476},{"_id":"public/live2dw/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1699849223476},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1699849223476},{"_id":"public/img/3.jpg","hash":"e1cf6d0a3fcdbf94ecb38dfb3c06c61252a4d17e","modified":1699849223476},{"_id":"public/live2dw/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1699849223476},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1699849223476},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1699849223476},{"_id":"public/img/1.jpg","hash":"b3abed845fa25c414eb99dbc3a1c05baeeb3147f","modified":1699849223476}],"Category":[{"name":"汇编语言","_id":"clowec7uh0004lsvs9ne4bvz1"},{"name":"Autohotkey","_id":"clowec7uk0009lsvs1ua2fugp"},{"name":"深度学习","_id":"clowec7ul000flsvsfyta37rc"},{"name":"Fliplt","_id":"clowec7un000llsvs6wshebcu"},{"name":"数据结构","_id":"clowec7uo000rlsvs4gf44oh6"},{"name":"可执行文件","_id":"clowec7up000ylsvs717gaqg0"},{"name":"Web","_id":"clowec7ut001alsvs7oz72wzn"},{"name":"JAVA","_id":"clowec7uu001ilsvs8yl9d4fb"},{"name":"HEXO部署","_id":"clowec7uw001ulsvs32w0g3u0"},{"name":"数字信号处理","_id":"clowec7ux0020lsvs9sop3rj4"},{"name":"Vue","_id":"clowec7v4003glsvs1wrie7ee"}],"Data":[],"Page":[{"title":"about","date":"2020-02-23T11:20:33.000Z","layout":"about","_content":"\n所见所闻，所思所想...\n\n{% mmedia \"meting\" \"server=netease\"\t\"type=playlist\"\t\"id=7758076487\"  \"autoplay=true\"  %}","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n\n所见所闻，所思所想...\n\n{% mmedia \"meting\" \"server=netease\"\t\"type=playlist\"\t\"id=7758076487\"  \"autoplay=true\"  %}","updated":"2023-11-13T02:02:51.000Z","path":"about/index.html","comments":1,"_id":"clowec7uc0000lsvsagos1el9","content":"<p>所见所闻，所思所想…</p>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css\"><script src=\"https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js\"></script><script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script><meting-js metin=\"meting\" server=\"netease\" type=\"playlist\" id=7758076487 autoplay=true ></meting-js>","site":{"data":{}},"excerpt":"","more":"<p>所见所闻，所思所想…</p>\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css\"><script src=\"https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js\"></script><script src=\"https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\"></script><meting-js metin=\"meting\" server=\"netease\" type=\"playlist\" id=7758076487 autoplay=true ></meting-js>"},{"title":"categories","date":"2022-09-09T00:30:29.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-09-09 08:30:29\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2023-11-13T02:02:51.000Z","path":"categories/index.html","comments":1,"_id":"clowec7uf0002lsvs3ckabm2r","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"汇编语言","date":"2023-10-10T05:00:00.000Z","excerpt":"汇编语言的学习与分享总结!","_content":"# 汇编语言\n\n## 第二章 寄存器\n\n一个典型的CPU由**运算器**、**控制器**、**寄存器**等器件组成，这些器件靠**内部总线**相连。\n\n区分**内部总线**与**外部总线**：\n\n* **内部总线**实现CPU**内部各个器件**之间的联系。\n* **外部总线**实现**CPU和主板上其他器件**的联系。\n\n简单而言，在CPU中：\n\n* 运算器进行信息处理；\n* 寄存器进行信息存储；\n* 控制器控制各种器件进行工作；\n* 内部总线连接各种器件，在它们之间进行数据传送；\n\n其中，寄存器是CPU中程序员可以用**指令读写**的部件，可以通过改变各种寄存器中的内容来实现对CPU的控制。\n\n### 通用寄存器\n\n8086CPU中所有寄存器都是16位的，可以存放**两个字节**的数据。\n\n存放一般性数据的寄存器成为通用寄存器，有AX、BX、CX、DX四个通用寄存器。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250059.png)\n\n为了保证与上一代的8位寄存器兼容，8086CPU中的通用寄存器AX、BX、CX、DX都可以分为两个可以独立使用的8位寄存器。\n\n* AX可分为AH和AL；\n* BX可分为BH和BL；\n* CX可分为CH和CL；\n* DX可分为DH和DL；\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250451.png)\n\n### 字在寄存器的存储\n\n+ 8086是16位CPU\n\n  + 8086的字长(word size)为**16bit**\n  + 字节：记为Byte，一个字节由8个bit组成，可以存在8位寄存器中；\n  + 字：记为Word，对于16位的8086CPU而言，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。\n\n+ 需要特别注意**字的定义**：\n\n  + **计算机进行数据处理时，一次存取、加工和传送的数据长度称为字。**然而，这可能会**根据系统的不同而变化**。例如，在32位的系统中，一个字由32位组成。在64位的系统中，一个字由64位组成。所以，虽然16位通常被称为一个字，但这可能会根据具体的计算机系统而有所不同。\n\n    ","source":"_posts/Assembly_language.md","raw":"---\ntitle: 汇编语言\ntags: [汇编语言]\ncategories: [汇编语言]\ndate: 2023-10-10 13:00:00\nexcerpt: 汇编语言的学习与分享总结!\n---\n# 汇编语言\n\n## 第二章 寄存器\n\n一个典型的CPU由**运算器**、**控制器**、**寄存器**等器件组成，这些器件靠**内部总线**相连。\n\n区分**内部总线**与**外部总线**：\n\n* **内部总线**实现CPU**内部各个器件**之间的联系。\n* **外部总线**实现**CPU和主板上其他器件**的联系。\n\n简单而言，在CPU中：\n\n* 运算器进行信息处理；\n* 寄存器进行信息存储；\n* 控制器控制各种器件进行工作；\n* 内部总线连接各种器件，在它们之间进行数据传送；\n\n其中，寄存器是CPU中程序员可以用**指令读写**的部件，可以通过改变各种寄存器中的内容来实现对CPU的控制。\n\n### 通用寄存器\n\n8086CPU中所有寄存器都是16位的，可以存放**两个字节**的数据。\n\n存放一般性数据的寄存器成为通用寄存器，有AX、BX、CX、DX四个通用寄存器。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250059.png)\n\n为了保证与上一代的8位寄存器兼容，8086CPU中的通用寄存器AX、BX、CX、DX都可以分为两个可以独立使用的8位寄存器。\n\n* AX可分为AH和AL；\n* BX可分为BH和BL；\n* CX可分为CH和CL；\n* DX可分为DH和DL；\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250451.png)\n\n### 字在寄存器的存储\n\n+ 8086是16位CPU\n\n  + 8086的字长(word size)为**16bit**\n  + 字节：记为Byte，一个字节由8个bit组成，可以存在8位寄存器中；\n  + 字：记为Word，对于16位的8086CPU而言，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。\n\n+ 需要特别注意**字的定义**：\n\n  + **计算机进行数据处理时，一次存取、加工和传送的数据长度称为字。**然而，这可能会**根据系统的不同而变化**。例如，在32位的系统中，一个字由32位组成。在64位的系统中，一个字由64位组成。所以，虽然16位通常被称为一个字，但这可能会根据具体的计算机系统而有所不同。\n\n    ","slug":"Assembly_language","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7ud0001lsvs0whzb9le","content":"<h1 id=\"汇编语言\"><a class=\"markdownIt-Anchor\" href=\"#汇编语言\"></a> 汇编语言</h1>\n<h2 id=\"第二章-寄存器\"><a class=\"markdownIt-Anchor\" href=\"#第二章-寄存器\"></a> 第二章 寄存器</h2>\n<p>一个典型的CPU由<strong>运算器</strong>、<strong>控制器</strong>、<strong>寄存器</strong>等器件组成，这些器件靠<strong>内部总线</strong>相连。</p>\n<p>区分<strong>内部总线</strong>与<strong>外部总线</strong>：</p>\n<ul>\n<li><strong>内部总线</strong>实现CPU<strong>内部各个器件</strong>之间的联系。</li>\n<li><strong>外部总线</strong>实现<strong>CPU和主板上其他器件</strong>的联系。</li>\n</ul>\n<p>简单而言，在CPU中：</p>\n<ul>\n<li>运算器进行信息处理；</li>\n<li>寄存器进行信息存储；</li>\n<li>控制器控制各种器件进行工作；</li>\n<li>内部总线连接各种器件，在它们之间进行数据传送；</li>\n</ul>\n<p>其中，寄存器是CPU中程序员可以用<strong>指令读写</strong>的部件，可以通过改变各种寄存器中的内容来实现对CPU的控制。</p>\n<h3 id=\"通用寄存器\"><a class=\"markdownIt-Anchor\" href=\"#通用寄存器\"></a> 通用寄存器</h3>\n<p>8086CPU中所有寄存器都是16位的，可以存放<strong>两个字节</strong>的数据。</p>\n<p>存放一般性数据的寄存器成为通用寄存器，有AX、BX、CX、DX四个通用寄存器。</p>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250059.png\" alt=\"\" /></p>\n<p>为了保证与上一代的8位寄存器兼容，8086CPU中的通用寄存器AX、BX、CX、DX都可以分为两个可以独立使用的8位寄存器。</p>\n<ul>\n<li>AX可分为AH和AL；</li>\n<li>BX可分为BH和BL；</li>\n<li>CX可分为CH和CL；</li>\n<li>DX可分为DH和DL；</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250451.png\" alt=\"\" /></p>\n<h3 id=\"字在寄存器的存储\"><a class=\"markdownIt-Anchor\" href=\"#字在寄存器的存储\"></a> 字在寄存器的存储</h3>\n<ul>\n<li>\n<p>8086是16位CPU</p>\n<ul>\n<li>8086的字长(word size)为<strong>16bit</strong></li>\n<li>字节：记为Byte，一个字节由8个bit组成，可以存在8位寄存器中；</li>\n<li>字：记为Word，对于16位的8086CPU而言，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。</li>\n</ul>\n</li>\n<li>\n<p>需要特别注意<strong>字的定义</strong>：</p>\n<ul>\n<li><strong>计算机进行数据处理时，一次存取、加工和传送的数据长度称为字。<strong>然而，这可能会</strong>根据系统的不同而变化</strong>。例如，在32位的系统中，一个字由32位组成。在64位的系统中，一个字由64位组成。所以，虽然16位通常被称为一个字，但这可能会根据具体的计算机系统而有所不同。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"more":"<h1 id=\"汇编语言\"><a class=\"markdownIt-Anchor\" href=\"#汇编语言\"></a> 汇编语言</h1>\n<h2 id=\"第二章-寄存器\"><a class=\"markdownIt-Anchor\" href=\"#第二章-寄存器\"></a> 第二章 寄存器</h2>\n<p>一个典型的CPU由<strong>运算器</strong>、<strong>控制器</strong>、<strong>寄存器</strong>等器件组成，这些器件靠<strong>内部总线</strong>相连。</p>\n<p>区分<strong>内部总线</strong>与<strong>外部总线</strong>：</p>\n<ul>\n<li><strong>内部总线</strong>实现CPU<strong>内部各个器件</strong>之间的联系。</li>\n<li><strong>外部总线</strong>实现<strong>CPU和主板上其他器件</strong>的联系。</li>\n</ul>\n<p>简单而言，在CPU中：</p>\n<ul>\n<li>运算器进行信息处理；</li>\n<li>寄存器进行信息存储；</li>\n<li>控制器控制各种器件进行工作；</li>\n<li>内部总线连接各种器件，在它们之间进行数据传送；</li>\n</ul>\n<p>其中，寄存器是CPU中程序员可以用<strong>指令读写</strong>的部件，可以通过改变各种寄存器中的内容来实现对CPU的控制。</p>\n<h3 id=\"通用寄存器\"><a class=\"markdownIt-Anchor\" href=\"#通用寄存器\"></a> 通用寄存器</h3>\n<p>8086CPU中所有寄存器都是16位的，可以存放<strong>两个字节</strong>的数据。</p>\n<p>存放一般性数据的寄存器成为通用寄存器，有AX、BX、CX、DX四个通用寄存器。</p>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250059.png\" alt=\"\" /></p>\n<p>为了保证与上一代的8位寄存器兼容，8086CPU中的通用寄存器AX、BX、CX、DX都可以分为两个可以独立使用的8位寄存器。</p>\n<ul>\n<li>AX可分为AH和AL；</li>\n<li>BX可分为BH和BL；</li>\n<li>CX可分为CH和CL；</li>\n<li>DX可分为DH和DL；</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310101250451.png\" alt=\"\" /></p>\n<h3 id=\"字在寄存器的存储\"><a class=\"markdownIt-Anchor\" href=\"#字在寄存器的存储\"></a> 字在寄存器的存储</h3>\n<ul>\n<li>\n<p>8086是16位CPU</p>\n<ul>\n<li>8086的字长(word size)为<strong>16bit</strong></li>\n<li>字节：记为Byte，一个字节由8个bit组成，可以存在8位寄存器中；</li>\n<li>字：记为Word，对于16位的8086CPU而言，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节。</li>\n</ul>\n</li>\n<li>\n<p>需要特别注意<strong>字的定义</strong>：</p>\n<ul>\n<li><strong>计算机进行数据处理时，一次存取、加工和传送的数据长度称为字。<strong>然而，这可能会</strong>根据系统的不同而变化</strong>。例如，在32位的系统中，一个字由32位组成。在64位的系统中，一个字由64位组成。所以，虽然16位通常被称为一个字，但这可能会根据具体的计算机系统而有所不同。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Autohotkey实现鼠标双击桌面隐藏图标","date":"2022-12-25T12:30:00.000Z","excerpt":"Some useful tools!","_content":"# Autohotkey 实现鼠标双击桌面隐藏图标\n\n## 基本操作\n\n有时候我们做教程或特殊情况下需要将桌面上密密麻麻的图标暂时隐藏，稍后又要让他显示，那能不能我们随心所欲得让他显示和隐藏呢?今天便给大家解决这一问题。\n\n1、先下载安装autohotkey，大约2M左右很小，官方下载地址在下方提供 [网址](https://www.autohotkey.com/)\n\n![](https://s2.loli.net/2022/12/25/jRLCWIlyhtMf9ro.png)\n\n2、在随便一个地方创建txt文件，并将以下代码粘贴到txt里保存。最后更改`.txt`后缀为`.ahk`!\n\n```css\n\n; ===============================================================================================================================\n; =====隐藏桌面图标：双击\n; ===============================================================================================================================\n\n#If IsDesktopUnderMouse()\n~LButton::\n\tLButton_presses++\n\tif (LButton_presses=2)\n\t\tif (!IsObject(GetDesktopIconUnderMouse()) or DesktopIconsIsShow=0)\n\t\t\tDesktopIconsIsShow:=HideOrShowDesktopIcons()\n\tSetTimer, KeyLButton, -300\nreturn\n\nKeyLButton:\n\tLButton_presses := 0\nreturn\n\nIsDesktopUnderMouse()\n{\n\tMouseGetPos, , , OutputVarWin\n\tWinGetClass, OutputVarClass, % \"ahk_id\" OutputVarWin\n\tif (OutputVarClass=\"WorkerW\" or OutputVarClass=\"Progman\")\n\t\treturn, 1\n\telse\n\t\treturn, 0\n}\n\nHideOrShowDesktopIcons()\n{\n\tControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class WorkerW\n\tif (OutputVarHwnd=\"\")\n      ControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class Progman\n\n\tif (DllCall(\"IsWindowVisible\", UInt, OutputVarHwnd))\n\t{\n\t\tWinHide, ahk_id %OutputVarHwnd%\n\t\treturn, 0\n\t}\n\telse\n\t{\n\t\tWinShow, ahk_id %OutputVarHwnd%\n\t\treturn, 1\n\t}\n}\n#If\n; ===============================================================================================================================\n; GetDesktopIconUnderMouse()\n; https://www.autohotkey.com/boards/viewtopic.php?p=260761\n; Function:       Gets the desktop icon under the mouse. See the \"Return values\" section below for more information about the\n;                 icon and associated file data retrieved.\n; Parameters:     None\n; Return values:  If there is an icon under the mouse, an associative array with the following keys:\n;                 - left: the left position of the icon in screen coordinates\n;                 - top: the top position of the icon in screen coordinates\n;                 - right: the right position of the icon in screen coordinates\n;                 - bottom: the bottom position of the icon in screen coordinates\n;                 - name: the name of the file represented by the icon, e.g. New Text Document.txt\n;                 - size: the size of the file represented by the icon, e.g. 1.72 KB. Note: this value is blank for folders\n;                 - type: the type of the file represented by the icon, e.g. TXT File, JPEG image, File folder\n;                 - date: the modified date of the file represented by the icon, e.g. 9/9/2016 10:39 AM\n;                 Otherwise, a blank value\n; Global vars:    None\n; Dependencies:   None\n; Tested with:    AHK 1.1.30.01 (A32/U32/U64)\n; Tested on:      Win 7 (x64)\n; Written by:     iPhilip\n; ===============================================================================================================================\n\nGetDesktopIconUnderMouse() {\n\tstatic MEM_COMMIT := 0x1000, MEM_RELEASE := 0x8000, PAGE_ReadWRITE := 0x04\n\t\t, PROCESS_VM_OPERATION := 0x0008, PROCESS_VM_READ := 0x0010\n\t\t, LVM_GETITEMCOUNT := 0x1004, LVM_GETITEMRECT := 0x100E\n\n\tIcon := \"\"\n\tMouseGetPos, x, y, hwnd\n\tif not (hwnd = WinExist(\"ahk_class Progman\") || hwnd = WinExist(\"ahk_class WorkerW\"))\n\t\treturn\n\tControlGet, hwnd, HWND, , SysListView321\n\tif not WinExist(\"ahk_id\" hwnd)\n\t\treturn\n\tWinGet, pid, PID\n\tif (hProcess := DllCall(\"OpenProcess\" , \"UInt\", Process_VM_OPERATION|Process_VM_Read, \"Int\",  false, \"UInt\", pid)) {\n\t\tVarSetCapacity(iCoord, 16)\n\t\tSendMessage, %LVM_GETITEMCOUNT%, 0, 0\n\t\tloop, %ErrorLevel% {\n\t\t\tpItemCoord := DllCall(\"VirtualAllocEx\", \"Ptr\", hProcess, \"Ptr\", 0, \"UInt\", 16, \"UInt\", MEM_COMMIT, \"UInt\", PAGE_ReadWRITE)\n\t\t\tSendMessage, %LVM_GETITEMRECT%, % A_Index-1, %pItemCoord%\n\t\t\tDllCall(\"ReadProcessMemory\", \"Ptr\", hProcess, \"Ptr\", pItemCoord, \"Ptr\", &iCoord, \"UInt\", 16, \"UInt\", 0)\n\t\t\tDllCall(\"VirtualFreeEx\", \"Ptr\", hProcess, \"Ptr\", pItemCoord, \"UInt\", 0, \"UInt\", MEM_RELEASE)\n\t\t\tleft   := NumGet(iCoord,  0, \"Int\")\n\t\t\ttop    := NumGet(iCoord,  4, \"Int\")\n\t\t\tRight  := NumGet(iCoord,  8, \"Int\")\n\t\t\tbottom := NumGet(iCoord, 12, \"Int\")\n\t\t\tif (left < x and x < Right and top < y and y < bottom) {\n\t\t\t\tControlGet, list, List\n\t\t\t\tRegExMatch(StrSplit(list, \"`n\")[A_Index], \"O)(.*)\\t(.*)\\t(.*)\\t(.*)\", Match)\n\t\t\t\tIcon := {left:left, top:top, Right:Right, bottom:bottom\n\t\t\t\t\t, name:Match[1], size:Match[2], type:Match[3]\n\t\t\t\t; Delete extraneous date characters (https://goo.gl/pMw6AM):\n\t\t\t\t; - Unicode LTR (Left-to-Right) mark (0x200E = 8206)\n\t\t\t\t; - Unicode RTL (Right-to-Left) mark (0x200F = 8207)\n\t\t\t\t\t, date:RegExReplace(Match[4], A_IsUnicode ? \"[\\x{200E}-\\x{200F}]\" : \"\\?\")}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tDllCall(\"CloseHandle\", \"Ptr\", hProcess)\n\t}\n\treturn Icon\n}\n\n```\n\n3、保存编辑的文件，右击，选择Run Script，运行成功后就可以使用了！\n\n## 开机自启\n\n如果想要功能在开机的时候自动启动，可以进行如下操作： 整体的思路就是生成exe文件，放到系统自启动文件内。 \n\n1、打开Convert .ahk to .exe文件，对ahk脚本进行exe文件生成：\n\n![](https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png)\n\n2、进行文件选择和生成文件命名：\n\n![](https://s2.loli.net/2022/12/25/s4VMbXx7tH9IUTh.png)\n\n3.在系统启动文件夹 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 内粘贴 生成的exe文件。此时会有查毒软件提醒，允许就行。\n\n![](https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png)\n\n大功告成！\n","source":"_posts/Autohotkey.md","raw":"---\ntitle: Autohotkey实现鼠标双击桌面隐藏图标\ntags: [Autohotkey]\ncategories: [Autohotkey]\ndate: 2022-12-25 20:30:00\nexcerpt: Some useful tools!\n---\n# Autohotkey 实现鼠标双击桌面隐藏图标\n\n## 基本操作\n\n有时候我们做教程或特殊情况下需要将桌面上密密麻麻的图标暂时隐藏，稍后又要让他显示，那能不能我们随心所欲得让他显示和隐藏呢?今天便给大家解决这一问题。\n\n1、先下载安装autohotkey，大约2M左右很小，官方下载地址在下方提供 [网址](https://www.autohotkey.com/)\n\n![](https://s2.loli.net/2022/12/25/jRLCWIlyhtMf9ro.png)\n\n2、在随便一个地方创建txt文件，并将以下代码粘贴到txt里保存。最后更改`.txt`后缀为`.ahk`!\n\n```css\n\n; ===============================================================================================================================\n; =====隐藏桌面图标：双击\n; ===============================================================================================================================\n\n#If IsDesktopUnderMouse()\n~LButton::\n\tLButton_presses++\n\tif (LButton_presses=2)\n\t\tif (!IsObject(GetDesktopIconUnderMouse()) or DesktopIconsIsShow=0)\n\t\t\tDesktopIconsIsShow:=HideOrShowDesktopIcons()\n\tSetTimer, KeyLButton, -300\nreturn\n\nKeyLButton:\n\tLButton_presses := 0\nreturn\n\nIsDesktopUnderMouse()\n{\n\tMouseGetPos, , , OutputVarWin\n\tWinGetClass, OutputVarClass, % \"ahk_id\" OutputVarWin\n\tif (OutputVarClass=\"WorkerW\" or OutputVarClass=\"Progman\")\n\t\treturn, 1\n\telse\n\t\treturn, 0\n}\n\nHideOrShowDesktopIcons()\n{\n\tControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class WorkerW\n\tif (OutputVarHwnd=\"\")\n      ControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class Progman\n\n\tif (DllCall(\"IsWindowVisible\", UInt, OutputVarHwnd))\n\t{\n\t\tWinHide, ahk_id %OutputVarHwnd%\n\t\treturn, 0\n\t}\n\telse\n\t{\n\t\tWinShow, ahk_id %OutputVarHwnd%\n\t\treturn, 1\n\t}\n}\n#If\n; ===============================================================================================================================\n; GetDesktopIconUnderMouse()\n; https://www.autohotkey.com/boards/viewtopic.php?p=260761\n; Function:       Gets the desktop icon under the mouse. See the \"Return values\" section below for more information about the\n;                 icon and associated file data retrieved.\n; Parameters:     None\n; Return values:  If there is an icon under the mouse, an associative array with the following keys:\n;                 - left: the left position of the icon in screen coordinates\n;                 - top: the top position of the icon in screen coordinates\n;                 - right: the right position of the icon in screen coordinates\n;                 - bottom: the bottom position of the icon in screen coordinates\n;                 - name: the name of the file represented by the icon, e.g. New Text Document.txt\n;                 - size: the size of the file represented by the icon, e.g. 1.72 KB. Note: this value is blank for folders\n;                 - type: the type of the file represented by the icon, e.g. TXT File, JPEG image, File folder\n;                 - date: the modified date of the file represented by the icon, e.g. 9/9/2016 10:39 AM\n;                 Otherwise, a blank value\n; Global vars:    None\n; Dependencies:   None\n; Tested with:    AHK 1.1.30.01 (A32/U32/U64)\n; Tested on:      Win 7 (x64)\n; Written by:     iPhilip\n; ===============================================================================================================================\n\nGetDesktopIconUnderMouse() {\n\tstatic MEM_COMMIT := 0x1000, MEM_RELEASE := 0x8000, PAGE_ReadWRITE := 0x04\n\t\t, PROCESS_VM_OPERATION := 0x0008, PROCESS_VM_READ := 0x0010\n\t\t, LVM_GETITEMCOUNT := 0x1004, LVM_GETITEMRECT := 0x100E\n\n\tIcon := \"\"\n\tMouseGetPos, x, y, hwnd\n\tif not (hwnd = WinExist(\"ahk_class Progman\") || hwnd = WinExist(\"ahk_class WorkerW\"))\n\t\treturn\n\tControlGet, hwnd, HWND, , SysListView321\n\tif not WinExist(\"ahk_id\" hwnd)\n\t\treturn\n\tWinGet, pid, PID\n\tif (hProcess := DllCall(\"OpenProcess\" , \"UInt\", Process_VM_OPERATION|Process_VM_Read, \"Int\",  false, \"UInt\", pid)) {\n\t\tVarSetCapacity(iCoord, 16)\n\t\tSendMessage, %LVM_GETITEMCOUNT%, 0, 0\n\t\tloop, %ErrorLevel% {\n\t\t\tpItemCoord := DllCall(\"VirtualAllocEx\", \"Ptr\", hProcess, \"Ptr\", 0, \"UInt\", 16, \"UInt\", MEM_COMMIT, \"UInt\", PAGE_ReadWRITE)\n\t\t\tSendMessage, %LVM_GETITEMRECT%, % A_Index-1, %pItemCoord%\n\t\t\tDllCall(\"ReadProcessMemory\", \"Ptr\", hProcess, \"Ptr\", pItemCoord, \"Ptr\", &iCoord, \"UInt\", 16, \"UInt\", 0)\n\t\t\tDllCall(\"VirtualFreeEx\", \"Ptr\", hProcess, \"Ptr\", pItemCoord, \"UInt\", 0, \"UInt\", MEM_RELEASE)\n\t\t\tleft   := NumGet(iCoord,  0, \"Int\")\n\t\t\ttop    := NumGet(iCoord,  4, \"Int\")\n\t\t\tRight  := NumGet(iCoord,  8, \"Int\")\n\t\t\tbottom := NumGet(iCoord, 12, \"Int\")\n\t\t\tif (left < x and x < Right and top < y and y < bottom) {\n\t\t\t\tControlGet, list, List\n\t\t\t\tRegExMatch(StrSplit(list, \"`n\")[A_Index], \"O)(.*)\\t(.*)\\t(.*)\\t(.*)\", Match)\n\t\t\t\tIcon := {left:left, top:top, Right:Right, bottom:bottom\n\t\t\t\t\t, name:Match[1], size:Match[2], type:Match[3]\n\t\t\t\t; Delete extraneous date characters (https://goo.gl/pMw6AM):\n\t\t\t\t; - Unicode LTR (Left-to-Right) mark (0x200E = 8206)\n\t\t\t\t; - Unicode RTL (Right-to-Left) mark (0x200F = 8207)\n\t\t\t\t\t, date:RegExReplace(Match[4], A_IsUnicode ? \"[\\x{200E}-\\x{200F}]\" : \"\\?\")}\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tDllCall(\"CloseHandle\", \"Ptr\", hProcess)\n\t}\n\treturn Icon\n}\n\n```\n\n3、保存编辑的文件，右击，选择Run Script，运行成功后就可以使用了！\n\n## 开机自启\n\n如果想要功能在开机的时候自动启动，可以进行如下操作： 整体的思路就是生成exe文件，放到系统自启动文件内。 \n\n1、打开Convert .ahk to .exe文件，对ahk脚本进行exe文件生成：\n\n![](https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png)\n\n2、进行文件选择和生成文件命名：\n\n![](https://s2.loli.net/2022/12/25/s4VMbXx7tH9IUTh.png)\n\n3.在系统启动文件夹 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 内粘贴 生成的exe文件。此时会有查毒软件提醒，允许就行。\n\n![](https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png)\n\n大功告成！\n","slug":"Autohotkey","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7ug0003lsvs9b4v2e6g","content":"<h1 id=\"autohotkey-实现鼠标双击桌面隐藏图标\"><a class=\"markdownIt-Anchor\" href=\"#autohotkey-实现鼠标双击桌面隐藏图标\"></a> Autohotkey 实现鼠标双击桌面隐藏图标</h1>\n<h2 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\"></a> 基本操作</h2>\n<p>有时候我们做教程或特殊情况下需要将桌面上密密麻麻的图标暂时隐藏，稍后又要让他显示，那能不能我们随心所欲得让他显示和隐藏呢?今天便给大家解决这一问题。</p>\n<p>1、先下载安装autohotkey，大约2M左右很小，官方下载地址在下方提供 <a href=\"https://www.autohotkey.com/\">网址</a></p>\n<p><img src=\"https://s2.loli.net/2022/12/25/jRLCWIlyhtMf9ro.png\" alt=\"\" /></p>\n<p>2、在随便一个地方创建txt文件，并将以下代码粘贴到txt里保存。最后更改<code>.txt</code>后缀为<code>.ahk</code>!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><br>; ===============================================================================================================================<br>; =====隐藏桌面图标：双击<br>; ===============================================================================================================================<br><br><span class=\"hljs-selector-id\">#If</span> IsDesktopUnderMouse()<br>~LButton::<br>\tLButton_presses++<br>\tif (LButton_presses=<span class=\"hljs-number\">2</span>)<br>\t\tif (!<span class=\"hljs-built_in\">IsObject</span>(<span class=\"hljs-built_in\">GetDesktopIconUnderMouse</span>()) or DesktopIconsIsShow=<span class=\"hljs-number\">0</span>)<br>\t\t\tDesktopIconsIsShow:=<span class=\"hljs-built_in\">HideOrShowDesktopIcons</span>()<br>\tSetTimer, KeyLButton, -<span class=\"hljs-number\">300</span><br>return<br><br>KeyLButton:<br>\tLButton_presses := <span class=\"hljs-number\">0</span><br>return<br><br><span class=\"hljs-built_in\">IsDesktopUnderMouse</span>()<br>&#123;<br>\tMouseGetPos, , , OutputVarWin<br>\tWinGetClass, OutputVarClass, % &quot;ahk_id&quot; OutputVarWin<br>\tif (OutputVarClass=&quot;WorkerW&quot; or OutputVarClass=&quot;Progman&quot;)<br>\t\treturn, <span class=\"hljs-number\">1</span><br>\telse<br>\t\treturn, <span class=\"hljs-number\">0</span><br>&#125;<br><br>HideOrShowDesktopIcons()<br>&#123;<br>\tControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class WorkerW<br>\tif (OutputVarHwnd=&quot;&quot;)<br>      ControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class Progman<br><br>\tif (DllCall(&quot;IsWindowVisible&quot;, UInt, OutputVarHwnd))<br>\t&#123;<br>\t\tWinHide, ahk_id %OutputVarHwnd%<br>\t\treturn, <span class=\"hljs-number\">0</span><br>\t&#125;<br>\telse<br>\t&#123;<br>\t\tWinShow, ahk_id %OutputVarHwnd%<br>\t\treturn, <span class=\"hljs-number\">1</span><br>\t&#125;<br>&#125;<br><span class=\"hljs-selector-id\">#If</span><br>; ===============================================================================================================================<br>; GetDesktopIconUnderMouse()<br>; https://www.autohotkey.com/boards/viewtopic.php?p=<span class=\"hljs-number\">260761</span><br>; Function:       Gets the desktop icon under the mouse. See the <span class=\"hljs-string\">&quot;Return values&quot;</span> section below for more information about the<br>;                 <span class=\"hljs-attribute\">icon</span> and associated file data retrieved.<br>; Parameters:     None<br>; Return values:  If there is an icon under the mouse, an associative array with the following keys:<br>;                 - <span class=\"hljs-attribute\">left</span>: the left position of the icon in screen coordinates<br>;                 - <span class=\"hljs-attribute\">top</span>: the top position of the icon in screen coordinates<br>;                 - <span class=\"hljs-attribute\">right</span>: the right position of the icon in screen coordinates<br>;                 - <span class=\"hljs-attribute\">bottom</span>: the bottom position of the icon in screen coordinates<br>;                 - name: the name of the file represented by the icon, e.g. New Text Document.txt<br>;                 - size: the size of the file represented by the icon, e.g. <span class=\"hljs-number\">1.72</span> KB. Note: this value is blank for folders<br>;                 - type: the type of the file represented by the icon, e.g. TXT File, JPEG image, File folder<br>;                 - date: the modified date of the file represented by the icon, e.g. <span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">2016</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span> AM<br>;                 Otherwise, <span class=\"hljs-selector-tag\">a</span> blank value<br>; Global vars:    None<br>; Dependencies:   None<br>; Tested with:    AHK <span class=\"hljs-number\">1.1</span>.<span class=\"hljs-number\">30.01</span> (A32/U32/U64)<br>; Tested on:      Win <span class=\"hljs-number\">7</span> (x64)<br>; Written by:     iPhilip<br>; ===============================================================================================================================<br><br>GetDesktopIconUnderMouse() &#123;<br>\tstatic MEM_COMMIT := <span class=\"hljs-number\">0</span>x1000, MEM_RELEASE := <span class=\"hljs-number\">0</span>x8000, PAGE_ReadWRITE := <span class=\"hljs-number\">0</span>x04<br>\t\t, PROCESS_VM_OPERATION := <span class=\"hljs-number\">0</span>x0008, PROCESS_VM_READ := <span class=\"hljs-number\">0</span>x0010<br>\t\t, LVM_GETITEMCOUNT := <span class=\"hljs-number\">0</span>x1004, LVM_GETITEMRECT := <span class=\"hljs-number\">0</span>x100E<br><br>\tIcon := <span class=\"hljs-string\">&quot;&quot;</span><br>\tMouseGetPos, x, y, hwnd<br>\tif not (hwnd = <span class=\"hljs-built_in\">WinExist</span>(<span class=\"hljs-string\">&quot;ahk_class Progman&quot;</span>) || hwnd = <span class=\"hljs-built_in\">WinExist</span>(<span class=\"hljs-string\">&quot;ahk_class WorkerW&quot;</span>))<br>\t\treturn<br>\tControlGet, hwnd, HWND, , SysListView321<br>\tif not <span class=\"hljs-built_in\">WinExist</span>(<span class=\"hljs-string\">&quot;ahk_id&quot;</span> hwnd)<br>\t\treturn<br>\tWinGet, pid, PID<br>\tif (hProcess := <span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;OpenProcess&quot;</span> , <span class=\"hljs-string\">&quot;UInt&quot;</span>, Process_VM_OPERATION|Process_VM_Read, <span class=\"hljs-string\">&quot;Int&quot;</span>,  false, <span class=\"hljs-string\">&quot;UInt&quot;</span>, pid)) &#123;<br>\t\tVarSetCapacity(iCoord, <span class=\"hljs-number\">16</span>)<br>\t\tSendMessage, %LVM_GETITEMCOUNT%, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>\t\tloop, %ErrorLevel% &#123;<br>\t\t\tpItemCoord := <span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;VirtualAllocEx&quot;</span>, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, hProcess, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, MEM_COMMIT, <span class=\"hljs-string\">&quot;UInt&quot;</span>, PAGE_ReadWRITE)<br>\t\t\tSendMessage, %LVM_GETITEMRECT%, % A_Index-<span class=\"hljs-number\">1</span>, %pItemCoord%<br>\t\t\t<span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;ReadProcessMemory&quot;</span>, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, hProcess, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, pItemCoord, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, &amp;iCoord, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;VirtualFreeEx&quot;</span>, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, hProcess, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, pItemCoord, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, MEM_RELEASE)<br>\t\t\tleft   := <span class=\"hljs-built_in\">NumGet</span>(iCoord,  <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\ttop    := <span class=\"hljs-built_in\">NumGet</span>(iCoord,  <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\tRight  := <span class=\"hljs-built_in\">NumGet</span>(iCoord,  <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\tbottom := <span class=\"hljs-built_in\">NumGet</span>(iCoord, <span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\tif (left &lt; x and x &lt; Right and top &lt; y and y &lt; bottom) &#123;<br>\t\t\t\tControlGet, list, List<br>\t\t\t\tRegExMatch(StrSplit(list, &quot;`n&quot;)<span class=\"hljs-selector-attr\">[A_Index]</span>, &quot;O)(.*)\\t(.*)\\t(.*)\\t(.*)&quot;, Match)<br>\t\t\t\t<span class=\"hljs-attribute\">Icon</span> := &#123;<span class=\"hljs-attribute\">left</span><span class=\"hljs-selector-pseudo\">:left</span>, <span class=\"hljs-attribute\">top</span>:top, Right:Right, bottom:bottom<br>\t\t\t\t\t, name:Match[<span class=\"hljs-number\">1</span>], size:Match[<span class=\"hljs-number\">2</span>], type:Match[<span class=\"hljs-number\">3</span>]<br>\t\t\t\t; Delete extraneous date characters (https://goo.gl/pMw6AM):<br>\t\t\t\t; - Unicode LTR (<span class=\"hljs-attribute\">Left</span>-<span class=\"hljs-selector-tag\">to</span>-<span class=\"hljs-attribute\">Right</span>) <span class=\"hljs-selector-tag\">mark</span> (<span class=\"hljs-number\">0</span>x200E = <span class=\"hljs-number\">8206</span>)<br>\t\t\t\t; - Unicode RTL (<span class=\"hljs-attribute\">Right</span>-<span class=\"hljs-selector-tag\">to</span>-<span class=\"hljs-attribute\">Left</span>) <span class=\"hljs-selector-tag\">mark</span> (<span class=\"hljs-number\">0</span>x200F = <span class=\"hljs-number\">8207</span>)<br>\t\t\t\t\t, date:<span class=\"hljs-built_in\">RegExReplace</span>(Match[<span class=\"hljs-number\">4</span>], A_IsUnicode ? <span class=\"hljs-string\">&quot;[\\x&#123;200E&#125;-\\x&#123;200F&#125;]&quot;</span> : <span class=\"hljs-string\">&quot;\\?&quot;</span>)&#125;<br>\t\t\t\tbreak<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tDllCall(&quot;CloseHandle&quot;, &quot;Ptr&quot;, hProcess)<br>\t&#125;<br>\treturn <span class=\"hljs-attribute\">Icon</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>3、保存编辑的文件，右击，选择Run Script，运行成功后就可以使用了！</p>\n<h2 id=\"开机自启\"><a class=\"markdownIt-Anchor\" href=\"#开机自启\"></a> 开机自启</h2>\n<p>如果想要功能在开机的时候自动启动，可以进行如下操作： 整体的思路就是生成exe文件，放到系统自启动文件内。</p>\n<p>1、打开Convert .ahk to .exe文件，对ahk脚本进行exe文件生成：</p>\n<p><img src=\"https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png\" alt=\"\" /></p>\n<p>2、进行文件选择和生成文件命名：</p>\n<p><img src=\"https://s2.loli.net/2022/12/25/s4VMbXx7tH9IUTh.png\" alt=\"\" /></p>\n<p>3.在系统启动文件夹 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 内粘贴 生成的exe文件。此时会有查毒软件提醒，允许就行。</p>\n<p><img src=\"https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png\" alt=\"\" /></p>\n<p>大功告成！</p>\n","site":{"data":{}},"more":"<h1 id=\"autohotkey-实现鼠标双击桌面隐藏图标\"><a class=\"markdownIt-Anchor\" href=\"#autohotkey-实现鼠标双击桌面隐藏图标\"></a> Autohotkey 实现鼠标双击桌面隐藏图标</h1>\n<h2 id=\"基本操作\"><a class=\"markdownIt-Anchor\" href=\"#基本操作\"></a> 基本操作</h2>\n<p>有时候我们做教程或特殊情况下需要将桌面上密密麻麻的图标暂时隐藏，稍后又要让他显示，那能不能我们随心所欲得让他显示和隐藏呢?今天便给大家解决这一问题。</p>\n<p>1、先下载安装autohotkey，大约2M左右很小，官方下载地址在下方提供 <a href=\"https://www.autohotkey.com/\">网址</a></p>\n<p><img src=\"https://s2.loli.net/2022/12/25/jRLCWIlyhtMf9ro.png\" alt=\"\" /></p>\n<p>2、在随便一个地方创建txt文件，并将以下代码粘贴到txt里保存。最后更改<code>.txt</code>后缀为<code>.ahk</code>!</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><br>; ===============================================================================================================================<br>; =====隐藏桌面图标：双击<br>; ===============================================================================================================================<br><br><span class=\"hljs-selector-id\">#If</span> IsDesktopUnderMouse()<br>~LButton::<br>\tLButton_presses++<br>\tif (LButton_presses=<span class=\"hljs-number\">2</span>)<br>\t\tif (!<span class=\"hljs-built_in\">IsObject</span>(<span class=\"hljs-built_in\">GetDesktopIconUnderMouse</span>()) or DesktopIconsIsShow=<span class=\"hljs-number\">0</span>)<br>\t\t\tDesktopIconsIsShow:=<span class=\"hljs-built_in\">HideOrShowDesktopIcons</span>()<br>\tSetTimer, KeyLButton, -<span class=\"hljs-number\">300</span><br>return<br><br>KeyLButton:<br>\tLButton_presses := <span class=\"hljs-number\">0</span><br>return<br><br><span class=\"hljs-built_in\">IsDesktopUnderMouse</span>()<br>&#123;<br>\tMouseGetPos, , , OutputVarWin<br>\tWinGetClass, OutputVarClass, % &quot;ahk_id&quot; OutputVarWin<br>\tif (OutputVarClass=&quot;WorkerW&quot; or OutputVarClass=&quot;Progman&quot;)<br>\t\treturn, <span class=\"hljs-number\">1</span><br>\telse<br>\t\treturn, <span class=\"hljs-number\">0</span><br>&#125;<br><br>HideOrShowDesktopIcons()<br>&#123;<br>\tControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class WorkerW<br>\tif (OutputVarHwnd=&quot;&quot;)<br>      ControlGet, OutputVarHwnd, Hwnd,, SysListView321, ahk_class Progman<br><br>\tif (DllCall(&quot;IsWindowVisible&quot;, UInt, OutputVarHwnd))<br>\t&#123;<br>\t\tWinHide, ahk_id %OutputVarHwnd%<br>\t\treturn, <span class=\"hljs-number\">0</span><br>\t&#125;<br>\telse<br>\t&#123;<br>\t\tWinShow, ahk_id %OutputVarHwnd%<br>\t\treturn, <span class=\"hljs-number\">1</span><br>\t&#125;<br>&#125;<br><span class=\"hljs-selector-id\">#If</span><br>; ===============================================================================================================================<br>; GetDesktopIconUnderMouse()<br>; https://www.autohotkey.com/boards/viewtopic.php?p=<span class=\"hljs-number\">260761</span><br>; Function:       Gets the desktop icon under the mouse. See the <span class=\"hljs-string\">&quot;Return values&quot;</span> section below for more information about the<br>;                 <span class=\"hljs-attribute\">icon</span> and associated file data retrieved.<br>; Parameters:     None<br>; Return values:  If there is an icon under the mouse, an associative array with the following keys:<br>;                 - <span class=\"hljs-attribute\">left</span>: the left position of the icon in screen coordinates<br>;                 - <span class=\"hljs-attribute\">top</span>: the top position of the icon in screen coordinates<br>;                 - <span class=\"hljs-attribute\">right</span>: the right position of the icon in screen coordinates<br>;                 - <span class=\"hljs-attribute\">bottom</span>: the bottom position of the icon in screen coordinates<br>;                 - name: the name of the file represented by the icon, e.g. New Text Document.txt<br>;                 - size: the size of the file represented by the icon, e.g. <span class=\"hljs-number\">1.72</span> KB. Note: this value is blank for folders<br>;                 - type: the type of the file represented by the icon, e.g. TXT File, JPEG image, File folder<br>;                 - date: the modified date of the file represented by the icon, e.g. <span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">9</span>/<span class=\"hljs-number\">2016</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">39</span> AM<br>;                 Otherwise, <span class=\"hljs-selector-tag\">a</span> blank value<br>; Global vars:    None<br>; Dependencies:   None<br>; Tested with:    AHK <span class=\"hljs-number\">1.1</span>.<span class=\"hljs-number\">30.01</span> (A32/U32/U64)<br>; Tested on:      Win <span class=\"hljs-number\">7</span> (x64)<br>; Written by:     iPhilip<br>; ===============================================================================================================================<br><br>GetDesktopIconUnderMouse() &#123;<br>\tstatic MEM_COMMIT := <span class=\"hljs-number\">0</span>x1000, MEM_RELEASE := <span class=\"hljs-number\">0</span>x8000, PAGE_ReadWRITE := <span class=\"hljs-number\">0</span>x04<br>\t\t, PROCESS_VM_OPERATION := <span class=\"hljs-number\">0</span>x0008, PROCESS_VM_READ := <span class=\"hljs-number\">0</span>x0010<br>\t\t, LVM_GETITEMCOUNT := <span class=\"hljs-number\">0</span>x1004, LVM_GETITEMRECT := <span class=\"hljs-number\">0</span>x100E<br><br>\tIcon := <span class=\"hljs-string\">&quot;&quot;</span><br>\tMouseGetPos, x, y, hwnd<br>\tif not (hwnd = <span class=\"hljs-built_in\">WinExist</span>(<span class=\"hljs-string\">&quot;ahk_class Progman&quot;</span>) || hwnd = <span class=\"hljs-built_in\">WinExist</span>(<span class=\"hljs-string\">&quot;ahk_class WorkerW&quot;</span>))<br>\t\treturn<br>\tControlGet, hwnd, HWND, , SysListView321<br>\tif not <span class=\"hljs-built_in\">WinExist</span>(<span class=\"hljs-string\">&quot;ahk_id&quot;</span> hwnd)<br>\t\treturn<br>\tWinGet, pid, PID<br>\tif (hProcess := <span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;OpenProcess&quot;</span> , <span class=\"hljs-string\">&quot;UInt&quot;</span>, Process_VM_OPERATION|Process_VM_Read, <span class=\"hljs-string\">&quot;Int&quot;</span>,  false, <span class=\"hljs-string\">&quot;UInt&quot;</span>, pid)) &#123;<br>\t\tVarSetCapacity(iCoord, <span class=\"hljs-number\">16</span>)<br>\t\tSendMessage, %LVM_GETITEMCOUNT%, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span><br>\t\tloop, %ErrorLevel% &#123;<br>\t\t\tpItemCoord := <span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;VirtualAllocEx&quot;</span>, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, hProcess, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, MEM_COMMIT, <span class=\"hljs-string\">&quot;UInt&quot;</span>, PAGE_ReadWRITE)<br>\t\t\tSendMessage, %LVM_GETITEMRECT%, % A_Index-<span class=\"hljs-number\">1</span>, %pItemCoord%<br>\t\t\t<span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;ReadProcessMemory&quot;</span>, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, hProcess, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, pItemCoord, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, &amp;iCoord, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">0</span>)<br>\t\t\t<span class=\"hljs-built_in\">DllCall</span>(<span class=\"hljs-string\">&quot;VirtualFreeEx&quot;</span>, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, hProcess, <span class=\"hljs-string\">&quot;Ptr&quot;</span>, pItemCoord, <span class=\"hljs-string\">&quot;UInt&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;UInt&quot;</span>, MEM_RELEASE)<br>\t\t\tleft   := <span class=\"hljs-built_in\">NumGet</span>(iCoord,  <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\ttop    := <span class=\"hljs-built_in\">NumGet</span>(iCoord,  <span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\tRight  := <span class=\"hljs-built_in\">NumGet</span>(iCoord,  <span class=\"hljs-number\">8</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\tbottom := <span class=\"hljs-built_in\">NumGet</span>(iCoord, <span class=\"hljs-number\">12</span>, <span class=\"hljs-string\">&quot;Int&quot;</span>)<br>\t\t\tif (left &lt; x and x &lt; Right and top &lt; y and y &lt; bottom) &#123;<br>\t\t\t\tControlGet, list, List<br>\t\t\t\tRegExMatch(StrSplit(list, &quot;`n&quot;)<span class=\"hljs-selector-attr\">[A_Index]</span>, &quot;O)(.*)\\t(.*)\\t(.*)\\t(.*)&quot;, Match)<br>\t\t\t\t<span class=\"hljs-attribute\">Icon</span> := &#123;<span class=\"hljs-attribute\">left</span><span class=\"hljs-selector-pseudo\">:left</span>, <span class=\"hljs-attribute\">top</span>:top, Right:Right, bottom:bottom<br>\t\t\t\t\t, name:Match[<span class=\"hljs-number\">1</span>], size:Match[<span class=\"hljs-number\">2</span>], type:Match[<span class=\"hljs-number\">3</span>]<br>\t\t\t\t; Delete extraneous date characters (https://goo.gl/pMw6AM):<br>\t\t\t\t; - Unicode LTR (<span class=\"hljs-attribute\">Left</span>-<span class=\"hljs-selector-tag\">to</span>-<span class=\"hljs-attribute\">Right</span>) <span class=\"hljs-selector-tag\">mark</span> (<span class=\"hljs-number\">0</span>x200E = <span class=\"hljs-number\">8206</span>)<br>\t\t\t\t; - Unicode RTL (<span class=\"hljs-attribute\">Right</span>-<span class=\"hljs-selector-tag\">to</span>-<span class=\"hljs-attribute\">Left</span>) <span class=\"hljs-selector-tag\">mark</span> (<span class=\"hljs-number\">0</span>x200F = <span class=\"hljs-number\">8207</span>)<br>\t\t\t\t\t, date:<span class=\"hljs-built_in\">RegExReplace</span>(Match[<span class=\"hljs-number\">4</span>], A_IsUnicode ? <span class=\"hljs-string\">&quot;[\\x&#123;200E&#125;-\\x&#123;200F&#125;]&quot;</span> : <span class=\"hljs-string\">&quot;\\?&quot;</span>)&#125;<br>\t\t\t\tbreak<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tDllCall(&quot;CloseHandle&quot;, &quot;Ptr&quot;, hProcess)<br>\t&#125;<br>\treturn <span class=\"hljs-attribute\">Icon</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>3、保存编辑的文件，右击，选择Run Script，运行成功后就可以使用了！</p>\n<h2 id=\"开机自启\"><a class=\"markdownIt-Anchor\" href=\"#开机自启\"></a> 开机自启</h2>\n<p>如果想要功能在开机的时候自动启动，可以进行如下操作： 整体的思路就是生成exe文件，放到系统自启动文件内。</p>\n<p>1、打开Convert .ahk to .exe文件，对ahk脚本进行exe文件生成：</p>\n<p><img src=\"https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png\" alt=\"\" /></p>\n<p>2、进行文件选择和生成文件命名：</p>\n<p><img src=\"https://s2.loli.net/2022/12/25/s4VMbXx7tH9IUTh.png\" alt=\"\" /></p>\n<p>3.在系统启动文件夹 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp 内粘贴 生成的exe文件。此时会有查毒软件提醒，允许就行。</p>\n<p><img src=\"https://s2.loli.net/2022/12/25/bRBa627Gq8iSmDt.png\" alt=\"\" /></p>\n<p>大功告成！</p>\n"},{"title":"深度学习简要笔记","date":"2023-07-04T14:00:00.000Z","excerpt":"深度学习","_content":"\n# 深度学习简要笔记\n\n## 机器学习算法的类型\n\n**监督学习**：如果机器学习的目标是建模样本的特征 𝒙 和标签 𝑦 之间的关系：𝑦 =𝑓(𝒙; 𝜃) 或 𝑝(𝑦|𝒙; 𝜃)，并且训练集中每个样本都有标签，那么这类机器学习称为监督学习（Supervised Learning）。\n\n* 个人认为简单而言即样本的特征 𝒙 和标签 𝑦 有明确的关系。\n\n**无监督学习**：无监督学习（Unsupervised Learning，UL），是指从不包含目标标签的训练样本中自动学习到一些有价值的信息。典型的无监督学习问题有聚类、密度估计、特征学习、降维等。\n\n**强化学习**：强化学习（Reinforcement Learning，RL），是一类通过交互来学习的机器学习算法。在强化学习中，智能体根据环境的状态做出一个动作，并得到即时或延时的奖励．智能体在和环境的交互中不断学习并调整策略，以取得最大化的期望总回报。\n","source":"_posts/Deep_laerning.md","raw":"---\ntitle: 深度学习简要笔记\ntags: [深度学习]\ncategories: [深度学习]\ndate: 2023-7-4 22:00:00\nexcerpt: 深度学习\n---\n\n# 深度学习简要笔记\n\n## 机器学习算法的类型\n\n**监督学习**：如果机器学习的目标是建模样本的特征 𝒙 和标签 𝑦 之间的关系：𝑦 =𝑓(𝒙; 𝜃) 或 𝑝(𝑦|𝒙; 𝜃)，并且训练集中每个样本都有标签，那么这类机器学习称为监督学习（Supervised Learning）。\n\n* 个人认为简单而言即样本的特征 𝒙 和标签 𝑦 有明确的关系。\n\n**无监督学习**：无监督学习（Unsupervised Learning，UL），是指从不包含目标标签的训练样本中自动学习到一些有价值的信息。典型的无监督学习问题有聚类、密度估计、特征学习、降维等。\n\n**强化学习**：强化学习（Reinforcement Learning，RL），是一类通过交互来学习的机器学习算法。在强化学习中，智能体根据环境的状态做出一个动作，并得到即时或延时的奖励．智能体在和环境的交互中不断学习并调整策略，以取得最大化的期望总回报。\n","slug":"Deep_laerning","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7ui0006lsvse1rp1fa2","content":"<h1 id=\"深度学习简要笔记\"><a class=\"markdownIt-Anchor\" href=\"#深度学习简要笔记\"></a> 深度学习简要笔记</h1>\n<h2 id=\"机器学习算法的类型\"><a class=\"markdownIt-Anchor\" href=\"#机器学习算法的类型\"></a> 机器学习算法的类型</h2>\n<p><strong>监督学习</strong>：如果机器学习的目标是建模样本的特征 𝒙 和标签 𝑦 之间的关系：𝑦 =𝑓(𝒙; 𝜃) 或 𝑝(𝑦|𝒙; 𝜃)，并且训练集中每个样本都有标签，那么这类机器学习称为监督学习（Supervised Learning）。</p>\n<ul>\n<li>个人认为简单而言即样本的特征 𝒙 和标签 𝑦 有明确的关系。</li>\n</ul>\n<p><strong>无监督学习</strong>：无监督学习（Unsupervised Learning，UL），是指从不包含目标标签的训练样本中自动学习到一些有价值的信息。典型的无监督学习问题有聚类、密度估计、特征学习、降维等。</p>\n<p><strong>强化学习</strong>：强化学习（Reinforcement Learning，RL），是一类通过交互来学习的机器学习算法。在强化学习中，智能体根据环境的状态做出一个动作，并得到即时或延时的奖励．智能体在和环境的交互中不断学习并调整策略，以取得最大化的期望总回报。</p>\n","site":{"data":{}},"more":"<h1 id=\"深度学习简要笔记\"><a class=\"markdownIt-Anchor\" href=\"#深度学习简要笔记\"></a> 深度学习简要笔记</h1>\n<h2 id=\"机器学习算法的类型\"><a class=\"markdownIt-Anchor\" href=\"#机器学习算法的类型\"></a> 机器学习算法的类型</h2>\n<p><strong>监督学习</strong>：如果机器学习的目标是建模样本的特征 𝒙 和标签 𝑦 之间的关系：𝑦 =𝑓(𝒙; 𝜃) 或 𝑝(𝑦|𝒙; 𝜃)，并且训练集中每个样本都有标签，那么这类机器学习称为监督学习（Supervised Learning）。</p>\n<ul>\n<li>个人认为简单而言即样本的特征 𝒙 和标签 𝑦 有明确的关系。</li>\n</ul>\n<p><strong>无监督学习</strong>：无监督学习（Unsupervised Learning，UL），是指从不包含目标标签的训练样本中自动学习到一些有价值的信息。典型的无监督学习问题有聚类、密度估计、特征学习、降维等。</p>\n<p><strong>强化学习</strong>：强化学习（Reinforcement Learning，RL），是一类通过交互来学习的机器学习算法。在强化学习中，智能体根据环境的状态做出一个动作，并得到即时或延时的奖励．智能体在和环境的交互中不断学习并调整策略，以取得最大化的期望总回报。</p>\n"},{"title":"Fliplt微软复古翻页时钟屏保","date":"2023-01-16T14:00:00.000Z","excerpt":"Some useful tools!","_content":"# Fliplt微软复古翻页时钟屏保\n\n* 翻转时钟屏幕保护程序。\n\n* 灵感来自 Fliqlo。 \n\n* Windows 上的 Fliqlo 停止使用最近（2015 年 12 月？）Flash 更新，这促使了这个项目。\n* 这个项目不使用 Flash。\n\n![](https://s2.loli.net/2023/01/16/7r5O8hqC1nykzRV.png)\n\n要在不使用 Visual Studio 构建的情况下进行安装，请将[发布页面](https://github.com/phaselden/FlipIt/releases)上的 .scr 文件复制到：\n\n* C:\\Windows\\SysWOW64（在 64 位 Windows 上）\n* C:\\Windows\\System32 （在 32 位 Windows 上）\n\n最后即可在电脑屏幕保护程序处进行配置！","source":"_posts/Fliplt.md","raw":"---\ntitle: Fliplt微软复古翻页时钟屏保\ntags: [Fliplt]\ncategories: [Fliplt]\ndate: 2023-1-16 22:00:00\nexcerpt: Some useful tools!\n---\n# Fliplt微软复古翻页时钟屏保\n\n* 翻转时钟屏幕保护程序。\n\n* 灵感来自 Fliqlo。 \n\n* Windows 上的 Fliqlo 停止使用最近（2015 年 12 月？）Flash 更新，这促使了这个项目。\n* 这个项目不使用 Flash。\n\n![](https://s2.loli.net/2023/01/16/7r5O8hqC1nykzRV.png)\n\n要在不使用 Visual Studio 构建的情况下进行安装，请将[发布页面](https://github.com/phaselden/FlipIt/releases)上的 .scr 文件复制到：\n\n* C:\\Windows\\SysWOW64（在 64 位 Windows 上）\n* C:\\Windows\\System32 （在 32 位 Windows 上）\n\n最后即可在电脑屏幕保护程序处进行配置！","slug":"Fliplt","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7uj0007lsvsfasg7ydq","content":"<h1 id=\"fliplt微软复古翻页时钟屏保\"><a class=\"markdownIt-Anchor\" href=\"#fliplt微软复古翻页时钟屏保\"></a> Fliplt微软复古翻页时钟屏保</h1>\n<ul>\n<li>\n<p>翻转时钟屏幕保护程序。</p>\n</li>\n<li>\n<p>灵感来自 Fliqlo。</p>\n</li>\n<li>\n<p>Windows 上的 Fliqlo 停止使用最近（2015 年 12 月？）Flash 更新，这促使了这个项目。</p>\n</li>\n<li>\n<p>这个项目不使用 Flash。</p>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/01/16/7r5O8hqC1nykzRV.png\" alt=\"\" /></p>\n<p>要在不使用 Visual Studio 构建的情况下进行安装，请将<a href=\"https://github.com/phaselden/FlipIt/releases\">发布页面</a>上的 .scr 文件复制到：</p>\n<ul>\n<li>C:\\Windows\\SysWOW64（在 64 位 Windows 上）</li>\n<li>C:\\Windows\\System32 （在 32 位 Windows 上）</li>\n</ul>\n<p>最后即可在电脑屏幕保护程序处进行配置！</p>\n","site":{"data":{}},"more":"<h1 id=\"fliplt微软复古翻页时钟屏保\"><a class=\"markdownIt-Anchor\" href=\"#fliplt微软复古翻页时钟屏保\"></a> Fliplt微软复古翻页时钟屏保</h1>\n<ul>\n<li>\n<p>翻转时钟屏幕保护程序。</p>\n</li>\n<li>\n<p>灵感来自 Fliqlo。</p>\n</li>\n<li>\n<p>Windows 上的 Fliqlo 停止使用最近（2015 年 12 月？）Flash 更新，这促使了这个项目。</p>\n</li>\n<li>\n<p>这个项目不使用 Flash。</p>\n</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/01/16/7r5O8hqC1nykzRV.png\" alt=\"\" /></p>\n<p>要在不使用 Visual Studio 构建的情况下进行安装，请将<a href=\"https://github.com/phaselden/FlipIt/releases\">发布页面</a>上的 .scr 文件复制到：</p>\n<ul>\n<li>C:\\Windows\\SysWOW64（在 64 位 Windows 上）</li>\n<li>C:\\Windows\\System32 （在 32 位 Windows 上）</li>\n</ul>\n<p>最后即可在电脑屏幕保护程序处进行配置！</p>\n"},{"title":"利用循环队列求解约瑟夫环问题","date":"2021-11-20T15:30:00.000Z","excerpt":"循环队列、约瑟夫环","_content":"\n#### 循环队列求解约瑟夫环完整代码\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define ERROR 1\n#define TRUE 1\n\ntypedef int Status;\ntypedef int ElemType;\n\ntypedef struct node {\n    ElemType data;\n    struct node *next;\n}LNode, *Linklist;\n\ntypedef struct LinkQuene{\n     struct node *front;\n     struct node *rear;\n}LinkQuene;\n//初始化队列\nStatus init(LinkQuene q){\n   q.front = q.rear = (Linklist*)malloc(sizeof(LNode));\n   if(q.front!=q.rear){\n       return ERROR;\n   }\n   q.front->next = NULL;\n   return TRUE;\n}\n//插入约瑟夫环（人数为x，按顺序编号）\nStatus insert(LinkQuene *q,ElemType x){\n    int i = 0;\n    Linklist p;\n    p->next = NULL;\n    for(i = x;i>=1;i--){\n        Linklist s;\n        s = (Linklist)malloc(sizeof(LNode));\n        if(!s){\n            return ERROR;\n        }\n        s->data = i;\n        if(i==1){\n            q->front = s;\n        }\n        if(i==x){\n            q->rear = s;\n        }\n        s->next = p->next;\n        p->next = s;\n        q->rear->next = q->front;\n    }\n}\n//出列操作\nLinklist *out(LinkQuene *q){\n    Linklist s;\n    s = q->front;\n    q->front = s->next;\n    q->rear->next = q->front;\n    return s;\n}\n//入列操作\nvoid in(LinkQuene *q,Linklist s){\n    q->rear->next = s;\n    s->next = q->front;\n    q->rear = s;\n}\n//约瑟夫环操作函数\nStatus Josephus(LinkQuene q,Linklist p,int x,int i,int m){\n    int j;\n    if(i>x){\n        return ERROR;\n    }\n    else for(j=1;j<i;j++){\n            q.front = q.front->next;\n            q.rear = q.rear->next;\n        }\n    while(q.front!=q.rear){\n        for(j=1;j<m;j++){\n            p=out(&q);\n            in(&q,p);\n        }\n        p=out(&q);\n        printf(\"the number of dead people is %d\\n\",p->data);\n        free(p);\n    }\n    printf(\"the number of avoiding execution is %d\",q.front->data);\n}\n\nint main(){\nint x,i,m;\nprintf(\"how much people:\\n\");\nscanf(\"%d\",&x);\n    printf(\"the starting point:\\n\");\n    scanf(\"%d\",&i);\n    printf(\"how much people to skip:\\n\");\n    scanf(\"%d\",&m);\n    LinkQuene q;\n    Linklist *p;\n    init(q);\n    insert(&q,x);\n    Josephus(q,p,x,i,m);\n};\n```\n\n","source":"_posts/Josephus.md","raw":"---\ntitle: 利用循环队列求解约瑟夫环问题\ntags: [数据结构,c语言]\ncategories: [数据结构]\ndate: 2021-11-20 23:30:00\nexcerpt: 循环队列、约瑟夫环\n---\n\n#### 循环队列求解约瑟夫环完整代码\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define ERROR 1\n#define TRUE 1\n\ntypedef int Status;\ntypedef int ElemType;\n\ntypedef struct node {\n    ElemType data;\n    struct node *next;\n}LNode, *Linklist;\n\ntypedef struct LinkQuene{\n     struct node *front;\n     struct node *rear;\n}LinkQuene;\n//初始化队列\nStatus init(LinkQuene q){\n   q.front = q.rear = (Linklist*)malloc(sizeof(LNode));\n   if(q.front!=q.rear){\n       return ERROR;\n   }\n   q.front->next = NULL;\n   return TRUE;\n}\n//插入约瑟夫环（人数为x，按顺序编号）\nStatus insert(LinkQuene *q,ElemType x){\n    int i = 0;\n    Linklist p;\n    p->next = NULL;\n    for(i = x;i>=1;i--){\n        Linklist s;\n        s = (Linklist)malloc(sizeof(LNode));\n        if(!s){\n            return ERROR;\n        }\n        s->data = i;\n        if(i==1){\n            q->front = s;\n        }\n        if(i==x){\n            q->rear = s;\n        }\n        s->next = p->next;\n        p->next = s;\n        q->rear->next = q->front;\n    }\n}\n//出列操作\nLinklist *out(LinkQuene *q){\n    Linklist s;\n    s = q->front;\n    q->front = s->next;\n    q->rear->next = q->front;\n    return s;\n}\n//入列操作\nvoid in(LinkQuene *q,Linklist s){\n    q->rear->next = s;\n    s->next = q->front;\n    q->rear = s;\n}\n//约瑟夫环操作函数\nStatus Josephus(LinkQuene q,Linklist p,int x,int i,int m){\n    int j;\n    if(i>x){\n        return ERROR;\n    }\n    else for(j=1;j<i;j++){\n            q.front = q.front->next;\n            q.rear = q.rear->next;\n        }\n    while(q.front!=q.rear){\n        for(j=1;j<m;j++){\n            p=out(&q);\n            in(&q,p);\n        }\n        p=out(&q);\n        printf(\"the number of dead people is %d\\n\",p->data);\n        free(p);\n    }\n    printf(\"the number of avoiding execution is %d\",q.front->data);\n}\n\nint main(){\nint x,i,m;\nprintf(\"how much people:\\n\");\nscanf(\"%d\",&x);\n    printf(\"the starting point:\\n\");\n    scanf(\"%d\",&i);\n    printf(\"how much people to skip:\\n\");\n    scanf(\"%d\",&m);\n    LinkQuene q;\n    Linklist *p;\n    init(q);\n    insert(&q,x);\n    Josephus(q,p,x,i,m);\n};\n```\n\n","slug":"Josephus","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7uj0008lsvs7nfihtw8","content":"<h4 id=\"循环队列求解约瑟夫环完整代码\"><a class=\"markdownIt-Anchor\" href=\"#循环队列求解约瑟夫环完整代码\"></a> 循环队列求解约瑟夫环完整代码</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ERROR 1</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TRUE 1</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Status;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> ElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> &#123;</span><br>    ElemType data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LNode, *Linklist;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkQuene</span>&#123;</span><br>     <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">front</span>;</span><br>     <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">rear</span>;</span><br>&#125;LinkQuene;<br><span class=\"hljs-comment\">//初始化队列</span><br>Status <span class=\"hljs-title function_\">init</span><span class=\"hljs-params\">(LinkQuene q)</span>&#123;<br>   q.front = q.rear = (Linklist*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>   <span class=\"hljs-keyword\">if</span>(q.front!=q.rear)&#123;<br>       <span class=\"hljs-keyword\">return</span> ERROR;<br>   &#125;<br>   q.front-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>   <span class=\"hljs-keyword\">return</span> TRUE;<br>&#125;<br><span class=\"hljs-comment\">//插入约瑟夫环（人数为x，按顺序编号）</span><br>Status <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(LinkQuene *q,ElemType x)</span>&#123;<br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    Linklist p;<br>    p-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">for</span>(i = x;i&gt;=<span class=\"hljs-number\">1</span>;i--)&#123;<br>        Linklist s;<br>        s = (Linklist)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>        <span class=\"hljs-keyword\">if</span>(!s)&#123;<br>            <span class=\"hljs-keyword\">return</span> ERROR;<br>        &#125;<br>        s-&gt;data = i;<br>        <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">1</span>)&#123;<br>            q-&gt;front = s;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(i==x)&#123;<br>            q-&gt;rear = s;<br>        &#125;<br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s;<br>        q-&gt;rear-&gt;next = q-&gt;front;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//出列操作</span><br>Linklist *<span class=\"hljs-title function_\">out</span><span class=\"hljs-params\">(LinkQuene *q)</span>&#123;<br>    Linklist s;<br>    s = q-&gt;front;<br>    q-&gt;front = s-&gt;next;<br>    q-&gt;rear-&gt;next = q-&gt;front;<br>    <span class=\"hljs-keyword\">return</span> s;<br>&#125;<br><span class=\"hljs-comment\">//入列操作</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">in</span><span class=\"hljs-params\">(LinkQuene *q,Linklist s)</span>&#123;<br>    q-&gt;rear-&gt;next = s;<br>    s-&gt;next = q-&gt;front;<br>    q-&gt;rear = s;<br>&#125;<br><span class=\"hljs-comment\">//约瑟夫环操作函数</span><br>Status <span class=\"hljs-title function_\">Josephus</span><span class=\"hljs-params\">(LinkQuene q,Linklist p,<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> i,<span class=\"hljs-type\">int</span> m)</span>&#123;<br>    <span class=\"hljs-type\">int</span> j;<br>    <span class=\"hljs-keyword\">if</span>(i&gt;x)&#123;<br>        <span class=\"hljs-keyword\">return</span> ERROR;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>;j&lt;i;j++)&#123;<br>            q.front = q.front-&gt;next;<br>            q.rear = q.rear-&gt;next;<br>        &#125;<br>    <span class=\"hljs-keyword\">while</span>(q.front!=q.rear)&#123;<br>        <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>;j&lt;m;j++)&#123;<br>            p=out(&amp;q);<br>            in(&amp;q,p);<br>        &#125;<br>        p=out(&amp;q);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the number of dead people is %d\\n&quot;</span>,p-&gt;data);<br>        <span class=\"hljs-built_in\">free</span>(p);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the number of avoiding execution is %d&quot;</span>,q.front-&gt;data);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>&#123;<br><span class=\"hljs-type\">int</span> x,i,m;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;how much people:\\n&quot;</span>);<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the starting point:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;i);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;how much people to skip:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;m);<br>    LinkQuene q;<br>    Linklist *p;<br>    init(q);<br>    insert(&amp;q,x);<br>    Josephus(q,p,x,i,m);<br>&#125;;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h4 id=\"循环队列求解约瑟夫环完整代码\"><a class=\"markdownIt-Anchor\" href=\"#循环队列求解约瑟夫环完整代码\"></a> 循环队列求解约瑟夫环完整代码</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> ERROR 1</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> TRUE 1</span><br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> Status;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">int</span> ElemType;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> &#123;</span><br>    ElemType data;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">next</span>;</span><br>&#125;LNode, *Linklist;<br><br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">LinkQuene</span>&#123;</span><br>     <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">front</span>;</span><br>     <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> *<span class=\"hljs-title\">rear</span>;</span><br>&#125;LinkQuene;<br><span class=\"hljs-comment\">//初始化队列</span><br>Status <span class=\"hljs-title function_\">init</span><span class=\"hljs-params\">(LinkQuene q)</span>&#123;<br>   q.front = q.rear = (Linklist*)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>   <span class=\"hljs-keyword\">if</span>(q.front!=q.rear)&#123;<br>       <span class=\"hljs-keyword\">return</span> ERROR;<br>   &#125;<br>   q.front-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>   <span class=\"hljs-keyword\">return</span> TRUE;<br>&#125;<br><span class=\"hljs-comment\">//插入约瑟夫环（人数为x，按顺序编号）</span><br>Status <span class=\"hljs-title function_\">insert</span><span class=\"hljs-params\">(LinkQuene *q,ElemType x)</span>&#123;<br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>;<br>    Linklist p;<br>    p-&gt;next = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">for</span>(i = x;i&gt;=<span class=\"hljs-number\">1</span>;i--)&#123;<br>        Linklist s;<br>        s = (Linklist)<span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(LNode));<br>        <span class=\"hljs-keyword\">if</span>(!s)&#123;<br>            <span class=\"hljs-keyword\">return</span> ERROR;<br>        &#125;<br>        s-&gt;data = i;<br>        <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">1</span>)&#123;<br>            q-&gt;front = s;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(i==x)&#123;<br>            q-&gt;rear = s;<br>        &#125;<br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s;<br>        q-&gt;rear-&gt;next = q-&gt;front;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//出列操作</span><br>Linklist *<span class=\"hljs-title function_\">out</span><span class=\"hljs-params\">(LinkQuene *q)</span>&#123;<br>    Linklist s;<br>    s = q-&gt;front;<br>    q-&gt;front = s-&gt;next;<br>    q-&gt;rear-&gt;next = q-&gt;front;<br>    <span class=\"hljs-keyword\">return</span> s;<br>&#125;<br><span class=\"hljs-comment\">//入列操作</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">in</span><span class=\"hljs-params\">(LinkQuene *q,Linklist s)</span>&#123;<br>    q-&gt;rear-&gt;next = s;<br>    s-&gt;next = q-&gt;front;<br>    q-&gt;rear = s;<br>&#125;<br><span class=\"hljs-comment\">//约瑟夫环操作函数</span><br>Status <span class=\"hljs-title function_\">Josephus</span><span class=\"hljs-params\">(LinkQuene q,Linklist p,<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> i,<span class=\"hljs-type\">int</span> m)</span>&#123;<br>    <span class=\"hljs-type\">int</span> j;<br>    <span class=\"hljs-keyword\">if</span>(i&gt;x)&#123;<br>        <span class=\"hljs-keyword\">return</span> ERROR;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>;j&lt;i;j++)&#123;<br>            q.front = q.front-&gt;next;<br>            q.rear = q.rear-&gt;next;<br>        &#125;<br>    <span class=\"hljs-keyword\">while</span>(q.front!=q.rear)&#123;<br>        <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>;j&lt;m;j++)&#123;<br>            p=out(&amp;q);<br>            in(&amp;q,p);<br>        &#125;<br>        p=out(&amp;q);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the number of dead people is %d\\n&quot;</span>,p-&gt;data);<br>        <span class=\"hljs-built_in\">free</span>(p);<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the number of avoiding execution is %d&quot;</span>,q.front-&gt;data);<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span>&#123;<br><span class=\"hljs-type\">int</span> x,i,m;<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;how much people:\\n&quot;</span>);<br><span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the starting point:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;i);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;how much people to skip:\\n&quot;</span>);<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;m);<br>    LinkQuene q;<br>    Linklist *p;<br>    init(q);<br>    insert(&amp;q,x);<br>    Josephus(q,p,x,i,m);<br>&#125;;<br></code></pre></td></tr></table></figure>\n"},{"title":"打包.exe应用程序","date":"2022-09-06T05:30:00.000Z","excerpt":"打包.exe应用程序","_content":"# 打包.exe应用程序\n\n## 用python打包exe应用程序-PyInstaller\n\n### **1、PyInstaller简介**\n\nPyInstaller是一个跨平台的Python应用打包工具，支持 Windows/Linux/MacOS三大主流平台，能够把 Python 脚本及其所在的 Python 解释器打包成可执行文件，从而允许最终用户在无需安装 Python 的情况下执行应用程序。\nPyInstaller 制作出来的执行文件并不是跨平台的，如果需要为不同平台打包，就要在相应平台上运行PyInstaller进行打包。\n\n### **2、PyInstaller安装**\n\n```python\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple Pyinstaller\n```\n\n### 3.参数含义\n\n**-F** 表示生成单个可执行文件\n\n**-w** 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！\n\n**-p** 表示你自己自定义需要加载的类路径，一般情况下用不到\n\n**-i** 表示可执行文件的图标\n\n### 4.示例\n\n在`.py`和`.ico`文件夹下打开终端\n\n```\npyinstaller -F -i ./fac.ico tree.py\n```\n\n这个时候多了很多文件和文件夹，dist目录就是我们打包好的地方。使用-w只生成`.exe`文件\n\n## PYTHON使得.exe文件运行完保留\n\n```python\nimport os\nos.system(\"pause\")\n```\n\n## C++使得.exe文件运行完保留\n\n```c++\n#include <iostream>\nsystem(\"Pause\");//生成的exe运行完程序保留，点任意键结束\n```\n\n","source":"_posts/Myexe.md","raw":"---\ntitle: 打包.exe应用程序\ntags: [PYTHON,exe]\ncategories: [可执行文件]\ndate: 2022-9-6 13:30:00\nexcerpt: 打包.exe应用程序\n---\n# 打包.exe应用程序\n\n## 用python打包exe应用程序-PyInstaller\n\n### **1、PyInstaller简介**\n\nPyInstaller是一个跨平台的Python应用打包工具，支持 Windows/Linux/MacOS三大主流平台，能够把 Python 脚本及其所在的 Python 解释器打包成可执行文件，从而允许最终用户在无需安装 Python 的情况下执行应用程序。\nPyInstaller 制作出来的执行文件并不是跨平台的，如果需要为不同平台打包，就要在相应平台上运行PyInstaller进行打包。\n\n### **2、PyInstaller安装**\n\n```python\npip install -i https://pypi.tuna.tsinghua.edu.cn/simple Pyinstaller\n```\n\n### 3.参数含义\n\n**-F** 表示生成单个可执行文件\n\n**-w** 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！\n\n**-p** 表示你自己自定义需要加载的类路径，一般情况下用不到\n\n**-i** 表示可执行文件的图标\n\n### 4.示例\n\n在`.py`和`.ico`文件夹下打开终端\n\n```\npyinstaller -F -i ./fac.ico tree.py\n```\n\n这个时候多了很多文件和文件夹，dist目录就是我们打包好的地方。使用-w只生成`.exe`文件\n\n## PYTHON使得.exe文件运行完保留\n\n```python\nimport os\nos.system(\"pause\")\n```\n\n## C++使得.exe文件运行完保留\n\n```c++\n#include <iostream>\nsystem(\"Pause\");//生成的exe运行完程序保留，点任意键结束\n```\n\n","slug":"Myexe","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7uk000clsvs3cvk8m9w","content":"<h1 id=\"打包exe应用程序\"><a class=\"markdownIt-Anchor\" href=\"#打包exe应用程序\"></a> 打包.exe应用程序</h1>\n<h2 id=\"用python打包exe应用程序-pyinstaller\"><a class=\"markdownIt-Anchor\" href=\"#用python打包exe应用程序-pyinstaller\"></a> 用python打包exe应用程序-PyInstaller</h2>\n<h3 id=\"1-pyinstaller简介\"><a class=\"markdownIt-Anchor\" href=\"#1-pyinstaller简介\"></a> <strong>1、PyInstaller简介</strong></h3>\n<p>PyInstaller是一个跨平台的Python应用打包工具，支持 Windows/Linux/MacOS三大主流平台，能够把 Python 脚本及其所在的 Python 解释器打包成可执行文件，从而允许最终用户在无需安装 Python 的情况下执行应用程序。<br />\nPyInstaller 制作出来的执行文件并不是跨平台的，如果需要为不同平台打包，就要在相应平台上运行PyInstaller进行打包。</p>\n<h3 id=\"2-pyinstaller安装\"><a class=\"markdownIt-Anchor\" href=\"#2-pyinstaller安装\"></a> <strong>2、PyInstaller安装</strong></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple Pyinstaller<br></code></pre></td></tr></table></figure>\n<h3 id=\"3参数含义\"><a class=\"markdownIt-Anchor\" href=\"#3参数含义\"></a> 3.参数含义</h3>\n<p><strong>-F</strong> 表示生成单个可执行文件</p>\n<p><strong>-w</strong> 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！</p>\n<p><strong>-p</strong> 表示你自己自定义需要加载的类路径，一般情况下用不到</p>\n<p><strong>-i</strong> 表示可执行文件的图标</p>\n<h3 id=\"4示例\"><a class=\"markdownIt-Anchor\" href=\"#4示例\"></a> 4.示例</h3>\n<p>在<code>.py</code>和<code>.ico</code>文件夹下打开终端</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">pyinstaller -F -<span class=\"hljs-selector-tag\">i</span> ./fac<span class=\"hljs-selector-class\">.ico</span> tree.py<br></code></pre></td></tr></table></figure>\n<p>这个时候多了很多文件和文件夹，dist目录就是我们打包好的地方。使用-w只生成<code>.exe</code>文件</p>\n<h2 id=\"python使得exe文件运行完保留\"><a class=\"markdownIt-Anchor\" href=\"#python使得exe文件运行完保留\"></a> PYTHON使得.exe文件运行完保留</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> os<br>os.system(<span class=\"hljs-string\">&quot;pause&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"c使得exe文件运行完保留\"><a class=\"markdownIt-Anchor\" href=\"#c使得exe文件运行完保留\"></a> C++使得.exe文件运行完保留</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;Pause&quot;</span>);<span class=\"hljs-comment\">//生成的exe运行完程序保留，点任意键结束</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h1 id=\"打包exe应用程序\"><a class=\"markdownIt-Anchor\" href=\"#打包exe应用程序\"></a> 打包.exe应用程序</h1>\n<h2 id=\"用python打包exe应用程序-pyinstaller\"><a class=\"markdownIt-Anchor\" href=\"#用python打包exe应用程序-pyinstaller\"></a> 用python打包exe应用程序-PyInstaller</h2>\n<h3 id=\"1-pyinstaller简介\"><a class=\"markdownIt-Anchor\" href=\"#1-pyinstaller简介\"></a> <strong>1、PyInstaller简介</strong></h3>\n<p>PyInstaller是一个跨平台的Python应用打包工具，支持 Windows/Linux/MacOS三大主流平台，能够把 Python 脚本及其所在的 Python 解释器打包成可执行文件，从而允许最终用户在无需安装 Python 的情况下执行应用程序。<br />\nPyInstaller 制作出来的执行文件并不是跨平台的，如果需要为不同平台打包，就要在相应平台上运行PyInstaller进行打包。</p>\n<h3 id=\"2-pyinstaller安装\"><a class=\"markdownIt-Anchor\" href=\"#2-pyinstaller安装\"></a> <strong>2、PyInstaller安装</strong></h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple Pyinstaller<br></code></pre></td></tr></table></figure>\n<h3 id=\"3参数含义\"><a class=\"markdownIt-Anchor\" href=\"#3参数含义\"></a> 3.参数含义</h3>\n<p><strong>-F</strong> 表示生成单个可执行文件</p>\n<p><strong>-w</strong> 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！</p>\n<p><strong>-p</strong> 表示你自己自定义需要加载的类路径，一般情况下用不到</p>\n<p><strong>-i</strong> 表示可执行文件的图标</p>\n<h3 id=\"4示例\"><a class=\"markdownIt-Anchor\" href=\"#4示例\"></a> 4.示例</h3>\n<p>在<code>.py</code>和<code>.ico</code>文件夹下打开终端</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">pyinstaller -F -<span class=\"hljs-selector-tag\">i</span> ./fac<span class=\"hljs-selector-class\">.ico</span> tree.py<br></code></pre></td></tr></table></figure>\n<p>这个时候多了很多文件和文件夹，dist目录就是我们打包好的地方。使用-w只生成<code>.exe</code>文件</p>\n<h2 id=\"python使得exe文件运行完保留\"><a class=\"markdownIt-Anchor\" href=\"#python使得exe文件运行完保留\"></a> PYTHON使得.exe文件运行完保留</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> os<br>os.system(<span class=\"hljs-string\">&quot;pause&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"c使得exe文件运行完保留\"><a class=\"markdownIt-Anchor\" href=\"#c使得exe文件运行完保留\"></a> C++使得.exe文件运行完保留</h2>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;Pause&quot;</span>);<span class=\"hljs-comment\">//生成的exe运行完程序保留，点任意键结束</span><br></code></pre></td></tr></table></figure>\n"},{"title":"算法题目分享总结","date":"2023-06-17T12:00:00.000Z","excerpt":"算法题目分享总结!","_content":"# 王道机试指南\n\n## 例题2.2 反序数\n\n [题目链接](http://t.cn/E9WBrut)\n\n采用Reverse函数用于求反序数，通过对x不断进行除运算，然后对revx不断进行乘运算。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint Reverse(int x) {\n    int revx = 0;\n    while (x != 0) {\n        revx *= 10;\n        revx += x % 10;\n        x /= 10;\n    }\n    return revx;\n}\n\nint main() {\n    for (int i = 1000; i < 10000; i++) {\n        if (i * 9 == Reverse(i)) {\n            printf(\"%d\\n\", i);\n        }\n    }\n    return 0;\n}\n```\n\n## 例题2.4 输出梯形\n\n题目描述：输入一个高度h，输出一个高度为h、上底边长度为h的梯形。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int h=0;//梯形的高度\n    while(scanf(\"%d\",&h)!=EOF){\n        int all = h+2*(h-1);\n        int space=0,star=0;\n        for(int i=0;i<h;i++){\n            space=all-(h+2*i);\n            star=all-space;\n            for(int k=0;k<space;k++){\n                printf(\" \");\n            }\n            for(int k=0;k<star;k++){\n                printf(\"*\");\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```\n\nP.S:可以采用上述while循环的语句能够保证对多组测试数据进行处理，又使程序输入结束后能够正常退出。scanf函数的返回值是成功赋值的个数。\n\n```cpp\nwhile(scanf(\"%d\",&h)!=EOF)\n```\n\n## 例题2.5 叠筐\n[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2074)\n\n求解排版题的新思路：当输出的图形具有的规律不能或者很难直接应用到输出时，应该首先用一个缓存数组来保存将要输出的字符阵列，然后在该数组上完成排版，最后按照排版输出整个图形。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int num=0;//输入的奇数\n    int count = 0;//记录输出了多少次\n    char center,outside;\n    char rect[100][100];\n    while(scanf(\"%d %c %c\",&num,&center,&outside)!=EOF){\n        if(num%2==0){\n            printf(\"error\");\n        }\n        else{\n            char insert=NULL;\n            //中心赋值\n            int center_index=num/2;\n            rect[center_index][center_index]=center;\n            //循环插入外边框\n            for(int i=1;i<=num/2;i++){\n                if(i%2==1){\n                    insert = outside;\n                }\n                else{\n                    insert = center;\n                }\n                //插入横向\n                for(int k=center_index-i;k<=center_index+i;k++){\n                    rect[center_index-i][k]=insert;\n                    rect[center_index+i][k]=insert;\n                }\n                //插入纵向\n                for(int k=center_index-i+1;k<=center_index+i-1;k++){\n                    rect[k][center_index-i]=insert;\n                    rect[k][center_index+i]=insert;\n                }\n                //去除四角\n                rect[0][0]=' ';\n                rect[0][num-1]=' ';\n                rect[num-1][0]=' ';\n                rect[num-1][num-1]=' ';\n            }\n            //输出图案\n            if(count==0){\n                for(int i=0;i<num;i++){\n                    for(int j=0;j<num;j++){\n                        printf(\"%c\",rect[i][j]);\n                    }\n                    printf(\"\\n\");\n                    count=1;\n                }\n            }\n            else{\n                printf(\"\\n\");\n                for(int i=0;i<num;i++){\n                    for(int j=0;j<num;j++){\n                        printf(\"%c\",rect[i][j]);\n                    }\n                    count=1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## 例题2.6 今天的第几天？\n[题目链接](http://t.cn/E9jXK5A)\n\nP.S:注意CPP中的二维数组创建方法\n\n```cpp\n//二维数组的定义\nint day_list[2][13]={{0,31,28,31,30,31,30,31,31,30,31,30,31},\n                     {0,31,29,31,30,31,30,31,31,30,31,30,31}};\n```\n完整的程序如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool is_leap_year(int year){\n    if(year%400==0||(year%4==0&&year%100!=0)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n//二维数组的定义\nint day_list[2][13]={{0,31,28,31,30,31,30,31,31,30,31,30,31},\n                     {0,31,29,31,30,31,30,31,31,30,31,30,31}};\n\nint main()\n{\n    bool leap_year;\n    int year,month,day;\n    int total_days=0;\n    while(scanf(\"%d %d %d\",&year,&month,&day)!=EOF)\n    {\n        leap_year=is_leap_year(year);\n        if(leap_year==false){\n            for(int i=0;i<month;i++){\n                total_days+=day_list[0][i];\n            }\n            total_days+=day;\n            printf(\"%d\\n\",total_days);\n            total_days=0;\n        }\n        else{\n            for(int i=0;i<month;i++){\n                total_days+=day_list[1][i];\n            }\n            total_days+=day;\n            printf(\"%d\\n\",total_days);\n            total_days=0;\n        }\n    }\n    return 0;\n}\n```\n\n## 例题2.9 剩下的树\n[题目链接](http://t.cn/E9ufYo5)\n\nP.S:采用指针偏移初始化的方法能够提高一直循环的效率。\n\n```cpp\n//使用指针移动方式初始化数组，提高效率\n    bool remove_list[10001];\n    bool* p = remove_list;  // 指向数组首元素的指针\n    for (int i = 0; i < 10001; i++)\n    {\n        *p = true;\n        p++;\n    }\n```\n\n完整的程序如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int total,num;\n    int total_remove=0;\n    int index_1,index_2;\n    //使用指针移动方式初始化数组，提高效率\n    bool remove_list[10001];\n    bool* p = remove_list;  // 指向数组首元素的指针\n    for (int i = 0; i < 10001; i++)\n    {\n        *p = true;\n        p++;\n    }\n\n    scanf(\"%d %d\",&total,&num);\n\n    for(int i=0;i<num;i++)\n    {\n        scanf(\"%d %d\",&index_1,&index_2);\n        for(int j=index_1;j<=index_2;j++)\n        {\n            remove_list[j]=false;\n        }\n    }\n    for(int i=0;i<=total;i++)\n    {\n        if(remove_list[i])\n        {\n            total_remove++;\n        }\n    }\n    printf(\"%d\",total_remove);\n    return 0;\n}\n```\n\n## 例题2.10 手机键盘\n[题目链接](http://t.cn/E9ulcIc)\n\n* 可以先将按键次数记录在一个数组中，每当遇到一个字母，直接访问数组便可得到该字母的按键次数。\n\n```cpp\nstring arr[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\nint keytab[26]={1,2,3,1,2,3,1,2,3,1,2,3,1,2,\n                3,1,2,3,4,1,2,3,1,2,3,4};\n```\n\n* 判断两个字母是否属于同一个按键：如果两个字母同属一个按键，那么字母本身的间距就等于他们按键次数的差。反之，如果不相等，则这两个字母必定属于不同的按键。\n\n```cpp\n//判断在一个按键之内\n            if(i!=0&&str[i]-str[i-1]==keytab[str[i]-'a']-keytab[str[i-1]-'a'])\n            {\n                time+=2;\n            }\n```\n\n* 应当了解和掌握C++中关于`string`类型的用法。\n\n完整的程序如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstring arr[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\nint keytab[26]={1,2,3,1,2,3,1,2,3,1,2,3,1,2,\n                3,1,2,3,4,1,2,3,1,2,3,4};\nint main()\n{\n    string str;\n    while(cin>>str)\n    {\n        int time=0;\n        for(int i=0;i<str.size();i++)\n        {\n            time+=keytab[str[i]-'a'];\n            //判断在一个按键之内\n            if(i!=0&&str[i]-str[i-1]==keytab[str[i]-'a']-keytab[str[i-1]-'a'])\n            {\n                time+=2;\n            }\n        }\n        printf(\"%d\\n\",time);\n    }\n    return 0;\n}\n```\n\n## 例题3.2 成绩排序\n[题目链接](http://t.cn/E9d3ysv)\n\n* 遇到一组基本类型数据时，可以将其封装为一个结构体或类进行处理。\n\n```cpp\n//定义一个结构体\nstruct student{\n    int number;\n    int score;\n};\n```\n\n* 对于新的排序规则，具有以下准则，当比较函数的返回值为true时，表示第一个参数将会排在第二个参数的前面。`sort`不填写默认为**升序方式**。\n\n```cpp\nbool cmp(student x,student y){\n    if(x.score==y.score)\n    {\n        return x.number<y.number;\n    }\n    else\n    {\n        return x.score<y.score;\n    }\n}\n```\n\n完整的程序如下：\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\n//定义一个结构体\nstruct student{\n    int number;\n    int score;\n};\n\nstudent arr[101];\n\nbool cmp(student x,student y){\n    if(x.score==y.score)\n    {\n        return x.number<y.number;\n    }\n    else\n    {\n        return x.score<y.score;\n    }\n}\n\nint main()\n{\n    int num;\n    while(scanf(\"%d\",&num)!=EOF)\n    {\n        //赋值\n        for(int i=0;i<num;i++)\n        {\n            scanf(\"%d %d\",&arr[i].number,&arr[i].score);\n        }\n        sort(arr,arr+num,cmp);\n        //输出结果\n        for(int i=0;i<num;i++)\n        {\n            printf(\"%d %d\\n\",arr[i].number,arr[i].score);\n        }\n    }\n    return 0;\n}\n```\n\n## 例题3.5 查找\n[题目链接](http://t.cn/E9g8aaR)\n\n* 二分查找法必须熟练掌握（采用升序）\n\n```cpp\n//二分查找法(升序)\nbool BinaySearch(int n,int target)\n{\n    int left=0,right=n-1;\n    int middle;\n    while(left<=right){\n        middle=left+(right-left)/2;\n        if(target<arr[middle])\n        {\n            right=middle-1;\n        }\n        else if(target>arr[middle])\n        {\n            left=middle+1;\n        }\n        else{\n            return true;//找到了\n        }\n    }\n    return false;//没有找到\n}\n```\n\n完整的程序如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint arr[101];\n\n//二分查找法(升序)\nbool BinaySearch(int n,int target)\n{\n    int left=0,right=n-1;\n    int middle;\n    while(left<=right){\n        middle=left+(right-left)/2;\n        if(target<arr[middle])\n        {\n            right=middle-1;\n        }\n        else if(target>arr[middle])\n        {\n            left=middle+1;\n        }\n        else{\n            return true;//找到了\n        }\n    }\n    return false;//没有找到\n}\n\nint main()\n{\n    int n;\n    int num,target;\n    while(scanf(\"%d\",&n)!=EOF)\n    {\n        for(int i=0;i<n;i++)\n        {\n            scanf(\"%d\",&arr[i]);\n        }\n        sort(arr,arr+n);\n        scanf(\"%d\",&num);\n        for(int j=0;j<num;j++)\n        {\n            scanf(\"%d\",&target);\n            if(BinaySearch(n,target))\n            {\n                printf(\"YES\\n\");\n            }\n            else\n            {\n                printf(\"NO\\n\");\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## 第四章 字符串处理\n\n### string中的元素操作\n\nstring中的常用元素操作包括：\n\n* 在任意位置插入元素的insert()\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str=\"hello world\";\n    str.insert(str.size(),\" and you!\");\n    cout<<str<<endl;\n    return 0;\n}\n```\n\n输出：\n\n```cpp\nhello world and you!\n```\n\n* 在任意位置删除元素的erase()\n\n括号内第一个数字是起始下标，第二个数字是偏移。不加第二个数字则为从起始一直擦除到最后。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str=\"hello world and you!\";\n    str.erase(0,12);\n    cout<<str<<endl;\n    string str2=\"hello world and you!\";\n    str2.erase(7);\n    cout<<str2<<endl;\n    return 0;\n}\n```\n\n输出：\n\n```cpp\nand you!\nhello w\n```\n\n* 将字符串中所有的内容直接清空的clear()\n\n### string中的运算符\n\n* string类型的字符串可以通过\"+\"和\"+=\"来将两个或者多个字符串拼接成一个更长的字符串\n* string类型按照字典序进行比较\n\n在数学中，字典或词典顺序（也称为词汇顺序，字典顺序，字母顺序或词典顺序）是基于字母顺序排列的单词按字母顺序排列的方法,如abcdefg........也称为字典序。字典序最最小：指的是顺序最小和字符串的长度无关。如d和abcd比较，d>a, 然后直接结束比较。abcd为最小字典序。在ab 和 abc 比较，前两个字符一样，然后abc字符串长。ab为最小字典序。\n\n### string中的常用函数\n\n* c++中find() 函数与string::npos参数\n\n```cpp\n//统计ACSII码值在(0-127)中不同字符的个数 \n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tstring str;\n\tint num = 0;\n\tgetline(cin, str);\n\t//int m;\n\t//m = str.size();\n\tfor (int i = 0; i < 128; i++)\n\t{\n\t\tif (str.find(i) != string::npos)\n\t\t\tnum++;\n\t}\n\tcout << num;\n\treturn 0;\n}\n```\n\n* c++中返回字符串子串函数substr()\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str=\"hello world and you!\";\n    string str2=str.substr(6,5);\n    cout<<str2<<endl;\n    return 0;\n}\n```\n\n","source":"_posts/algorithm.md","raw":"---\ntitle: 算法题目分享总结\ntags: [数据结构]\ncategories: [数据结构]\ndate: 2023-6-17 20:00:00\nexcerpt: 算法题目分享总结!\n---\n# 王道机试指南\n\n## 例题2.2 反序数\n\n [题目链接](http://t.cn/E9WBrut)\n\n采用Reverse函数用于求反序数，通过对x不断进行除运算，然后对revx不断进行乘运算。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nint Reverse(int x) {\n    int revx = 0;\n    while (x != 0) {\n        revx *= 10;\n        revx += x % 10;\n        x /= 10;\n    }\n    return revx;\n}\n\nint main() {\n    for (int i = 1000; i < 10000; i++) {\n        if (i * 9 == Reverse(i)) {\n            printf(\"%d\\n\", i);\n        }\n    }\n    return 0;\n}\n```\n\n## 例题2.4 输出梯形\n\n题目描述：输入一个高度h，输出一个高度为h、上底边长度为h的梯形。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int h=0;//梯形的高度\n    while(scanf(\"%d\",&h)!=EOF){\n        int all = h+2*(h-1);\n        int space=0,star=0;\n        for(int i=0;i<h;i++){\n            space=all-(h+2*i);\n            star=all-space;\n            for(int k=0;k<space;k++){\n                printf(\" \");\n            }\n            for(int k=0;k<star;k++){\n                printf(\"*\");\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```\n\nP.S:可以采用上述while循环的语句能够保证对多组测试数据进行处理，又使程序输入结束后能够正常退出。scanf函数的返回值是成功赋值的个数。\n\n```cpp\nwhile(scanf(\"%d\",&h)!=EOF)\n```\n\n## 例题2.5 叠筐\n[题目链接](http://acm.hdu.edu.cn/showproblem.php?pid=2074)\n\n求解排版题的新思路：当输出的图形具有的规律不能或者很难直接应用到输出时，应该首先用一个缓存数组来保存将要输出的字符阵列，然后在该数组上完成排版，最后按照排版输出整个图形。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int num=0;//输入的奇数\n    int count = 0;//记录输出了多少次\n    char center,outside;\n    char rect[100][100];\n    while(scanf(\"%d %c %c\",&num,&center,&outside)!=EOF){\n        if(num%2==0){\n            printf(\"error\");\n        }\n        else{\n            char insert=NULL;\n            //中心赋值\n            int center_index=num/2;\n            rect[center_index][center_index]=center;\n            //循环插入外边框\n            for(int i=1;i<=num/2;i++){\n                if(i%2==1){\n                    insert = outside;\n                }\n                else{\n                    insert = center;\n                }\n                //插入横向\n                for(int k=center_index-i;k<=center_index+i;k++){\n                    rect[center_index-i][k]=insert;\n                    rect[center_index+i][k]=insert;\n                }\n                //插入纵向\n                for(int k=center_index-i+1;k<=center_index+i-1;k++){\n                    rect[k][center_index-i]=insert;\n                    rect[k][center_index+i]=insert;\n                }\n                //去除四角\n                rect[0][0]=' ';\n                rect[0][num-1]=' ';\n                rect[num-1][0]=' ';\n                rect[num-1][num-1]=' ';\n            }\n            //输出图案\n            if(count==0){\n                for(int i=0;i<num;i++){\n                    for(int j=0;j<num;j++){\n                        printf(\"%c\",rect[i][j]);\n                    }\n                    printf(\"\\n\");\n                    count=1;\n                }\n            }\n            else{\n                printf(\"\\n\");\n                for(int i=0;i<num;i++){\n                    for(int j=0;j<num;j++){\n                        printf(\"%c\",rect[i][j]);\n                    }\n                    count=1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## 例题2.6 今天的第几天？\n[题目链接](http://t.cn/E9jXK5A)\n\nP.S:注意CPP中的二维数组创建方法\n\n```cpp\n//二维数组的定义\nint day_list[2][13]={{0,31,28,31,30,31,30,31,31,30,31,30,31},\n                     {0,31,29,31,30,31,30,31,31,30,31,30,31}};\n```\n完整的程序如下：\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nbool is_leap_year(int year){\n    if(year%400==0||(year%4==0&&year%100!=0)){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n//二维数组的定义\nint day_list[2][13]={{0,31,28,31,30,31,30,31,31,30,31,30,31},\n                     {0,31,29,31,30,31,30,31,31,30,31,30,31}};\n\nint main()\n{\n    bool leap_year;\n    int year,month,day;\n    int total_days=0;\n    while(scanf(\"%d %d %d\",&year,&month,&day)!=EOF)\n    {\n        leap_year=is_leap_year(year);\n        if(leap_year==false){\n            for(int i=0;i<month;i++){\n                total_days+=day_list[0][i];\n            }\n            total_days+=day;\n            printf(\"%d\\n\",total_days);\n            total_days=0;\n        }\n        else{\n            for(int i=0;i<month;i++){\n                total_days+=day_list[1][i];\n            }\n            total_days+=day;\n            printf(\"%d\\n\",total_days);\n            total_days=0;\n        }\n    }\n    return 0;\n}\n```\n\n## 例题2.9 剩下的树\n[题目链接](http://t.cn/E9ufYo5)\n\nP.S:采用指针偏移初始化的方法能够提高一直循环的效率。\n\n```cpp\n//使用指针移动方式初始化数组，提高效率\n    bool remove_list[10001];\n    bool* p = remove_list;  // 指向数组首元素的指针\n    for (int i = 0; i < 10001; i++)\n    {\n        *p = true;\n        p++;\n    }\n```\n\n完整的程序如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    int total,num;\n    int total_remove=0;\n    int index_1,index_2;\n    //使用指针移动方式初始化数组，提高效率\n    bool remove_list[10001];\n    bool* p = remove_list;  // 指向数组首元素的指针\n    for (int i = 0; i < 10001; i++)\n    {\n        *p = true;\n        p++;\n    }\n\n    scanf(\"%d %d\",&total,&num);\n\n    for(int i=0;i<num;i++)\n    {\n        scanf(\"%d %d\",&index_1,&index_2);\n        for(int j=index_1;j<=index_2;j++)\n        {\n            remove_list[j]=false;\n        }\n    }\n    for(int i=0;i<=total;i++)\n    {\n        if(remove_list[i])\n        {\n            total_remove++;\n        }\n    }\n    printf(\"%d\",total_remove);\n    return 0;\n}\n```\n\n## 例题2.10 手机键盘\n[题目链接](http://t.cn/E9ulcIc)\n\n* 可以先将按键次数记录在一个数组中，每当遇到一个字母，直接访问数组便可得到该字母的按键次数。\n\n```cpp\nstring arr[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\nint keytab[26]={1,2,3,1,2,3,1,2,3,1,2,3,1,2,\n                3,1,2,3,4,1,2,3,1,2,3,4};\n```\n\n* 判断两个字母是否属于同一个按键：如果两个字母同属一个按键，那么字母本身的间距就等于他们按键次数的差。反之，如果不相等，则这两个字母必定属于不同的按键。\n\n```cpp\n//判断在一个按键之内\n            if(i!=0&&str[i]-str[i-1]==keytab[str[i]-'a']-keytab[str[i-1]-'a'])\n            {\n                time+=2;\n            }\n```\n\n* 应当了解和掌握C++中关于`string`类型的用法。\n\n完整的程序如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstring arr[8]={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\nint keytab[26]={1,2,3,1,2,3,1,2,3,1,2,3,1,2,\n                3,1,2,3,4,1,2,3,1,2,3,4};\nint main()\n{\n    string str;\n    while(cin>>str)\n    {\n        int time=0;\n        for(int i=0;i<str.size();i++)\n        {\n            time+=keytab[str[i]-'a'];\n            //判断在一个按键之内\n            if(i!=0&&str[i]-str[i-1]==keytab[str[i]-'a']-keytab[str[i-1]-'a'])\n            {\n                time+=2;\n            }\n        }\n        printf(\"%d\\n\",time);\n    }\n    return 0;\n}\n```\n\n## 例题3.2 成绩排序\n[题目链接](http://t.cn/E9d3ysv)\n\n* 遇到一组基本类型数据时，可以将其封装为一个结构体或类进行处理。\n\n```cpp\n//定义一个结构体\nstruct student{\n    int number;\n    int score;\n};\n```\n\n* 对于新的排序规则，具有以下准则，当比较函数的返回值为true时，表示第一个参数将会排在第二个参数的前面。`sort`不填写默认为**升序方式**。\n\n```cpp\nbool cmp(student x,student y){\n    if(x.score==y.score)\n    {\n        return x.number<y.number;\n    }\n    else\n    {\n        return x.score<y.score;\n    }\n}\n```\n\n完整的程序如下：\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n\n//定义一个结构体\nstruct student{\n    int number;\n    int score;\n};\n\nstudent arr[101];\n\nbool cmp(student x,student y){\n    if(x.score==y.score)\n    {\n        return x.number<y.number;\n    }\n    else\n    {\n        return x.score<y.score;\n    }\n}\n\nint main()\n{\n    int num;\n    while(scanf(\"%d\",&num)!=EOF)\n    {\n        //赋值\n        for(int i=0;i<num;i++)\n        {\n            scanf(\"%d %d\",&arr[i].number,&arr[i].score);\n        }\n        sort(arr,arr+num,cmp);\n        //输出结果\n        for(int i=0;i<num;i++)\n        {\n            printf(\"%d %d\\n\",arr[i].number,arr[i].score);\n        }\n    }\n    return 0;\n}\n```\n\n## 例题3.5 查找\n[题目链接](http://t.cn/E9g8aaR)\n\n* 二分查找法必须熟练掌握（采用升序）\n\n```cpp\n//二分查找法(升序)\nbool BinaySearch(int n,int target)\n{\n    int left=0,right=n-1;\n    int middle;\n    while(left<=right){\n        middle=left+(right-left)/2;\n        if(target<arr[middle])\n        {\n            right=middle-1;\n        }\n        else if(target>arr[middle])\n        {\n            left=middle+1;\n        }\n        else{\n            return true;//找到了\n        }\n    }\n    return false;//没有找到\n}\n```\n\n完整的程序如下：\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint arr[101];\n\n//二分查找法(升序)\nbool BinaySearch(int n,int target)\n{\n    int left=0,right=n-1;\n    int middle;\n    while(left<=right){\n        middle=left+(right-left)/2;\n        if(target<arr[middle])\n        {\n            right=middle-1;\n        }\n        else if(target>arr[middle])\n        {\n            left=middle+1;\n        }\n        else{\n            return true;//找到了\n        }\n    }\n    return false;//没有找到\n}\n\nint main()\n{\n    int n;\n    int num,target;\n    while(scanf(\"%d\",&n)!=EOF)\n    {\n        for(int i=0;i<n;i++)\n        {\n            scanf(\"%d\",&arr[i]);\n        }\n        sort(arr,arr+n);\n        scanf(\"%d\",&num);\n        for(int j=0;j<num;j++)\n        {\n            scanf(\"%d\",&target);\n            if(BinaySearch(n,target))\n            {\n                printf(\"YES\\n\");\n            }\n            else\n            {\n                printf(\"NO\\n\");\n            }\n        }\n    }\n    return 0;\n}\n```\n\n## 第四章 字符串处理\n\n### string中的元素操作\n\nstring中的常用元素操作包括：\n\n* 在任意位置插入元素的insert()\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str=\"hello world\";\n    str.insert(str.size(),\" and you!\");\n    cout<<str<<endl;\n    return 0;\n}\n```\n\n输出：\n\n```cpp\nhello world and you!\n```\n\n* 在任意位置删除元素的erase()\n\n括号内第一个数字是起始下标，第二个数字是偏移。不加第二个数字则为从起始一直擦除到最后。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str=\"hello world and you!\";\n    str.erase(0,12);\n    cout<<str<<endl;\n    string str2=\"hello world and you!\";\n    str2.erase(7);\n    cout<<str2<<endl;\n    return 0;\n}\n```\n\n输出：\n\n```cpp\nand you!\nhello w\n```\n\n* 将字符串中所有的内容直接清空的clear()\n\n### string中的运算符\n\n* string类型的字符串可以通过\"+\"和\"+=\"来将两个或者多个字符串拼接成一个更长的字符串\n* string类型按照字典序进行比较\n\n在数学中，字典或词典顺序（也称为词汇顺序，字典顺序，字母顺序或词典顺序）是基于字母顺序排列的单词按字母顺序排列的方法,如abcdefg........也称为字典序。字典序最最小：指的是顺序最小和字符串的长度无关。如d和abcd比较，d>a, 然后直接结束比较。abcd为最小字典序。在ab 和 abc 比较，前两个字符一样，然后abc字符串长。ab为最小字典序。\n\n### string中的常用函数\n\n* c++中find() 函数与string::npos参数\n\n```cpp\n//统计ACSII码值在(0-127)中不同字符的个数 \n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tstring str;\n\tint num = 0;\n\tgetline(cin, str);\n\t//int m;\n\t//m = str.size();\n\tfor (int i = 0; i < 128; i++)\n\t{\n\t\tif (str.find(i) != string::npos)\n\t\t\tnum++;\n\t}\n\tcout << num;\n\treturn 0;\n}\n```\n\n* c++中返回字符串子串函数substr()\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n    string str=\"hello world and you!\";\n    string str2=str.substr(6,5);\n    cout<<str2<<endl;\n    return 0;\n}\n```\n\n","slug":"algorithm","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7ul000dlsvscteu0k9c","content":"<h1 id=\"王道机试指南\"><a class=\"markdownIt-Anchor\" href=\"#王道机试指南\"></a> 王道机试指南</h1>\n<h2 id=\"例题22-反序数\"><a class=\"markdownIt-Anchor\" href=\"#例题22-反序数\"></a> 例题2.2 反序数</h2>\n<p><a href=\"http://t.cn/E9WBrut\">题目链接</a></p>\n<p>采用Reverse函数用于求反序数，通过对x不断进行除运算，然后对revx不断进行乘运算。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Reverse</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;<br>    <span class=\"hljs-type\">int</span> revx = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (x != <span class=\"hljs-number\">0</span>) &#123;<br>        revx *= <span class=\"hljs-number\">10</span>;<br>        revx += x % <span class=\"hljs-number\">10</span>;<br>        x /= <span class=\"hljs-number\">10</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> revx;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1000</span>; i &lt; <span class=\"hljs-number\">10000</span>; i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (i * <span class=\"hljs-number\">9</span> == <span class=\"hljs-built_in\">Reverse</span>(i)) &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题24-输出梯形\"><a class=\"markdownIt-Anchor\" href=\"#例题24-输出梯形\"></a> 例题2.4 输出梯形</h2>\n<p>题目描述：输入一个高度h，输出一个高度为h、上底边长度为h的梯形。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> h=<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//梯形的高度</span><br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;h)!=EOF)&#123;<br>        <span class=\"hljs-type\">int</span> all = h+<span class=\"hljs-number\">2</span>*(h<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-type\">int</span> space=<span class=\"hljs-number\">0</span>,star=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;h;i++)&#123;<br>            space=all-(h+<span class=\"hljs-number\">2</span>*i);<br>            star=all-space;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;space;k++)&#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; &quot;</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;star;k++)&#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>            &#125;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>P.S:可以采用上述while循环的语句能够保证对多组测试数据进行处理，又使程序输入结束后能够正常退出。scanf函数的返回值是成功赋值的个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;h)!=EOF)<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题25-叠筐\"><a class=\"markdownIt-Anchor\" href=\"#例题25-叠筐\"></a> 例题2.5 叠筐</h2>\n<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2074\">题目链接</a></p>\n<p>求解排版题的新思路：当输出的图形具有的规律不能或者很难直接应用到输出时，应该首先用一个缓存数组来保存将要输出的字符阵列，然后在该数组上完成排版，最后按照排版输出整个图形。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//输入的奇数</span><br>    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//记录输出了多少次</span><br>    <span class=\"hljs-type\">char</span> center,outside;<br>    <span class=\"hljs-type\">char</span> rect[<span class=\"hljs-number\">100</span>][<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %c %c&quot;</span>,&amp;num,&amp;center,&amp;outside)!=EOF)&#123;<br>        <span class=\"hljs-keyword\">if</span>(num%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;error&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-type\">char</span> insert=<span class=\"hljs-literal\">NULL</span>;<br>            <span class=\"hljs-comment\">//中心赋值</span><br>            <span class=\"hljs-type\">int</span> center_index=num/<span class=\"hljs-number\">2</span>;<br>            rect[center_index][center_index]=center;<br>            <span class=\"hljs-comment\">//循环插入外边框</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=num/<span class=\"hljs-number\">2</span>;i++)&#123;<br>                <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">1</span>)&#123;<br>                    insert = outside;<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    insert = center;<br>                &#125;<br>                <span class=\"hljs-comment\">//插入横向</span><br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=center_index-i;k&lt;=center_index+i;k++)&#123;<br>                    rect[center_index-i][k]=insert;<br>                    rect[center_index+i][k]=insert;<br>                &#125;<br>                <span class=\"hljs-comment\">//插入纵向</span><br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=center_index-i+<span class=\"hljs-number\">1</span>;k&lt;=center_index+i<span class=\"hljs-number\">-1</span>;k++)&#123;<br>                    rect[k][center_index-i]=insert;<br>                    rect[k][center_index+i]=insert;<br>                &#125;<br>                <span class=\"hljs-comment\">//去除四角</span><br>                rect[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>                rect[<span class=\"hljs-number\">0</span>][num<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>                rect[num<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>                rect[num<span class=\"hljs-number\">-1</span>][num<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">//输出图案</span><br>            <span class=\"hljs-keyword\">if</span>(count==<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)&#123;<br>                    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;num;j++)&#123;<br>                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,rect[i][j]);<br>                    &#125;<br>                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>                    count=<span class=\"hljs-number\">1</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)&#123;<br>                    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;num;j++)&#123;<br>                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,rect[i][j]);<br>                    &#125;<br>                    count=<span class=\"hljs-number\">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题26-今天的第几天\"><a class=\"markdownIt-Anchor\" href=\"#例题26-今天的第几天\"></a> 例题2.6 今天的第几天？</h2>\n<p><a href=\"http://t.cn/E9jXK5A\">题目链接</a></p>\n<p>P.S:注意CPP中的二维数组创建方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//二维数组的定义</span><br><span class=\"hljs-type\">int</span> day_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>                     &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;&#125;;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_leap_year</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>||(year%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span>&amp;&amp;year%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>))&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//二维数组的定义</span><br><span class=\"hljs-type\">int</span> day_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>                     &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">bool</span> leap_year;<br>    <span class=\"hljs-type\">int</span> year,month,day;<br>    <span class=\"hljs-type\">int</span> total_days=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>,&amp;year,&amp;month,&amp;day)!=EOF)<br>    &#123;<br>        leap_year=<span class=\"hljs-built_in\">is_leap_year</span>(year);<br>        <span class=\"hljs-keyword\">if</span>(leap_year==<span class=\"hljs-literal\">false</span>)&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;month;i++)&#123;<br>                total_days+=day_list[<span class=\"hljs-number\">0</span>][i];<br>            &#125;<br>            total_days+=day;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,total_days);<br>            total_days=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;month;i++)&#123;<br>                total_days+=day_list[<span class=\"hljs-number\">1</span>][i];<br>            &#125;<br>            total_days+=day;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,total_days);<br>            total_days=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题29-剩下的树\"><a class=\"markdownIt-Anchor\" href=\"#例题29-剩下的树\"></a> 例题2.9 剩下的树</h2>\n<p><a href=\"http://t.cn/E9ufYo5\">题目链接</a></p>\n<p>P.S:采用指针偏移初始化的方法能够提高一直循环的效率。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//使用指针移动方式初始化数组，提高效率</span><br>    <span class=\"hljs-type\">bool</span> remove_list[<span class=\"hljs-number\">10001</span>];<br>    <span class=\"hljs-type\">bool</span>* p = remove_list;  <span class=\"hljs-comment\">// 指向数组首元素的指针</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10001</span>; i++)<br>    &#123;<br>        *p = <span class=\"hljs-literal\">true</span>;<br>        p++;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> total,num;<br>    <span class=\"hljs-type\">int</span> total_remove=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span> index_1,index_2;<br>    <span class=\"hljs-comment\">//使用指针移动方式初始化数组，提高效率</span><br>    <span class=\"hljs-type\">bool</span> remove_list[<span class=\"hljs-number\">10001</span>];<br>    <span class=\"hljs-type\">bool</span>* p = remove_list;  <span class=\"hljs-comment\">// 指向数组首元素的指针</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10001</span>; i++)<br>    &#123;<br>        *p = <span class=\"hljs-literal\">true</span>;<br>        p++;<br>    &#125;<br><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;total,&amp;num);<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;index_1,&amp;index_2);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=index_1;j&lt;=index_2;j++)<br>        &#123;<br>            remove_list[j]=<span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=total;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(remove_list[i])<br>        &#123;<br>            total_remove++;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,total_remove);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题210-手机键盘\"><a class=\"markdownIt-Anchor\" href=\"#例题210-手机键盘\"></a> 例题2.10 手机键盘</h2>\n<p><a href=\"http://t.cn/E9ulcIc\">题目链接</a></p>\n<ul>\n<li>可以先将按键次数记录在一个数组中，每当遇到一个字母，直接访问数组便可得到该字母的按键次数。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">string arr[<span class=\"hljs-number\">8</span>]=&#123;<span class=\"hljs-string\">&quot;abc&quot;</span>,<span class=\"hljs-string\">&quot;def&quot;</span>,<span class=\"hljs-string\">&quot;ghi&quot;</span>,<span class=\"hljs-string\">&quot;jkl&quot;</span>,<span class=\"hljs-string\">&quot;mno&quot;</span>,<span class=\"hljs-string\">&quot;pqrs&quot;</span>,<span class=\"hljs-string\">&quot;tuv&quot;</span>,<span class=\"hljs-string\">&quot;wxyz&quot;</span>&#125;;<br><span class=\"hljs-type\">int</span> keytab[<span class=\"hljs-number\">26</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<br>                <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>判断两个字母是否属于同一个按键：如果两个字母同属一个按键，那么字母本身的间距就等于他们按键次数的差。反之，如果不相等，则这两个字母必定属于不同的按键。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//判断在一个按键之内</span><br>            <span class=\"hljs-keyword\">if</span>(i!=<span class=\"hljs-number\">0</span>&amp;&amp;str[i]-str[i<span class=\"hljs-number\">-1</span>]==keytab[str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>]-keytab[str[i<span class=\"hljs-number\">-1</span>]-<span class=\"hljs-string\">&#x27;a&#x27;</span>])<br>            &#123;<br>                time+=<span class=\"hljs-number\">2</span>;<br>            &#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>应当了解和掌握C++中关于<code>string</code>类型的用法。</li>\n</ul>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>string arr[<span class=\"hljs-number\">8</span>]=&#123;<span class=\"hljs-string\">&quot;abc&quot;</span>,<span class=\"hljs-string\">&quot;def&quot;</span>,<span class=\"hljs-string\">&quot;ghi&quot;</span>,<span class=\"hljs-string\">&quot;jkl&quot;</span>,<span class=\"hljs-string\">&quot;mno&quot;</span>,<span class=\"hljs-string\">&quot;pqrs&quot;</span>,<span class=\"hljs-string\">&quot;tuv&quot;</span>,<span class=\"hljs-string\">&quot;wxyz&quot;</span>&#125;;<br><span class=\"hljs-type\">int</span> keytab[<span class=\"hljs-number\">26</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<br>                <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str;<br>    <span class=\"hljs-keyword\">while</span>(cin&gt;&gt;str)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> time=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;str.<span class=\"hljs-built_in\">size</span>();i++)<br>        &#123;<br>            time+=keytab[str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>];<br>            <span class=\"hljs-comment\">//判断在一个按键之内</span><br>            <span class=\"hljs-keyword\">if</span>(i!=<span class=\"hljs-number\">0</span>&amp;&amp;str[i]-str[i<span class=\"hljs-number\">-1</span>]==keytab[str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>]-keytab[str[i<span class=\"hljs-number\">-1</span>]-<span class=\"hljs-string\">&#x27;a&#x27;</span>])<br>            &#123;<br>                time+=<span class=\"hljs-number\">2</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,time);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题32-成绩排序\"><a class=\"markdownIt-Anchor\" href=\"#例题32-成绩排序\"></a> 例题3.2 成绩排序</h2>\n<p><a href=\"http://t.cn/E9d3ysv\">题目链接</a></p>\n<ul>\n<li>遇到一组基本类型数据时，可以将其封装为一个结构体或类进行处理。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//定义一个结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">student</span>&#123;<br>    <span class=\"hljs-type\">int</span> number;<br>    <span class=\"hljs-type\">int</span> score;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>对于新的排序规则，具有以下准则，当比较函数的返回值为true时，表示第一个参数将会排在第二个参数的前面。<code>sort</code>不填写默认为<strong>升序方式</strong>。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student x,student y)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x.score==y.score)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.number&lt;y.number;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.score&lt;y.score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//定义一个结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">student</span>&#123;<br>    <span class=\"hljs-type\">int</span> number;<br>    <span class=\"hljs-type\">int</span> score;<br>&#125;;<br><br>student arr[<span class=\"hljs-number\">101</span>];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student x,student y)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x.score==y.score)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.number&lt;y.number;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.score&lt;y.score;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num)!=EOF)<br>    &#123;<br>        <span class=\"hljs-comment\">//赋值</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;arr[i].number,&amp;arr[i].score);<br>        &#125;<br>        <span class=\"hljs-built_in\">sort</span>(arr,arr+num,cmp);<br>        <span class=\"hljs-comment\">//输出结果</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>,arr[i].number,arr[i].score);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题35-查找\"><a class=\"markdownIt-Anchor\" href=\"#例题35-查找\"></a> 例题3.5 查找</h2>\n<p><a href=\"http://t.cn/E9g8aaR\">题目链接</a></p>\n<ul>\n<li>二分查找法必须熟练掌握（采用升序）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//二分查找法(升序)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">BinaySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> target)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> left=<span class=\"hljs-number\">0</span>,right=n<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-type\">int</span> middle;<br>    <span class=\"hljs-keyword\">while</span>(left&lt;=right)&#123;<br>        middle=left+(right-left)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span>(target&lt;arr[middle])<br>        &#123;<br>            right=middle<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&gt;arr[middle])<br>        &#123;<br>            left=middle+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//找到了</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//没有找到</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">101</span>];<br><br><span class=\"hljs-comment\">//二分查找法(升序)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">BinaySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> target)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> left=<span class=\"hljs-number\">0</span>,right=n<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-type\">int</span> middle;<br>    <span class=\"hljs-keyword\">while</span>(left&lt;=right)&#123;<br>        middle=left+(right-left)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span>(target&lt;arr[middle])<br>        &#123;<br>            right=middle<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&gt;arr[middle])<br>        &#123;<br>            left=middle+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//找到了</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//没有找到</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-type\">int</span> num,target;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n)!=EOF)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;arr[i]);<br>        &#125;<br>        <span class=\"hljs-built_in\">sort</span>(arr,arr+n);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;num;j++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;target);<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">BinaySearch</span>(n,target))<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;YES\\n&quot;</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;NO\\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"第四章-字符串处理\"><a class=\"markdownIt-Anchor\" href=\"#第四章-字符串处理\"></a> 第四章 字符串处理</h2>\n<h3 id=\"string中的元素操作\"><a class=\"markdownIt-Anchor\" href=\"#string中的元素操作\"></a> string中的元素操作</h3>\n<p>string中的常用元素操作包括：</p>\n<ul>\n<li>在任意位置插入元素的insert()</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str=<span class=\"hljs-string\">&quot;hello world&quot;</span>;<br>    str.<span class=\"hljs-built_in\">insert</span>(str.<span class=\"hljs-built_in\">size</span>(),<span class=\"hljs-string\">&quot; and you!&quot;</span>);<br>    cout&lt;&lt;str&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">hello world <span class=\"hljs-keyword\">and</span> you!<br></code></pre></td></tr></table></figure>\n<ul>\n<li>在任意位置删除元素的erase()</li>\n</ul>\n<p>括号内第一个数字是起始下标，第二个数字是偏移。不加第二个数字则为从起始一直擦除到最后。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str=<span class=\"hljs-string\">&quot;hello world and you!&quot;</span>;<br>    str.<span class=\"hljs-built_in\">erase</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">12</span>);<br>    cout&lt;&lt;str&lt;&lt;endl;<br>    string str2=<span class=\"hljs-string\">&quot;hello world and you!&quot;</span>;<br>    str2.<span class=\"hljs-built_in\">erase</span>(<span class=\"hljs-number\">7</span>);<br>    cout&lt;&lt;str2&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">and</span> you!<br>hello w<br></code></pre></td></tr></table></figure>\n<ul>\n<li>将字符串中所有的内容直接清空的clear()</li>\n</ul>\n<h3 id=\"string中的运算符\"><a class=\"markdownIt-Anchor\" href=\"#string中的运算符\"></a> string中的运算符</h3>\n<ul>\n<li>string类型的字符串可以通过&quot;+“和”+=&quot;来将两个或者多个字符串拼接成一个更长的字符串</li>\n<li>string类型按照字典序进行比较</li>\n</ul>\n<p>在数学中，字典或词典顺序（也称为词汇顺序，字典顺序，字母顺序或词典顺序）是基于字母顺序排列的单词按字母顺序排列的方法,如abcdefg…也称为字典序。字典序最最小：指的是顺序最小和字符串的长度无关。如d和abcd比较，d&gt;a, 然后直接结束比较。abcd为最小字典序。在ab 和 abc 比较，前两个字符一样，然后abc字符串长。ab为最小字典序。</p>\n<h3 id=\"string中的常用函数\"><a class=\"markdownIt-Anchor\" href=\"#string中的常用函数\"></a> string中的常用函数</h3>\n<ul>\n<li>c++中find() 函数与string::npos参数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//统计ACSII码值在(0-127)中不同字符的个数 </span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tstring str;<br>\t<span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">getline</span>(cin, str);<br>\t<span class=\"hljs-comment\">//int m;</span><br>\t<span class=\"hljs-comment\">//m = str.size();</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">128</span>; i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-built_in\">find</span>(i) != string::npos)<br>\t\t\tnum++;<br>\t&#125;<br>\tcout &lt;&lt; num;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>c++中返回字符串子串函数substr()</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str=<span class=\"hljs-string\">&quot;hello world and you!&quot;</span>;<br>    string str2=str.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>);<br>    cout&lt;&lt;str2&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h1 id=\"王道机试指南\"><a class=\"markdownIt-Anchor\" href=\"#王道机试指南\"></a> 王道机试指南</h1>\n<h2 id=\"例题22-反序数\"><a class=\"markdownIt-Anchor\" href=\"#例题22-反序数\"></a> 例题2.2 反序数</h2>\n<p><a href=\"http://t.cn/E9WBrut\">题目链接</a></p>\n<p>采用Reverse函数用于求反序数，通过对x不断进行除运算，然后对revx不断进行乘运算。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">Reverse</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span> </span>&#123;<br>    <span class=\"hljs-type\">int</span> revx = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span> (x != <span class=\"hljs-number\">0</span>) &#123;<br>        revx *= <span class=\"hljs-number\">10</span>;<br>        revx += x % <span class=\"hljs-number\">10</span>;<br>        x /= <span class=\"hljs-number\">10</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> revx;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1000</span>; i &lt; <span class=\"hljs-number\">10000</span>; i++) &#123;<br>        <span class=\"hljs-keyword\">if</span> (i * <span class=\"hljs-number\">9</span> == <span class=\"hljs-built_in\">Reverse</span>(i)) &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题24-输出梯形\"><a class=\"markdownIt-Anchor\" href=\"#例题24-输出梯形\"></a> 例题2.4 输出梯形</h2>\n<p>题目描述：输入一个高度h，输出一个高度为h、上底边长度为h的梯形。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> h=<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//梯形的高度</span><br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;h)!=EOF)&#123;<br>        <span class=\"hljs-type\">int</span> all = h+<span class=\"hljs-number\">2</span>*(h<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-type\">int</span> space=<span class=\"hljs-number\">0</span>,star=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;h;i++)&#123;<br>            space=all-(h+<span class=\"hljs-number\">2</span>*i);<br>            star=all-space;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;space;k++)&#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; &quot;</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;star;k++)&#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>            &#125;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>P.S:可以采用上述while循环的语句能够保证对多组测试数据进行处理，又使程序输入结束后能够正常退出。scanf函数的返回值是成功赋值的个数。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;h)!=EOF)<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题25-叠筐\"><a class=\"markdownIt-Anchor\" href=\"#例题25-叠筐\"></a> 例题2.5 叠筐</h2>\n<p><a href=\"http://acm.hdu.edu.cn/showproblem.php?pid=2074\">题目链接</a></p>\n<p>求解排版题的新思路：当输出的图形具有的规律不能或者很难直接应用到输出时，应该首先用一个缓存数组来保存将要输出的字符阵列，然后在该数组上完成排版，最后按照排版输出整个图形。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//输入的奇数</span><br>    <span class=\"hljs-type\">int</span> count = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//记录输出了多少次</span><br>    <span class=\"hljs-type\">char</span> center,outside;<br>    <span class=\"hljs-type\">char</span> rect[<span class=\"hljs-number\">100</span>][<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %c %c&quot;</span>,&amp;num,&amp;center,&amp;outside)!=EOF)&#123;<br>        <span class=\"hljs-keyword\">if</span>(num%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;error&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-type\">char</span> insert=<span class=\"hljs-literal\">NULL</span>;<br>            <span class=\"hljs-comment\">//中心赋值</span><br>            <span class=\"hljs-type\">int</span> center_index=num/<span class=\"hljs-number\">2</span>;<br>            rect[center_index][center_index]=center;<br>            <span class=\"hljs-comment\">//循环插入外边框</span><br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=num/<span class=\"hljs-number\">2</span>;i++)&#123;<br>                <span class=\"hljs-keyword\">if</span>(i%<span class=\"hljs-number\">2</span>==<span class=\"hljs-number\">1</span>)&#123;<br>                    insert = outside;<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span>&#123;<br>                    insert = center;<br>                &#125;<br>                <span class=\"hljs-comment\">//插入横向</span><br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=center_index-i;k&lt;=center_index+i;k++)&#123;<br>                    rect[center_index-i][k]=insert;<br>                    rect[center_index+i][k]=insert;<br>                &#125;<br>                <span class=\"hljs-comment\">//插入纵向</span><br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=center_index-i+<span class=\"hljs-number\">1</span>;k&lt;=center_index+i<span class=\"hljs-number\">-1</span>;k++)&#123;<br>                    rect[k][center_index-i]=insert;<br>                    rect[k][center_index+i]=insert;<br>                &#125;<br>                <span class=\"hljs-comment\">//去除四角</span><br>                rect[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>                rect[<span class=\"hljs-number\">0</span>][num<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>                rect[num<span class=\"hljs-number\">-1</span>][<span class=\"hljs-number\">0</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>                rect[num<span class=\"hljs-number\">-1</span>][num<span class=\"hljs-number\">-1</span>]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">//输出图案</span><br>            <span class=\"hljs-keyword\">if</span>(count==<span class=\"hljs-number\">0</span>)&#123;<br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)&#123;<br>                    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;num;j++)&#123;<br>                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,rect[i][j]);<br>                    &#125;<br>                    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>                    count=<span class=\"hljs-number\">1</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span>&#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)&#123;<br>                    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;num;j++)&#123;<br>                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,rect[i][j]);<br>                    &#125;<br>                    count=<span class=\"hljs-number\">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题26-今天的第几天\"><a class=\"markdownIt-Anchor\" href=\"#例题26-今天的第几天\"></a> 例题2.6 今天的第几天？</h2>\n<p><a href=\"http://t.cn/E9jXK5A\">题目链接</a></p>\n<p>P.S:注意CPP中的二维数组创建方法</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//二维数组的定义</span><br><span class=\"hljs-type\">int</span> day_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>                     &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;&#125;;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">is_leap_year</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>||(year%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span>&amp;&amp;year%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>))&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//二维数组的定义</span><br><span class=\"hljs-type\">int</span> day_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;&#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>                     &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;&#125;;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">bool</span> leap_year;<br>    <span class=\"hljs-type\">int</span> year,month,day;<br>    <span class=\"hljs-type\">int</span> total_days=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d&quot;</span>,&amp;year,&amp;month,&amp;day)!=EOF)<br>    &#123;<br>        leap_year=<span class=\"hljs-built_in\">is_leap_year</span>(year);<br>        <span class=\"hljs-keyword\">if</span>(leap_year==<span class=\"hljs-literal\">false</span>)&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;month;i++)&#123;<br>                total_days+=day_list[<span class=\"hljs-number\">0</span>][i];<br>            &#125;<br>            total_days+=day;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,total_days);<br>            total_days=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;month;i++)&#123;<br>                total_days+=day_list[<span class=\"hljs-number\">1</span>][i];<br>            &#125;<br>            total_days+=day;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,total_days);<br>            total_days=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题29-剩下的树\"><a class=\"markdownIt-Anchor\" href=\"#例题29-剩下的树\"></a> 例题2.9 剩下的树</h2>\n<p><a href=\"http://t.cn/E9ufYo5\">题目链接</a></p>\n<p>P.S:采用指针偏移初始化的方法能够提高一直循环的效率。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//使用指针移动方式初始化数组，提高效率</span><br>    <span class=\"hljs-type\">bool</span> remove_list[<span class=\"hljs-number\">10001</span>];<br>    <span class=\"hljs-type\">bool</span>* p = remove_list;  <span class=\"hljs-comment\">// 指向数组首元素的指针</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10001</span>; i++)<br>    &#123;<br>        *p = <span class=\"hljs-literal\">true</span>;<br>        p++;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> total,num;<br>    <span class=\"hljs-type\">int</span> total_remove=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span> index_1,index_2;<br>    <span class=\"hljs-comment\">//使用指针移动方式初始化数组，提高效率</span><br>    <span class=\"hljs-type\">bool</span> remove_list[<span class=\"hljs-number\">10001</span>];<br>    <span class=\"hljs-type\">bool</span>* p = remove_list;  <span class=\"hljs-comment\">// 指向数组首元素的指针</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10001</span>; i++)<br>    &#123;<br>        *p = <span class=\"hljs-literal\">true</span>;<br>        p++;<br>    &#125;<br><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;total,&amp;num);<br><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;index_1,&amp;index_2);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=index_1;j&lt;=index_2;j++)<br>        &#123;<br>            remove_list[j]=<span class=\"hljs-literal\">false</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=total;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(remove_list[i])<br>        &#123;<br>            total_remove++;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,total_remove);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题210-手机键盘\"><a class=\"markdownIt-Anchor\" href=\"#例题210-手机键盘\"></a> 例题2.10 手机键盘</h2>\n<p><a href=\"http://t.cn/E9ulcIc\">题目链接</a></p>\n<ul>\n<li>可以先将按键次数记录在一个数组中，每当遇到一个字母，直接访问数组便可得到该字母的按键次数。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">string arr[<span class=\"hljs-number\">8</span>]=&#123;<span class=\"hljs-string\">&quot;abc&quot;</span>,<span class=\"hljs-string\">&quot;def&quot;</span>,<span class=\"hljs-string\">&quot;ghi&quot;</span>,<span class=\"hljs-string\">&quot;jkl&quot;</span>,<span class=\"hljs-string\">&quot;mno&quot;</span>,<span class=\"hljs-string\">&quot;pqrs&quot;</span>,<span class=\"hljs-string\">&quot;tuv&quot;</span>,<span class=\"hljs-string\">&quot;wxyz&quot;</span>&#125;;<br><span class=\"hljs-type\">int</span> keytab[<span class=\"hljs-number\">26</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<br>                <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>判断两个字母是否属于同一个按键：如果两个字母同属一个按键，那么字母本身的间距就等于他们按键次数的差。反之，如果不相等，则这两个字母必定属于不同的按键。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//判断在一个按键之内</span><br>            <span class=\"hljs-keyword\">if</span>(i!=<span class=\"hljs-number\">0</span>&amp;&amp;str[i]-str[i<span class=\"hljs-number\">-1</span>]==keytab[str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>]-keytab[str[i<span class=\"hljs-number\">-1</span>]-<span class=\"hljs-string\">&#x27;a&#x27;</span>])<br>            &#123;<br>                time+=<span class=\"hljs-number\">2</span>;<br>            &#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>应当了解和掌握C++中关于<code>string</code>类型的用法。</li>\n</ul>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br>string arr[<span class=\"hljs-number\">8</span>]=&#123;<span class=\"hljs-string\">&quot;abc&quot;</span>,<span class=\"hljs-string\">&quot;def&quot;</span>,<span class=\"hljs-string\">&quot;ghi&quot;</span>,<span class=\"hljs-string\">&quot;jkl&quot;</span>,<span class=\"hljs-string\">&quot;mno&quot;</span>,<span class=\"hljs-string\">&quot;pqrs&quot;</span>,<span class=\"hljs-string\">&quot;tuv&quot;</span>,<span class=\"hljs-string\">&quot;wxyz&quot;</span>&#125;;<br><span class=\"hljs-type\">int</span> keytab[<span class=\"hljs-number\">26</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<br>                <span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str;<br>    <span class=\"hljs-keyword\">while</span>(cin&gt;&gt;str)<br>    &#123;<br>        <span class=\"hljs-type\">int</span> time=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;str.<span class=\"hljs-built_in\">size</span>();i++)<br>        &#123;<br>            time+=keytab[str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>];<br>            <span class=\"hljs-comment\">//判断在一个按键之内</span><br>            <span class=\"hljs-keyword\">if</span>(i!=<span class=\"hljs-number\">0</span>&amp;&amp;str[i]-str[i<span class=\"hljs-number\">-1</span>]==keytab[str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>]-keytab[str[i<span class=\"hljs-number\">-1</span>]-<span class=\"hljs-string\">&#x27;a&#x27;</span>])<br>            &#123;<br>                time+=<span class=\"hljs-number\">2</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,time);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题32-成绩排序\"><a class=\"markdownIt-Anchor\" href=\"#例题32-成绩排序\"></a> 例题3.2 成绩排序</h2>\n<p><a href=\"http://t.cn/E9d3ysv\">题目链接</a></p>\n<ul>\n<li>遇到一组基本类型数据时，可以将其封装为一个结构体或类进行处理。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//定义一个结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">student</span>&#123;<br>    <span class=\"hljs-type\">int</span> number;<br>    <span class=\"hljs-type\">int</span> score;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>对于新的排序规则，具有以下准则，当比较函数的返回值为true时，表示第一个参数将会排在第二个参数的前面。<code>sort</code>不填写默认为<strong>升序方式</strong>。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student x,student y)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x.score==y.score)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.number&lt;y.number;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.score&lt;y.score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//定义一个结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">student</span>&#123;<br>    <span class=\"hljs-type\">int</span> number;<br>    <span class=\"hljs-type\">int</span> score;<br>&#125;;<br><br>student arr[<span class=\"hljs-number\">101</span>];<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(student x,student y)</span></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(x.score==y.score)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.number&lt;y.number;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> x.score&lt;y.score;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num)!=EOF)<br>    &#123;<br>        <span class=\"hljs-comment\">//赋值</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;arr[i].number,&amp;arr[i].score);<br>        &#125;<br>        <span class=\"hljs-built_in\">sort</span>(arr,arr+num,cmp);<br>        <span class=\"hljs-comment\">//输出结果</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>,arr[i].number,arr[i].score);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"例题35-查找\"><a class=\"markdownIt-Anchor\" href=\"#例题35-查找\"></a> 例题3.5 查找</h2>\n<p><a href=\"http://t.cn/E9g8aaR\">题目链接</a></p>\n<ul>\n<li>二分查找法必须熟练掌握（采用升序）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//二分查找法(升序)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">BinaySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> target)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> left=<span class=\"hljs-number\">0</span>,right=n<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-type\">int</span> middle;<br>    <span class=\"hljs-keyword\">while</span>(left&lt;=right)&#123;<br>        middle=left+(right-left)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span>(target&lt;arr[middle])<br>        &#123;<br>            right=middle<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&gt;arr[middle])<br>        &#123;<br>            left=middle+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//找到了</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//没有找到</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>完整的程序如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">int</span> arr[<span class=\"hljs-number\">101</span>];<br><br><span class=\"hljs-comment\">//二分查找法(升序)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">BinaySearch</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> target)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> left=<span class=\"hljs-number\">0</span>,right=n<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-type\">int</span> middle;<br>    <span class=\"hljs-keyword\">while</span>(left&lt;=right)&#123;<br>        middle=left+(right-left)/<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-keyword\">if</span>(target&lt;arr[middle])<br>        &#123;<br>            right=middle<span class=\"hljs-number\">-1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(target&gt;arr[middle])<br>        &#123;<br>            left=middle+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span>&#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//找到了</span><br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//没有找到</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-type\">int</span> num,target;<br>    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n)!=EOF)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;arr[i]);<br>        &#125;<br>        <span class=\"hljs-built_in\">sort</span>(arr,arr+n);<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;num;j++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;target);<br>            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">BinaySearch</span>(n,target))<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;YES\\n&quot;</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;NO\\n&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"第四章-字符串处理\"><a class=\"markdownIt-Anchor\" href=\"#第四章-字符串处理\"></a> 第四章 字符串处理</h2>\n<h3 id=\"string中的元素操作\"><a class=\"markdownIt-Anchor\" href=\"#string中的元素操作\"></a> string中的元素操作</h3>\n<p>string中的常用元素操作包括：</p>\n<ul>\n<li>在任意位置插入元素的insert()</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str=<span class=\"hljs-string\">&quot;hello world&quot;</span>;<br>    str.<span class=\"hljs-built_in\">insert</span>(str.<span class=\"hljs-built_in\">size</span>(),<span class=\"hljs-string\">&quot; and you!&quot;</span>);<br>    cout&lt;&lt;str&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">hello world <span class=\"hljs-keyword\">and</span> you!<br></code></pre></td></tr></table></figure>\n<ul>\n<li>在任意位置删除元素的erase()</li>\n</ul>\n<p>括号内第一个数字是起始下标，第二个数字是偏移。不加第二个数字则为从起始一直擦除到最后。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str=<span class=\"hljs-string\">&quot;hello world and you!&quot;</span>;<br>    str.<span class=\"hljs-built_in\">erase</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">12</span>);<br>    cout&lt;&lt;str&lt;&lt;endl;<br>    string str2=<span class=\"hljs-string\">&quot;hello world and you!&quot;</span>;<br>    str2.<span class=\"hljs-built_in\">erase</span>(<span class=\"hljs-number\">7</span>);<br>    cout&lt;&lt;str2&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">and</span> you!<br>hello w<br></code></pre></td></tr></table></figure>\n<ul>\n<li>将字符串中所有的内容直接清空的clear()</li>\n</ul>\n<h3 id=\"string中的运算符\"><a class=\"markdownIt-Anchor\" href=\"#string中的运算符\"></a> string中的运算符</h3>\n<ul>\n<li>string类型的字符串可以通过&quot;+“和”+=&quot;来将两个或者多个字符串拼接成一个更长的字符串</li>\n<li>string类型按照字典序进行比较</li>\n</ul>\n<p>在数学中，字典或词典顺序（也称为词汇顺序，字典顺序，字母顺序或词典顺序）是基于字母顺序排列的单词按字母顺序排列的方法,如abcdefg…也称为字典序。字典序最最小：指的是顺序最小和字符串的长度无关。如d和abcd比较，d&gt;a, 然后直接结束比较。abcd为最小字典序。在ab 和 abc 比较，前两个字符一样，然后abc字符串长。ab为最小字典序。</p>\n<h3 id=\"string中的常用函数\"><a class=\"markdownIt-Anchor\" href=\"#string中的常用函数\"></a> string中的常用函数</h3>\n<ul>\n<li>c++中find() 函数与string::npos参数</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//统计ACSII码值在(0-127)中不同字符的个数 </span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\tstring str;<br>\t<span class=\"hljs-type\">int</span> num = <span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-built_in\">getline</span>(cin, str);<br>\t<span class=\"hljs-comment\">//int m;</span><br>\t<span class=\"hljs-comment\">//m = str.size();</span><br>\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">128</span>; i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-built_in\">find</span>(i) != string::npos)<br>\t\t\tnum++;<br>\t&#125;<br>\tcout &lt;&lt; num;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>c++中返回字符串子串函数substr()</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;bits/stdc++.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    string str=<span class=\"hljs-string\">&quot;hello world and you!&quot;</span>;<br>    string str2=str.<span class=\"hljs-built_in\">substr</span>(<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>);<br>    cout&lt;&lt;str2&lt;&lt;endl;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"Web开发","date":"2022-12-22T09:00:00.000Z","excerpt":"HTML、程序设计、Web","_content":"# Web开发\n\n## Flask\n\nFlask框架为了方便书写标签，用户把返回给浏览器的字符串写入到文件里，再由flask框架读取文件。\n\n## HTML\n\n### 头部信息\n\n#### 浏览器标签页的标题\n\n```html\n <title>文档标题</title>\n```\n\n#### 返回字符串的编码方式\n\n```html\n <meta charset=\"UTF-8\">\n```\n\n### body信息\n\n#### 标题\n\n一级标题，随着数字变化标题级数变化\n\n```html\n <h1>first</h1>\n```\n\n### div和span\n\n```html\n<div>\n内容\n</div>\n\n<span>\n内容\n</span>\n```\n\n* div中的内容占用一整行，块级标签\n* span，自己多大占多少，内联标签\n\n### 超链接\n\n跳转到我的博客，target=\"_blank\"加入是新生成一个标签页\n\na标签无法直接添加宽度和高度\n\n```html\n<a href=\"https://chuiyugin.github.io/\" target=\"_blank\">我的博客</a>\n```\n\n### 图片\n\n```html\n<img src=\"图片地址\" style=\"width: 10% ; height: 20%\" />\n```\n\n### 嵌套\n\n```HTML\n<a href=\"https://chuiyugin.github.io/\" target=\"_blank\">\n  <img style=\"width: 50%\" src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png\" />\n</a>\n```\n\n### 列表标签\n\n无序号列表\n\n```html\n<ul>\n  <li>列表1</li>\n  <li>列表2</li>\n  <li>列表3</li>\n</ul>\n```\n\n带序号列表\n\n```html\n<ol>\n  <li>列表1</li>\n  <li>列表2</li>\n  <li>列表3</li>\n</ol>\n```\n\n### 表格\n\n```html\n<table> \n  <thead>\n     <tr>  \n         <th> ID </th>    \n         <th> 姓名 </th>     \n         <th> 年龄 </th>    \n      </tr>\n  </thead>\n    \n  <tbody>\n     <tr>  \n         <td>10</td>   \n         <td>fcs</td>     \n         <td>21</td>       \n     </tr>\n     <tr>  \n         <td>10</td>   \n         <td>xyj</td>     \n         <td>21</td>       \n      </tr>\n      <tr>  \n         <td>10</td>   \n         <td>shy</td>    \n         <td>21</td>       \n      </tr>\n  </tbody>\n    \n</table>\n```\n\n### Input系列\n\n文本输入\n\n```html\n<input type=\"text\">\n```\n\n密码输入\n\n```html\n<input type=\"password\">\n```\n\n选择文件\n\n```html\n<input type=\"file\">\n```\n\n单选框\n\n```html\n<input type=\"radio\" name=\"n1\">男\n<input type=\"radio\" name=\"n1\">女\n```\n\n复选框\n\n```html\n<input type=\"checkbox\">\n```\n\n按钮\n\n```html\n<input type=\"buton\" value=\"提交\">  --->普通按钮\n<input type=\"submit\" value=\"提交\"> --->提交表单\n```\n\n下拉框\n\n```html\n<select>\n    <option>北京</option>\n    <option>上海</option>\n    <option>深圳</option>\n    <option>广州</option>\n</select>\n```\n\n多行文本\n\n```html\n<textarea rows=\"3\"> </textarea>\n```\n\n## 请求\n\n### GET请求\n\n现象：跳转，向后台传入数据会拼接在URL上。\n\n* GET请求的数据会在URL上体现。\n\n```python\n@app.route(\"/do/reg\",methods=['GET'])\ndef do_register():\n    #1.接收到的数据\n    print(request.args)\n    #给用户返回结果\n    return \"注册成功\"\n```\n\n### POST请求\n\n现象：提交数据不在URL中，体现在请求体中。\n\n```python\n@app.route(\"/post/reg\",methods=['POST'])\ndef post_register():\n    #1.接收到的数据\n    print(request.form)\n    user = request.form.get(\"user\")\n    psw = request.form.get(\"psw\")\n    print(user)\n    print(psw)\n    #给用户返回结果\n    return \"注册成功\"\n```\n\n\n\n### 提交数据\n\nform标签包裹要提交的数据标签\n\n* 提交方式：method=\"get\"或者method=\"post\"\n* 提交的地址：action=\"/xx/xx/xxx\"\n* 在form标签里必须要有submit标签\n* Input系列标签必须要加name，提交时能够解析对应的名字，而且只有Input的内容才会提交\n\n```html\n<h1>注册界面</h1>\n        <form method=\"post\" action=\"/post/reg\">\n              <div>\n                 用户名：<input type=\"text\" name=\"user\"/>\n              </div>\n              <div>\n                 密码： <input type=\"password\" name=\"psw\"/>\n              </div>\n            \n              <div>\n                 <input type=\"submit\" />\n              </div>\n            \n        </form>\n```\n\n## CSS样式\n\n### Demo\n\n```css\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>用户注册</title>\n        <link rel=\"stylesheet\" href=\"/static/commons.css\">\n        <style>\n            .c1{\n                color:green;\n            }\n\n            .c2{\n                height:50px;\n            }\n\n        </style>\n\n    </head>\n    <body>\n\n    <h1 class=\"bl\">注册界面</h1>\n        <form method=\"post\" action=\"/post/reg\">\n              <div class=\"c2\">\n                 用户名：<input type=\"text\" name=\"user\"/>\n              </div>\n\n              <div class=\"c2\">\n                 密码： <input type=\"password\" name=\"psw\"/>\n              </div>\n     <div>\n        <input type=\"submit\" />\n      </div>\n        </form>\n    </body>\n    </html>\n```\n\n* 放在head部位用css样式。\n\n### 选择器\n\n* ID选择器\n\n```css\n#标识名{\n        属性:属性值;\n        属性:属性值;\n        }\n```\n\n* 类选择器（用的最多）\n\n  ```css\n  .类名{\n          属性:属性值;\n          属性:属性值;\n          }\n  ```\n\n* 标签选择器\n\n```css\n标签名{\n   color:red;\n}\n```\n\n* 属性选择器\n\n```css\ninput[type='text']{\n  border: 1px solid red;\n}\n\n.v1[xx=\"123\"]{\n    color:gold;\n}\n```\n\n* 后代选择器\n\n先找到包含yy这个类的部分，再将yy内部含有li标签的都变为这个样式。（子子孙孙）\n\n```css\n.yy li{\n   color:red;\n}\n```\n\n只找子代\n\n```css\n.yy>li{\n   color:red;\n}\n```\n\n### 样式\n\n#### 高度和宽度\n\n```css\n.c1{\n   height:300px\n   width:500px\n}\n```\n\n* 宽度支持百分比，高度不支持。\n* 行内标签：默认无效\n* 块级标签：默认有效\n\n#### 块级和行内标签\n\n* display: inline-block;\n* 具有行内和块级特性\n\n```css\n.c3{\n                display: inline-block;\n                height:100px;\n                width:300px;\n                border: 1px solid red;\n            }\n```\n\n**注意：**\n\ndisplay: inline;强制行内\n\ndisplay: block;强制块级\n\n#### 字体和颜色\n\n```css\n.bl{\n    color:deepskyblue;\n    font-size: 59px;\n    font-weight: 400;\n    font-family:  Microsoft Yahei;\n}\n```\n\n#### 文字对齐方式\n\n```css\n.test{\n         height:100px;\n         width:300px;\n         border: 1px solid red;\n\n         text-align: center;/*水平方向居中*/\n         line-height: 100px;/*垂直方向居中 和高度像素值相同*/\n}\n```\n\n### 浮动\n\n将span内容移动到右边显示\n\n```css\n<div>\n        <span>测试1</span>\n        <span style=\"float:right\">测试2</span>\n    </div>\n```\n\n浮动之后，块级标签不会占用一整行，但是浮动之后无法破坏了文档流，**需要在最后加入**\n\n```css\n<div style=\"clear: both;\"></div>\n```\n\n### 内边距\n\n边框内部设置内边距,不加左右就是全部\n\n```css\npadding-top:20px;\npadding-left:20px;\npadding-right:20px;\npadding-bottom:20px;\npadding:20px;\n```\n\n###  外边距\n\nmargin-top、margin-left、margin-right、margin-bottom\n\n```css\n<div style=\"height:200px;background-color:dodgerblue;\"></div>\n<div style=\"height:200px;background-color:red;margin-top:20px;\"></div>\n```\n\n### 去除外部间距\n\n```css\n<style>\n     body{\n           margin:0 ;\n         }\n</style>    \n```\n\n### 居中\n\n* 内容居中：text-align: center;\n\n```css\n<div style=\"width:200px;text-align: center;\"></div>\n```\n\n* 区域居中：自己要有宽度加\n\n```css\nmargin-left:auto;\nmargin-right:auto;\n```\n\n### 鼠标放上去变色\n\n主要： ：hover\n\n```css\n.sub-header .menu_list a:hover{\n    color: #ff6700;\n}\n```\n\n### position定位\n\n#### fixed\n\n固定在窗口的某个位置\n\n```css\n.back{\n    position: fixed;\n    width: 60px;\n    height:60px;\n    border: 1px solid red;\n    right:0;\n    top:500px;\n}\n```\n\n#### relative和absolute\n\n加入absolute的相对relative的位置变化。\n\n## BootStrap\n\n### 导航\n\n [组件 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)](https://v3.bootcss.com/components/#nav) \n\n### 栅格\n\n [全局 CSS 样式 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)](https://v3.bootcss.com/css/#grid) \n\n* 把整体分为12格\n\n* 分类\n\n  * 响应式\n\n    ```css\n    .col-sm-  750px\n    .col-md-  970px\n    .col-lg-  1170px\n    ```\n\n  * 非响应式\n\n     .col-xs- \n\n    ```css\n     <div class=\"col-xs-6\" style=\"background-color: #2aabd2\">  1</div>\n      <div class=\"col-xs-10\" style=\"background-color: #5cb85c\"> 2 </div>\n    ```\n\n* 列偏移\n\ncol-xs-offset-2\n\n```css\n<div class=\"col-xs-offset-2 col-xs-6\" style=\"background-color: #2aabd2\">  1</div>\n```\n\n### container\n\n```css\n<div class=\"container\">\n<div class=\"col-sm-9\">左边</div>\n<div class=\"col-sm-3\">右边</div>\n</div>\n```\n\n```css\n<div class=\"container-fluid\">\n<div class=\"col-sm-9\">左边</div>\n<div class=\"col-sm-3\">右边</div>\n</div>\n```\n\n### 图标\n\n1.bootsrap\n\n2.font awesome\n\n```css\n<script src=\"https://kit.fontawesome.com/5efd8aed42.js\" crossorigin=\"anonymous\"></script>\n```\n\n## JavaScript\n\n是一门编程语言，浏览器是JavaScript语言的解释器。\n\n```css\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script src=\"static/plugins/bootstrap-3.4.1/js/bootstrap.min.js\"></script>\n```\n\n### DOM和BOM\n\n相当于语言的内置模块\n\n#### DOM\n\nDOM，就是一个模块，模块可以对HTML页面中的标签进行操作\n\n```javascript\n//创建标签<div></div>\nvar tag = document.createElementById(\"div\");\n\n//在标签中添加内容\n tag.innerText = \"123\";\n```\n\n```javascript\n//根据ID获取标签\nvar tag = document.getElementById(\"xx\");\n\n//在标签中添加内容\n tag.innerText = \"123\";\n```\n\n```html\n<ul id=\"city\">\n    <!--    <li>北京</li> -->\n    <!--    <li>上海</li> -->\n    <!--    <li>深圳</li> -->\n</ul>\n\n<script type=\"text/javascript\">\nvar cityList = [\"北京\", \"上海\", \"深圳\", \"广州\"];\n    for (var idx in cityList) {\n        var text = cityList[idx];\n\n        //创建li标签\n        var tag = document.createElement(\"li\");\n        //在标签中添加内容\n        tag.innerText = text;\n        //添加到id=city的标签中(DOM)\n        var parent = document.getElementById(\"city\");\n        parent.append(tag);\n    }\n</script>\n```\n\n\n\n### jQuery\n\n相当于第三方模块\n\n### 变量\n\n```javascript\nvar name = \"小明\";//变量\nconsole.log(name);//打印\n```\n\n### 字符串类型\n\n```javascript\nvar name = \"小明\";//变量\nvar name = String(\"小明\");//变量\n```\n\n```javascript\n//常见功能\nvar name = \"中国联通\";\n\nvar v1 = name.length;//获取长度\nvar v2 = name[0];//获得第一个\"中”\nvar v3 = name.trim();//去除空白\nvar v4 = name.substring(0,2);//前取后不取，获得\"中国\"\n```\n\n### 数组\n\n定义\n\n```javascript\nvar v1 = [11,22,33,44];\nvar v2 = Array([11,22,33,44]);\n```\n\n操作\n\n```javascript\nvar v1 = [11,22,33,44];\n//获取值\nvar v2 = v1[0];\n//修改值\nv1[0] = \"小明\";\n//在尾部添加值\nv1.push(\"联通\");\n//在前面插入值\nv1.unshift(\"移动\");\n//指定位置插入值\n//格式：v1.splice(索引位置,0,元素);\nv1.splice(1,0,\"元素\");//[11,\"中国\",22,33,44]\n\n//删除\nv1.pop()//尾部删除\nv1.shift()//头部删除\nv1.splice(索引位置,1);//删除索引位置的元素\nv1.splice(2,1);//删除索引位置2的元素 [11,33,44]\n```\n\n### 循环\n\n```javascript\nvar v1 = [11,22,33,44];\n\nfor(var idx in v1){\n    \n   //idx=0/1/2/3    data=v1[idx] \n}\n```\n\n```javascript\nvar v1 = [11,22,33,44];\n\nfor(var i=0;i<v1.length;i++){\n    \n   //i=0/1/2/3    data=v1[idx] \n}\n```\n\n### 动态标签\n\n```javascript\nvar cityList=[\"北京\",\"上海\",\"深圳\",\"广州\"];\n    for(var idx in cityList){\n        var text = cityList[idx];\n\n        //创建li标签\n        var tag = document.createElement(\"li\");\n        //在标签中添加内容\n        tag.innerText = text;\n        //添加到id=city的标签中(DOM)\n        var parent = document.getElementById(\"city\");\n        parent.append(tag);\n    }\n```\n\n### 对象（字典）\n\n```javascript\ninfo = {\n    name:\"小明\"\n    age:18\n}\n```\n\n#### 对对象进行操作\n\n```javascript\ninfo.age  //获取内容\ninfo.name=\"小红\";  //修改内容\ndelete info[\"name\"];  //删除内容\n```\n\n#### 对对象进行循环\n\n```javascript\nfor(var key in info){\n   //key=name/age     data=info[key]\n}\n```\n\n### 动态表格\n\n```javascript\nvar dataList = [\n        {id: 1, name: \"小明\", age: 19},\n        {id: 2, name: \"小白\", age: 19},\n        {id: 3, name: \"小红\", age: 19},\n        {id: 4, name: \"小军\", age: 19},\n        {id: 5, name: \"小李\", age: 19}\n    ];\n\n    for (idx in dataList) {\n        var info = dataList[idx];\n        var tr = document.createElement(\"tr\");\n        for (var key in info) {\n            var my_text = info[key];\n            var td = document.createElement(\"td\")\n            td.innerText = my_text;\n            tr.appendChild(td);\n        }\n\n        var body_tag = document.getElementById(\"body\");\n        body_tag.append(tr);\n    }\n```\n\n### 条件语句\n\n```javascript\nif( 条件 ) {\n\n}else if{\n\n}else{\n    \n}\n```\n\n### 函数\n\n```javascript\nfunction func(){\n   ...\n}\n\n//执行函数\n   func();\n```\n\n### 事件绑定\n\n```html\n<input type=\"text\" placeholder=\"请输入内容\" id=\"my_txt\">\n<input type=\"button\" value=\"点击添加\"  onclick=\"addCityInfo()\">\n<ul id=\"my_city\">\n\n</ul>\n\n\n<script type=\"text/javascript\">\nfunction addCityInfo() {\n        //找到标签\n        var txtTag = document.getElementById(\"my_txt\");\n        //获取用户输入的内容\n        var new_string = txtTag.value;\n        //判断用户输入是否为空\n        if (new_string.length > 0) {\n            //创建新的标签\n            var newTag = document.createElement(\"li\");\n            newTag.innerText = new_string;\n            //标签添加到ul中\n            var parentTag = document.getElementById(\"my_city\");\n            parentTag.appendChild(newTag);\n            //将输入框内容清空\n            txtTag.value = \"\";\n        }else{\n            alert(\"输入不能为空！\");\n        }\n    }\n</script>\n```\n\n## JQuery\n\n### 初识JQuery\n\n```html\n<h1 id=\"JQ_test\"> JQuery测试 </h1>\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script type=\"text/javascript\">\n  \n    //利用JQuery实现某些功能\n    //找到id=\"\"的标签并修改\n    $(\"#JQ_test\").text(\"JQ修改\");\n    \n</script>\n```\n\n### 直接寻找标签\n\n* ID选择器\n\n```html\n<h1 id=\"JQ_test\"> JQuery测试 </h1>\n```\n\n```javascript\n $(\"#JQ_test\")\n```\n\n* 样式选择器\n\n```html\n<h1 class=\"c1\">中国联通</h1>\n```\n\n```javascript\n$(\".c1\")\n```\n\n* 标签选择器\n\n```html\n<h1>中国联通</h1>\n```\n\n```javascript\n$(\".c1\")\n```\n\n* 层级选择器\n\n```html\n<div class=\"c1\">\n    <span class=\"c2\">\n        <a href=\"#\"></a>\n    </span>\n</div>\n```\n\n```javascript\n$(\".c1.c2 a\")\n```\n\n* 多选择器\n\n选择多个标签同时操作  \n\n```html\n<div class=\"c1\">\n    <span class=\"c2\"></span>\n    <a href=\"#\"></a>\n</div>\n<ul id=\"u1\">\n    <li></li>\n</ul>\n<p class=\"p1\"></p>\n```\n\n```javascript\n$(\".c1,#u1,p\")\n```\n\n* 属性选择器\n\n```html\n<input type=\"text\" name=\"n1\">\n<input type=\"text\" name=\"n2\">\n```\n\n```javascript\n$(\"input[name='n1']\")\n```\n\n### 间接寻找标签\n\n* 找到上一个兄弟\n\n```html\n<div>\n    <div>北京</div>\n    <div id=\"c1\">上海</div>\n    <div>广州</div>\n    <div>深圳</div>\n</div>\n```\n\n```javascript\n$(\"#c1\").prev()\t//上一个\n$(\"#c1\")\n$(\"#c1\").next()\t//下一个\n$(\"#c1\").next().next()\t//下下一个\n$(\"#c1\").siblings()\t//所有同级标签（兄弟）\n```\n\n* 找父子\n\n```html\n<div>\n    <div>\n        <div id=\"c1\">上海</div>\n    </div>\n</div>\n\n<div id=\"c2\">\n    <div>老大</div>\n    <div class=\"d2\">老二</div>\n</div>\n```\n\n```javascript\n$(\"#c1\").parent()\t//父亲\n$(\"#c1\").parent().parent()\t//祖父\n$(\"#c2\").children()\t//所有孩子\n$(\"#c2\").children(\".d2\")\t//所有的孩子中寻找class=d2的孩子\n$(\"#c2\").find(\".d2\")\t//去寻找class=d2的所有子孙\n$(\"#c2\").find(\"div\")\t//去寻找div标签的所有子孙\n```\n\n### 案例：菜单切换\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>菜单</title>\n\n    <style>\n        .menu {\n            width: 200px;\n            height: 800px;\n            border: 1px solid #2aabd2;\n        }\n\n        .menu .header {\n            cursor: pointer; /* 鼠标放上去变成手 */\n            padding: 10px 5px;\n            border-bottom: 1px dotted #ddd;\n            background: linear-gradient(#37ff00, #16a5d3);\n        }\n\n        .item a {\n            display: block;\n            text-decoration: none;\n            padding: 5px 5px;\n            border-bottom: 1px dotted #ddd;\n        }\n\n        .hide {\n            display: none;\n        }\n    </style>\n\n</head>\n<body>\n\n<div class=\"menu\">\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">北京</div>\n        <div class=\"content hide\">\n            <a href=\"\">海淀区</a>\n            <a href=\"\">朝阳区</a>\n            <a href=\"\">大兴区</a>\n            <a href=\"\">昌平区</a>\n        </div>\n    </div>\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">上海</div>\n        <div class=\"content hide\">\n            <a href=\"\">宝山区</a>\n            <a href=\"\">普陀区</a>\n            <a href=\"\">浦东新区</a>\n            <a href=\"\">青浦区</a>\n        </div>\n    </div>\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">北京2</div>\n        <div class=\"content hide\">\n            <a href=\"\">海淀区</a>\n            <a href=\"\">朝阳区</a>\n            <a href=\"\">大兴区</a>\n            <a href=\"\">昌平区</a>\n        </div>\n    </div>\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">上海2</div>\n        <div class=\"content hide\">\n            <a href=\"\">宝山区</a>\n            <a href=\"\">普陀区</a>\n            <a href=\"\">浦东新区</a>\n            <a href=\"\">青浦区</a>\n        </div>\n    </div>\n</div>\n\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script type=\"text/javascript\">\n\n\n    //方法一：大家都可以展示\n    // let i = 0;\n    // function clickme(self) {\n    //     if (i++ % 2 === 0) {\n    //         $(self).next().removeClass(\"hide\");\n    //     } else {\n    //         $(self).next().addClass(\"hide\");\n    //     }\n    // }\n    //方法二：大家都可以展示\n    // function clickme(self) {\n    //     var hasHide = $(self).next().hasClass(\"hide\")\n    //     if (hasHide) {\n    //         $(self).next().removeClass(\"hide\");\n    //     } else {\n    //         $(self).next().addClass(\"hide\");\n    //     }\n    // }\n\n    //只展示自己，隐藏别人\n    function clickme(self) {\n        //把自己的内容展示出来\n        $(self).next().removeClass(\"hide\");\n        $(self).parent().siblings().find(\".content\").addClass(\"hide\");\n    }\n\n</script>\n</body>\n</html>\n```\n\n### 操作样式\n\n* addClass\n\n* removeClass\n\n* hasClass\n\n  \n### 值的操作\n\n```html\n<div id=\"c1\">内容</div>\n```\n\n```javascript\n$(\"#c1\").text() //获取内容\n$(\"#c1\").text(\"测试\") //设置内容\n```\n\n```html\n<input type=\"text\" id=\"c2\">\n```\n\n```javascript\n$(\"c2\").val()   //获取用户输入值\n$(\"c2\").val(\"txt\")   //设置用户输入值\n```\n\n### 案例：动态创建数据\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>动态创建数据</title>\n</head>\n<body>\n<input type=\"text\" id=\"txtUser\" placeholder=\"用户名\">\n<input type=\"text\" id=\"txtEmail\" placeholder=\"邮箱\">\n<input type=\"button\" value=\"提交\" onclick=\"getinfo()\">\n<ul id=\"view\">\n\n</ul>\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script>\n    function getinfo() {\n        let username = $(\"#txtUser\").val();   //设置用户输入值\n        let email = $(\"#txtEmail\").val();\n        const datastr = username + '-' + email;\n        //创建li标签\n        let lusr = $(\"<li>\").text(datastr);\n        //把新创建的li标签添加到ul里面\n        $(\"#view\").append(lusr);\n\n    }\n</script>\n\n</body>\n</html>\n```\n\n### 事件\n\n 绑定事件直接用 `$(\"\")` 获取到标签直接定义事件即可 。\n\n```javascript\n$(\".item\").children().click(function () {\n        $(this).text(\"hello python\")\n        $(this).remove()\n    })\n```\n\n###  案例：设置和删除标签\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>设置和删除标签</title>\n    <style>\n        .item a {\n            display: block;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n<div class=\"item\">\n    <p href=\"\">1</p>\n    <p href=\"\">2</p>\n    <p href=\"\">3</p>\n</div>\n\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script>\n    let a = $(\".item\").children();\n    $(a).click(function () {\n        $(this).text(\"hello python\");//设置标签\n        $(this).remove();//删除标签\n    })\n</script>\n</body>\n</html>\n```\n\n* 当页面框架加载完成之后执行代码(封装在$function之内):\n\n```html\n<script>\n    $(function () {\n            $(\".item\").children().click(function () {\n            $(this).text(\"hello python\");\n        })\n    })\n</script>\n```\n\n### 案例：表格操作\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<table border=\"1\">\n    <thead>\n    <tr>\n        <th>ID</th>\n        <th>姓名</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Alleyf</td>\n        <td>\n            <input type=\"button\" value=\"删除\" class=\"delete\">\n        </td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>CHUIYUGIN</td>\n        <td>\n            <input type=\"button\" value=\"删除\" class=\"delete\">\n        </td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>小明</td>\n        <td>\n            <input type=\"button\" value=\"删除\" class=\"delete\">\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script>\n    $(function () {\n        // 找到所有class为delete的标签\n        $(\".delete\").click(function () {\n            // 删除当前行\n            $(this).parent().parent().remove();\n        })\n    })\n</script>\n</body>\n</html>\n```\n\n## 前端整合\n\n* HTNL\n* CSS\n* JavaScript\n* Bootstrap(动态效果依赖jQuery)\n\n### 案例：添加数据页面\n\n>人员信息录入功能，需要提供用户信息：\n>\n>用户名、年龄、薪资、部门、入职时间（*）\n>\n>*  时间的选择：不能输入；选择：（插件）datetimepicker \n>\n>- 下载插件\n>- 应用插件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>添加数据页面</title>\n    <!--生产版本-->\n    <link rel=\"stylesheet\" href=\"static/plugins/bootstrap-3.4.1/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"static/plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css\">\n</head>\n<body>\n<div class=\"container\" style=\"margin-top: 20px\">\n    <form class=\"form-horizontal\">\n        <div class=\"row clearfix\">\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">姓名</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"姓名\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">年龄</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"年龄\">\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row clearfix\">\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">薪资</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"薪资\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">部门</label>\n                    <div class=\"col-sm-10\">\n                        <select class=\"form-control\" name=\"brabch\" id=\"inputbranch\">\n                            <option value=\"\">IT部门</option>\n                            <option value=\"\">销售部门</option>\n                            <option value=\"\">人事资源管理部门</option>\n                            <option value=\"\">售后部门</option>\n                            <option value=\"\">运营部门</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row clearfix\">\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">入职日期</label>\n                    <div class=\"col-sm-10\">\n                        <input id=\"dt\" type=\"email\" class=\"form-control\" placeholder=\"入职日期\">\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <div class=\"col-sm-offset-6 col-sm-10\">\n                <button type=\"submit\" class=\"btn btn-primary\">提 交</button>\n            </div>\n        </div>\n    </form>\n</div>\n\n\n<!--JS代码块位置-->\n<script src=\"https://kit.fontawesome.com/5efd8aed42.js\" crossorigin=\"anonymous\"></script>\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script src=\"static/plugins/bootstrap-3.4.1/js/bootstrap.js\"></script>\n<script src=\"static/plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.js\"></script>\n<script src=\"static/plugins/bootstrap-datetimepicker-master/js/locales/bootstrap-datetimepicker.zh-CN.js\"></script>\n<script type=\"text/javascript\">\n\n    $(function(){\n        $('#dt').datetimepicker({\n            fomat: 'yyyy-mm-dd',\n            startDate: '0',\n            language: 'zh-CN',\n            autoclose: true\n        });\n    });\n\n</script>\n</body>\n</html>\n```\n\n## MySQL\n\n### 进入MySQL：cmd进入终端\n\n```sql\nmysql -u root -p1234\n```\n\n### 查看\n\n```sql\nshow databases;\n```\n\n### 退出\n\n```sql\nexit;\n```\n\n### 基本数据类型\n\n| 类型         | 用途                                                         |\n| :----------- | ------------------------------------------------------------ |\n| tinyint      | 短整形()，相当于java的short，有符号(默认)，取值范围：-128~127；无符号(用关键词unsigned指定)，取值范围：0~255 |\n| **int**      | 整形，相当于java的int                                        |\n| bigint       | 长整形，相当于java的long                                     |\n| float        | 单精度浮点型                                                 |\n| **double**   | 双精度浮点型                                                 |\n| decimal      | 准确的小数值，eg：wage decimal(m,n) –总共m位数(负号不算)，其中小数点后有n位，m~~max~~=65，n~~max~~=30. |\n| **datatime** | 日期类型，YYYY-MM-DD HH:MM:SS(2022-12-09 21:03:00)，dt转为字符串类型显示**（dt.strftime(“%Y-%m-%d %H:%M:%S”)）** |\n| data         | 日期类型（无时分秒）YYYY-MM-DD                               |\n| timestamp    | 日期类型（可存储时间戳）                                     |\n| **char**     | 定长字符，固定字符长度，最大255个字符，速度快，常存储：手机号，邮箱，加密后的密码等 |\n| **varchar**  | 不定长字符，有多少存多少，最大65535个字节，节省空间，长度是动态变化的。 |\n| text         | 大文字，用于存储很长的字符内容，可存储65535个字符，例如：文章，新闻等。 |\n| mediumtext   | 中等文本，最多存储16777215（2^24^-1)个字符                   |\n| longtext     | 长文本，最多存储4294967295（4GB）（2^32^-1)个字符            |\n| blob         | 字节数据类型，存储图片、音频等文件                           |\n\n### 数据库管理(文件夹)\n\n*  查看当前已有数据库 \n\n```sql\nshow databases;\n```\n\n*  创建数据库 (文件夹)\n\n```sql\ncreate database 数据库名；\ncreate database 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\n```\n\n* 删除数据库\n\n```sql\ndrop database 数据库名；\n```\n\n* 进入数据库\n\n```sql\nuse 数据库名；\n```\n\n*  查看当前数据库下的所有数据表 \n\n```sql\nshow tables；\n```\n\n### 数据表管理\n\n* 创建表\n\n```sql\ncreate table 表名(\n\t字段名 类型，\n    字段名 类型，\n    ···\n    字段名 类型\n)default charset=utf8；\n```\n\n```sql\ncreate table 表名(\n\t字段名 类型 not null auto_increment primary key，\t--主键（不允许为空，不允许重复）自增特性\n    字段名 类型 not null，--不允许为空\n    字段名 类型 default 3，--插入数据时，默认值为3，当不插入值时默认为3\n    ···\n    字段名 类型 null \t--允许为空（默认）\n)default charset=utf8；\n```\n\n> ==主键一般用于表示当前行的编号==（类似于身份证）。 \n\n* 示例\n\n```sql\ncreate table medocsys(\n\tid int not null auto_increment primary key,\n\tname varchar(20) not null,\n    pwd varchar(15) not null\n) default charset=utf8;\n```\n\n* 查看创建表的信息\n\n```sql\ndesc 表名\n```\n\n* 插入数据\n\n```sql\n单条插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据);\n批量插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据),(数据1，数据2，···，数据),···(数据1，数据2，···，数据);\n```\n\n### 数据行操作\n\n#### 新增数据\n\n```sql\n单条插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据);\n批量插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据),(数据1，数据2，···，数据),···(数据1，数据2，···，数据);\n```\n\n#### 删除数据\n\n```sql\ndelete from 表名；--删除所有数据\ndelete from 表名 where 条件；--删除满足条件的数据\n```\n\n>  delete from tb1 where id>=10 or name=”yugin”; \n\n#### 修改数据\n\n```sql\nupdate 表名 set 字段名=值；\nupdate 表名 set 字段名1=值，字段名2=值；\nupdate 表名 set 字段名=值 where 条件；\neg：update tb1 set name=\"yugin\", pwd=pwd+\"10\";\n```\n\n#### 查询数据\n\n```sql\n查询表所有数据\nselect * from 表名；\n查询对应字段的数据\nselect 字段名1，字段名2 from 表名；\n条件查询数据\nselect * from 表名 where id > 3；\n```\n\n### 小结\n\n一般开发：\n\n- 创建数据库\n- 创建数据表\n\n>  ==提前用工具创建好== \n\n* 创建数据库\n\n```sql\ncreate database unicom DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\n```\n\n* 创建表\n\n```sql\ncreate table admin(\n\tid int not null auto_increment primary key,\n    username varchar(16) not null,\n    password varchar(64) not null,\n    mobile char(11) not null \t\n)default charset=utf8;\n```\n\n### Python操作MySQL\n\n* 创建数据\n\n> 在进行增删改的时候需要执行`commit`，不然数据库没有数据 \n\n```python\nimport pymysql\n\n#1.连接上本地mysql\nconn = pymysql.connect(host=\"127.0.0.1\",port=3306,user=\"root\",password=\"1234\",charset=\"utf8\",db=\"unicom\")\ncursor = conn.cursor(cursor=pymysql.cursors.DictCursor)\n\n#发送指令\nsql=\"insert into admin(username,password,mobile) values(%(name)s,%(psw)s,%(mobile)s)\"\ncursor.execute(sql,{\"name\":'alleyf2',\"psw\":'alleyf1234',\"mobile\":'18127896898'})\nconn.commit()\n\n#关闭\ncursor.close()\nconn.close()\n```\n\n* 查询数据\n\n> 在进行查询的时候不需要执行`commit`，但是要执行`fetchall/fetchone`获取到返回的数据 \n>\n> 返回列表的形式，列表里面包含字典。\n\n```python\nimport pymysql\n\n\n#1.连接上本地mysql\nconn = pymysql.connect(host=\"127.0.0.1\",port=3306,user=\"root\",password=\"1234\",charset=\"utf8\",db=\"unicom\")\ncursor = conn.cursor(cursor=pymysql.cursors.DictCursor)\n\n#发送指令\nsql=\"select * from admin\"\n\n# 获取返回的所有数据（包含字典成员的列表）\ncursor.execute(sql)\ndata_list = cursor.fetchall()\n\n# 获取返回的第一条数据\ncursor.execute(sql)\nmy_first = cursor.fetchone()\n\nfor row_dict in data_list:\n print(row_dict)\n\nprint(my_first)\n\n#关闭\ncursor.close()\nconn.close()\n```\n\n## Django\n\n### 默认文件介绍\n\n```stylus\n│  manage.py\t【项目的管理，启动项目，创建app，数据管理】【不能动】【常常用】\n│\n├─.idea\n│  │  .gitignore\n│  │  misc.xml\n│  │  modules.xml\n│  │  mysite.iml\n│  │  workspace.xml\n│  │\n│  └─inspectionProfiles\n│          profiles_settings.xml\n│\n├─mysite\n│  │  settings.py\t【项目配置文件】【常修改】\n│  │  urls.py\t【URL和函数的对应关系】【常修改】\n│  │  asgi.py\t【接收网络请求】【不能动】\n│  │  wsgi.py\t【接收网络请求】【不能动】\n│  │  __init__.py\n│  │\n│  └─__pycache__\n│          settings.cpython-310.pyc\n│          __init__.cpython-310.pyc\n│\n└─__pycache__\n        manage.cpython-310.pyc\n```\n\n### APP\n\n#### 创建APP\n\n```python\npython manage.py startapp [名字]\n```\n\n```css\n-项目\n\t-app，用户管理【表结构、函数、HTML模板、CSS等独立】\n\t-app，订单管理【表结构、函数、HTML模板、CSS等独立】\n\t-app，后台管理【表结构、函数、HTML模板、CSS等独立】\n   \t-app，网站管理【表结构、函数、HTML模板、CSS等独立】\n   \t-app，API    【表结构、函数、HTML模板、CSS等独立】\n   \t···\n```\n\n```visual basic\n├─app1\n│  │  admin.py\t【固定，不用动】django默认提供了admin后台管理\n│  │  apps.py\t【固定，不用动】app启动类\n│  │  models.py\t【重要，模型层】对数据库操作\n│  │  tests.py\t【固定，不用动】单元测试\n│  │  views.py\t【重要，视图层】前后端交互处理请求返回结果的函数\n│  │  __init__.py\n│  │\n│  └─migrations\t【固定，不用动】数据库变更记录\n│          __init__.py\n```\n\n### 快速上手\n\n*  **确保app已注册【setting.py】** \n\n```python\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app01.apps.App01Config\"          #注册app01\n```\n\n*  **编写URL和视图函数对应关系【urls.py】** \n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\nfrom app01 import views\n\nurlpatterns = [\n    # path(\"admin/\", admin.site.urls),\n    path(\"index/\", views.index),\n]\n```\n\n*  **编写视图函数【view.py】** \n\n```python\nfrom django.shortcuts import render, HttpResponse\n\n\n# Create your views here.\ndef index(request):\n    return HttpResponse(\"欢迎访问YUGIN Blog\")\n```\n\n*  **启动Django项目** \n\n```python\n1.命令行启动\npython manage.py runserver\n2.pycharm启动\n直接点击pycharm里的启动按钮\n```\n\n### 编写页面\n\n#### 引入HTML\n\n```python\ndef user_list(request):\n    # 根据app注册顺序,去每个app目录下的templates中寻找对应的html\n    return render(request, \"user_list.html\")\n```\n\n#### 静态文件\n\n一般开发过程中：\n\n- 图片\n- CSS\n- Js\n\n都会当做静态文件处理！\n\n* 一般在app目录下放置static文件夹\n\n* 注意Django一般引入静态文件：\n\n```html\n{% load static %}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户列表</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<h1>用户列表</h1>\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n### 模板语法\n\n*  本质上：在html中写一些占位符，由数据对这些占位符进行替换和处理。 \n\n*  注意：取单独值的时候用`.`进行索引 \n\n**views.py**\n\n```python\ndef tpl(request):\n    name = \"小明\"\n    roles = [\"管理员\", \"CEO\", \"保安\"]\n    user_info = {\"name\": \"郭志\", \"salary\": \"101000\", \"role\": \"CTO\"}\n\n    data_list = [\n        {\"name\": \"郭志\", \"salary\": \"101000\", \"role\": \"CTO\"},\n        {\"name\": \"赵健\", \"salary\": \"1010\", \"role\": \"保安\"},\n        {\"name\": \"芦荟\", \"salary\": \"201000\", \"role\": \"CEO\"}\n    ]\n\n    return render(request, \"tpl.html\", {\"n1\": name, \"n2\": roles, \"n3\": user_info,\"n4\":data_list})\n```\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>模板语法的学习</title>\n</head>\n<body>\n\n<h1>模板语法的学习</h1>\n\n{#字符串#}\n<div>{{ n1 }}</div>\n\n{#列表#}\n<div>{{ n2.0 }}</div>\n<div>{{ n2.1 }}</div>\n<div>{{ n2.2 }}</div>\n\n{#循环列表#}\n<div>\n    {% for item in n2 %}\n     <span>{{ item }}</span>\n\n    {% endfor %}\n</div>\n\n{#字典#}\n<span>{{ n3.name }}</span>\n<span>{{ n3.salary }}</span>\n<span>{{ n3.role }}</span>\n\n{#循环字典#}\n<ul>\n    {% for key,valuse in n3.items %}\n     <li>{{ key }} = {{ valuse }}</li>\n\n    {% endfor %}\n</ul>\n\n{#列表套字典#}\n<ul>\n    <li>{{ n4.1 }}</li>\n    <li>{{ n4.1.name }}</li>\n</ul>\n\n{#列表套字典加循环#}\n<ul>\n    {% for item in n4 %}\n     <li>{{ item.name }} = {{item.salary }}</li>\n    {% endfor %}\n</ul>\n\n{#条件语句#}\n{% if n1 == \"小明\"%}\n    <h1>是小明</h1>\n{% else %}\n    <h1>不是小明</h1>\n{% endif %}\n\n</body>\n</html>\n```\n\n#### 案例：热搜展示\n\n**views.py**\n\n```python\ndef news(request):\n    url = \"http://api.54dh.cn/API/search/rs/?type=weibo\"\n    dic = {'user-agent': 'Mozilla/5.0'}\n    r = requests.post(url, headers=dic)\n    r.raise_for_status()\n    r.encoding = r.apparent_encoding\n    info = {'info': r.json()}\n    return render(request, \"news.html\", info)\n```\n\n**HTML**\n\n```html\n{% load static %}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>热搜展示</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n            font-family: 微软雅黑, serif;\n            letter-spacing: .05em;\n        }\n\n        .container {\n            margin: 5px auto;\n            background-image: linear-gradient(to right, #a997a4, #b3e8ee);\n        }\n\n    </style>\n\n</head>\n<body>\n\n<div class=\"row container\">\n    <h1 class=\"col-xs-12 text-center\">热搜展示---{{ info.time }}</h1>\n\n\n    <div class=\" text-center\">\n        {% for item in info.data %}\n            <a href=\"{{ item.link }}\">{{ item.title }}--{{ item.heat }}</a>\n            <br>\n        {% endfor %}\n\n\n    </div>\n</div>\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n### 请求和响应\n\n*  **通过此方式可以获取到get请求中的参数和post请求中的数据** \n\n```python\ndef something(request):\n    if request.method == \"GET\":\n        # 获取get请求中携带的参数\n        parameters = request.GET\n        # 获取post请求中提交的数据\n        data = request.POST\n        print(parameters)\n        print(data)\n        return HttpResponse(parameters['name'])\n```\n\n*  **重定向：返回重定向的网址给浏览器，浏览器去请求该网址** \n\n```python\nreturn redirect(\"https://www.baidu.com\")\n```\n\n#### 案例：用户登录\n\n**views.py**\n\n```python\nfrom django.shortcuts import render, HttpResponse,redirect\nimport requests\n\ndef login(request):\n    if request.method == \"GET\":\n       return render(request, \"login.html\")\n    #POST请求\n    else:\n        username=request.POST.get(\"user\")\n        pwd = request.POST.get(\"pwd\")\n        #print(request.POST)\n        if username == 'root' and pwd == '1234':\n             return redirect(\"http://chuiyugin.github.io\")\n        else:\n             return render(request, \"login.html\",{\"error_msg\":\"用户名或密码错误\"})\n```\n\n**HTML**\n\n* 注意： 在html表单（form）中加上`{% csrf_token %}` \n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户登录</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<form method=\"post\" action=\"/login/\">\n    {#提交表单一定要添加#}\n    {% csrf_token %}\n\n    <input type=\"text\" name=\"user\" placeholder=\"用户名\">\n    <input type=\"password\" name=\"pwd\" placeholder=\"密码\">\n    <input type=\"submit\" value=\"提交\">\n    <div class=\"row container\">\n       <h2 class=\"col-xs-12 \" style=\"color:darkred;\">{{ error_msg }}</h2>\n    </div>\n</form>\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n### 数据库操作\n\n> Django使用ORM框架实现对数据库的操作，安装`mysqlclient`第三方库辅助操作 \n\n```powershell\npip install mysqlclient\n```\n\n#### ORM\n\n> ORM可以帮助我们完成两件事：\n>\n> 1. 创建、修改、删除数据库中的表（不用写SQL语句）【无法创建数据库】\n> 2. 操作表中的数据\n\n####  配置setting.py文件\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql', #连接MYSQL数据库\n        'NAME': 'day15',  # 数据库名\n        'USER': 'root',  # 数据库用户名\n        'PASSWORD': '1234',  # 数据库密码\n        'HOST': '127.0.0.1',  # 数据库主机地址\n        'PORT': 3306,  # 数据库连接端口号\n    }\n}\n```\n\n#### Django操作表\n\n##### 创建表\n\n* 在models.py中创建表类 \n\n```python\nfrom django.db import models\n\n# Create your models here.\nclass Userinfo(models.Model):\n    name = models.CharField(max_length=32)\n    password = models.CharField(max_length=64)\n    mobile = models.CharField(max_length=11)\n    email = models.CharField(max_length=32)\n    age = models.IntegerField()\n```\n\n* 在终端执行命令创建该表\n\n注意：**1.终端路径在项目名目录下。2.app需要已经注册。3.表名是app的名称加上类名**\n\n```shell\npython manage.py makemigrations\npython manage.py migrate\n```\n\n##### 删除表\n\n 直接将`models.py`里面的类注释掉即可 \n\n```python\nclass Userinfo(models.Model):\n#     name = models.CharField(max_length=32)\n#     password = models.CharField(max_length=64)\n#     mobile = models.CharField(max_length=11)\n#     email = models.CharField(max_length=32)\n#     age = models.IntegerField()\n#     docpath = models.CharField(max_length=64, default=\"\")\n#     imgpath = models.CharField(max_length=64, null=True, blank=True)\n```\n\n##### 修改表\n\n* 删除字段（直接注释掉） \n\n```python\n#删除imgpath字段\nclass Userinfo(models.Model):\n    name = models.CharField(max_length=32)\n    password = models.CharField(max_length=64)\n    mobile = models.CharField(max_length=11)\n    email = models.CharField(max_length=32)\n    age = models.IntegerField()\n    docpath = models.CharField(max_length=64, default=\"\")\n    #imgpath = models.CharField(max_length=64, null=True, blank=True)\n```\n\n*  修改字段 \n\n```python\n#修改max_length属性\ndocpath = models.CharField(max_length=128, default=\"\")#将max_length直接改为128\n```\n\n*  添加字段 \n\n>在表中新建字段（列）时，由于已存在的字段可能已有数据，所以新增列必须要指定新增列对应的数据：\n>\n>1. 手动输入一个值（全部行都为输入的值）\n>2. 设置默认值(default后面的值)\n\n```python\ndocpath = models.CharField(default=\"\")\ndocpath = models.CharField(default=2)\n```\n\n3.  允许为空 \n\n```python\nimgpath = models.CharField(null=True, blank=True)\n```\n\n##### 操作表中的数据\n\n1. 添加数据( models.py )\n\n```python\n# ***************添加数据***************\n# 本质：insert into app1_userinfo(name,password,mobile,email) values(\"yugin\",\"123456\",\"18127896898\",\"1726123207@qq.com\")\nUserinfo.objects.create(name=\"yugin\", password=\"123456\", mobile=\"18127896898\", email=\"1726123207@qq.com\")\n```\n\n在views.py中引入models.py中的类即可进行添加数据：\n\n* models.py\n\n```python\nclass Department(models.Model):\n    title = models.CharField(max_length=16)\n```\n\n* views.py\n\n```python\nfrom app01.models import Department,Userinfo\ndef orm(request):\n\n    #测试orm操作表中的数据\n    Department.objects.create(title=\"销售部门\")\n    Department.objects.create(title=\"IT部门\")\n    Department.objects.create(title=\"运营部门\")\n\n    return HttpResponse(\"成功\")\n```\n\n2. 更新数据\n\n```python\n# 条件更新\nUserinfo.objects.filter(id=2).update(password='a123456')\n# 全更新\nUserinfo.objects.all().update(mobile='13125018525')\n```\n\n3. 删除数据\n\n```python\n# 条件删除\nUserinfo.objects.filter(id=2).delete()\n# 删除表中全部数据\nUserinfo.objects.all().delete()\n```\n\n4. 查询数据\n\n```python\n#条件查询\n\t#查询结果不唯一时，返回包含对象的queryset(列表)：\n    \tuserinfo = Userinfo.objects.filter(id=1) \t\n\t#已知查询结果唯一时利用first()获取第一条数据，返回对象：\n    \tuserobj = Userinfo.objects.filter(id=1).first()\n#全查询\n\t#返回包含对象的列表：\n\t\tuserinfo = Userinfo.objects.all()\n```\n\n```python\ndef user_list(request):\n    userlist = []\n    userinfo = Userinfo.objects.all()\n    for info in userinfo:\n        datadic = {'id': info.id, 'name': info.name, 'password': info.password, 'mobile': info.mobile, 'email': info.email}\n        userlist.append(datadic)\n    print(userlist)\n    return render(request, \"user_list.html\", {'userlist': userlist})\n```\n\n#### 案例：用户管理\n\n要求：\n\n1. 展示用户列表\n   - url路由\n   - view函数\n     1. 获取用户信息\n     2. HTML渲染\n2. 添加用户\n   - post请求\n   - 添加用户\n   - HTML渲染\n3. 删除用户\n   - a标签传递用户id参数get请求\n   - 筛选删除指定用户\n\n* 展示数据\n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户管理系统</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<h1>INFO列表</h1>\n\n<a href=\"/info/add/\">点此添加数据</a>\n\n<table border=\"1\">\n    <thead>\n    <tr>\n        <th>ID</th>\n        <th>姓名</th>\n        <th>密码</th>\n        <th>年龄</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for obj in data_list %}\n        <tr>\n            <td>{{ obj.id }}</td>\n            <td>{{ obj.name }}</td>\n            <td>{{ obj.password }}</td>\n            <td>{{ obj.age }}</td>\n            <td>\n                <a href=\"/info/delete/?nid={{ obj.id }}\">删除</a>\n            </td>\n        </tr>\n    {% endfor %}\n    </tbody>\n\n</table>\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n* 添加数据\n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户管理系统</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<h1>添加用户</h1>\n<form method=\"post\" action=\"/info/add/\">\n\n    {% csrf_token %}\n\n    <input type=\"text\" name=\"user\" placeholder=\"用户名\">\n    <input type=\"text\" name=\"pwd\" placeholder=\"密码\">\n    <input type=\"text\" name=\"age\" placeholder=\"年龄\">\n    <input type=\"submit\"  value=\"提 交\">\n\n</form>\n\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n* views.py\n\n```python\nfrom django.shortcuts import render, HttpResponse,redirect\nimport requests\nfrom app01.models import Department,Userinfo\ndef orm(request):\n\n    #测试orm操作表中的数据\n    Department.objects.create(title=\"销售部门\")\n    Department.objects.create(title=\"IT部门\")\n    Department.objects.create(title=\"运营部门\")\n\n    return HttpResponse(\"成功\")\n\nfrom app01.models import Department,Userinfo\ndef info_list(request):\n\n    #获取数据库中所有的用户信息\n    #[对象,对象]\n    data_list = Userinfo.objects.all()\n\n    #渲染，返回给用户\n    return render(request, \"info_list.html\",{\"data_list\":data_list})\n\ndef info_add(request):\n\n    if request.method == \"GET\":\n       return render(request, \"info_add.html\")\n\n    #获取到用户提交的数据\n    user = request.POST.get(\"user\")\n    pwd = request.POST.get(\"pwd\")\n    age = request.POST.get(\"age\")\n\n\n\n    #添加到数据库\n    Userinfo.objects.create(name=user,password=pwd,age=age)\n\n    return redirect(\"/info/list/\")\n\n\ndef info_delete(request):\n    nid = request.GET.get(\"nid\")\n    Userinfo.objects.filter(id=nid).delete()\n\n    return redirect(\"/info/list/\")\n```\n\n## Django开发\n\n### 设置表结构\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\nclass Department(models.Model):\n    \"\"\"部门表\"\"\"\n    title = models.CharField(verbose_name=\"标题\", max_length=32)\n\n#关联部门表\nclass UserInfo(models.Model):\n    \"\"\"员工表\"\"\"\n    name = models.CharField(verbose_name=\"姓名\", max_length=16)\n    password = models.CharField(verbose_name=\"密码\", max_length=16)\n    age = models.IntegerField(verbose_name=\"年龄\")\n    account = models.DecimalField(verbose_name=\"账户余额\", max_digits=10, decimal_places=2, default=0)\n    create_time = models.DateTimeField(verbose_name=\"入职时间\")\n    # Dejango中对字段值域的约束\n    gender_choices = (\n        (1, '男'),\n        (2, '女'),\n    )\n    gender = models.SmallIntegerField(verbose_name='性别', choices=gender_choices)\n    # 无约束\n    # depart_id = models.BigIntegerField(verbose_name='部门ID')\n    # 有约束\n    #    -to:与之关联的表\n    #    -to.field：与之关联的字段\n    # 1.Django自动\n    #     -将关联字段名添加到被关联的字段的后面(depart_id)\n    # 2.外键表(部门表)的关联字段被删除\n    # -2.1级联删除\n    depart = models.ForeignKey(to='Department', to_field='id', on_delete=models.CASCADE)\n    # -2.1置空\n    # depart = models.ForeignKey(to='Department',to_field='id',null=True,blank=True,on_delete=models.SET_NULL)\n```\n\n### 部门管理\n\n#### 部门列表\n\n>  重要知识点 : ==url中传递动态参数== \n\n```python\n#urls.py\npath(\"depart/<int:nid>/edit/\", views.depart_edit),\n```\n\n```python\n# Create your views here.\ndef depart_list(request):\n    \"\"\"部门列表\"\"\"\n\n    # 去数据库中获取所有的部门信息\n    queryset = models.Department.objects.all()\n\n    return render(request, \"depart_list.html\", {\"queryset\": queryset})\n```\n\n#### 新建部门\n\n```python\ndef depart_add(request):\n    \"\"\"添加部门\"\"\"\n    if request.method == \"GET\":\n        return render(request, \"depart_add.html\")\n    # 获取用户POST提交过来的数据\n    title = request.POST.get(\"title\")\n    #保存到数据库\n    models.Department.objects.create(title=title)\n    #重定向回到部门列表\n    return redirect(\"/depart/list/\")\n```\n\n#### 删除部门\n\n```python\ndef depart_delete(request):\n    \"\"\"删除部门\"\"\"\n    nid = request.GET.get(\"nid\")\n    models.Department.objects.filter(id=nid).delete()\n    return redirect(\"/depart/list/\")\n```\n\n#### 修改部门\n\n>  重要知识点 : ==url中传递动态参数== \n\n```python\n#urls.py\npath(\"depart/<int:nid>/edit/\", views.depart_edit),\n```\n\n```python\ndef depart_edit(request,nid):\n    \"\"\"修改部门\"\"\"\n    if request.method == \"GET\":\n        row_object = models.Department.objects.filter(id=nid).first()\n        return render(request, \"depart_edit.html\",{\"row_object\":row_object})\n    if request.method == \"POST\":\n        title = request.POST.get(\"title\")\n        models.Department.objects.filter(id=nid).update(title=title)\n        # 重定向回到部门列表\n        return redirect(\"/depart/list/\")\n```\n\n### HTML模板继承\n\n> 模板继承可以使父模板的内容复用，子模版直接继承父模板的全部内容并可以覆盖父模板中相应的块。 \n\n**语法—父模板中：**\n\n 1.定义父模板中的块block标签\n\n 2.标识出哪些在子模版中是允许被修改的\n\n 3.block标签：在父模板中定义，可以在子模版中覆盖\n\n```html\n{% block block_name %}\n\t父模板可以被覆盖的内容\n{% endblock blocl_name%}  (**切记一定要写endblock**)\n```\n\n**语法—子模版中：**\n\n 1.继承模板extends标签（**写在模板文件的第一行**）\n\n```html\n{% entends 'layout.html' %}\n```\n\n  2.子模版 重写父模板中的内容块\n\n```html\n{% block block_name %}\n\t子模版用来覆盖父模板中 block_name 块的内容\n{% endblock blocl_name%}  (**切记一定要写endblock**)\n```\n\n#### 实例\n\n* 父模板\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div>\n            <a href=\"/depart/add/\" class=\"btn btn-primary\">新建部门</a>\n        </div>\n\n        <div class=\"panel panel-default\" style=\"margin-top: 20px\">\n            <!-- Default panel contents -->\n            <div class=\"panel-heading\">\n                <span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>\n                部门列表\n            </div>\n\n            <!-- Table -->\n            <table class=\"table\">\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>部门名称</th>\n                    <th>操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for obj in queryset %}\n                    <tr>\n                        <td>{{ obj.id }}</td>\n                        <td>{{ obj.title }}</td>\n                        <td>\n                            <a class=\"btn btn-success btn-xs\" href=\"/depart/{{ obj.id }}/edit/\">编辑</a>\n                            <a class=\"btn btn-danger btn-xs\" href=\"/depart/delete/?nid={{ obj.id }}\">删除</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}\n```\n\n* 继承模板\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div>\n            <a href=\"/depart/add/\" class=\"btn btn-primary\">新建部门</a>\n        </div>\n\n        <div class=\"panel panel-default\" style=\"margin-top: 20px\">\n            <!-- Default panel contents -->\n            <div class=\"panel-heading\">\n                <span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>\n                部门列表\n            </div>\n\n            <!-- Table -->\n            <table class=\"table\">\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>部门名称</th>\n                    <th>操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for obj in queryset %}\n                    <tr>\n                        <td>{{ obj.id }}</td>\n                        <td>{{ obj.title }}</td>\n                        <td>\n                            <a class=\"btn btn-success btn-xs\" href=\"/depart/{{ obj.id }}/edit/\">编辑</a>\n                            <a class=\"btn btn-danger btn-xs\" href=\"/depart/delete/?nid={{ obj.id }}\">删除</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}\n```\n\n### 主题一：用户管理\n\n* 向数据库插入数据\n\n```sql\ninsert into app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) values(\"刘冬\",\"1234\",\"23\",\"100.87\",\"2010-1-11\",\"1\",\"1\");\n\ninsert into app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) values(\"Alleyf\",\"1234\",\"20\",\"9000.87\",\"2012-1-11\",\"1\",\"2\");\n\n\n+--------------+---------------+------+-----+---------+----------------+\n| Field        | Type          | Null | Key | Default | Extra          |\n+--------------+---------------+------+-----+---------+----------------+\n| id           | bigint        | NO   | PRI | NULL    | auto_increment |\n| name         | varchar(16)   | NO   |     | NULL    |                |\n| password     | varchar(64)   | NO   |     | NULL    |                |\n| age          | int           | NO   |     | NULL    |                |\n| account      | decimal(10,2) | NO   |     | NULL    |                |\n| create_time  | datetime(6)   | NO   |     | NULL    |                |\n| gender       | smallint      | NO   |     | NULL    |                |\n| depart_id_id | bigint        | NO   | MUL | NULL    |                |\n+--------------+---------------+------+-----+---------+----------------+\n```\n\n### ModelForm和Form\n\n- 原始方式：不会采用（本质）【麻烦】\n\n  - 没有数据校验\n  - 错误，应该有提示\n\n  - 页面上，每个字段都需要我们重新写一遍，数据冗余\n\n  - 关联的数据，需要手动获取并循环展示在页面中\n\n- Django组件\n\n  1. Form组件（较简便）\n  2. ModelForm组件（最简便）\n\n#### ModelForm示例\n\n* models.py\n\n```python\nclass UserInfo(models.Model):\n    \"\"\" 员工表 \"\"\"\n    name = models.CharField(verbose_name='姓名', max_length=16)\n    password = models.CharField(verbose_name=\"密码\", max_length=64)\n    age = models.IntegerField(verbose_name=\"年龄\")\n    account = models.DecimalField(verbose_name=\"账户余额\", max_digits=10, decimal_places=2, default=0)\n    create_time = models.DateTimeField(verbose_name=\"入职时间\")\n\n    depart_id = models.ForeignKey(to=\"Department\", to_field=\"id\", on_delete=models.CASCADE,verbose_name=\"部门\")\n    # Dejango中对字段值域的约束\n    gender_choices = (\n        (1, '男'),\n        (2, '女'),\n    )\n    gender = models.SmallIntegerField(verbose_name='性别', choices=gender_choices)\n```\n\n* views.py\n\n```python\n# 用户管理\ndef user_list(request):\n    # 获取所有的用户列表\n    queryset = models.UserInfo.objects.all()\n\n    return render(request, \"user_list.html\", {\"queryset\": queryset})\n\n\n# ModelForm\nfrom django import forms\n\n\nclass userInfoForm(forms.ModelForm):\n    class Meta:\n        model = models.UserInfo\n        fields = [\"name\", \"password\", \"age\", \"create_time\", \"gender\", \"depart_id\"]\n        widgets = {\n            # \"name\": forms.TextInput(attrs={\"class\": \"form-control input\"}),\n            # \"password\": forms.PasswordInput(attrs={\"class\": \"form-control input\"}),\n            # \"age\": forms.TextInput(attrs={\"class\": \"form-control input\"}),\n            # \"account\": forms.TextInput(attrs={\"class\": \"form-control input\"}),\n            \"create_time\": forms.DateTimeInput(attrs={\"class\": \" form-control input\", \"type\": \"datetime-local\"}),\n            # \"gender\": forms.Select(attrs={\"class\": \"form-control input\"}),\n            # \"depart\": forms.Select(attrs={\"class\": \"form-control input\"}),\n        }\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # 循环找到所有的字段,给其添加样式\n        for name, field in self.fields.items():\n            # 想让某一个不加\n            if name == \"create_time\":\n                continue\n            field.widget.attrs = {\"class\": \"input form-control\", \"placeholder\": field.label}\n\n\ndef user_add(request):\n    # 添加用户\n    if request.method == \"GET\":\n        form = userInfoForm()\n        return render(request, \"user_add.html\", {\"form\": form})\n    # 用户POST提交数据，数据校验\n    form = userInfoForm(data=request.POST)\n    if form.is_valid():\n      # 如果合法保存到数据库\n      form.save()\n      return redirect(\"/user/list\")\n    else:\n        return render(request, \"user_add.html\",{\"form\": form})\n```\n* user_list.html(未用ModelForm)\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div>\n            <a href=\"/user/add/\" class=\"btn btn-primary\">新建用户</a>\n        </div>\n\n        <div class=\"panel panel-default\" style=\"margin-top: 20px\">\n            <!-- Default panel contents -->\n            <div class=\"panel-heading\">\n                <span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>\n                用户列表\n            </div>\n\n            <!-- Table -->\n            <table class=\"table\">\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>姓名</th>\n                    <th>密码</th>\n                    <th>年龄</th>\n                    <th>余额</th>\n                    <th>入职时间</th>\n                    <th>性别</th>\n                    <th>所属部门</th>\n                    <th>操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for obj in queryset %}\n                    <tr>\n                        <td>{{ obj.id }}</td>\n                        <td>{{ obj.name }}</td>\n                        <td>{{ obj.password }}</td>\n                        <td>{{ obj.age }}</td>\n                        <td>{{ obj.account }}</td>\n                        <td>{{ obj.create_time|date:\"Y-m-d\" }}</td>\n                        <td>{{ obj.get_gender_display }}</td>\n                        <td>{{ obj.depart_id.title }}</td>\n                        <td>\n                            <a class=\"btn btn-success btn-xs\" href=\"/depart/{{ obj.id }}/edit/\">编辑</a>\n                            <a class=\"btn btn-danger btn-xs\" href=\"/depart/delete/?nid={{ obj.id }}\">删除</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}\n```\n* user_add.html(使用ModelForm)\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">新建用户</h3>\n            </div>\n            <div class=\"panel-body\">\n                <form method=\"post\" novalidate>\n                    {% csrf_token %}\n                    {% for field in form %}\n                        <div class=\"form-group\">\n                            <label>{{ field.label }}</label>\n                            {{ field }}\n                         <span style=\"color: #2aabd2\">{{ field.errors.0 }}</span>\n                        </div>\n                    {% endfor %}\n                    <button type=\"submit\" class=\"btn btn-primary\">提 交</button>\n                </form>\n            </div>\n        </div>\n    </div>\n{% endblock %}\n```\n\n* 在配置文件`settings.py`中可以设置语言种类 \n\n```python\n# LANGUAGE_CODE = \"en-us\" 英文\nLANGUAGE_CODE = \"zh-hans\" 中文\n```\n\n### 主题二：靓号管理\n\n靓号管理\n","source":"_posts/Web.md","raw":"---\ntitle: Web开发\ntags: [Web,HTML]\ncategories: [Web]\ndate: 2022-12-22 17:00:00\nexcerpt: HTML、程序设计、Web\n---\n# Web开发\n\n## Flask\n\nFlask框架为了方便书写标签，用户把返回给浏览器的字符串写入到文件里，再由flask框架读取文件。\n\n## HTML\n\n### 头部信息\n\n#### 浏览器标签页的标题\n\n```html\n <title>文档标题</title>\n```\n\n#### 返回字符串的编码方式\n\n```html\n <meta charset=\"UTF-8\">\n```\n\n### body信息\n\n#### 标题\n\n一级标题，随着数字变化标题级数变化\n\n```html\n <h1>first</h1>\n```\n\n### div和span\n\n```html\n<div>\n内容\n</div>\n\n<span>\n内容\n</span>\n```\n\n* div中的内容占用一整行，块级标签\n* span，自己多大占多少，内联标签\n\n### 超链接\n\n跳转到我的博客，target=\"_blank\"加入是新生成一个标签页\n\na标签无法直接添加宽度和高度\n\n```html\n<a href=\"https://chuiyugin.github.io/\" target=\"_blank\">我的博客</a>\n```\n\n### 图片\n\n```html\n<img src=\"图片地址\" style=\"width: 10% ; height: 20%\" />\n```\n\n### 嵌套\n\n```HTML\n<a href=\"https://chuiyugin.github.io/\" target=\"_blank\">\n  <img style=\"width: 50%\" src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png\" />\n</a>\n```\n\n### 列表标签\n\n无序号列表\n\n```html\n<ul>\n  <li>列表1</li>\n  <li>列表2</li>\n  <li>列表3</li>\n</ul>\n```\n\n带序号列表\n\n```html\n<ol>\n  <li>列表1</li>\n  <li>列表2</li>\n  <li>列表3</li>\n</ol>\n```\n\n### 表格\n\n```html\n<table> \n  <thead>\n     <tr>  \n         <th> ID </th>    \n         <th> 姓名 </th>     \n         <th> 年龄 </th>    \n      </tr>\n  </thead>\n    \n  <tbody>\n     <tr>  \n         <td>10</td>   \n         <td>fcs</td>     \n         <td>21</td>       \n     </tr>\n     <tr>  \n         <td>10</td>   \n         <td>xyj</td>     \n         <td>21</td>       \n      </tr>\n      <tr>  \n         <td>10</td>   \n         <td>shy</td>    \n         <td>21</td>       \n      </tr>\n  </tbody>\n    \n</table>\n```\n\n### Input系列\n\n文本输入\n\n```html\n<input type=\"text\">\n```\n\n密码输入\n\n```html\n<input type=\"password\">\n```\n\n选择文件\n\n```html\n<input type=\"file\">\n```\n\n单选框\n\n```html\n<input type=\"radio\" name=\"n1\">男\n<input type=\"radio\" name=\"n1\">女\n```\n\n复选框\n\n```html\n<input type=\"checkbox\">\n```\n\n按钮\n\n```html\n<input type=\"buton\" value=\"提交\">  --->普通按钮\n<input type=\"submit\" value=\"提交\"> --->提交表单\n```\n\n下拉框\n\n```html\n<select>\n    <option>北京</option>\n    <option>上海</option>\n    <option>深圳</option>\n    <option>广州</option>\n</select>\n```\n\n多行文本\n\n```html\n<textarea rows=\"3\"> </textarea>\n```\n\n## 请求\n\n### GET请求\n\n现象：跳转，向后台传入数据会拼接在URL上。\n\n* GET请求的数据会在URL上体现。\n\n```python\n@app.route(\"/do/reg\",methods=['GET'])\ndef do_register():\n    #1.接收到的数据\n    print(request.args)\n    #给用户返回结果\n    return \"注册成功\"\n```\n\n### POST请求\n\n现象：提交数据不在URL中，体现在请求体中。\n\n```python\n@app.route(\"/post/reg\",methods=['POST'])\ndef post_register():\n    #1.接收到的数据\n    print(request.form)\n    user = request.form.get(\"user\")\n    psw = request.form.get(\"psw\")\n    print(user)\n    print(psw)\n    #给用户返回结果\n    return \"注册成功\"\n```\n\n\n\n### 提交数据\n\nform标签包裹要提交的数据标签\n\n* 提交方式：method=\"get\"或者method=\"post\"\n* 提交的地址：action=\"/xx/xx/xxx\"\n* 在form标签里必须要有submit标签\n* Input系列标签必须要加name，提交时能够解析对应的名字，而且只有Input的内容才会提交\n\n```html\n<h1>注册界面</h1>\n        <form method=\"post\" action=\"/post/reg\">\n              <div>\n                 用户名：<input type=\"text\" name=\"user\"/>\n              </div>\n              <div>\n                 密码： <input type=\"password\" name=\"psw\"/>\n              </div>\n            \n              <div>\n                 <input type=\"submit\" />\n              </div>\n            \n        </form>\n```\n\n## CSS样式\n\n### Demo\n\n```css\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>用户注册</title>\n        <link rel=\"stylesheet\" href=\"/static/commons.css\">\n        <style>\n            .c1{\n                color:green;\n            }\n\n            .c2{\n                height:50px;\n            }\n\n        </style>\n\n    </head>\n    <body>\n\n    <h1 class=\"bl\">注册界面</h1>\n        <form method=\"post\" action=\"/post/reg\">\n              <div class=\"c2\">\n                 用户名：<input type=\"text\" name=\"user\"/>\n              </div>\n\n              <div class=\"c2\">\n                 密码： <input type=\"password\" name=\"psw\"/>\n              </div>\n     <div>\n        <input type=\"submit\" />\n      </div>\n        </form>\n    </body>\n    </html>\n```\n\n* 放在head部位用css样式。\n\n### 选择器\n\n* ID选择器\n\n```css\n#标识名{\n        属性:属性值;\n        属性:属性值;\n        }\n```\n\n* 类选择器（用的最多）\n\n  ```css\n  .类名{\n          属性:属性值;\n          属性:属性值;\n          }\n  ```\n\n* 标签选择器\n\n```css\n标签名{\n   color:red;\n}\n```\n\n* 属性选择器\n\n```css\ninput[type='text']{\n  border: 1px solid red;\n}\n\n.v1[xx=\"123\"]{\n    color:gold;\n}\n```\n\n* 后代选择器\n\n先找到包含yy这个类的部分，再将yy内部含有li标签的都变为这个样式。（子子孙孙）\n\n```css\n.yy li{\n   color:red;\n}\n```\n\n只找子代\n\n```css\n.yy>li{\n   color:red;\n}\n```\n\n### 样式\n\n#### 高度和宽度\n\n```css\n.c1{\n   height:300px\n   width:500px\n}\n```\n\n* 宽度支持百分比，高度不支持。\n* 行内标签：默认无效\n* 块级标签：默认有效\n\n#### 块级和行内标签\n\n* display: inline-block;\n* 具有行内和块级特性\n\n```css\n.c3{\n                display: inline-block;\n                height:100px;\n                width:300px;\n                border: 1px solid red;\n            }\n```\n\n**注意：**\n\ndisplay: inline;强制行内\n\ndisplay: block;强制块级\n\n#### 字体和颜色\n\n```css\n.bl{\n    color:deepskyblue;\n    font-size: 59px;\n    font-weight: 400;\n    font-family:  Microsoft Yahei;\n}\n```\n\n#### 文字对齐方式\n\n```css\n.test{\n         height:100px;\n         width:300px;\n         border: 1px solid red;\n\n         text-align: center;/*水平方向居中*/\n         line-height: 100px;/*垂直方向居中 和高度像素值相同*/\n}\n```\n\n### 浮动\n\n将span内容移动到右边显示\n\n```css\n<div>\n        <span>测试1</span>\n        <span style=\"float:right\">测试2</span>\n    </div>\n```\n\n浮动之后，块级标签不会占用一整行，但是浮动之后无法破坏了文档流，**需要在最后加入**\n\n```css\n<div style=\"clear: both;\"></div>\n```\n\n### 内边距\n\n边框内部设置内边距,不加左右就是全部\n\n```css\npadding-top:20px;\npadding-left:20px;\npadding-right:20px;\npadding-bottom:20px;\npadding:20px;\n```\n\n###  外边距\n\nmargin-top、margin-left、margin-right、margin-bottom\n\n```css\n<div style=\"height:200px;background-color:dodgerblue;\"></div>\n<div style=\"height:200px;background-color:red;margin-top:20px;\"></div>\n```\n\n### 去除外部间距\n\n```css\n<style>\n     body{\n           margin:0 ;\n         }\n</style>    \n```\n\n### 居中\n\n* 内容居中：text-align: center;\n\n```css\n<div style=\"width:200px;text-align: center;\"></div>\n```\n\n* 区域居中：自己要有宽度加\n\n```css\nmargin-left:auto;\nmargin-right:auto;\n```\n\n### 鼠标放上去变色\n\n主要： ：hover\n\n```css\n.sub-header .menu_list a:hover{\n    color: #ff6700;\n}\n```\n\n### position定位\n\n#### fixed\n\n固定在窗口的某个位置\n\n```css\n.back{\n    position: fixed;\n    width: 60px;\n    height:60px;\n    border: 1px solid red;\n    right:0;\n    top:500px;\n}\n```\n\n#### relative和absolute\n\n加入absolute的相对relative的位置变化。\n\n## BootStrap\n\n### 导航\n\n [组件 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)](https://v3.bootcss.com/components/#nav) \n\n### 栅格\n\n [全局 CSS 样式 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)](https://v3.bootcss.com/css/#grid) \n\n* 把整体分为12格\n\n* 分类\n\n  * 响应式\n\n    ```css\n    .col-sm-  750px\n    .col-md-  970px\n    .col-lg-  1170px\n    ```\n\n  * 非响应式\n\n     .col-xs- \n\n    ```css\n     <div class=\"col-xs-6\" style=\"background-color: #2aabd2\">  1</div>\n      <div class=\"col-xs-10\" style=\"background-color: #5cb85c\"> 2 </div>\n    ```\n\n* 列偏移\n\ncol-xs-offset-2\n\n```css\n<div class=\"col-xs-offset-2 col-xs-6\" style=\"background-color: #2aabd2\">  1</div>\n```\n\n### container\n\n```css\n<div class=\"container\">\n<div class=\"col-sm-9\">左边</div>\n<div class=\"col-sm-3\">右边</div>\n</div>\n```\n\n```css\n<div class=\"container-fluid\">\n<div class=\"col-sm-9\">左边</div>\n<div class=\"col-sm-3\">右边</div>\n</div>\n```\n\n### 图标\n\n1.bootsrap\n\n2.font awesome\n\n```css\n<script src=\"https://kit.fontawesome.com/5efd8aed42.js\" crossorigin=\"anonymous\"></script>\n```\n\n## JavaScript\n\n是一门编程语言，浏览器是JavaScript语言的解释器。\n\n```css\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script src=\"static/plugins/bootstrap-3.4.1/js/bootstrap.min.js\"></script>\n```\n\n### DOM和BOM\n\n相当于语言的内置模块\n\n#### DOM\n\nDOM，就是一个模块，模块可以对HTML页面中的标签进行操作\n\n```javascript\n//创建标签<div></div>\nvar tag = document.createElementById(\"div\");\n\n//在标签中添加内容\n tag.innerText = \"123\";\n```\n\n```javascript\n//根据ID获取标签\nvar tag = document.getElementById(\"xx\");\n\n//在标签中添加内容\n tag.innerText = \"123\";\n```\n\n```html\n<ul id=\"city\">\n    <!--    <li>北京</li> -->\n    <!--    <li>上海</li> -->\n    <!--    <li>深圳</li> -->\n</ul>\n\n<script type=\"text/javascript\">\nvar cityList = [\"北京\", \"上海\", \"深圳\", \"广州\"];\n    for (var idx in cityList) {\n        var text = cityList[idx];\n\n        //创建li标签\n        var tag = document.createElement(\"li\");\n        //在标签中添加内容\n        tag.innerText = text;\n        //添加到id=city的标签中(DOM)\n        var parent = document.getElementById(\"city\");\n        parent.append(tag);\n    }\n</script>\n```\n\n\n\n### jQuery\n\n相当于第三方模块\n\n### 变量\n\n```javascript\nvar name = \"小明\";//变量\nconsole.log(name);//打印\n```\n\n### 字符串类型\n\n```javascript\nvar name = \"小明\";//变量\nvar name = String(\"小明\");//变量\n```\n\n```javascript\n//常见功能\nvar name = \"中国联通\";\n\nvar v1 = name.length;//获取长度\nvar v2 = name[0];//获得第一个\"中”\nvar v3 = name.trim();//去除空白\nvar v4 = name.substring(0,2);//前取后不取，获得\"中国\"\n```\n\n### 数组\n\n定义\n\n```javascript\nvar v1 = [11,22,33,44];\nvar v2 = Array([11,22,33,44]);\n```\n\n操作\n\n```javascript\nvar v1 = [11,22,33,44];\n//获取值\nvar v2 = v1[0];\n//修改值\nv1[0] = \"小明\";\n//在尾部添加值\nv1.push(\"联通\");\n//在前面插入值\nv1.unshift(\"移动\");\n//指定位置插入值\n//格式：v1.splice(索引位置,0,元素);\nv1.splice(1,0,\"元素\");//[11,\"中国\",22,33,44]\n\n//删除\nv1.pop()//尾部删除\nv1.shift()//头部删除\nv1.splice(索引位置,1);//删除索引位置的元素\nv1.splice(2,1);//删除索引位置2的元素 [11,33,44]\n```\n\n### 循环\n\n```javascript\nvar v1 = [11,22,33,44];\n\nfor(var idx in v1){\n    \n   //idx=0/1/2/3    data=v1[idx] \n}\n```\n\n```javascript\nvar v1 = [11,22,33,44];\n\nfor(var i=0;i<v1.length;i++){\n    \n   //i=0/1/2/3    data=v1[idx] \n}\n```\n\n### 动态标签\n\n```javascript\nvar cityList=[\"北京\",\"上海\",\"深圳\",\"广州\"];\n    for(var idx in cityList){\n        var text = cityList[idx];\n\n        //创建li标签\n        var tag = document.createElement(\"li\");\n        //在标签中添加内容\n        tag.innerText = text;\n        //添加到id=city的标签中(DOM)\n        var parent = document.getElementById(\"city\");\n        parent.append(tag);\n    }\n```\n\n### 对象（字典）\n\n```javascript\ninfo = {\n    name:\"小明\"\n    age:18\n}\n```\n\n#### 对对象进行操作\n\n```javascript\ninfo.age  //获取内容\ninfo.name=\"小红\";  //修改内容\ndelete info[\"name\"];  //删除内容\n```\n\n#### 对对象进行循环\n\n```javascript\nfor(var key in info){\n   //key=name/age     data=info[key]\n}\n```\n\n### 动态表格\n\n```javascript\nvar dataList = [\n        {id: 1, name: \"小明\", age: 19},\n        {id: 2, name: \"小白\", age: 19},\n        {id: 3, name: \"小红\", age: 19},\n        {id: 4, name: \"小军\", age: 19},\n        {id: 5, name: \"小李\", age: 19}\n    ];\n\n    for (idx in dataList) {\n        var info = dataList[idx];\n        var tr = document.createElement(\"tr\");\n        for (var key in info) {\n            var my_text = info[key];\n            var td = document.createElement(\"td\")\n            td.innerText = my_text;\n            tr.appendChild(td);\n        }\n\n        var body_tag = document.getElementById(\"body\");\n        body_tag.append(tr);\n    }\n```\n\n### 条件语句\n\n```javascript\nif( 条件 ) {\n\n}else if{\n\n}else{\n    \n}\n```\n\n### 函数\n\n```javascript\nfunction func(){\n   ...\n}\n\n//执行函数\n   func();\n```\n\n### 事件绑定\n\n```html\n<input type=\"text\" placeholder=\"请输入内容\" id=\"my_txt\">\n<input type=\"button\" value=\"点击添加\"  onclick=\"addCityInfo()\">\n<ul id=\"my_city\">\n\n</ul>\n\n\n<script type=\"text/javascript\">\nfunction addCityInfo() {\n        //找到标签\n        var txtTag = document.getElementById(\"my_txt\");\n        //获取用户输入的内容\n        var new_string = txtTag.value;\n        //判断用户输入是否为空\n        if (new_string.length > 0) {\n            //创建新的标签\n            var newTag = document.createElement(\"li\");\n            newTag.innerText = new_string;\n            //标签添加到ul中\n            var parentTag = document.getElementById(\"my_city\");\n            parentTag.appendChild(newTag);\n            //将输入框内容清空\n            txtTag.value = \"\";\n        }else{\n            alert(\"输入不能为空！\");\n        }\n    }\n</script>\n```\n\n## JQuery\n\n### 初识JQuery\n\n```html\n<h1 id=\"JQ_test\"> JQuery测试 </h1>\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script type=\"text/javascript\">\n  \n    //利用JQuery实现某些功能\n    //找到id=\"\"的标签并修改\n    $(\"#JQ_test\").text(\"JQ修改\");\n    \n</script>\n```\n\n### 直接寻找标签\n\n* ID选择器\n\n```html\n<h1 id=\"JQ_test\"> JQuery测试 </h1>\n```\n\n```javascript\n $(\"#JQ_test\")\n```\n\n* 样式选择器\n\n```html\n<h1 class=\"c1\">中国联通</h1>\n```\n\n```javascript\n$(\".c1\")\n```\n\n* 标签选择器\n\n```html\n<h1>中国联通</h1>\n```\n\n```javascript\n$(\".c1\")\n```\n\n* 层级选择器\n\n```html\n<div class=\"c1\">\n    <span class=\"c2\">\n        <a href=\"#\"></a>\n    </span>\n</div>\n```\n\n```javascript\n$(\".c1.c2 a\")\n```\n\n* 多选择器\n\n选择多个标签同时操作  \n\n```html\n<div class=\"c1\">\n    <span class=\"c2\"></span>\n    <a href=\"#\"></a>\n</div>\n<ul id=\"u1\">\n    <li></li>\n</ul>\n<p class=\"p1\"></p>\n```\n\n```javascript\n$(\".c1,#u1,p\")\n```\n\n* 属性选择器\n\n```html\n<input type=\"text\" name=\"n1\">\n<input type=\"text\" name=\"n2\">\n```\n\n```javascript\n$(\"input[name='n1']\")\n```\n\n### 间接寻找标签\n\n* 找到上一个兄弟\n\n```html\n<div>\n    <div>北京</div>\n    <div id=\"c1\">上海</div>\n    <div>广州</div>\n    <div>深圳</div>\n</div>\n```\n\n```javascript\n$(\"#c1\").prev()\t//上一个\n$(\"#c1\")\n$(\"#c1\").next()\t//下一个\n$(\"#c1\").next().next()\t//下下一个\n$(\"#c1\").siblings()\t//所有同级标签（兄弟）\n```\n\n* 找父子\n\n```html\n<div>\n    <div>\n        <div id=\"c1\">上海</div>\n    </div>\n</div>\n\n<div id=\"c2\">\n    <div>老大</div>\n    <div class=\"d2\">老二</div>\n</div>\n```\n\n```javascript\n$(\"#c1\").parent()\t//父亲\n$(\"#c1\").parent().parent()\t//祖父\n$(\"#c2\").children()\t//所有孩子\n$(\"#c2\").children(\".d2\")\t//所有的孩子中寻找class=d2的孩子\n$(\"#c2\").find(\".d2\")\t//去寻找class=d2的所有子孙\n$(\"#c2\").find(\"div\")\t//去寻找div标签的所有子孙\n```\n\n### 案例：菜单切换\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>菜单</title>\n\n    <style>\n        .menu {\n            width: 200px;\n            height: 800px;\n            border: 1px solid #2aabd2;\n        }\n\n        .menu .header {\n            cursor: pointer; /* 鼠标放上去变成手 */\n            padding: 10px 5px;\n            border-bottom: 1px dotted #ddd;\n            background: linear-gradient(#37ff00, #16a5d3);\n        }\n\n        .item a {\n            display: block;\n            text-decoration: none;\n            padding: 5px 5px;\n            border-bottom: 1px dotted #ddd;\n        }\n\n        .hide {\n            display: none;\n        }\n    </style>\n\n</head>\n<body>\n\n<div class=\"menu\">\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">北京</div>\n        <div class=\"content hide\">\n            <a href=\"\">海淀区</a>\n            <a href=\"\">朝阳区</a>\n            <a href=\"\">大兴区</a>\n            <a href=\"\">昌平区</a>\n        </div>\n    </div>\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">上海</div>\n        <div class=\"content hide\">\n            <a href=\"\">宝山区</a>\n            <a href=\"\">普陀区</a>\n            <a href=\"\">浦东新区</a>\n            <a href=\"\">青浦区</a>\n        </div>\n    </div>\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">北京2</div>\n        <div class=\"content hide\">\n            <a href=\"\">海淀区</a>\n            <a href=\"\">朝阳区</a>\n            <a href=\"\">大兴区</a>\n            <a href=\"\">昌平区</a>\n        </div>\n    </div>\n    <div class=\"item\">\n        <div class=\"header\" onclick=\"clickme(this)\">上海2</div>\n        <div class=\"content hide\">\n            <a href=\"\">宝山区</a>\n            <a href=\"\">普陀区</a>\n            <a href=\"\">浦东新区</a>\n            <a href=\"\">青浦区</a>\n        </div>\n    </div>\n</div>\n\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script type=\"text/javascript\">\n\n\n    //方法一：大家都可以展示\n    // let i = 0;\n    // function clickme(self) {\n    //     if (i++ % 2 === 0) {\n    //         $(self).next().removeClass(\"hide\");\n    //     } else {\n    //         $(self).next().addClass(\"hide\");\n    //     }\n    // }\n    //方法二：大家都可以展示\n    // function clickme(self) {\n    //     var hasHide = $(self).next().hasClass(\"hide\")\n    //     if (hasHide) {\n    //         $(self).next().removeClass(\"hide\");\n    //     } else {\n    //         $(self).next().addClass(\"hide\");\n    //     }\n    // }\n\n    //只展示自己，隐藏别人\n    function clickme(self) {\n        //把自己的内容展示出来\n        $(self).next().removeClass(\"hide\");\n        $(self).parent().siblings().find(\".content\").addClass(\"hide\");\n    }\n\n</script>\n</body>\n</html>\n```\n\n### 操作样式\n\n* addClass\n\n* removeClass\n\n* hasClass\n\n  \n### 值的操作\n\n```html\n<div id=\"c1\">内容</div>\n```\n\n```javascript\n$(\"#c1\").text() //获取内容\n$(\"#c1\").text(\"测试\") //设置内容\n```\n\n```html\n<input type=\"text\" id=\"c2\">\n```\n\n```javascript\n$(\"c2\").val()   //获取用户输入值\n$(\"c2\").val(\"txt\")   //设置用户输入值\n```\n\n### 案例：动态创建数据\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>动态创建数据</title>\n</head>\n<body>\n<input type=\"text\" id=\"txtUser\" placeholder=\"用户名\">\n<input type=\"text\" id=\"txtEmail\" placeholder=\"邮箱\">\n<input type=\"button\" value=\"提交\" onclick=\"getinfo()\">\n<ul id=\"view\">\n\n</ul>\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script>\n    function getinfo() {\n        let username = $(\"#txtUser\").val();   //设置用户输入值\n        let email = $(\"#txtEmail\").val();\n        const datastr = username + '-' + email;\n        //创建li标签\n        let lusr = $(\"<li>\").text(datastr);\n        //把新创建的li标签添加到ul里面\n        $(\"#view\").append(lusr);\n\n    }\n</script>\n\n</body>\n</html>\n```\n\n### 事件\n\n 绑定事件直接用 `$(\"\")` 获取到标签直接定义事件即可 。\n\n```javascript\n$(\".item\").children().click(function () {\n        $(this).text(\"hello python\")\n        $(this).remove()\n    })\n```\n\n###  案例：设置和删除标签\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>设置和删除标签</title>\n    <style>\n        .item a {\n            display: block;\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n<div class=\"item\">\n    <p href=\"\">1</p>\n    <p href=\"\">2</p>\n    <p href=\"\">3</p>\n</div>\n\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script>\n    let a = $(\".item\").children();\n    $(a).click(function () {\n        $(this).text(\"hello python\");//设置标签\n        $(this).remove();//删除标签\n    })\n</script>\n</body>\n</html>\n```\n\n* 当页面框架加载完成之后执行代码(封装在$function之内):\n\n```html\n<script>\n    $(function () {\n            $(\".item\").children().click(function () {\n            $(this).text(\"hello python\");\n        })\n    })\n</script>\n```\n\n### 案例：表格操作\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<table border=\"1\">\n    <thead>\n    <tr>\n        <th>ID</th>\n        <th>姓名</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td>1</td>\n        <td>Alleyf</td>\n        <td>\n            <input type=\"button\" value=\"删除\" class=\"delete\">\n        </td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>CHUIYUGIN</td>\n        <td>\n            <input type=\"button\" value=\"删除\" class=\"delete\">\n        </td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>小明</td>\n        <td>\n            <input type=\"button\" value=\"删除\" class=\"delete\">\n        </td>\n    </tr>\n    </tbody>\n</table>\n\n<!--JS代码块位置-->\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script>\n    $(function () {\n        // 找到所有class为delete的标签\n        $(\".delete\").click(function () {\n            // 删除当前行\n            $(this).parent().parent().remove();\n        })\n    })\n</script>\n</body>\n</html>\n```\n\n## 前端整合\n\n* HTNL\n* CSS\n* JavaScript\n* Bootstrap(动态效果依赖jQuery)\n\n### 案例：添加数据页面\n\n>人员信息录入功能，需要提供用户信息：\n>\n>用户名、年龄、薪资、部门、入职时间（*）\n>\n>*  时间的选择：不能输入；选择：（插件）datetimepicker \n>\n>- 下载插件\n>- 应用插件\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>添加数据页面</title>\n    <!--生产版本-->\n    <link rel=\"stylesheet\" href=\"static/plugins/bootstrap-3.4.1/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"static/plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css\">\n</head>\n<body>\n<div class=\"container\" style=\"margin-top: 20px\">\n    <form class=\"form-horizontal\">\n        <div class=\"row clearfix\">\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">姓名</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"姓名\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">年龄</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"年龄\">\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row clearfix\">\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">薪资</label>\n                    <div class=\"col-sm-10\">\n                        <input type=\"email\" class=\"form-control\" placeholder=\"薪资\">\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-xs-6\">\n\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">部门</label>\n                    <div class=\"col-sm-10\">\n                        <select class=\"form-control\" name=\"brabch\" id=\"inputbranch\">\n                            <option value=\"\">IT部门</option>\n                            <option value=\"\">销售部门</option>\n                            <option value=\"\">人事资源管理部门</option>\n                            <option value=\"\">售后部门</option>\n                            <option value=\"\">运营部门</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row clearfix\">\n            <div class=\"col-xs-6\">\n                <div class=\"form-group\">\n                    <label class=\"col-sm-2 control-label\">入职日期</label>\n                    <div class=\"col-sm-10\">\n                        <input id=\"dt\" type=\"email\" class=\"form-control\" placeholder=\"入职日期\">\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"form-group\">\n            <div class=\"col-sm-offset-6 col-sm-10\">\n                <button type=\"submit\" class=\"btn btn-primary\">提 交</button>\n            </div>\n        </div>\n    </form>\n</div>\n\n\n<!--JS代码块位置-->\n<script src=\"https://kit.fontawesome.com/5efd8aed42.js\" crossorigin=\"anonymous\"></script>\n<script src=\"static/js/jquery-3.6.1.min.js\"></script>\n<script src=\"static/plugins/bootstrap-3.4.1/js/bootstrap.js\"></script>\n<script src=\"static/plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.js\"></script>\n<script src=\"static/plugins/bootstrap-datetimepicker-master/js/locales/bootstrap-datetimepicker.zh-CN.js\"></script>\n<script type=\"text/javascript\">\n\n    $(function(){\n        $('#dt').datetimepicker({\n            fomat: 'yyyy-mm-dd',\n            startDate: '0',\n            language: 'zh-CN',\n            autoclose: true\n        });\n    });\n\n</script>\n</body>\n</html>\n```\n\n## MySQL\n\n### 进入MySQL：cmd进入终端\n\n```sql\nmysql -u root -p1234\n```\n\n### 查看\n\n```sql\nshow databases;\n```\n\n### 退出\n\n```sql\nexit;\n```\n\n### 基本数据类型\n\n| 类型         | 用途                                                         |\n| :----------- | ------------------------------------------------------------ |\n| tinyint      | 短整形()，相当于java的short，有符号(默认)，取值范围：-128~127；无符号(用关键词unsigned指定)，取值范围：0~255 |\n| **int**      | 整形，相当于java的int                                        |\n| bigint       | 长整形，相当于java的long                                     |\n| float        | 单精度浮点型                                                 |\n| **double**   | 双精度浮点型                                                 |\n| decimal      | 准确的小数值，eg：wage decimal(m,n) –总共m位数(负号不算)，其中小数点后有n位，m~~max~~=65，n~~max~~=30. |\n| **datatime** | 日期类型，YYYY-MM-DD HH:MM:SS(2022-12-09 21:03:00)，dt转为字符串类型显示**（dt.strftime(“%Y-%m-%d %H:%M:%S”)）** |\n| data         | 日期类型（无时分秒）YYYY-MM-DD                               |\n| timestamp    | 日期类型（可存储时间戳）                                     |\n| **char**     | 定长字符，固定字符长度，最大255个字符，速度快，常存储：手机号，邮箱，加密后的密码等 |\n| **varchar**  | 不定长字符，有多少存多少，最大65535个字节，节省空间，长度是动态变化的。 |\n| text         | 大文字，用于存储很长的字符内容，可存储65535个字符，例如：文章，新闻等。 |\n| mediumtext   | 中等文本，最多存储16777215（2^24^-1)个字符                   |\n| longtext     | 长文本，最多存储4294967295（4GB）（2^32^-1)个字符            |\n| blob         | 字节数据类型，存储图片、音频等文件                           |\n\n### 数据库管理(文件夹)\n\n*  查看当前已有数据库 \n\n```sql\nshow databases;\n```\n\n*  创建数据库 (文件夹)\n\n```sql\ncreate database 数据库名；\ncreate database 数据库名 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\n```\n\n* 删除数据库\n\n```sql\ndrop database 数据库名；\n```\n\n* 进入数据库\n\n```sql\nuse 数据库名；\n```\n\n*  查看当前数据库下的所有数据表 \n\n```sql\nshow tables；\n```\n\n### 数据表管理\n\n* 创建表\n\n```sql\ncreate table 表名(\n\t字段名 类型，\n    字段名 类型，\n    ···\n    字段名 类型\n)default charset=utf8；\n```\n\n```sql\ncreate table 表名(\n\t字段名 类型 not null auto_increment primary key，\t--主键（不允许为空，不允许重复）自增特性\n    字段名 类型 not null，--不允许为空\n    字段名 类型 default 3，--插入数据时，默认值为3，当不插入值时默认为3\n    ···\n    字段名 类型 null \t--允许为空（默认）\n)default charset=utf8；\n```\n\n> ==主键一般用于表示当前行的编号==（类似于身份证）。 \n\n* 示例\n\n```sql\ncreate table medocsys(\n\tid int not null auto_increment primary key,\n\tname varchar(20) not null,\n    pwd varchar(15) not null\n) default charset=utf8;\n```\n\n* 查看创建表的信息\n\n```sql\ndesc 表名\n```\n\n* 插入数据\n\n```sql\n单条插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据);\n批量插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据),(数据1，数据2，···，数据),···(数据1，数据2，···，数据);\n```\n\n### 数据行操作\n\n#### 新增数据\n\n```sql\n单条插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据);\n批量插入\ninsert into 表名(字段名1，字段名2，···，字段名) values(数据1，数据2，···，数据),(数据1，数据2，···，数据),···(数据1，数据2，···，数据);\n```\n\n#### 删除数据\n\n```sql\ndelete from 表名；--删除所有数据\ndelete from 表名 where 条件；--删除满足条件的数据\n```\n\n>  delete from tb1 where id>=10 or name=”yugin”; \n\n#### 修改数据\n\n```sql\nupdate 表名 set 字段名=值；\nupdate 表名 set 字段名1=值，字段名2=值；\nupdate 表名 set 字段名=值 where 条件；\neg：update tb1 set name=\"yugin\", pwd=pwd+\"10\";\n```\n\n#### 查询数据\n\n```sql\n查询表所有数据\nselect * from 表名；\n查询对应字段的数据\nselect 字段名1，字段名2 from 表名；\n条件查询数据\nselect * from 表名 where id > 3；\n```\n\n### 小结\n\n一般开发：\n\n- 创建数据库\n- 创建数据表\n\n>  ==提前用工具创建好== \n\n* 创建数据库\n\n```sql\ncreate database unicom DEFAULT CHARSET utf8 COLLATE utf8_general_ci;\n```\n\n* 创建表\n\n```sql\ncreate table admin(\n\tid int not null auto_increment primary key,\n    username varchar(16) not null,\n    password varchar(64) not null,\n    mobile char(11) not null \t\n)default charset=utf8;\n```\n\n### Python操作MySQL\n\n* 创建数据\n\n> 在进行增删改的时候需要执行`commit`，不然数据库没有数据 \n\n```python\nimport pymysql\n\n#1.连接上本地mysql\nconn = pymysql.connect(host=\"127.0.0.1\",port=3306,user=\"root\",password=\"1234\",charset=\"utf8\",db=\"unicom\")\ncursor = conn.cursor(cursor=pymysql.cursors.DictCursor)\n\n#发送指令\nsql=\"insert into admin(username,password,mobile) values(%(name)s,%(psw)s,%(mobile)s)\"\ncursor.execute(sql,{\"name\":'alleyf2',\"psw\":'alleyf1234',\"mobile\":'18127896898'})\nconn.commit()\n\n#关闭\ncursor.close()\nconn.close()\n```\n\n* 查询数据\n\n> 在进行查询的时候不需要执行`commit`，但是要执行`fetchall/fetchone`获取到返回的数据 \n>\n> 返回列表的形式，列表里面包含字典。\n\n```python\nimport pymysql\n\n\n#1.连接上本地mysql\nconn = pymysql.connect(host=\"127.0.0.1\",port=3306,user=\"root\",password=\"1234\",charset=\"utf8\",db=\"unicom\")\ncursor = conn.cursor(cursor=pymysql.cursors.DictCursor)\n\n#发送指令\nsql=\"select * from admin\"\n\n# 获取返回的所有数据（包含字典成员的列表）\ncursor.execute(sql)\ndata_list = cursor.fetchall()\n\n# 获取返回的第一条数据\ncursor.execute(sql)\nmy_first = cursor.fetchone()\n\nfor row_dict in data_list:\n print(row_dict)\n\nprint(my_first)\n\n#关闭\ncursor.close()\nconn.close()\n```\n\n## Django\n\n### 默认文件介绍\n\n```stylus\n│  manage.py\t【项目的管理，启动项目，创建app，数据管理】【不能动】【常常用】\n│\n├─.idea\n│  │  .gitignore\n│  │  misc.xml\n│  │  modules.xml\n│  │  mysite.iml\n│  │  workspace.xml\n│  │\n│  └─inspectionProfiles\n│          profiles_settings.xml\n│\n├─mysite\n│  │  settings.py\t【项目配置文件】【常修改】\n│  │  urls.py\t【URL和函数的对应关系】【常修改】\n│  │  asgi.py\t【接收网络请求】【不能动】\n│  │  wsgi.py\t【接收网络请求】【不能动】\n│  │  __init__.py\n│  │\n│  └─__pycache__\n│          settings.cpython-310.pyc\n│          __init__.cpython-310.pyc\n│\n└─__pycache__\n        manage.cpython-310.pyc\n```\n\n### APP\n\n#### 创建APP\n\n```python\npython manage.py startapp [名字]\n```\n\n```css\n-项目\n\t-app，用户管理【表结构、函数、HTML模板、CSS等独立】\n\t-app，订单管理【表结构、函数、HTML模板、CSS等独立】\n\t-app，后台管理【表结构、函数、HTML模板、CSS等独立】\n   \t-app，网站管理【表结构、函数、HTML模板、CSS等独立】\n   \t-app，API    【表结构、函数、HTML模板、CSS等独立】\n   \t···\n```\n\n```visual basic\n├─app1\n│  │  admin.py\t【固定，不用动】django默认提供了admin后台管理\n│  │  apps.py\t【固定，不用动】app启动类\n│  │  models.py\t【重要，模型层】对数据库操作\n│  │  tests.py\t【固定，不用动】单元测试\n│  │  views.py\t【重要，视图层】前后端交互处理请求返回结果的函数\n│  │  __init__.py\n│  │\n│  └─migrations\t【固定，不用动】数据库变更记录\n│          __init__.py\n```\n\n### 快速上手\n\n*  **确保app已注册【setting.py】** \n\n```python\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"app01.apps.App01Config\"          #注册app01\n```\n\n*  **编写URL和视图函数对应关系【urls.py】** \n\n```python\nfrom django.contrib import admin\nfrom django.urls import path\nfrom app01 import views\n\nurlpatterns = [\n    # path(\"admin/\", admin.site.urls),\n    path(\"index/\", views.index),\n]\n```\n\n*  **编写视图函数【view.py】** \n\n```python\nfrom django.shortcuts import render, HttpResponse\n\n\n# Create your views here.\ndef index(request):\n    return HttpResponse(\"欢迎访问YUGIN Blog\")\n```\n\n*  **启动Django项目** \n\n```python\n1.命令行启动\npython manage.py runserver\n2.pycharm启动\n直接点击pycharm里的启动按钮\n```\n\n### 编写页面\n\n#### 引入HTML\n\n```python\ndef user_list(request):\n    # 根据app注册顺序,去每个app目录下的templates中寻找对应的html\n    return render(request, \"user_list.html\")\n```\n\n#### 静态文件\n\n一般开发过程中：\n\n- 图片\n- CSS\n- Js\n\n都会当做静态文件处理！\n\n* 一般在app目录下放置static文件夹\n\n* 注意Django一般引入静态文件：\n\n```html\n{% load static %}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户列表</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<h1>用户列表</h1>\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n### 模板语法\n\n*  本质上：在html中写一些占位符，由数据对这些占位符进行替换和处理。 \n\n*  注意：取单独值的时候用`.`进行索引 \n\n**views.py**\n\n```python\ndef tpl(request):\n    name = \"小明\"\n    roles = [\"管理员\", \"CEO\", \"保安\"]\n    user_info = {\"name\": \"郭志\", \"salary\": \"101000\", \"role\": \"CTO\"}\n\n    data_list = [\n        {\"name\": \"郭志\", \"salary\": \"101000\", \"role\": \"CTO\"},\n        {\"name\": \"赵健\", \"salary\": \"1010\", \"role\": \"保安\"},\n        {\"name\": \"芦荟\", \"salary\": \"201000\", \"role\": \"CEO\"}\n    ]\n\n    return render(request, \"tpl.html\", {\"n1\": name, \"n2\": roles, \"n3\": user_info,\"n4\":data_list})\n```\n\n**HTML**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>模板语法的学习</title>\n</head>\n<body>\n\n<h1>模板语法的学习</h1>\n\n{#字符串#}\n<div>{{ n1 }}</div>\n\n{#列表#}\n<div>{{ n2.0 }}</div>\n<div>{{ n2.1 }}</div>\n<div>{{ n2.2 }}</div>\n\n{#循环列表#}\n<div>\n    {% for item in n2 %}\n     <span>{{ item }}</span>\n\n    {% endfor %}\n</div>\n\n{#字典#}\n<span>{{ n3.name }}</span>\n<span>{{ n3.salary }}</span>\n<span>{{ n3.role }}</span>\n\n{#循环字典#}\n<ul>\n    {% for key,valuse in n3.items %}\n     <li>{{ key }} = {{ valuse }}</li>\n\n    {% endfor %}\n</ul>\n\n{#列表套字典#}\n<ul>\n    <li>{{ n4.1 }}</li>\n    <li>{{ n4.1.name }}</li>\n</ul>\n\n{#列表套字典加循环#}\n<ul>\n    {% for item in n4 %}\n     <li>{{ item.name }} = {{item.salary }}</li>\n    {% endfor %}\n</ul>\n\n{#条件语句#}\n{% if n1 == \"小明\"%}\n    <h1>是小明</h1>\n{% else %}\n    <h1>不是小明</h1>\n{% endif %}\n\n</body>\n</html>\n```\n\n#### 案例：热搜展示\n\n**views.py**\n\n```python\ndef news(request):\n    url = \"http://api.54dh.cn/API/search/rs/?type=weibo\"\n    dic = {'user-agent': 'Mozilla/5.0'}\n    r = requests.post(url, headers=dic)\n    r.raise_for_status()\n    r.encoding = r.apparent_encoding\n    info = {'info': r.json()}\n    return render(request, \"news.html\", info)\n```\n\n**HTML**\n\n```html\n{% load static %}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>热搜展示</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n            font-family: 微软雅黑, serif;\n            letter-spacing: .05em;\n        }\n\n        .container {\n            margin: 5px auto;\n            background-image: linear-gradient(to right, #a997a4, #b3e8ee);\n        }\n\n    </style>\n\n</head>\n<body>\n\n<div class=\"row container\">\n    <h1 class=\"col-xs-12 text-center\">热搜展示---{{ info.time }}</h1>\n\n\n    <div class=\" text-center\">\n        {% for item in info.data %}\n            <a href=\"{{ item.link }}\">{{ item.title }}--{{ item.heat }}</a>\n            <br>\n        {% endfor %}\n\n\n    </div>\n</div>\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n### 请求和响应\n\n*  **通过此方式可以获取到get请求中的参数和post请求中的数据** \n\n```python\ndef something(request):\n    if request.method == \"GET\":\n        # 获取get请求中携带的参数\n        parameters = request.GET\n        # 获取post请求中提交的数据\n        data = request.POST\n        print(parameters)\n        print(data)\n        return HttpResponse(parameters['name'])\n```\n\n*  **重定向：返回重定向的网址给浏览器，浏览器去请求该网址** \n\n```python\nreturn redirect(\"https://www.baidu.com\")\n```\n\n#### 案例：用户登录\n\n**views.py**\n\n```python\nfrom django.shortcuts import render, HttpResponse,redirect\nimport requests\n\ndef login(request):\n    if request.method == \"GET\":\n       return render(request, \"login.html\")\n    #POST请求\n    else:\n        username=request.POST.get(\"user\")\n        pwd = request.POST.get(\"pwd\")\n        #print(request.POST)\n        if username == 'root' and pwd == '1234':\n             return redirect(\"http://chuiyugin.github.io\")\n        else:\n             return render(request, \"login.html\",{\"error_msg\":\"用户名或密码错误\"})\n```\n\n**HTML**\n\n* 注意： 在html表单（form）中加上`{% csrf_token %}` \n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户登录</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<form method=\"post\" action=\"/login/\">\n    {#提交表单一定要添加#}\n    {% csrf_token %}\n\n    <input type=\"text\" name=\"user\" placeholder=\"用户名\">\n    <input type=\"password\" name=\"pwd\" placeholder=\"密码\">\n    <input type=\"submit\" value=\"提交\">\n    <div class=\"row container\">\n       <h2 class=\"col-xs-12 \" style=\"color:darkred;\">{{ error_msg }}</h2>\n    </div>\n</form>\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n### 数据库操作\n\n> Django使用ORM框架实现对数据库的操作，安装`mysqlclient`第三方库辅助操作 \n\n```powershell\npip install mysqlclient\n```\n\n#### ORM\n\n> ORM可以帮助我们完成两件事：\n>\n> 1. 创建、修改、删除数据库中的表（不用写SQL语句）【无法创建数据库】\n> 2. 操作表中的数据\n\n####  配置setting.py文件\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql', #连接MYSQL数据库\n        'NAME': 'day15',  # 数据库名\n        'USER': 'root',  # 数据库用户名\n        'PASSWORD': '1234',  # 数据库密码\n        'HOST': '127.0.0.1',  # 数据库主机地址\n        'PORT': 3306,  # 数据库连接端口号\n    }\n}\n```\n\n#### Django操作表\n\n##### 创建表\n\n* 在models.py中创建表类 \n\n```python\nfrom django.db import models\n\n# Create your models here.\nclass Userinfo(models.Model):\n    name = models.CharField(max_length=32)\n    password = models.CharField(max_length=64)\n    mobile = models.CharField(max_length=11)\n    email = models.CharField(max_length=32)\n    age = models.IntegerField()\n```\n\n* 在终端执行命令创建该表\n\n注意：**1.终端路径在项目名目录下。2.app需要已经注册。3.表名是app的名称加上类名**\n\n```shell\npython manage.py makemigrations\npython manage.py migrate\n```\n\n##### 删除表\n\n 直接将`models.py`里面的类注释掉即可 \n\n```python\nclass Userinfo(models.Model):\n#     name = models.CharField(max_length=32)\n#     password = models.CharField(max_length=64)\n#     mobile = models.CharField(max_length=11)\n#     email = models.CharField(max_length=32)\n#     age = models.IntegerField()\n#     docpath = models.CharField(max_length=64, default=\"\")\n#     imgpath = models.CharField(max_length=64, null=True, blank=True)\n```\n\n##### 修改表\n\n* 删除字段（直接注释掉） \n\n```python\n#删除imgpath字段\nclass Userinfo(models.Model):\n    name = models.CharField(max_length=32)\n    password = models.CharField(max_length=64)\n    mobile = models.CharField(max_length=11)\n    email = models.CharField(max_length=32)\n    age = models.IntegerField()\n    docpath = models.CharField(max_length=64, default=\"\")\n    #imgpath = models.CharField(max_length=64, null=True, blank=True)\n```\n\n*  修改字段 \n\n```python\n#修改max_length属性\ndocpath = models.CharField(max_length=128, default=\"\")#将max_length直接改为128\n```\n\n*  添加字段 \n\n>在表中新建字段（列）时，由于已存在的字段可能已有数据，所以新增列必须要指定新增列对应的数据：\n>\n>1. 手动输入一个值（全部行都为输入的值）\n>2. 设置默认值(default后面的值)\n\n```python\ndocpath = models.CharField(default=\"\")\ndocpath = models.CharField(default=2)\n```\n\n3.  允许为空 \n\n```python\nimgpath = models.CharField(null=True, blank=True)\n```\n\n##### 操作表中的数据\n\n1. 添加数据( models.py )\n\n```python\n# ***************添加数据***************\n# 本质：insert into app1_userinfo(name,password,mobile,email) values(\"yugin\",\"123456\",\"18127896898\",\"1726123207@qq.com\")\nUserinfo.objects.create(name=\"yugin\", password=\"123456\", mobile=\"18127896898\", email=\"1726123207@qq.com\")\n```\n\n在views.py中引入models.py中的类即可进行添加数据：\n\n* models.py\n\n```python\nclass Department(models.Model):\n    title = models.CharField(max_length=16)\n```\n\n* views.py\n\n```python\nfrom app01.models import Department,Userinfo\ndef orm(request):\n\n    #测试orm操作表中的数据\n    Department.objects.create(title=\"销售部门\")\n    Department.objects.create(title=\"IT部门\")\n    Department.objects.create(title=\"运营部门\")\n\n    return HttpResponse(\"成功\")\n```\n\n2. 更新数据\n\n```python\n# 条件更新\nUserinfo.objects.filter(id=2).update(password='a123456')\n# 全更新\nUserinfo.objects.all().update(mobile='13125018525')\n```\n\n3. 删除数据\n\n```python\n# 条件删除\nUserinfo.objects.filter(id=2).delete()\n# 删除表中全部数据\nUserinfo.objects.all().delete()\n```\n\n4. 查询数据\n\n```python\n#条件查询\n\t#查询结果不唯一时，返回包含对象的queryset(列表)：\n    \tuserinfo = Userinfo.objects.filter(id=1) \t\n\t#已知查询结果唯一时利用first()获取第一条数据，返回对象：\n    \tuserobj = Userinfo.objects.filter(id=1).first()\n#全查询\n\t#返回包含对象的列表：\n\t\tuserinfo = Userinfo.objects.all()\n```\n\n```python\ndef user_list(request):\n    userlist = []\n    userinfo = Userinfo.objects.all()\n    for info in userinfo:\n        datadic = {'id': info.id, 'name': info.name, 'password': info.password, 'mobile': info.mobile, 'email': info.email}\n        userlist.append(datadic)\n    print(userlist)\n    return render(request, \"user_list.html\", {'userlist': userlist})\n```\n\n#### 案例：用户管理\n\n要求：\n\n1. 展示用户列表\n   - url路由\n   - view函数\n     1. 获取用户信息\n     2. HTML渲染\n2. 添加用户\n   - post请求\n   - 添加用户\n   - HTML渲染\n3. 删除用户\n   - a标签传递用户id参数get请求\n   - 筛选删除指定用户\n\n* 展示数据\n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户管理系统</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<h1>INFO列表</h1>\n\n<a href=\"/info/add/\">点此添加数据</a>\n\n<table border=\"1\">\n    <thead>\n    <tr>\n        <th>ID</th>\n        <th>姓名</th>\n        <th>密码</th>\n        <th>年龄</th>\n        <th>操作</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for obj in data_list %}\n        <tr>\n            <td>{{ obj.id }}</td>\n            <td>{{ obj.name }}</td>\n            <td>{{ obj.password }}</td>\n            <td>{{ obj.age }}</td>\n            <td>\n                <a href=\"/info/delete/?nid={{ obj.id }}\">删除</a>\n            </td>\n        </tr>\n    {% endfor %}\n    </tbody>\n\n</table>\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n* 添加数据\n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>用户管理系统</title>\n    <link rel=\"stylesheet\" href=\"{% static 'plugins/bootstrap-3.4.1/css/bootstrap.css' %}\">\n</head>\n<body>\n\n<h1>添加用户</h1>\n<form method=\"post\" action=\"/info/add/\">\n\n    {% csrf_token %}\n\n    <input type=\"text\" name=\"user\" placeholder=\"用户名\">\n    <input type=\"text\" name=\"pwd\" placeholder=\"密码\">\n    <input type=\"text\" name=\"age\" placeholder=\"年龄\">\n    <input type=\"submit\"  value=\"提 交\">\n\n</form>\n\n\n\n<script src=\"{% static 'js/jquery-3.6.1.min.js' %}\"></script>\n<script src=\"{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}\"></script>\n</body>\n</html>\n```\n\n* views.py\n\n```python\nfrom django.shortcuts import render, HttpResponse,redirect\nimport requests\nfrom app01.models import Department,Userinfo\ndef orm(request):\n\n    #测试orm操作表中的数据\n    Department.objects.create(title=\"销售部门\")\n    Department.objects.create(title=\"IT部门\")\n    Department.objects.create(title=\"运营部门\")\n\n    return HttpResponse(\"成功\")\n\nfrom app01.models import Department,Userinfo\ndef info_list(request):\n\n    #获取数据库中所有的用户信息\n    #[对象,对象]\n    data_list = Userinfo.objects.all()\n\n    #渲染，返回给用户\n    return render(request, \"info_list.html\",{\"data_list\":data_list})\n\ndef info_add(request):\n\n    if request.method == \"GET\":\n       return render(request, \"info_add.html\")\n\n    #获取到用户提交的数据\n    user = request.POST.get(\"user\")\n    pwd = request.POST.get(\"pwd\")\n    age = request.POST.get(\"age\")\n\n\n\n    #添加到数据库\n    Userinfo.objects.create(name=user,password=pwd,age=age)\n\n    return redirect(\"/info/list/\")\n\n\ndef info_delete(request):\n    nid = request.GET.get(\"nid\")\n    Userinfo.objects.filter(id=nid).delete()\n\n    return redirect(\"/info/list/\")\n```\n\n## Django开发\n\n### 设置表结构\n\n```python\nfrom django.db import models\n\n\n# Create your models here.\nclass Department(models.Model):\n    \"\"\"部门表\"\"\"\n    title = models.CharField(verbose_name=\"标题\", max_length=32)\n\n#关联部门表\nclass UserInfo(models.Model):\n    \"\"\"员工表\"\"\"\n    name = models.CharField(verbose_name=\"姓名\", max_length=16)\n    password = models.CharField(verbose_name=\"密码\", max_length=16)\n    age = models.IntegerField(verbose_name=\"年龄\")\n    account = models.DecimalField(verbose_name=\"账户余额\", max_digits=10, decimal_places=2, default=0)\n    create_time = models.DateTimeField(verbose_name=\"入职时间\")\n    # Dejango中对字段值域的约束\n    gender_choices = (\n        (1, '男'),\n        (2, '女'),\n    )\n    gender = models.SmallIntegerField(verbose_name='性别', choices=gender_choices)\n    # 无约束\n    # depart_id = models.BigIntegerField(verbose_name='部门ID')\n    # 有约束\n    #    -to:与之关联的表\n    #    -to.field：与之关联的字段\n    # 1.Django自动\n    #     -将关联字段名添加到被关联的字段的后面(depart_id)\n    # 2.外键表(部门表)的关联字段被删除\n    # -2.1级联删除\n    depart = models.ForeignKey(to='Department', to_field='id', on_delete=models.CASCADE)\n    # -2.1置空\n    # depart = models.ForeignKey(to='Department',to_field='id',null=True,blank=True,on_delete=models.SET_NULL)\n```\n\n### 部门管理\n\n#### 部门列表\n\n>  重要知识点 : ==url中传递动态参数== \n\n```python\n#urls.py\npath(\"depart/<int:nid>/edit/\", views.depart_edit),\n```\n\n```python\n# Create your views here.\ndef depart_list(request):\n    \"\"\"部门列表\"\"\"\n\n    # 去数据库中获取所有的部门信息\n    queryset = models.Department.objects.all()\n\n    return render(request, \"depart_list.html\", {\"queryset\": queryset})\n```\n\n#### 新建部门\n\n```python\ndef depart_add(request):\n    \"\"\"添加部门\"\"\"\n    if request.method == \"GET\":\n        return render(request, \"depart_add.html\")\n    # 获取用户POST提交过来的数据\n    title = request.POST.get(\"title\")\n    #保存到数据库\n    models.Department.objects.create(title=title)\n    #重定向回到部门列表\n    return redirect(\"/depart/list/\")\n```\n\n#### 删除部门\n\n```python\ndef depart_delete(request):\n    \"\"\"删除部门\"\"\"\n    nid = request.GET.get(\"nid\")\n    models.Department.objects.filter(id=nid).delete()\n    return redirect(\"/depart/list/\")\n```\n\n#### 修改部门\n\n>  重要知识点 : ==url中传递动态参数== \n\n```python\n#urls.py\npath(\"depart/<int:nid>/edit/\", views.depart_edit),\n```\n\n```python\ndef depart_edit(request,nid):\n    \"\"\"修改部门\"\"\"\n    if request.method == \"GET\":\n        row_object = models.Department.objects.filter(id=nid).first()\n        return render(request, \"depart_edit.html\",{\"row_object\":row_object})\n    if request.method == \"POST\":\n        title = request.POST.get(\"title\")\n        models.Department.objects.filter(id=nid).update(title=title)\n        # 重定向回到部门列表\n        return redirect(\"/depart/list/\")\n```\n\n### HTML模板继承\n\n> 模板继承可以使父模板的内容复用，子模版直接继承父模板的全部内容并可以覆盖父模板中相应的块。 \n\n**语法—父模板中：**\n\n 1.定义父模板中的块block标签\n\n 2.标识出哪些在子模版中是允许被修改的\n\n 3.block标签：在父模板中定义，可以在子模版中覆盖\n\n```html\n{% block block_name %}\n\t父模板可以被覆盖的内容\n{% endblock blocl_name%}  (**切记一定要写endblock**)\n```\n\n**语法—子模版中：**\n\n 1.继承模板extends标签（**写在模板文件的第一行**）\n\n```html\n{% entends 'layout.html' %}\n```\n\n  2.子模版 重写父模板中的内容块\n\n```html\n{% block block_name %}\n\t子模版用来覆盖父模板中 block_name 块的内容\n{% endblock blocl_name%}  (**切记一定要写endblock**)\n```\n\n#### 实例\n\n* 父模板\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div>\n            <a href=\"/depart/add/\" class=\"btn btn-primary\">新建部门</a>\n        </div>\n\n        <div class=\"panel panel-default\" style=\"margin-top: 20px\">\n            <!-- Default panel contents -->\n            <div class=\"panel-heading\">\n                <span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>\n                部门列表\n            </div>\n\n            <!-- Table -->\n            <table class=\"table\">\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>部门名称</th>\n                    <th>操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for obj in queryset %}\n                    <tr>\n                        <td>{{ obj.id }}</td>\n                        <td>{{ obj.title }}</td>\n                        <td>\n                            <a class=\"btn btn-success btn-xs\" href=\"/depart/{{ obj.id }}/edit/\">编辑</a>\n                            <a class=\"btn btn-danger btn-xs\" href=\"/depart/delete/?nid={{ obj.id }}\">删除</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}\n```\n\n* 继承模板\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div>\n            <a href=\"/depart/add/\" class=\"btn btn-primary\">新建部门</a>\n        </div>\n\n        <div class=\"panel panel-default\" style=\"margin-top: 20px\">\n            <!-- Default panel contents -->\n            <div class=\"panel-heading\">\n                <span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>\n                部门列表\n            </div>\n\n            <!-- Table -->\n            <table class=\"table\">\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>部门名称</th>\n                    <th>操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for obj in queryset %}\n                    <tr>\n                        <td>{{ obj.id }}</td>\n                        <td>{{ obj.title }}</td>\n                        <td>\n                            <a class=\"btn btn-success btn-xs\" href=\"/depart/{{ obj.id }}/edit/\">编辑</a>\n                            <a class=\"btn btn-danger btn-xs\" href=\"/depart/delete/?nid={{ obj.id }}\">删除</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}\n```\n\n### 主题一：用户管理\n\n* 向数据库插入数据\n\n```sql\ninsert into app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) values(\"刘冬\",\"1234\",\"23\",\"100.87\",\"2010-1-11\",\"1\",\"1\");\n\ninsert into app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) values(\"Alleyf\",\"1234\",\"20\",\"9000.87\",\"2012-1-11\",\"1\",\"2\");\n\n\n+--------------+---------------+------+-----+---------+----------------+\n| Field        | Type          | Null | Key | Default | Extra          |\n+--------------+---------------+------+-----+---------+----------------+\n| id           | bigint        | NO   | PRI | NULL    | auto_increment |\n| name         | varchar(16)   | NO   |     | NULL    |                |\n| password     | varchar(64)   | NO   |     | NULL    |                |\n| age          | int           | NO   |     | NULL    |                |\n| account      | decimal(10,2) | NO   |     | NULL    |                |\n| create_time  | datetime(6)   | NO   |     | NULL    |                |\n| gender       | smallint      | NO   |     | NULL    |                |\n| depart_id_id | bigint        | NO   | MUL | NULL    |                |\n+--------------+---------------+------+-----+---------+----------------+\n```\n\n### ModelForm和Form\n\n- 原始方式：不会采用（本质）【麻烦】\n\n  - 没有数据校验\n  - 错误，应该有提示\n\n  - 页面上，每个字段都需要我们重新写一遍，数据冗余\n\n  - 关联的数据，需要手动获取并循环展示在页面中\n\n- Django组件\n\n  1. Form组件（较简便）\n  2. ModelForm组件（最简便）\n\n#### ModelForm示例\n\n* models.py\n\n```python\nclass UserInfo(models.Model):\n    \"\"\" 员工表 \"\"\"\n    name = models.CharField(verbose_name='姓名', max_length=16)\n    password = models.CharField(verbose_name=\"密码\", max_length=64)\n    age = models.IntegerField(verbose_name=\"年龄\")\n    account = models.DecimalField(verbose_name=\"账户余额\", max_digits=10, decimal_places=2, default=0)\n    create_time = models.DateTimeField(verbose_name=\"入职时间\")\n\n    depart_id = models.ForeignKey(to=\"Department\", to_field=\"id\", on_delete=models.CASCADE,verbose_name=\"部门\")\n    # Dejango中对字段值域的约束\n    gender_choices = (\n        (1, '男'),\n        (2, '女'),\n    )\n    gender = models.SmallIntegerField(verbose_name='性别', choices=gender_choices)\n```\n\n* views.py\n\n```python\n# 用户管理\ndef user_list(request):\n    # 获取所有的用户列表\n    queryset = models.UserInfo.objects.all()\n\n    return render(request, \"user_list.html\", {\"queryset\": queryset})\n\n\n# ModelForm\nfrom django import forms\n\n\nclass userInfoForm(forms.ModelForm):\n    class Meta:\n        model = models.UserInfo\n        fields = [\"name\", \"password\", \"age\", \"create_time\", \"gender\", \"depart_id\"]\n        widgets = {\n            # \"name\": forms.TextInput(attrs={\"class\": \"form-control input\"}),\n            # \"password\": forms.PasswordInput(attrs={\"class\": \"form-control input\"}),\n            # \"age\": forms.TextInput(attrs={\"class\": \"form-control input\"}),\n            # \"account\": forms.TextInput(attrs={\"class\": \"form-control input\"}),\n            \"create_time\": forms.DateTimeInput(attrs={\"class\": \" form-control input\", \"type\": \"datetime-local\"}),\n            # \"gender\": forms.Select(attrs={\"class\": \"form-control input\"}),\n            # \"depart\": forms.Select(attrs={\"class\": \"form-control input\"}),\n        }\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        # 循环找到所有的字段,给其添加样式\n        for name, field in self.fields.items():\n            # 想让某一个不加\n            if name == \"create_time\":\n                continue\n            field.widget.attrs = {\"class\": \"input form-control\", \"placeholder\": field.label}\n\n\ndef user_add(request):\n    # 添加用户\n    if request.method == \"GET\":\n        form = userInfoForm()\n        return render(request, \"user_add.html\", {\"form\": form})\n    # 用户POST提交数据，数据校验\n    form = userInfoForm(data=request.POST)\n    if form.is_valid():\n      # 如果合法保存到数据库\n      form.save()\n      return redirect(\"/user/list\")\n    else:\n        return render(request, \"user_add.html\",{\"form\": form})\n```\n* user_list.html(未用ModelForm)\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div>\n            <a href=\"/user/add/\" class=\"btn btn-primary\">新建用户</a>\n        </div>\n\n        <div class=\"panel panel-default\" style=\"margin-top: 20px\">\n            <!-- Default panel contents -->\n            <div class=\"panel-heading\">\n                <span class=\"glyphicon glyphicon-pushpin\" aria-hidden=\"true\"></span>\n                用户列表\n            </div>\n\n            <!-- Table -->\n            <table class=\"table\">\n                <thead>\n                <tr>\n                    <th>ID</th>\n                    <th>姓名</th>\n                    <th>密码</th>\n                    <th>年龄</th>\n                    <th>余额</th>\n                    <th>入职时间</th>\n                    <th>性别</th>\n                    <th>所属部门</th>\n                    <th>操作</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for obj in queryset %}\n                    <tr>\n                        <td>{{ obj.id }}</td>\n                        <td>{{ obj.name }}</td>\n                        <td>{{ obj.password }}</td>\n                        <td>{{ obj.age }}</td>\n                        <td>{{ obj.account }}</td>\n                        <td>{{ obj.create_time|date:\"Y-m-d\" }}</td>\n                        <td>{{ obj.get_gender_display }}</td>\n                        <td>{{ obj.depart_id.title }}</td>\n                        <td>\n                            <a class=\"btn btn-success btn-xs\" href=\"/depart/{{ obj.id }}/edit/\">编辑</a>\n                            <a class=\"btn btn-danger btn-xs\" href=\"/depart/delete/?nid={{ obj.id }}\">删除</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}\n```\n* user_add.html(使用ModelForm)\n\n```html\n{% extends \"layout.html\" %}\n\n{% block  content %}\n    <div class=\"container\">\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <h3 class=\"panel-title\">新建用户</h3>\n            </div>\n            <div class=\"panel-body\">\n                <form method=\"post\" novalidate>\n                    {% csrf_token %}\n                    {% for field in form %}\n                        <div class=\"form-group\">\n                            <label>{{ field.label }}</label>\n                            {{ field }}\n                         <span style=\"color: #2aabd2\">{{ field.errors.0 }}</span>\n                        </div>\n                    {% endfor %}\n                    <button type=\"submit\" class=\"btn btn-primary\">提 交</button>\n                </form>\n            </div>\n        </div>\n    </div>\n{% endblock %}\n```\n\n* 在配置文件`settings.py`中可以设置语言种类 \n\n```python\n# LANGUAGE_CODE = \"en-us\" 英文\nLANGUAGE_CODE = \"zh-hans\" 中文\n```\n\n### 主题二：靓号管理\n\n靓号管理\n","slug":"Web","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7um000hlsvsgtbh2g9d","content":"<h1 id=\"web开发\"><a class=\"markdownIt-Anchor\" href=\"#web开发\"></a> Web开发</h1>\n<h2 id=\"flask\"><a class=\"markdownIt-Anchor\" href=\"#flask\"></a> Flask</h2>\n<p>Flask框架为了方便书写标签，用户把返回给浏览器的字符串写入到文件里，再由flask框架读取文件。</p>\n<h2 id=\"html\"><a class=\"markdownIt-Anchor\" href=\"#html\"></a> HTML</h2>\n<h3 id=\"头部信息\"><a class=\"markdownIt-Anchor\" href=\"#头部信息\"></a> 头部信息</h3>\n<h4 id=\"浏览器标签页的标题\"><a class=\"markdownIt-Anchor\" href=\"#浏览器标签页的标题\"></a> 浏览器标签页的标题</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>文档标题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"返回字符串的编码方式\"><a class=\"markdownIt-Anchor\" href=\"#返回字符串的编码方式\"></a> 返回字符串的编码方式</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"body信息\"><a class=\"markdownIt-Anchor\" href=\"#body信息\"></a> body信息</h3>\n<h4 id=\"标题\"><a class=\"markdownIt-Anchor\" href=\"#标题\"></a> 标题</h4>\n<p>一级标题，随着数字变化标题级数变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>first<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"div和span\"><a class=\"markdownIt-Anchor\" href=\"#div和span\"></a> div和span</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>内容<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><br>内容<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>div中的内容占用一整行，块级标签</li>\n<li>span，自己多大占多少，内联标签</li>\n</ul>\n<h3 id=\"超链接\"><a class=\"markdownIt-Anchor\" href=\"#超链接\"></a> 超链接</h3>\n<p>跳转到我的博客，target=&quot;_blank&quot;加入是新生成一个标签页</p>\n<p>a标签无法直接添加宽度和高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://chuiyugin.github.io/&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;_blank&quot;</span>&gt;</span>我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\"></a> 图片</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;图片地址&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 10% ; height: 20%&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"嵌套\"><a class=\"markdownIt-Anchor\" href=\"#嵌套\"></a> 嵌套</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://chuiyugin.github.io/&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;_blank&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 50%&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"列表标签\"><a class=\"markdownIt-Anchor\" href=\"#列表标签\"></a> 列表标签</h3>\n<p>无序号列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>带序号列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a class=\"markdownIt-Anchor\" href=\"#表格\"></a> 表格</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span> ID <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>    <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span> 姓名 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>     <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span> 年龄 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>    <br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>   <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>fcs<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>     <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>       <br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>   <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>xyj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>     <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>       <br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>   <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>shy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>    <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>       <br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"input系列\"><a class=\"markdownIt-Anchor\" href=\"#input系列\"></a> Input系列</h3>\n<p>文本输入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>密码输入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>选择文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>单选框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n1&quot;</span>&gt;</span>男<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n1&quot;</span>&gt;</span>女<br></code></pre></td></tr></table></figure>\n<p>复选框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>按钮</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;buton&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span>  ---&gt;普通按钮<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span> ---&gt;提交表单<br></code></pre></td></tr></table></figure>\n<p>下拉框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>北京<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>深圳<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>广州<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>多行文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;3&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"请求\"><a class=\"markdownIt-Anchor\" href=\"#请求\"></a> 请求</h2>\n<h3 id=\"get请求\"><a class=\"markdownIt-Anchor\" href=\"#get请求\"></a> GET请求</h3>\n<p>现象：跳转，向后台传入数据会拼接在URL上。</p>\n<ul>\n<li>GET请求的数据会在URL上体现。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/do/reg&quot;</span>,methods=[<span class=\"hljs-string\">&#x27;GET&#x27;</span>]</span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_register</span>():<br>    <span class=\"hljs-comment\">#1.接收到的数据</span><br>    <span class=\"hljs-built_in\">print</span>(request.args)<br>    <span class=\"hljs-comment\">#给用户返回结果</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;注册成功&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"post请求\"><a class=\"markdownIt-Anchor\" href=\"#post请求\"></a> POST请求</h3>\n<p>现象：提交数据不在URL中，体现在请求体中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/post/reg&quot;</span>,methods=[<span class=\"hljs-string\">&#x27;POST&#x27;</span>]</span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">post_register</span>():<br>    <span class=\"hljs-comment\">#1.接收到的数据</span><br>    <span class=\"hljs-built_in\">print</span>(request.form)<br>    user = request.form.get(<span class=\"hljs-string\">&quot;user&quot;</span>)<br>    psw = request.form.get(<span class=\"hljs-string\">&quot;psw&quot;</span>)<br>    <span class=\"hljs-built_in\">print</span>(user)<br>    <span class=\"hljs-built_in\">print</span>(psw)<br>    <span class=\"hljs-comment\">#给用户返回结果</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;注册成功&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"提交数据\"><a class=\"markdownIt-Anchor\" href=\"#提交数据\"></a> 提交数据</h3>\n<p>form标签包裹要提交的数据标签</p>\n<ul>\n<li>提交方式：method=&quot;get&quot;或者method=“post”</li>\n<li>提交的地址：action=“/xx/xx/xxx”</li>\n<li>在form标签里必须要有submit标签</li>\n<li>Input系列标签必须要加name，提交时能够解析对应的名字，而且只有Input的内容才会提交</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>注册界面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/post/reg&quot;</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                 用户名：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span>/&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                 密码： <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;psw&quot;</span>/&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> /&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"css样式\"><a class=\"markdownIt-Anchor\" href=\"#css样式\"></a> CSS样式</h2>\n<h3 id=\"demo\"><a class=\"markdownIt-Anchor\" href=\"#demo\"></a> Demo</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;!DOCTYPE <span class=\"hljs-selector-tag\">html</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class=\"hljs-number\">8</span>&quot;&gt;<br>    &lt;title&gt;用户注册&lt;/title&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/commons<span class=\"hljs-selector-class\">.css</span>&quot;&gt;<br>    &lt;style&gt;<br>        <span class=\"hljs-selector-class\">.c1</span>&#123;<br>            <span class=\"hljs-attribute\">color</span>:green;<br>        &#125;<br><br>        <span class=\"hljs-selector-class\">.c2</span>&#123;<br>            <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;<br>        &#125;<br><br>    &lt;/style&gt;<br><br>&lt;/head&gt;<br>&lt;<span class=\"hljs-selector-tag\">body</span>&gt;<br><br>&lt;<span class=\"hljs-selector-tag\">h1</span> class=&quot;bl&quot;&gt;注册界面&lt;/<span class=\"hljs-selector-tag\">h1</span>&gt;<br>    &lt;<span class=\"hljs-selector-tag\">form</span> method=&quot;post&quot; action=&quot;/post/reg&quot;&gt;<br>          &lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;c2&quot;&gt;<br>             用户名：&lt;<span class=\"hljs-selector-tag\">input</span> type=&quot;text&quot; name=&quot;user&quot;/&gt;<br>          &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br><br>          &lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;c2&quot;&gt;<br>             密码： &lt;<span class=\"hljs-selector-tag\">input</span> type=&quot;password&quot; name=&quot;psw&quot;/&gt;<br>          &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br> &lt;<span class=\"hljs-selector-tag\">div</span>&gt;<br>    &lt;<span class=\"hljs-selector-tag\">input</span> type=&quot;submit&quot; /&gt;<br>  &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>    &lt;/<span class=\"hljs-selector-tag\">form</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">body</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">html</span>&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>放在head部位用css样式。</li>\n</ul>\n<h3 id=\"选择器\"><a class=\"markdownIt-Anchor\" href=\"#选择器\"></a> 选择器</h3>\n<ul>\n<li>ID选择器</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">#标识名&#123;<br>        属性:属性值;<br>        属性:属性值;<br>        &#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>类选择器（用的最多）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">.类名&#123;<br>        属性:属性值;<br>        属性:属性值;<br>        &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>标签选择器</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">标签名&#123;<br>   <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>属性选择器</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&#x27;text&#x27;</span>]</span>&#123;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>&#125;<br><br><span class=\"hljs-selector-class\">.v1</span><span class=\"hljs-selector-attr\">[xx=<span class=\"hljs-string\">&quot;123&quot;</span>]</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>:gold;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>后代选择器</li>\n</ul>\n<p>先找到包含yy这个类的部分，再将yy内部含有li标签的都变为这个样式。（子子孙孙）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.yy</span> <span class=\"hljs-selector-tag\">li</span>&#123;<br>   <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>只找子代</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.yy</span>&gt;<span class=\"hljs-selector-tag\">li</span>&#123;<br>   <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a class=\"markdownIt-Anchor\" href=\"#样式\"></a> 样式</h3>\n<h4 id=\"高度和宽度\"><a class=\"markdownIt-Anchor\" href=\"#高度和宽度\"></a> 高度和宽度</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.c1</span>&#123;<br>   <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">300px</span><br>   width:<span class=\"hljs-number\">500px</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>宽度支持百分比，高度不支持。</li>\n<li>行内标签：默认无效</li>\n<li>块级标签：默认有效</li>\n</ul>\n<h4 id=\"块级和行内标签\"><a class=\"markdownIt-Anchor\" href=\"#块级和行内标签\"></a> 块级和行内标签</h4>\n<ul>\n<li>display: inline-block;</li>\n<li>具有行内和块级特性</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.c3</span>&#123;<br>                <span class=\"hljs-attribute\">display</span>: inline-block;<br>                <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100px</span>;<br>                <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;<br>                <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>            &#125;<br></code></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p>display: inline;强制行内</p>\n<p>display: block;强制块级</p>\n<h4 id=\"字体和颜色\"><a class=\"markdownIt-Anchor\" href=\"#字体和颜色\"></a> 字体和颜色</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.bl</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>:deepskyblue;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">59px</span>;<br>    <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">400</span>;<br>    <span class=\"hljs-attribute\">font-family</span>:  Microsoft Yahei;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"文字对齐方式\"><a class=\"markdownIt-Anchor\" href=\"#文字对齐方式\"></a> 文字对齐方式</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.test</span>&#123;<br>         <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100px</span>;<br>         <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;<br>         <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br><br>         <span class=\"hljs-attribute\">text-align</span>: center;<span class=\"hljs-comment\">/*水平方向居中*/</span><br>         <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-comment\">/*垂直方向居中 和高度像素值相同*/</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"浮动\"><a class=\"markdownIt-Anchor\" href=\"#浮动\"></a> 浮动</h3>\n<p>将span内容移动到右边显示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span>&gt;<br>        &lt;<span class=\"hljs-selector-tag\">span</span>&gt;测试<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-selector-tag\">span</span>&gt;<br>        &lt;<span class=\"hljs-selector-tag\">span</span> style=&quot;<span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:right</span>&quot;&gt;测试<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-selector-tag\">span</span>&gt;<br>    &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>浮动之后，块级标签不会占用一整行，但是浮动之后无法破坏了文档流，<strong>需要在最后加入</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">clear</span>: both;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"内边距\"><a class=\"markdownIt-Anchor\" href=\"#内边距\"></a> 内边距</h3>\n<p>边框内部设置内边距,不加左右就是全部</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">padding-top</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding-left</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding-right</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding-bottom</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding</span>:<span class=\"hljs-number\">20px</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"外边距\"><a class=\"markdownIt-Anchor\" href=\"#外边距\"></a> 外边距</h3>\n<p>margin-top、margin-left、margin-right、margin-bottom</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">background-color</span>:dodgerblue;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">background-color</span>:red;<span class=\"hljs-attribute\">margin-top</span>:<span class=\"hljs-number\">20px</span>;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"去除外部间距\"><a class=\"markdownIt-Anchor\" href=\"#去除外部间距\"></a> 去除外部间距</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;style&gt;<br>     <span class=\"hljs-selector-tag\">body</span>&#123;<br>           <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span> ;<br>         &#125;<br>&lt;/style&gt;    <br></code></pre></td></tr></table></figure>\n<h3 id=\"居中\"><a class=\"markdownIt-Anchor\" href=\"#居中\"></a> 居中</h3>\n<ul>\n<li>内容居中：text-align: center;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">text-align</span>: center;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>区域居中：自己要有宽度加</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">margin-left</span>:auto;<br><span class=\"hljs-attribute\">margin-right</span>:auto;<br></code></pre></td></tr></table></figure>\n<h3 id=\"鼠标放上去变色\"><a class=\"markdownIt-Anchor\" href=\"#鼠标放上去变色\"></a> 鼠标放上去变色</h3>\n<p>主要： ：hover</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.sub-header</span> <span class=\"hljs-selector-class\">.menu_list</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff6700</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"position定位\"><a class=\"markdownIt-Anchor\" href=\"#position定位\"></a> position定位</h3>\n<h4 id=\"fixed\"><a class=\"markdownIt-Anchor\" href=\"#fixed\"></a> fixed</h4>\n<p>固定在窗口的某个位置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.back</span>&#123;<br>    <span class=\"hljs-attribute\">position</span>: fixed;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">60px</span>;<br>    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">60px</span>;<br>    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>    <span class=\"hljs-attribute\">right</span>:<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">500px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"relative和absolute\"><a class=\"markdownIt-Anchor\" href=\"#relative和absolute\"></a> relative和absolute</h4>\n<p>加入absolute的相对relative的位置变化。</p>\n<h2 id=\"bootstrap\"><a class=\"markdownIt-Anchor\" href=\"#bootstrap\"></a> BootStrap</h2>\n<h3 id=\"导航\"><a class=\"markdownIt-Anchor\" href=\"#导航\"></a> 导航</h3>\n<p><a href=\"https://v3.bootcss.com/components/#nav\">组件 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)</a></p>\n<h3 id=\"栅格\"><a class=\"markdownIt-Anchor\" href=\"#栅格\"></a> 栅格</h3>\n<p><a href=\"https://v3.bootcss.com/css/#grid\">全局 CSS 样式 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)</a></p>\n<ul>\n<li>\n<p>把整体分为12格</p>\n</li>\n<li>\n<p>分类</p>\n<ul>\n<li>\n<p>响应式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.col-sm-</span>  <span class=\"hljs-number\">750px</span><br><span class=\"hljs-selector-class\">.col-md-</span>  <span class=\"hljs-number\">970px</span><br><span class=\"hljs-selector-class\">.col-lg-</span>  <span class=\"hljs-number\">1170px</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>非响应式</p>\n<p>.col-xs-</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-xs-<span class=\"hljs-number\">6</span>&quot; style=&quot;<span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#2aabd2</span><span class=\"hljs-string\">&quot;&gt;  1&lt;/div&gt;</span><br><span class=\"hljs-string\"> &lt;div class=&quot;</span>col-xs-<span class=\"hljs-number\">10</span><span class=\"hljs-string\">&quot; style=&quot;</span>background-color: <span class=\"hljs-number\">#5cb85c</span><span class=\"hljs-string\">&quot;&gt; 2 &lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>列偏移</p>\n</li>\n</ul>\n<p>col-xs-offset-2</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-xs-offset-<span class=\"hljs-number\">2</span> col-xs-<span class=\"hljs-number\">6</span>&quot; style=&quot;<span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#2aabd2</span><span class=\"hljs-string\">&quot;&gt;  1&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"container\"><a class=\"markdownIt-Anchor\" href=\"#container\"></a> container</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;container&quot;&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">9</span>&quot;&gt;左边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">3</span>&quot;&gt;右边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;container-fluid&quot;&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">9</span>&quot;&gt;左边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">3</span>&quot;&gt;右边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"图标\"><a class=\"markdownIt-Anchor\" href=\"#图标\"></a> 图标</h3>\n<p>1.bootsrap</p>\n<p>2.font awesome</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;script <span class=\"hljs-attribute\">src</span>=&quot;https://kit.fontawesome.com/<span class=\"hljs-number\">5</span>efd8aed42.js<span class=\"hljs-string\">&quot; crossorigin=&quot;</span>anonymous<span class=\"hljs-string\">&quot;&gt;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\"></a> JavaScript</h2>\n<p>是一门编程语言，浏览器是JavaScript语言的解释器。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;script <span class=\"hljs-attribute\">src</span>=&quot;static/js/jquery-<span class=\"hljs-number\">3.6</span>.<span class=\"hljs-number\">1</span><span class=\"hljs-selector-class\">.min</span><span class=\"hljs-selector-class\">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;script <span class=\"hljs-attribute\">src</span>=&quot;static/plugins/bootstrap-<span class=\"hljs-number\">3.4</span>.<span class=\"hljs-number\">1</span>/js/bootstrap<span class=\"hljs-selector-class\">.min</span><span class=\"hljs-selector-class\">.js</span>&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"dom和bom\"><a class=\"markdownIt-Anchor\" href=\"#dom和bom\"></a> DOM和BOM</h3>\n<p>相当于语言的内置模块</p>\n<h4 id=\"dom\"><a class=\"markdownIt-Anchor\" href=\"#dom\"></a> DOM</h4>\n<p>DOM，就是一个模块，模块可以对HTML页面中的标签进行操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//创建标签&lt;div&gt;&lt;/div&gt;</span><br><span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElementById</span>(<span class=\"hljs-string\">&quot;div&quot;</span>);<br><br><span class=\"hljs-comment\">//在标签中添加内容</span><br> tag.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&quot;123&quot;</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//根据ID获取标签</span><br><span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;xx&quot;</span>);<br><br><span class=\"hljs-comment\">//在标签中添加内容</span><br> tag.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&quot;123&quot;</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;city&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--    &lt;li&gt;北京&lt;/li&gt; --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--    &lt;li&gt;上海&lt;/li&gt; --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--    &lt;li&gt;深圳&lt;/li&gt; --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> cityList = [<span class=\"hljs-string\">&quot;北京&quot;</span>, <span class=\"hljs-string\">&quot;上海&quot;</span>, <span class=\"hljs-string\">&quot;深圳&quot;</span>, <span class=\"hljs-string\">&quot;广州&quot;</span>];</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> idx <span class=\"hljs-keyword\">in</span> cityList) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> text = cityList[idx];</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//创建li标签</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;li&quot;</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//在标签中添加内容</span></span><br><span class=\"language-javascript\">        tag.<span class=\"hljs-property\">innerText</span> = text;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//添加到id=city的标签中(DOM)</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;city&quot;</span>);</span><br><span class=\"language-javascript\">        parent.<span class=\"hljs-title function_\">append</span>(tag);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"jquery\"><a class=\"markdownIt-Anchor\" href=\"#jquery\"></a> jQuery</h3>\n<p>相当于第三方模块</p>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;小明&quot;</span>;<span class=\"hljs-comment\">//变量</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name);<span class=\"hljs-comment\">//打印</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\"></a> 字符串类型</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;小明&quot;</span>;<span class=\"hljs-comment\">//变量</span><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;小明&quot;</span>);<span class=\"hljs-comment\">//变量</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//常见功能</span><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;中国联通&quot;</span>;<br><br><span class=\"hljs-keyword\">var</span> v1 = name.<span class=\"hljs-property\">length</span>;<span class=\"hljs-comment\">//获取长度</span><br><span class=\"hljs-keyword\">var</span> v2 = name[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//获得第一个&quot;中”</span><br><span class=\"hljs-keyword\">var</span> v3 = name.<span class=\"hljs-title function_\">trim</span>();<span class=\"hljs-comment\">//去除空白</span><br><span class=\"hljs-keyword\">var</span> v4 = name.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//前取后不取，获得&quot;中国&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h3>\n<p>定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><span class=\"hljs-keyword\">var</span> v2 = <span class=\"hljs-title class_\">Array</span>([<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>]);<br></code></pre></td></tr></table></figure>\n<p>操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><span class=\"hljs-comment\">//获取值</span><br><span class=\"hljs-keyword\">var</span> v2 = v1[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-comment\">//修改值</span><br>v1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;小明&quot;</span>;<br><span class=\"hljs-comment\">//在尾部添加值</span><br>v1.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;联通&quot;</span>);<br><span class=\"hljs-comment\">//在前面插入值</span><br>v1.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-string\">&quot;移动&quot;</span>);<br><span class=\"hljs-comment\">//指定位置插入值</span><br><span class=\"hljs-comment\">//格式：v1.splice(索引位置,0,元素);</span><br>v1.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;元素&quot;</span>);<span class=\"hljs-comment\">//[11,&quot;中国&quot;,22,33,44]</span><br><br><span class=\"hljs-comment\">//删除</span><br>v1.<span class=\"hljs-title function_\">pop</span>()<span class=\"hljs-comment\">//尾部删除</span><br>v1.<span class=\"hljs-title function_\">shift</span>()<span class=\"hljs-comment\">//头部删除</span><br>v1.<span class=\"hljs-title function_\">splice</span>(索引位置,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//删除索引位置的元素</span><br>v1.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//删除索引位置2的元素 [11,33,44]</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> idx <span class=\"hljs-keyword\">in</span> v1)&#123;<br>    <br>   <span class=\"hljs-comment\">//idx=0/1/2/3    data=v1[idx] </span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;v1.<span class=\"hljs-property\">length</span>;i++)&#123;<br>    <br>   <span class=\"hljs-comment\">//i=0/1/2/3    data=v1[idx] </span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态标签\"><a class=\"markdownIt-Anchor\" href=\"#动态标签\"></a> 动态标签</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> cityList=[<span class=\"hljs-string\">&quot;北京&quot;</span>,<span class=\"hljs-string\">&quot;上海&quot;</span>,<span class=\"hljs-string\">&quot;深圳&quot;</span>,<span class=\"hljs-string\">&quot;广州&quot;</span>];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> idx <span class=\"hljs-keyword\">in</span> cityList)&#123;<br>        <span class=\"hljs-keyword\">var</span> text = cityList[idx];<br><br>        <span class=\"hljs-comment\">//创建li标签</span><br>        <span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;li&quot;</span>);<br>        <span class=\"hljs-comment\">//在标签中添加内容</span><br>        tag.<span class=\"hljs-property\">innerText</span> = text;<br>        <span class=\"hljs-comment\">//添加到id=city的标签中(DOM)</span><br>        <span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;city&quot;</span>);<br>        parent.<span class=\"hljs-title function_\">append</span>(tag);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"对象字典\"><a class=\"markdownIt-Anchor\" href=\"#对象字典\"></a> 对象（字典）</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">info = &#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;小明&quot;</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"对对象进行操作\"><a class=\"markdownIt-Anchor\" href=\"#对对象进行操作\"></a> 对对象进行操作</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">info.<span class=\"hljs-property\">age</span>  <span class=\"hljs-comment\">//获取内容</span><br>info.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;小红&quot;</span>;  <span class=\"hljs-comment\">//修改内容</span><br><span class=\"hljs-keyword\">delete</span> info[<span class=\"hljs-string\">&quot;name&quot;</span>];  <span class=\"hljs-comment\">//删除内容</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"对对象进行循环\"><a class=\"markdownIt-Anchor\" href=\"#对对象进行循环\"></a> 对对象进行循环</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> info)&#123;<br>   <span class=\"hljs-comment\">//key=name/age     data=info[key]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态表格\"><a class=\"markdownIt-Anchor\" href=\"#动态表格\"></a> 动态表格</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> dataList = [<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小明&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小白&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小红&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小军&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小李&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;<br>    ];<br><br>    <span class=\"hljs-keyword\">for</span> (idx <span class=\"hljs-keyword\">in</span> dataList) &#123;<br>        <span class=\"hljs-keyword\">var</span> info = dataList[idx];<br>        <span class=\"hljs-keyword\">var</span> tr = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;tr&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> info) &#123;<br>            <span class=\"hljs-keyword\">var</span> my_text = info[key];<br>            <span class=\"hljs-keyword\">var</span> td = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;td&quot;</span>)<br>            td.<span class=\"hljs-property\">innerText</span> = my_text;<br>            tr.<span class=\"hljs-title function_\">appendChild</span>(td);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">var</span> body_tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;body&quot;</span>);<br>        body_tag.<span class=\"hljs-title function_\">append</span>(tr);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"条件语句\"><a class=\"markdownIt-Anchor\" href=\"#条件语句\"></a> 条件语句</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span>( 条件 ) &#123;<br><br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>&#123;<br><br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\"></span>)&#123;<br>   ...<br>&#125;<br><br><span class=\"hljs-comment\">//执行函数</span><br>   <span class=\"hljs-title function_\">func</span>();<br></code></pre></td></tr></table></figure>\n<h3 id=\"事件绑定\"><a class=\"markdownIt-Anchor\" href=\"#事件绑定\"></a> 事件绑定</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入内容&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;my_txt&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;点击添加&quot;</span>  <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;addCityInfo()&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;my_city&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addCityInfo</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//找到标签</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> txtTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;my_txt&quot;</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//获取用户输入的内容</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> new_string = txtTag.<span class=\"hljs-property\">value</span>;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//判断用户输入是否为空</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">if</span> (new_string.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">//创建新的标签</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">var</span> newTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;li&quot;</span>);</span><br><span class=\"language-javascript\">            newTag.<span class=\"hljs-property\">innerText</span> = new_string;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">//标签添加到ul中</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">var</span> parentTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;my_city&quot;</span>);</span><br><span class=\"language-javascript\">            parentTag.<span class=\"hljs-title function_\">appendChild</span>(newTag);</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">//将输入框内容清空</span></span><br><span class=\"language-javascript\">            txtTag.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&quot;&quot;</span>;</span><br><span class=\"language-javascript\">        &#125;<span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;输入不能为空！&quot;</span>);</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"jquery-2\"><a class=\"markdownIt-Anchor\" href=\"#jquery-2\"></a> JQuery</h2>\n<h3 id=\"初识jquery\"><a class=\"markdownIt-Anchor\" href=\"#初识jquery\"></a> 初识JQuery</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;JQ_test&quot;</span>&gt;</span> JQuery测试 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  </span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//利用JQuery实现某些功能</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//找到id=&quot;&quot;的标签并修改</span></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-string\">&quot;#JQ_test&quot;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;JQ修改&quot;</span>);</span><br><span class=\"language-javascript\">    </span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"直接寻找标签\"><a class=\"markdownIt-Anchor\" href=\"#直接寻找标签\"></a> 直接寻找标签</h3>\n<ul>\n<li>ID选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;JQ_test&quot;</span>&gt;</span> JQuery测试 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#JQ_test&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>样式选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>中国联通<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>标签选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>中国联通<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>层级选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1.c2 a&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>多选择器</li>\n</ul>\n<p>选择多个标签同时操作</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;u1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1,#u1,p&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>属性选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n1&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;input[name=&#x27;n1&#x27;]&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"间接寻找标签\"><a class=\"markdownIt-Anchor\" href=\"#间接寻找标签\"></a> 间接寻找标签</h3>\n<ul>\n<li>找到上一个兄弟</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>北京<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>广州<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>深圳<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">prev</span>()\t<span class=\"hljs-comment\">//上一个</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>)<br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">next</span>()\t<span class=\"hljs-comment\">//下一个</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-title function_\">next</span>()\t<span class=\"hljs-comment\">//下下一个</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">siblings</span>()\t<span class=\"hljs-comment\">//所有同级标签（兄弟）</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>找父子</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>老大<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;d2&quot;</span>&gt;</span>老二<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">parent</span>()\t<span class=\"hljs-comment\">//父亲</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">parent</span>()\t<span class=\"hljs-comment\">//祖父</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">children</span>()\t<span class=\"hljs-comment\">//所有孩子</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">children</span>(<span class=\"hljs-string\">&quot;.d2&quot;</span>)\t<span class=\"hljs-comment\">//所有的孩子中寻找class=d2的孩子</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;.d2&quot;</span>)\t<span class=\"hljs-comment\">//去寻找class=d2的所有子孙</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;div&quot;</span>)\t<span class=\"hljs-comment\">//去寻找div标签的所有子孙</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"案例菜单切换\"><a class=\"markdownIt-Anchor\" href=\"#案例菜单切换\"></a> 案例：菜单切换</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>菜单<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.menu</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">800px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#2aabd2</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.menu</span> <span class=\"hljs-selector-class\">.header</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">cursor</span>: pointer; <span class=\"hljs-comment\">/* 鼠标放上去变成手 */</span></span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">5px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> dotted <span class=\"hljs-number\">#ddd</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">linear-gradient</span>(<span class=\"hljs-number\">#37ff00</span>, <span class=\"hljs-number\">#16a5d3</span>);</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.item</span> <span class=\"hljs-selector-tag\">a</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">text-decoration</span>: none;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">5px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> dotted <span class=\"hljs-number\">#ddd</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.hide</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: none;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>北京<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>海淀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>朝阳区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>大兴区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>昌平区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>宝山区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>普陀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>浦东新区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>青浦区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>北京2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>海淀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>朝阳区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>大兴区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>昌平区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>上海2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>宝山区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>普陀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>浦东新区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>青浦区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//方法一：大家都可以展示</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// let i = 0;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// function clickme(self) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     if (i++ % 2 === 0) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().removeClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125; else &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().addClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// &#125;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//方法二：大家都可以展示</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// function clickme(self) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     var hasHide = $(self).next().hasClass(&quot;hide&quot;)</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     if (hasHide) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().removeClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125; else &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().addClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// &#125;</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//只展示自己，隐藏别人</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">clickme</span>(<span class=\"hljs-params\">self</span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//把自己的内容展示出来</span></span><br><span class=\"language-javascript\">        $(self).<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-title function_\">removeClass</span>(<span class=\"hljs-string\">&quot;hide&quot;</span>);</span><br><span class=\"language-javascript\">        $(self).<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">siblings</span>().<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;.content&quot;</span>).<span class=\"hljs-title function_\">addClass</span>(<span class=\"hljs-string\">&quot;hide&quot;</span>);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"操作样式\"><a class=\"markdownIt-Anchor\" href=\"#操作样式\"></a> 操作样式</h3>\n<ul>\n<li>\n<p>addClass</p>\n</li>\n<li>\n<p>removeClass</p>\n</li>\n<li>\n<p>hasClass</p>\n</li>\n</ul>\n<h3 id=\"值的操作\"><a class=\"markdownIt-Anchor\" href=\"#值的操作\"></a> 值的操作</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">text</span>() <span class=\"hljs-comment\">//获取内容</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;测试&quot;</span>) <span class=\"hljs-comment\">//设置内容</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;c2&quot;</span>).<span class=\"hljs-title function_\">val</span>()   <span class=\"hljs-comment\">//获取用户输入值</span><br>$(<span class=\"hljs-string\">&quot;c2&quot;</span>).<span class=\"hljs-title function_\">val</span>(<span class=\"hljs-string\">&quot;txt&quot;</span>)   <span class=\"hljs-comment\">//设置用户输入值</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"案例动态创建数据\"><a class=\"markdownIt-Anchor\" href=\"#案例动态创建数据\"></a> 案例：动态创建数据</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>动态创建数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txtUser&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txtEmail&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;邮箱&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;getinfo()&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;view&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getinfo</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> username = $(<span class=\"hljs-string\">&quot;#txtUser&quot;</span>).<span class=\"hljs-title function_\">val</span>();   <span class=\"hljs-comment\">//设置用户输入值</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> email = $(<span class=\"hljs-string\">&quot;#txtEmail&quot;</span>).<span class=\"hljs-title function_\">val</span>();</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">const</span> datastr = username + <span class=\"hljs-string\">&#x27;-&#x27;</span> + email;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//创建li标签</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> lusr = $(<span class=\"hljs-string\">&quot;&lt;li&gt;&quot;</span>).<span class=\"hljs-title function_\">text</span>(datastr);</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//把新创建的li标签添加到ul里面</span></span><br><span class=\"language-javascript\">        $(<span class=\"hljs-string\">&quot;#view&quot;</span>).<span class=\"hljs-title function_\">append</span>(lusr);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"事件\"><a class=\"markdownIt-Anchor\" href=\"#事件\"></a> 事件</h3>\n<p>绑定事件直接用 <code>$(&quot;&quot;)</code> 获取到标签直接定义事件即可 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.item&quot;</span>).<span class=\"hljs-title function_\">children</span>().<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;hello python&quot;</span>)<br>        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">remove</span>()<br>    &#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"案例设置和删除标签\"><a class=\"markdownIt-Anchor\" href=\"#案例设置和删除标签\"></a> 案例：设置和删除标签</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>设置和删除标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.item</span> <span class=\"hljs-selector-tag\">a</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">text-decoration</span>: none;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> a = $(<span class=\"hljs-string\">&quot;.item&quot;</span>).<span class=\"hljs-title function_\">children</span>();</span><br><span class=\"language-javascript\">    $(a).<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;hello python&quot;</span>);<span class=\"hljs-comment\">//设置标签</span></span><br><span class=\"language-javascript\">        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">remove</span>();<span class=\"hljs-comment\">//删除标签</span></span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>当页面框架加载完成之后执行代码(封装在$function之内):</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            $(<span class=\"hljs-string\">&quot;.item&quot;</span>).<span class=\"hljs-title function_\">children</span>().<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;hello python&quot;</span>);</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"案例表格操作\"><a class=\"markdownIt-Anchor\" href=\"#案例表格操作\"></a> 案例：表格操作</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>Alleyf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;删除&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>CHUIYUGIN<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;删除&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>小明<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;删除&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">// 找到所有class为delete的标签</span></span><br><span class=\"language-javascript\">        $(<span class=\"hljs-string\">&quot;.delete&quot;</span>).<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 删除当前行</span></span><br><span class=\"language-javascript\">            $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">remove</span>();</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"前端整合\"><a class=\"markdownIt-Anchor\" href=\"#前端整合\"></a> 前端整合</h2>\n<ul>\n<li>HTNL</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>Bootstrap(动态效果依赖jQuery)</li>\n</ul>\n<h3 id=\"案例添加数据页面\"><a class=\"markdownIt-Anchor\" href=\"#案例添加数据页面\"></a> 案例：添加数据页面</h3>\n<blockquote>\n<p>人员信息录入功能，需要提供用户信息：</p>\n<p>用户名、年龄、薪资、部门、入职时间（*）</p>\n<ul>\n<li>时间的选择：不能输入；选择：（插件）datetimepicker</li>\n</ul>\n<ul>\n<li>下载插件</li>\n<li>应用插件</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>添加数据页面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--生产版本--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-horizontal&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;姓名&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;年龄&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>薪资<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;薪资&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;brabch&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputbranch&quot;</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>IT部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>销售部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>人事资源管理部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>售后部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>运营部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>入职日期<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dt&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;入职日期&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-offset-6 col-sm-10&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>提 交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://kit.fontawesome.com/5efd8aed42.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>=<span class=\"hljs-string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-datetimepicker-master/js/locales/bootstrap-datetimepicker.zh-CN.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">        $(<span class=\"hljs-string\">&#x27;#dt&#x27;</span>).<span class=\"hljs-title function_\">datetimepicker</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">fomat</span>: <span class=\"hljs-string\">&#x27;yyyy-mm-dd&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">startDate</span>: <span class=\"hljs-string\">&#x27;0&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">&#x27;zh-CN&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">autoclose</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">        &#125;);</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"mysql\"><a class=\"markdownIt-Anchor\" href=\"#mysql\"></a> MySQL</h2>\n<h3 id=\"进入mysqlcmd进入终端\"><a class=\"markdownIt-Anchor\" href=\"#进入mysqlcmd进入终端\"></a> 进入MySQL：cmd进入终端</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">mysql <span class=\"hljs-operator\">-</span>u root <span class=\"hljs-operator\">-</span>p1234<br></code></pre></td></tr></table></figure>\n<h3 id=\"查看\"><a class=\"markdownIt-Anchor\" href=\"#查看\"></a> 查看</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> databases;<br></code></pre></td></tr></table></figure>\n<h3 id=\"退出\"><a class=\"markdownIt-Anchor\" href=\"#退出\"></a> 退出</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">exit;<br></code></pre></td></tr></table></figure>\n<h3 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\"></a> 基本数据类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tinyint</td>\n<td>短整形()，相当于java的short，有符号(默认)，取值范围：-128<sub>127；无符号(用关键词unsigned指定)，取值范围：0</sub>255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int</strong></td>\n<td>整形，相当于java的int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigint</td>\n<td>长整形，相当于java的long</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td>单精度浮点型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>double</strong></td>\n<td>双精度浮点型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">decimal</td>\n<td>准确的小数值，eg：wage decimal(m,n) –总共m位数(负号不算)，其中小数点后有n位，m<s>max</s>=65，n<s>max</s>=30.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>datatime</strong></td>\n<td>日期类型，YYYY-MM-DD HH:MM:SS(2022-12-09 21:03:00)，dt转为字符串类型显示**（dt.strftime(“%Y-%m-%d %H:%M:%S”)）**</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td>日期类型（无时分秒）YYYY-MM-DD</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td>日期类型（可存储时间戳）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>char</strong></td>\n<td>定长字符，固定字符长度，最大255个字符，速度快，常存储：手机号，邮箱，加密后的密码等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>varchar</strong></td>\n<td>不定长字符，有多少存多少，最大65535个字节，节省空间，长度是动态变化的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td>大文字，用于存储很长的字符内容，可存储65535个字符，例如：文章，新闻等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumtext</td>\n<td>中等文本，最多存储16777215（2<sup>24</sup>-1)个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">longtext</td>\n<td>长文本，最多存储4294967295（4GB）（2<sup>32</sup>-1)个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">blob</td>\n<td>字节数据类型，存储图片、音频等文件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据库管理文件夹\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理文件夹\"></a> 数据库管理(文件夹)</h3>\n<ul>\n<li>查看当前已有数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> databases;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>创建数据库 (文件夹)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> database 数据库名；<br><span class=\"hljs-keyword\">create</span> database 数据库名 <span class=\"hljs-keyword\">DEFAULT</span> CHARSET utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>删除数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> database 数据库名；<br></code></pre></td></tr></table></figure>\n<ul>\n<li>进入数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">use 数据库名；<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查看当前数据库下的所有数据表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> tables；<br></code></pre></td></tr></table></figure>\n<h3 id=\"数据表管理\"><a class=\"markdownIt-Anchor\" href=\"#数据表管理\"></a> 数据表管理</h3>\n<ul>\n<li>创建表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> 表名(<br>\t字段名 类型，<br>    字段名 类型，<br>    ···<br>    字段名 类型<br>)<span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8；<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> 表名(<br>\t字段名 类型 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> auto_increment <span class=\"hljs-keyword\">primary</span> key，\t<span class=\"hljs-comment\">--主键（不允许为空，不允许重复）自增特性</span><br>    字段名 类型 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>，<span class=\"hljs-comment\">--不允许为空</span><br>    字段名 类型 <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">3</span>，<span class=\"hljs-comment\">--插入数据时，默认值为3，当不插入值时默认为3</span><br>    ···<br>    字段名 类型 <span class=\"hljs-keyword\">null</span> \t<span class=\"hljs-comment\">--允许为空（默认）</span><br>)<span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8；<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><mark>主键一般用于表示当前行的编号</mark>（类似于身份证）。</p>\n</blockquote>\n<ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> medocsys(<br>\tid <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> auto_increment <span class=\"hljs-keyword\">primary</span> key,<br>\tname <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>    pwd <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">15</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span><br>) <span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查看创建表的信息</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">desc</span> 表名<br></code></pre></td></tr></table></figure>\n<ul>\n<li>插入数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">单条插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br>批量插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),···(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br></code></pre></td></tr></table></figure>\n<h3 id=\"数据行操作\"><a class=\"markdownIt-Anchor\" href=\"#数据行操作\"></a> 数据行操作</h3>\n<h4 id=\"新增数据\"><a class=\"markdownIt-Anchor\" href=\"#新增数据\"></a> 新增数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">单条插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br>批量插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),···(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除数据\"><a class=\"markdownIt-Anchor\" href=\"#删除数据\"></a> 删除数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> 表名；<span class=\"hljs-comment\">--删除所有数据</span><br><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> 表名 <span class=\"hljs-keyword\">where</span> 条件；<span class=\"hljs-comment\">--删除满足条件的数据</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>delete from tb1 where id&gt;=10 or name=”yugin”;</p>\n</blockquote>\n<h4 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\"></a> 修改数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> 表名 <span class=\"hljs-keyword\">set</span> 字段名<span class=\"hljs-operator\">=</span>值；<br><span class=\"hljs-keyword\">update</span> 表名 <span class=\"hljs-keyword\">set</span> 字段名<span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span>值，字段名<span class=\"hljs-number\">2</span><span class=\"hljs-operator\">=</span>值；<br><span class=\"hljs-keyword\">update</span> 表名 <span class=\"hljs-keyword\">set</span> 字段名<span class=\"hljs-operator\">=</span>值 <span class=\"hljs-keyword\">where</span> 条件；<br>eg：<span class=\"hljs-keyword\">update</span> tb1 <span class=\"hljs-keyword\">set</span> name<span class=\"hljs-operator\">=</span>&quot;yugin&quot;, pwd<span class=\"hljs-operator\">=</span>pwd<span class=\"hljs-operator\">+</span>&quot;10&quot;;<br></code></pre></td></tr></table></figure>\n<h4 id=\"查询数据\"><a class=\"markdownIt-Anchor\" href=\"#查询数据\"></a> 查询数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">查询表所有数据<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> 表名；<br>查询对应字段的数据<br><span class=\"hljs-keyword\">select</span> 字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">from</span> 表名；<br>条件查询数据<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> 表名 <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">3</span>；<br></code></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h3>\n<p>一般开发：</p>\n<ul>\n<li>创建数据库</li>\n<li>创建数据表</li>\n</ul>\n<blockquote>\n<p><mark>提前用工具创建好</mark></p>\n</blockquote>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> database unicom <span class=\"hljs-keyword\">DEFAULT</span> CHARSET utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>创建表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> admin(<br>\tid <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> auto_increment <span class=\"hljs-keyword\">primary</span> key,<br>    username <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">16</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>    password <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>    mobile <span class=\"hljs-type\">char</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> \t<br>)<span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8;<br></code></pre></td></tr></table></figure>\n<h3 id=\"python操作mysql\"><a class=\"markdownIt-Anchor\" href=\"#python操作mysql\"></a> Python操作MySQL</h3>\n<ul>\n<li>创建数据</li>\n</ul>\n<blockquote>\n<p>在进行增删改的时候需要执行<code>commit</code>，不然数据库没有数据</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br><br><span class=\"hljs-comment\">#1.连接上本地mysql</span><br>conn = pymysql.connect(host=<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,port=<span class=\"hljs-number\">3306</span>,user=<span class=\"hljs-string\">&quot;root&quot;</span>,password=<span class=\"hljs-string\">&quot;1234&quot;</span>,charset=<span class=\"hljs-string\">&quot;utf8&quot;</span>,db=<span class=\"hljs-string\">&quot;unicom&quot;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class=\"hljs-comment\">#发送指令</span><br>sql=<span class=\"hljs-string\">&quot;insert into admin(username,password,mobile) values(%(name)s,%(psw)s,%(mobile)s)&quot;</span><br>cursor.execute(sql,&#123;<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&#x27;alleyf2&#x27;</span>,<span class=\"hljs-string\">&quot;psw&quot;</span>:<span class=\"hljs-string\">&#x27;alleyf1234&#x27;</span>,<span class=\"hljs-string\">&quot;mobile&quot;</span>:<span class=\"hljs-string\">&#x27;18127896898&#x27;</span>&#125;)<br>conn.commit()<br><br><span class=\"hljs-comment\">#关闭</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查询数据</li>\n</ul>\n<blockquote>\n<p>在进行查询的时候不需要执行<code>commit</code>，但是要执行<code>fetchall/fetchone</code>获取到返回的数据</p>\n<p>返回列表的形式，列表里面包含字典。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br><br><br><span class=\"hljs-comment\">#1.连接上本地mysql</span><br>conn = pymysql.connect(host=<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,port=<span class=\"hljs-number\">3306</span>,user=<span class=\"hljs-string\">&quot;root&quot;</span>,password=<span class=\"hljs-string\">&quot;1234&quot;</span>,charset=<span class=\"hljs-string\">&quot;utf8&quot;</span>,db=<span class=\"hljs-string\">&quot;unicom&quot;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class=\"hljs-comment\">#发送指令</span><br>sql=<span class=\"hljs-string\">&quot;select * from admin&quot;</span><br><br><span class=\"hljs-comment\"># 获取返回的所有数据（包含字典成员的列表）</span><br>cursor.execute(sql)<br>data_list = cursor.fetchall()<br><br><span class=\"hljs-comment\"># 获取返回的第一条数据</span><br>cursor.execute(sql)<br>my_first = cursor.fetchone()<br><br><span class=\"hljs-keyword\">for</span> row_dict <span class=\"hljs-keyword\">in</span> data_list:<br> <span class=\"hljs-built_in\">print</span>(row_dict)<br><br><span class=\"hljs-built_in\">print</span>(my_first)<br><br><span class=\"hljs-comment\">#关闭</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure>\n<h2 id=\"django\"><a class=\"markdownIt-Anchor\" href=\"#django\"></a> Django</h2>\n<h3 id=\"默认文件介绍\"><a class=\"markdownIt-Anchor\" href=\"#默认文件介绍\"></a> 默认文件介绍</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">│  manage<span class=\"hljs-selector-class\">.py</span>\t【项目的管理，启动项目，创建app，数据管理】【不能动】【常常用】<br>│<br>├─<span class=\"hljs-selector-class\">.idea</span><br>│  │  <span class=\"hljs-selector-class\">.gitignore</span><br>│  │  misc<span class=\"hljs-selector-class\">.xml</span><br>│  │  modules<span class=\"hljs-selector-class\">.xml</span><br>│  │  mysite<span class=\"hljs-selector-class\">.iml</span><br>│  │  workspace<span class=\"hljs-selector-class\">.xml</span><br>│  │<br>│  └─inspectionProfiles<br>│          profiles_settings<span class=\"hljs-selector-class\">.xml</span><br>│<br>├─mysite<br>│  │  settings<span class=\"hljs-selector-class\">.py</span>\t【项目配置文件】【常修改】<br>│  │  urls<span class=\"hljs-selector-class\">.py</span>\t【URL和函数的对应关系】【常修改】<br>│  │  asgi<span class=\"hljs-selector-class\">.py</span>\t【接收网络请求】【不能动】<br>│  │  wsgi<span class=\"hljs-selector-class\">.py</span>\t【接收网络请求】【不能动】<br>│  │  __init__<span class=\"hljs-selector-class\">.py</span><br>│  │<br>│  └─__pycache__<br>│          settings<span class=\"hljs-selector-class\">.cpython-310</span><span class=\"hljs-selector-class\">.pyc</span><br>│          __init__<span class=\"hljs-selector-class\">.cpython-310</span><span class=\"hljs-selector-class\">.pyc</span><br>│<br>└─__pycache__<br>        manage<span class=\"hljs-selector-class\">.cpython-310</span>.pyc<br></code></pre></td></tr></table></figure>\n<h3 id=\"app\"><a class=\"markdownIt-Anchor\" href=\"#app\"></a> APP</h3>\n<h4 id=\"创建app\"><a class=\"markdownIt-Anchor\" href=\"#创建app\"></a> 创建APP</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">python manage.py startapp [名字]<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">-项目<br>\t-app，用户管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>\t-app，订单管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>\t-app，后台管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>   \t-app，网站管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>   \t-app，API    【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>   \t···<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>basic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs visual\">├─app1<br>│  │  admin.py\t【固定，不用动】django默认提供了admin后台管理<br>│  │  apps.py\t【固定，不用动】app启动类<br>│  │  models.py\t【重要，模型层】对数据库操作<br>│  │  tests.py\t【固定，不用动】单元测试<br>│  │  views.py\t【重要，视图层】前后端交互处理请求返回结果的函数<br>│  │  __init__.py<br>│  │<br>│  └─migrations\t【固定，不用动】数据库变更记录<br>│          __init__.py<br></code></pre></td></tr></table></figure>\n<h3 id=\"快速上手\"><a class=\"markdownIt-Anchor\" href=\"#快速上手\"></a> 快速上手</h3>\n<ul>\n<li><strong>确保app已注册【<a href=\"http://setting.py\">setting.py</a>】</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>    <span class=\"hljs-string\">&quot;django.contrib.admin&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.auth&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.contenttypes&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.sessions&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.messages&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.staticfiles&quot;</span>,<br>    <span class=\"hljs-string\">&quot;app01.apps.App01Config&quot;</span>          <span class=\"hljs-comment\">#注册app01</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>编写URL和视图函数对应关系【<a href=\"http://urls.py\">urls.py</a>】</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin<br><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> app01 <span class=\"hljs-keyword\">import</span> views<br><br>urlpatterns = [<br>    <span class=\"hljs-comment\"># path(&quot;admin/&quot;, admin.site.urls),</span><br>    path(<span class=\"hljs-string\">&quot;index/&quot;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>编写视图函数【<a href=\"http://view.py\">view.py</a>】</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, HttpResponse<br><br><br><span class=\"hljs-comment\"># Create your views here.</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;欢迎访问YUGIN Blog&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>启动Django项目</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">1.</span>命令行启动<br>python manage.py runserver<br><span class=\"hljs-number\">2.</span>pycharm启动<br>直接点击pycharm里的启动按钮<br></code></pre></td></tr></table></figure>\n<h3 id=\"编写页面\"><a class=\"markdownIt-Anchor\" href=\"#编写页面\"></a> 编写页面</h3>\n<h4 id=\"引入html\"><a class=\"markdownIt-Anchor\" href=\"#引入html\"></a> 引入HTML</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_list</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-comment\"># 根据app注册顺序,去每个app目录下的templates中寻找对应的html</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_list.html&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"静态文件\"><a class=\"markdownIt-Anchor\" href=\"#静态文件\"></a> 静态文件</h4>\n<p>一般开发过程中：</p>\n<ul>\n<li>图片</li>\n<li>CSS</li>\n<li>Js</li>\n</ul>\n<p>都会当做静态文件处理！</p>\n<ul>\n<li>\n<p>一般在app目录下放置static文件夹</p>\n</li>\n<li>\n<p>注意Django一般引入静态文件：</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户列表<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>用户列表<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"模板语法\"><a class=\"markdownIt-Anchor\" href=\"#模板语法\"></a> 模板语法</h3>\n<ul>\n<li>\n<p>本质上：在html中写一些占位符，由数据对这些占位符进行替换和处理。</p>\n</li>\n<li>\n<p>注意：取单独值的时候用<code>.</code>进行索引</p>\n</li>\n</ul>\n<p><strong><a href=\"http://views.py\">views.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tpl</span>(<span class=\"hljs-params\">request</span>):<br>    name = <span class=\"hljs-string\">&quot;小明&quot;</span><br>    roles = [<span class=\"hljs-string\">&quot;管理员&quot;</span>, <span class=\"hljs-string\">&quot;CEO&quot;</span>, <span class=\"hljs-string\">&quot;保安&quot;</span>]<br>    user_info = &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭志&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;101000&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;CTO&quot;</span>&#125;<br><br>    data_list = [<br>        &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭志&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;101000&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;CTO&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;赵健&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;1010&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;保安&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;芦荟&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;201000&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;CEO&quot;</span>&#125;<br>    ]<br><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;tpl.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;n1&quot;</span>: name, <span class=\"hljs-string\">&quot;n2&quot;</span>: roles, <span class=\"hljs-string\">&quot;n3&quot;</span>: user_info,<span class=\"hljs-string\">&quot;n4&quot;</span>:data_list&#125;)<br></code></pre></td></tr></table></figure>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>模板语法的学习<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>模板语法的学习<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br>&#123;#字符串#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>&#123;#列表#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n2.0 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n2.1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n2.2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>&#123;#循环列表#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    &#123;% for item in n2 %&#125;<br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>&#123;#字典#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; n3.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; n3.salary &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; n3.role &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><br>&#123;#循环字典#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    &#123;% for key,valuse in n3.items %&#125;<br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; key &#125;&#125; = &#123;&#123; valuse &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br>&#123;#列表套字典#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; n4.1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; n4.1.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br>&#123;#列表套字典加循环#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    &#123;% for item in n4 %&#125;<br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; item.name &#125;&#125; = &#123;&#123;item.salary &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br>&#123;#条件语句#&#125;<br>&#123;% if n1 == &quot;小明&quot;%&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>是小明<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>&#123;% else %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>不是小明<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>&#123;% endif %&#125;<br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"案例热搜展示\"><a class=\"markdownIt-Anchor\" href=\"#案例热搜展示\"></a> 案例：热搜展示</h4>\n<p><strong><a href=\"http://views.py\">views.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">news</span>(<span class=\"hljs-params\">request</span>):<br>    url = <span class=\"hljs-string\">&quot;http://api.54dh.cn/API/search/rs/?type=weibo&quot;</span><br>    dic = &#123;<span class=\"hljs-string\">&#x27;user-agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0&#x27;</span>&#125;<br>    r = requests.post(url, headers=dic)<br>    r.raise_for_status()<br>    r.encoding = r.apparent_encoding<br>    info = &#123;<span class=\"hljs-string\">&#x27;info&#x27;</span>: r.json()&#125;<br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;news.html&quot;</span>, info)<br></code></pre></td></tr></table></figure>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>热搜展示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        * &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-family</span>: 微软雅黑, serif;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">letter-spacing</span>: .<span class=\"hljs-number\">05em</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> auto;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">linear-gradient</span>(to right, <span class=\"hljs-number\">#a997a4</span>, <span class=\"hljs-number\">#b3e8ee</span>);</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-12 text-center&quot;</span>&gt;</span>热搜展示---&#123;&#123; info.time &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot; text-center&quot;</span>&gt;</span><br>        &#123;% for item in info.data %&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;&#123; item.link &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;--&#123;&#123; item.heat &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        &#123;% endfor %&#125;<br><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"请求和响应\"><a class=\"markdownIt-Anchor\" href=\"#请求和响应\"></a> 请求和响应</h3>\n<ul>\n<li><strong>通过此方式可以获取到get请求中的参数和post请求中的数据</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">something</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        <span class=\"hljs-comment\"># 获取get请求中携带的参数</span><br>        parameters = request.GET<br>        <span class=\"hljs-comment\"># 获取post请求中提交的数据</span><br>        data = request.POST<br>        <span class=\"hljs-built_in\">print</span>(parameters)<br>        <span class=\"hljs-built_in\">print</span>(data)<br>        <span class=\"hljs-keyword\">return</span> HttpResponse(parameters[<span class=\"hljs-string\">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>重定向：返回重定向的网址给浏览器，浏览器去请求该网址</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;https://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"案例用户登录\"><a class=\"markdownIt-Anchor\" href=\"#案例用户登录\"></a> 案例：用户登录</h4>\n<p><strong><a href=\"http://views.py\">views.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, HttpResponse,redirect<br><span class=\"hljs-keyword\">import</span> requests<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>       <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;login.html&quot;</span>)<br>    <span class=\"hljs-comment\">#POST请求</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        username=request.POST.get(<span class=\"hljs-string\">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class=\"hljs-string\">&quot;pwd&quot;</span>)<br>        <span class=\"hljs-comment\">#print(request.POST)</span><br>        <span class=\"hljs-keyword\">if</span> username == <span class=\"hljs-string\">&#x27;root&#x27;</span> <span class=\"hljs-keyword\">and</span> pwd == <span class=\"hljs-string\">&#x27;1234&#x27;</span>:<br>             <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;http://chuiyugin.github.io&quot;</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>             <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;login.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;error_msg&quot;</span>:<span class=\"hljs-string\">&quot;用户名或密码错误&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>\n<p><strong>HTML</strong></p>\n<ul>\n<li>注意： 在html表单（form）中加上<code>&#123;% csrf_token %&#125;</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/login/&quot;</span>&gt;</span><br>    &#123;#提交表单一定要添加#&#125;<br>    &#123;% csrf_token %&#125;<br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pwd&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row container&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-12 &quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:darkred;&quot;</span>&gt;</span>&#123;&#123; error_msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#数据库操作\"></a> 数据库操作</h3>\n<blockquote>\n<p>Django使用ORM框架实现对数据库的操作，安装<code>mysqlclient</code>第三方库辅助操作</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">pip install mysqlclient<br></code></pre></td></tr></table></figure>\n<h4 id=\"orm\"><a class=\"markdownIt-Anchor\" href=\"#orm\"></a> ORM</h4>\n<blockquote>\n<p>ORM可以帮助我们完成两件事：</p>\n<ol>\n<li>创建、修改、删除数据库中的表（不用写SQL语句）【无法创建数据库】</li>\n<li>操作表中的数据</li>\n</ol>\n</blockquote>\n<h4 id=\"配置settingpy文件\"><a class=\"markdownIt-Anchor\" href=\"#配置settingpy文件\"></a> 配置setting.py文件</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.mysql&#x27;</span>, <span class=\"hljs-comment\">#连接MYSQL数据库</span><br>        <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: <span class=\"hljs-string\">&#x27;day15&#x27;</span>,  <span class=\"hljs-comment\"># 数据库名</span><br>        <span class=\"hljs-string\">&#x27;USER&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,  <span class=\"hljs-comment\"># 数据库用户名</span><br>        <span class=\"hljs-string\">&#x27;PASSWORD&#x27;</span>: <span class=\"hljs-string\">&#x27;1234&#x27;</span>,  <span class=\"hljs-comment\"># 数据库密码</span><br>        <span class=\"hljs-string\">&#x27;HOST&#x27;</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>,  <span class=\"hljs-comment\"># 数据库主机地址</span><br>        <span class=\"hljs-string\">&#x27;PORT&#x27;</span>: <span class=\"hljs-number\">3306</span>,  <span class=\"hljs-comment\"># 数据库连接端口号</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"django操作表\"><a class=\"markdownIt-Anchor\" href=\"#django操作表\"></a> Django操作表</h4>\n<h5 id=\"创建表\"><a class=\"markdownIt-Anchor\" href=\"#创建表\"></a> 创建表</h5>\n<ul>\n<li>在models.py中创建表类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Userinfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    password = models.CharField(max_length=<span class=\"hljs-number\">64</span>)<br>    mobile = models.CharField(max_length=<span class=\"hljs-number\">11</span>)<br>    email = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    age = models.IntegerField()<br></code></pre></td></tr></table></figure>\n<ul>\n<li>在终端执行命令创建该表</li>\n</ul>\n<p>注意：<strong>1.终端路径在项目名目录下。2.app需要已经注册。3.表名是app的名称加上类名</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure>\n<h5 id=\"删除表\"><a class=\"markdownIt-Anchor\" href=\"#删除表\"></a> 删除表</h5>\n<p>直接将<code>models.py</code>里面的类注释掉即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Userinfo</span>(models.Model):<br><span class=\"hljs-comment\">#     name = models.CharField(max_length=32)</span><br><span class=\"hljs-comment\">#     password = models.CharField(max_length=64)</span><br><span class=\"hljs-comment\">#     mobile = models.CharField(max_length=11)</span><br><span class=\"hljs-comment\">#     email = models.CharField(max_length=32)</span><br><span class=\"hljs-comment\">#     age = models.IntegerField()</span><br><span class=\"hljs-comment\">#     docpath = models.CharField(max_length=64, default=&quot;&quot;)</span><br><span class=\"hljs-comment\">#     imgpath = models.CharField(max_length=64, null=True, blank=True)</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"修改表\"><a class=\"markdownIt-Anchor\" href=\"#修改表\"></a> 修改表</h5>\n<ul>\n<li>删除字段（直接注释掉）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#删除imgpath字段</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Userinfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    password = models.CharField(max_length=<span class=\"hljs-number\">64</span>)<br>    mobile = models.CharField(max_length=<span class=\"hljs-number\">11</span>)<br>    email = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    age = models.IntegerField()<br>    docpath = models.CharField(max_length=<span class=\"hljs-number\">64</span>, default=<span class=\"hljs-string\">&quot;&quot;</span>)<br>    <span class=\"hljs-comment\">#imgpath = models.CharField(max_length=64, null=True, blank=True)</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>修改字段</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#修改max_length属性</span><br>docpath = models.CharField(max_length=<span class=\"hljs-number\">128</span>, default=<span class=\"hljs-string\">&quot;&quot;</span>)<span class=\"hljs-comment\">#将max_length直接改为128</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>添加字段</li>\n</ul>\n<blockquote>\n<p>在表中新建字段（列）时，由于已存在的字段可能已有数据，所以新增列必须要指定新增列对应的数据：</p>\n<ol>\n<li>手动输入一个值（全部行都为输入的值）</li>\n<li>设置默认值(default后面的值)</li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">docpath = models.CharField(default=<span class=\"hljs-string\">&quot;&quot;</span>)<br>docpath = models.CharField(default=<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>允许为空</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">imgpath = models.CharField(null=<span class=\"hljs-literal\">True</span>, blank=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n<h5 id=\"操作表中的数据\"><a class=\"markdownIt-Anchor\" href=\"#操作表中的数据\"></a> 操作表中的数据</h5>\n<ol>\n<li>添加数据( <a href=\"http://models.py\">models.py</a> )</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># ***************添加数据***************</span><br><span class=\"hljs-comment\"># 本质：insert into app1_userinfo(name,password,mobile,email) values(&quot;yugin&quot;,&quot;123456&quot;,&quot;18127896898&quot;,&quot;1726123207@qq.com&quot;)</span><br>Userinfo.objects.create(name=<span class=\"hljs-string\">&quot;yugin&quot;</span>, password=<span class=\"hljs-string\">&quot;123456&quot;</span>, mobile=<span class=\"hljs-string\">&quot;18127896898&quot;</span>, email=<span class=\"hljs-string\">&quot;1726123207@qq.com&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>在views.py中引入models.py中的类即可进行添加数据：</p>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Department</span>(models.Model):<br>    title = models.CharField(max_length=<span class=\"hljs-number\">16</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://views.py\">views.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Department,Userinfo<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">orm</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-comment\">#测试orm操作表中的数据</span><br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;销售部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;IT部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;运营部门&quot;</span>)<br><br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;成功&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>更新数据</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 条件更新</span><br>Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">2</span>).update(password=<span class=\"hljs-string\">&#x27;a123456&#x27;</span>)<br><span class=\"hljs-comment\"># 全更新</span><br>Userinfo.objects.<span class=\"hljs-built_in\">all</span>().update(mobile=<span class=\"hljs-string\">&#x27;13125018525&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>删除数据</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 条件删除</span><br>Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">2</span>).delete()<br><span class=\"hljs-comment\"># 删除表中全部数据</span><br>Userinfo.objects.<span class=\"hljs-built_in\">all</span>().delete()<br></code></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查询数据</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#条件查询</span><br>\t<span class=\"hljs-comment\">#查询结果不唯一时，返回包含对象的queryset(列表)：</span><br>    \tuserinfo = Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span>) \t<br>\t<span class=\"hljs-comment\">#已知查询结果唯一时利用first()获取第一条数据，返回对象：</span><br>    \tuserobj = Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span>).first()<br><span class=\"hljs-comment\">#全查询</span><br>\t<span class=\"hljs-comment\">#返回包含对象的列表：</span><br>\t\tuserinfo = Userinfo.objects.<span class=\"hljs-built_in\">all</span>()<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_list</span>(<span class=\"hljs-params\">request</span>):<br>    userlist = []<br>    userinfo = Userinfo.objects.<span class=\"hljs-built_in\">all</span>()<br>    <span class=\"hljs-keyword\">for</span> info <span class=\"hljs-keyword\">in</span> userinfo:<br>        datadic = &#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>: info.<span class=\"hljs-built_in\">id</span>, <span class=\"hljs-string\">&#x27;name&#x27;</span>: info.name, <span class=\"hljs-string\">&#x27;password&#x27;</span>: info.password, <span class=\"hljs-string\">&#x27;mobile&#x27;</span>: info.mobile, <span class=\"hljs-string\">&#x27;email&#x27;</span>: info.email&#125;<br>        userlist.append(datadic)<br>    <span class=\"hljs-built_in\">print</span>(userlist)<br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_list.html&quot;</span>, &#123;<span class=\"hljs-string\">&#x27;userlist&#x27;</span>: userlist&#125;)<br></code></pre></td></tr></table></figure>\n<h4 id=\"案例用户管理\"><a class=\"markdownIt-Anchor\" href=\"#案例用户管理\"></a> 案例：用户管理</h4>\n<p>要求：</p>\n<ol>\n<li>展示用户列表\n<ul>\n<li>url路由</li>\n<li>view函数\n<ol>\n<li>获取用户信息</li>\n<li>HTML渲染</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>添加用户\n<ul>\n<li>post请求</li>\n<li>添加用户</li>\n<li>HTML渲染</li>\n</ul>\n</li>\n<li>删除用户\n<ul>\n<li>a标签传递用户id参数get请求</li>\n<li>筛选删除指定用户</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>展示数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户管理系统<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>INFO列表<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/info/add/&quot;</span>&gt;</span>点此添加数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>    &#123;% for obj in data_list %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/info/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>添加数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户管理系统<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>添加用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/info/add/&quot;</span>&gt;</span><br><br>    &#123;% csrf_token %&#125;<br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pwd&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;年龄&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>  <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提 交&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://views.py\">views.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, HttpResponse,redirect<br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Department,Userinfo<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">orm</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-comment\">#测试orm操作表中的数据</span><br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;销售部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;IT部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;运营部门&quot;</span>)<br><br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;成功&quot;</span>)<br><br><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Department,Userinfo<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">info_list</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-comment\">#获取数据库中所有的用户信息</span><br>    <span class=\"hljs-comment\">#[对象,对象]</span><br>    data_list = Userinfo.objects.<span class=\"hljs-built_in\">all</span>()<br><br>    <span class=\"hljs-comment\">#渲染，返回给用户</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;info_list.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;data_list&quot;</span>:data_list&#125;)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">info_add</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>       <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;info_add.html&quot;</span>)<br><br>    <span class=\"hljs-comment\">#获取到用户提交的数据</span><br>    user = request.POST.get(<span class=\"hljs-string\">&quot;user&quot;</span>)<br>    pwd = request.POST.get(<span class=\"hljs-string\">&quot;pwd&quot;</span>)<br>    age = request.POST.get(<span class=\"hljs-string\">&quot;age&quot;</span>)<br><br><br><br>    <span class=\"hljs-comment\">#添加到数据库</span><br>    Userinfo.objects.create(name=user,password=pwd,age=age)<br><br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/info/list/&quot;</span>)<br><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">info_delete</span>(<span class=\"hljs-params\">request</span>):<br>    nid = request.GET.get(<span class=\"hljs-string\">&quot;nid&quot;</span>)<br>    Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).delete()<br><br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/info/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"django开发\"><a class=\"markdownIt-Anchor\" href=\"#django开发\"></a> Django开发</h2>\n<h3 id=\"设置表结构\"><a class=\"markdownIt-Anchor\" href=\"#设置表结构\"></a> 设置表结构</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Department</span>(models.Model):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;部门表&quot;&quot;&quot;</span><br>    title = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;标题&quot;</span>, max_length=<span class=\"hljs-number\">32</span>)<br><br><span class=\"hljs-comment\">#关联部门表</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserInfo</span>(models.Model):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;员工表&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;姓名&quot;</span>, max_length=<span class=\"hljs-number\">16</span>)<br>    password = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;密码&quot;</span>, max_length=<span class=\"hljs-number\">16</span>)<br>    age = models.IntegerField(verbose_name=<span class=\"hljs-string\">&quot;年龄&quot;</span>)<br>    account = models.DecimalField(verbose_name=<span class=\"hljs-string\">&quot;账户余额&quot;</span>, max_digits=<span class=\"hljs-number\">10</span>, decimal_places=<span class=\"hljs-number\">2</span>, default=<span class=\"hljs-number\">0</span>)<br>    create_time = models.DateTimeField(verbose_name=<span class=\"hljs-string\">&quot;入职时间&quot;</span>)<br>    <span class=\"hljs-comment\"># Dejango中对字段值域的约束</span><br>    gender_choices = (<br>        (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;男&#x27;</span>),<br>        (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class=\"hljs-string\">&#x27;性别&#x27;</span>, choices=gender_choices)<br>    <span class=\"hljs-comment\"># 无约束</span><br>    <span class=\"hljs-comment\"># depart_id = models.BigIntegerField(verbose_name=&#x27;部门ID&#x27;)</span><br>    <span class=\"hljs-comment\"># 有约束</span><br>    <span class=\"hljs-comment\">#    -to:与之关联的表</span><br>    <span class=\"hljs-comment\">#    -to.field：与之关联的字段</span><br>    <span class=\"hljs-comment\"># 1.Django自动</span><br>    <span class=\"hljs-comment\">#     -将关联字段名添加到被关联的字段的后面(depart_id)</span><br>    <span class=\"hljs-comment\"># 2.外键表(部门表)的关联字段被删除</span><br>    <span class=\"hljs-comment\"># -2.1级联删除</span><br>    depart = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Department&#x27;</span>, to_field=<span class=\"hljs-string\">&#x27;id&#x27;</span>, on_delete=models.CASCADE)<br>    <span class=\"hljs-comment\"># -2.1置空</span><br>    <span class=\"hljs-comment\"># depart = models.ForeignKey(to=&#x27;Department&#x27;,to_field=&#x27;id&#x27;,null=True,blank=True,on_delete=models.SET_NULL)</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"部门管理\"><a class=\"markdownIt-Anchor\" href=\"#部门管理\"></a> 部门管理</h3>\n<h4 id=\"部门列表\"><a class=\"markdownIt-Anchor\" href=\"#部门列表\"></a> 部门列表</h4>\n<blockquote>\n<p>重要知识点 : <mark>url中传递动态参数</mark></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#urls.py</span><br>path(<span class=\"hljs-string\">&quot;depart/&lt;int:nid&gt;/edit/&quot;</span>, views.depart_edit),<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># Create your views here.</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_list</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;部门列表&quot;&quot;&quot;</span><br><br>    <span class=\"hljs-comment\"># 去数据库中获取所有的部门信息</span><br>    queryset = models.Department.objects.<span class=\"hljs-built_in\">all</span>()<br><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;depart_list.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;queryset&quot;</span>: queryset&#125;)<br></code></pre></td></tr></table></figure>\n<h4 id=\"新建部门\"><a class=\"markdownIt-Anchor\" href=\"#新建部门\"></a> 新建部门</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_add</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;添加部门&quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;depart_add.html&quot;</span>)<br>    <span class=\"hljs-comment\"># 获取用户POST提交过来的数据</span><br>    title = request.POST.get(<span class=\"hljs-string\">&quot;title&quot;</span>)<br>    <span class=\"hljs-comment\">#保存到数据库</span><br>    models.Department.objects.create(title=title)<br>    <span class=\"hljs-comment\">#重定向回到部门列表</span><br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除部门\"><a class=\"markdownIt-Anchor\" href=\"#删除部门\"></a> 删除部门</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_delete</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;删除部门&quot;&quot;&quot;</span><br>    nid = request.GET.get(<span class=\"hljs-string\">&quot;nid&quot;</span>)<br>    models.Department.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).delete()<br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改部门\"><a class=\"markdownIt-Anchor\" href=\"#修改部门\"></a> 修改部门</h4>\n<blockquote>\n<p>重要知识点 : <mark>url中传递动态参数</mark></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#urls.py</span><br>path(<span class=\"hljs-string\">&quot;depart/&lt;int:nid&gt;/edit/&quot;</span>, views.depart_edit),<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_edit</span>(<span class=\"hljs-params\">request,nid</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        row_object = models.Department.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).first()<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;depart_edit.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;row_object&quot;</span>:row_object&#125;)<br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;POST&quot;</span>:<br>        title = request.POST.get(<span class=\"hljs-string\">&quot;title&quot;</span>)<br>        models.Department.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).update(title=title)<br>        <span class=\"hljs-comment\"># 重定向回到部门列表</span><br>        <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"html模板继承\"><a class=\"markdownIt-Anchor\" href=\"#html模板继承\"></a> HTML模板继承</h3>\n<blockquote>\n<p>模板继承可以使父模板的内容复用，子模版直接继承父模板的全部内容并可以覆盖父模板中相应的块。</p>\n</blockquote>\n<p><strong>语法—父模板中：</strong></p>\n<p>1.定义父模板中的块block标签</p>\n<p>2.标识出哪些在子模版中是允许被修改的</p>\n<p>3.block标签：在父模板中定义，可以在子模版中覆盖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% block block_name %&#125;<br>\t父模板可以被覆盖的内容<br>&#123;% endblock blocl_name%&#125;  (**切记一定要写endblock**)<br></code></pre></td></tr></table></figure>\n<p><strong>语法—子模版中：</strong></p>\n<p>1.继承模板extends标签（<strong>写在模板文件的第一行</strong>）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% entends &#x27;layout.html&#x27; %&#125;<br></code></pre></td></tr></table></figure>\n<p>2.子模版 重写父模板中的内容块</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% block block_name %&#125;<br>\t子模版用来覆盖父模板中 block_name 块的内容<br>&#123;% endblock blocl_name%&#125;  (**切记一定要写endblock**)<br></code></pre></td></tr></table></figure>\n<h4 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\"></a> 实例</h4>\n<ul>\n<li>父模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/add/&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>新建部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- Default panel contents --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;glyphicon glyphicon-pushpin&quot;</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                部门列表<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!-- Table --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>部门名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                &#123;% for obj in queryset %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-success btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/&#123;&#123; obj.id &#125;&#125;/edit/&quot;</span>&gt;</span>编辑<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-danger btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>继承模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/add/&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>新建部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- Default panel contents --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;glyphicon glyphicon-pushpin&quot;</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                部门列表<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!-- Table --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>部门名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                &#123;% for obj in queryset %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-success btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/&#123;&#123; obj.id &#125;&#125;/edit/&quot;</span>&gt;</span>编辑<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-danger btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"主题一用户管理\"><a class=\"markdownIt-Anchor\" href=\"#主题一用户管理\"></a> 主题一：用户管理</h3>\n<ul>\n<li>向数据库插入数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) <span class=\"hljs-keyword\">values</span>(&quot;刘冬&quot;,&quot;1234&quot;,&quot;23&quot;,&quot;100.87&quot;,&quot;2010-1-11&quot;,&quot;1&quot;,&quot;1&quot;);<br><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) <span class=\"hljs-keyword\">values</span>(&quot;Alleyf&quot;,&quot;1234&quot;,&quot;20&quot;,&quot;9000.87&quot;,&quot;2012-1-11&quot;,&quot;1&quot;,&quot;2&quot;);<br><br><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">--------------+---------------+------+-----+---------+----------------+</span><br><span class=\"hljs-operator\">|</span> Field        <span class=\"hljs-operator\">|</span> Type          <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">Null</span> <span class=\"hljs-operator\">|</span> Key <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">Default</span> <span class=\"hljs-operator\">|</span> Extra          <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">--------------+---------------+------+-----+---------+----------------+</span><br><span class=\"hljs-operator\">|</span> id           <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">bigint</span>        <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span> PRI <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span> auto_increment <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> name         <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">16</span>)   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> password     <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">64</span>)   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> age          <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">int</span>           <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> account      <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> create_time  <span class=\"hljs-operator\">|</span> datetime(<span class=\"hljs-number\">6</span>)   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> gender       <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">smallint</span>      <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> depart_id_id <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">bigint</span>        <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span> MUL <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">--------------+---------------+------+-----+---------+----------------+</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"modelform和form\"><a class=\"markdownIt-Anchor\" href=\"#modelform和form\"></a> ModelForm和Form</h3>\n<ul>\n<li>\n<p>原始方式：不会采用（本质）【麻烦】</p>\n<ul>\n<li>\n<p>没有数据校验</p>\n</li>\n<li>\n<p>错误，应该有提示</p>\n</li>\n<li>\n<p>页面上，每个字段都需要我们重新写一遍，数据冗余</p>\n</li>\n<li>\n<p>关联的数据，需要手动获取并循环展示在页面中</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Django组件</p>\n<ol>\n<li>Form组件（较简便）</li>\n<li>ModelForm组件（最简便）</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"modelform示例\"><a class=\"markdownIt-Anchor\" href=\"#modelform示例\"></a> ModelForm示例</h4>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserInfo</span>(models.Model):<br>    <span class=\"hljs-string\">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class=\"hljs-string\">&#x27;姓名&#x27;</span>, max_length=<span class=\"hljs-number\">16</span>)<br>    password = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;密码&quot;</span>, max_length=<span class=\"hljs-number\">64</span>)<br>    age = models.IntegerField(verbose_name=<span class=\"hljs-string\">&quot;年龄&quot;</span>)<br>    account = models.DecimalField(verbose_name=<span class=\"hljs-string\">&quot;账户余额&quot;</span>, max_digits=<span class=\"hljs-number\">10</span>, decimal_places=<span class=\"hljs-number\">2</span>, default=<span class=\"hljs-number\">0</span>)<br>    create_time = models.DateTimeField(verbose_name=<span class=\"hljs-string\">&quot;入职时间&quot;</span>)<br><br>    depart_id = models.ForeignKey(to=<span class=\"hljs-string\">&quot;Department&quot;</span>, to_field=<span class=\"hljs-string\">&quot;id&quot;</span>, on_delete=models.CASCADE,verbose_name=<span class=\"hljs-string\">&quot;部门&quot;</span>)<br>    <span class=\"hljs-comment\"># Dejango中对字段值域的约束</span><br>    gender_choices = (<br>        (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;男&#x27;</span>),<br>        (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class=\"hljs-string\">&#x27;性别&#x27;</span>, choices=gender_choices)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://views.py\">views.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 用户管理</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_list</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-comment\"># 获取所有的用户列表</span><br>    queryset = models.UserInfo.objects.<span class=\"hljs-built_in\">all</span>()<br><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_list.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;queryset&quot;</span>: queryset&#125;)<br><br><br><span class=\"hljs-comment\"># ModelForm</span><br><span class=\"hljs-keyword\">from</span> django <span class=\"hljs-keyword\">import</span> forms<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">userInfoForm</span>(forms.ModelForm):<br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;create_time&quot;</span>, <span class=\"hljs-string\">&quot;gender&quot;</span>, <span class=\"hljs-string\">&quot;depart_id&quot;</span>]<br>        widgets = &#123;<br>            <span class=\"hljs-comment\"># &quot;name&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;password&quot;: forms.PasswordInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;age&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;account&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-string\">&quot;create_time&quot;</span>: forms.DateTimeInput(attrs=&#123;<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot; form-control input&quot;</span>, <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;datetime-local&quot;</span>&#125;),<br>            <span class=\"hljs-comment\"># &quot;gender&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;depart&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>        &#125;<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__(*args, **kwargs)<br>        <span class=\"hljs-comment\"># 循环找到所有的字段,给其添加样式</span><br>        <span class=\"hljs-keyword\">for</span> name, field <span class=\"hljs-keyword\">in</span> self.fields.items():<br>            <span class=\"hljs-comment\"># 想让某一个不加</span><br>            <span class=\"hljs-keyword\">if</span> name == <span class=\"hljs-string\">&quot;create_time&quot;</span>:<br>                <span class=\"hljs-keyword\">continue</span><br>            field.widget.attrs = &#123;<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot;input form-control&quot;</span>, <span class=\"hljs-string\">&quot;placeholder&quot;</span>: field.label&#125;<br><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_add</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-comment\"># 添加用户</span><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        form = userInfoForm()<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_add.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;form&quot;</span>: form&#125;)<br>    <span class=\"hljs-comment\"># 用户POST提交数据，数据校验</span><br>    form = userInfoForm(data=request.POST)<br>    <span class=\"hljs-keyword\">if</span> form.is_valid():<br>      <span class=\"hljs-comment\"># 如果合法保存到数据库</span><br>      form.save()<br>      <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/user/list&quot;</span>)<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_add.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>user_list.html(未用ModelForm)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/user/add/&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>新建用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- Default panel contents --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;glyphicon glyphicon-pushpin&quot;</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                用户列表<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!-- Table --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>余额<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>入职时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>性别<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>所属部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                &#123;% for obj in queryset %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.account &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.create_time|date:&quot;Y-m-d&quot; &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.get_gender_display &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.depart_id.title &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-success btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/&#123;&#123; obj.id &#125;&#125;/edit/&quot;</span>&gt;</span>编辑<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-danger btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>user_add.html(使用ModelForm)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-title&quot;</span>&gt;</span>新建用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-body&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">novalidate</span>&gt;</span><br>                    &#123;% csrf_token %&#125;<br>                    &#123;% for field in form %&#125;<br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                            &#123;&#123; field &#125;&#125;<br>                         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: #2aabd2&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                    &#123;% endfor %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>提 交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>在配置文件<code>settings.py</code>中可以设置语言种类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># LANGUAGE_CODE = &quot;en-us&quot; 英文</span><br>LANGUAGE_CODE = <span class=\"hljs-string\">&quot;zh-hans&quot;</span> 中文<br></code></pre></td></tr></table></figure>\n<h3 id=\"主题二靓号管理\"><a class=\"markdownIt-Anchor\" href=\"#主题二靓号管理\"></a> 主题二：靓号管理</h3>\n<p>靓号管理</p>\n","site":{"data":{}},"more":"<h1 id=\"web开发\"><a class=\"markdownIt-Anchor\" href=\"#web开发\"></a> Web开发</h1>\n<h2 id=\"flask\"><a class=\"markdownIt-Anchor\" href=\"#flask\"></a> Flask</h2>\n<p>Flask框架为了方便书写标签，用户把返回给浏览器的字符串写入到文件里，再由flask框架读取文件。</p>\n<h2 id=\"html\"><a class=\"markdownIt-Anchor\" href=\"#html\"></a> HTML</h2>\n<h3 id=\"头部信息\"><a class=\"markdownIt-Anchor\" href=\"#头部信息\"></a> 头部信息</h3>\n<h4 id=\"浏览器标签页的标题\"><a class=\"markdownIt-Anchor\" href=\"#浏览器标签页的标题\"></a> 浏览器标签页的标题</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>文档标题<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"返回字符串的编码方式\"><a class=\"markdownIt-Anchor\" href=\"#返回字符串的编码方式\"></a> 返回字符串的编码方式</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"body信息\"><a class=\"markdownIt-Anchor\" href=\"#body信息\"></a> body信息</h3>\n<h4 id=\"标题\"><a class=\"markdownIt-Anchor\" href=\"#标题\"></a> 标题</h4>\n<p>一级标题，随着数字变化标题级数变化</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>first<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"div和span\"><a class=\"markdownIt-Anchor\" href=\"#div和span\"></a> div和span</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>内容<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><br>内容<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>div中的内容占用一整行，块级标签</li>\n<li>span，自己多大占多少，内联标签</li>\n</ul>\n<h3 id=\"超链接\"><a class=\"markdownIt-Anchor\" href=\"#超链接\"></a> 超链接</h3>\n<p>跳转到我的博客，target=&quot;_blank&quot;加入是新生成一个标签页</p>\n<p>a标签无法直接添加宽度和高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://chuiyugin.github.io/&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;_blank&quot;</span>&gt;</span>我的博客<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\"></a> 图片</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;图片地址&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 10% ; height: 20%&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"嵌套\"><a class=\"markdownIt-Anchor\" href=\"#嵌套\"></a> 嵌套</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs HTML\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;https://chuiyugin.github.io/&quot;</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">&quot;_blank&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;width: 50%&quot;</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png&quot;</span> /&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"列表标签\"><a class=\"markdownIt-Anchor\" href=\"#列表标签\"></a> 列表标签</h3>\n<p>无序号列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>带序号列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>列表3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"表格\"><a class=\"markdownIt-Anchor\" href=\"#表格\"></a> 表格</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span> ID <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>    <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span> 姓名 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>     <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span> 年龄 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>    <br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>   <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>fcs<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>     <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>       <br>     <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>   <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>xyj<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>     <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>       <br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>  <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>10<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>   <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>shy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>    <br>         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>       <br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"input系列\"><a class=\"markdownIt-Anchor\" href=\"#input系列\"></a> Input系列</h3>\n<p>文本输入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>密码输入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>选择文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;file&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>单选框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n1&quot;</span>&gt;</span>男<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;radio&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n1&quot;</span>&gt;</span>女<br></code></pre></td></tr></table></figure>\n<p>复选框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>按钮</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;buton&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span>  ---&gt;普通按钮<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span> ---&gt;提交表单<br></code></pre></td></tr></table></figure>\n<p>下拉框</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>北京<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>深圳<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span>&gt;</span>广州<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>多行文本</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">textarea</span> <span class=\"hljs-attr\">rows</span>=<span class=\"hljs-string\">&quot;3&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"请求\"><a class=\"markdownIt-Anchor\" href=\"#请求\"></a> 请求</h2>\n<h3 id=\"get请求\"><a class=\"markdownIt-Anchor\" href=\"#get请求\"></a> GET请求</h3>\n<p>现象：跳转，向后台传入数据会拼接在URL上。</p>\n<ul>\n<li>GET请求的数据会在URL上体现。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/do/reg&quot;</span>,methods=[<span class=\"hljs-string\">&#x27;GET&#x27;</span>]</span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">do_register</span>():<br>    <span class=\"hljs-comment\">#1.接收到的数据</span><br>    <span class=\"hljs-built_in\">print</span>(request.args)<br>    <span class=\"hljs-comment\">#给用户返回结果</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;注册成功&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"post请求\"><a class=\"markdownIt-Anchor\" href=\"#post请求\"></a> POST请求</h3>\n<p>现象：提交数据不在URL中，体现在请求体中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&quot;/post/reg&quot;</span>,methods=[<span class=\"hljs-string\">&#x27;POST&#x27;</span>]</span>)</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">post_register</span>():<br>    <span class=\"hljs-comment\">#1.接收到的数据</span><br>    <span class=\"hljs-built_in\">print</span>(request.form)<br>    user = request.form.get(<span class=\"hljs-string\">&quot;user&quot;</span>)<br>    psw = request.form.get(<span class=\"hljs-string\">&quot;psw&quot;</span>)<br>    <span class=\"hljs-built_in\">print</span>(user)<br>    <span class=\"hljs-built_in\">print</span>(psw)<br>    <span class=\"hljs-comment\">#给用户返回结果</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;注册成功&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"提交数据\"><a class=\"markdownIt-Anchor\" href=\"#提交数据\"></a> 提交数据</h3>\n<p>form标签包裹要提交的数据标签</p>\n<ul>\n<li>提交方式：method=&quot;get&quot;或者method=“post”</li>\n<li>提交的地址：action=“/xx/xx/xxx”</li>\n<li>在form标签里必须要有submit标签</li>\n<li>Input系列标签必须要加name，提交时能够解析对应的名字，而且只有Input的内容才会提交</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>注册界面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/post/reg&quot;</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                 用户名：<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span>/&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                 密码： <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;psw&quot;</span>/&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <br>              <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>                 <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> /&gt;</span><br>              <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"css样式\"><a class=\"markdownIt-Anchor\" href=\"#css样式\"></a> CSS样式</h2>\n<h3 id=\"demo\"><a class=\"markdownIt-Anchor\" href=\"#demo\"></a> Demo</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;!DOCTYPE <span class=\"hljs-selector-tag\">html</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">html</span> lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-<span class=\"hljs-number\">8</span>&quot;&gt;<br>    &lt;title&gt;用户注册&lt;/title&gt;<br>    &lt;link rel=&quot;stylesheet&quot; href=&quot;/static/commons<span class=\"hljs-selector-class\">.css</span>&quot;&gt;<br>    &lt;style&gt;<br>        <span class=\"hljs-selector-class\">.c1</span>&#123;<br>            <span class=\"hljs-attribute\">color</span>:green;<br>        &#125;<br><br>        <span class=\"hljs-selector-class\">.c2</span>&#123;<br>            <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">50px</span>;<br>        &#125;<br><br>    &lt;/style&gt;<br><br>&lt;/head&gt;<br>&lt;<span class=\"hljs-selector-tag\">body</span>&gt;<br><br>&lt;<span class=\"hljs-selector-tag\">h1</span> class=&quot;bl&quot;&gt;注册界面&lt;/<span class=\"hljs-selector-tag\">h1</span>&gt;<br>    &lt;<span class=\"hljs-selector-tag\">form</span> method=&quot;post&quot; action=&quot;/post/reg&quot;&gt;<br>          &lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;c2&quot;&gt;<br>             用户名：&lt;<span class=\"hljs-selector-tag\">input</span> type=&quot;text&quot; name=&quot;user&quot;/&gt;<br>          &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br><br>          &lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;c2&quot;&gt;<br>             密码： &lt;<span class=\"hljs-selector-tag\">input</span> type=&quot;password&quot; name=&quot;psw&quot;/&gt;<br>          &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br> &lt;<span class=\"hljs-selector-tag\">div</span>&gt;<br>    &lt;<span class=\"hljs-selector-tag\">input</span> type=&quot;submit&quot; /&gt;<br>  &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>    &lt;/<span class=\"hljs-selector-tag\">form</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">body</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">html</span>&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>放在head部位用css样式。</li>\n</ul>\n<h3 id=\"选择器\"><a class=\"markdownIt-Anchor\" href=\"#选择器\"></a> 选择器</h3>\n<ul>\n<li>ID选择器</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">#标识名&#123;<br>        属性:属性值;<br>        属性:属性值;<br>        &#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>类选择器（用的最多）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">.类名&#123;<br>        属性:属性值;<br>        属性:属性值;<br>        &#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>标签选择器</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">标签名&#123;<br>   <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>属性选择器</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-attr\">[type=<span class=\"hljs-string\">&#x27;text&#x27;</span>]</span>&#123;<br>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>&#125;<br><br><span class=\"hljs-selector-class\">.v1</span><span class=\"hljs-selector-attr\">[xx=<span class=\"hljs-string\">&quot;123&quot;</span>]</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>:gold;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>后代选择器</li>\n</ul>\n<p>先找到包含yy这个类的部分，再将yy内部含有li标签的都变为这个样式。（子子孙孙）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.yy</span> <span class=\"hljs-selector-tag\">li</span>&#123;<br>   <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>只找子代</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.yy</span>&gt;<span class=\"hljs-selector-tag\">li</span>&#123;<br>   <span class=\"hljs-attribute\">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"样式\"><a class=\"markdownIt-Anchor\" href=\"#样式\"></a> 样式</h3>\n<h4 id=\"高度和宽度\"><a class=\"markdownIt-Anchor\" href=\"#高度和宽度\"></a> 高度和宽度</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.c1</span>&#123;<br>   <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">300px</span><br>   width:<span class=\"hljs-number\">500px</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>宽度支持百分比，高度不支持。</li>\n<li>行内标签：默认无效</li>\n<li>块级标签：默认有效</li>\n</ul>\n<h4 id=\"块级和行内标签\"><a class=\"markdownIt-Anchor\" href=\"#块级和行内标签\"></a> 块级和行内标签</h4>\n<ul>\n<li>display: inline-block;</li>\n<li>具有行内和块级特性</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.c3</span>&#123;<br>                <span class=\"hljs-attribute\">display</span>: inline-block;<br>                <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100px</span>;<br>                <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;<br>                <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>            &#125;<br></code></pre></td></tr></table></figure>\n<p><strong>注意：</strong></p>\n<p>display: inline;强制行内</p>\n<p>display: block;强制块级</p>\n<h4 id=\"字体和颜色\"><a class=\"markdownIt-Anchor\" href=\"#字体和颜色\"></a> 字体和颜色</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.bl</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>:deepskyblue;<br>    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">59px</span>;<br>    <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">400</span>;<br>    <span class=\"hljs-attribute\">font-family</span>:  Microsoft Yahei;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"文字对齐方式\"><a class=\"markdownIt-Anchor\" href=\"#文字对齐方式\"></a> 文字对齐方式</h4>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.test</span>&#123;<br>         <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">100px</span>;<br>         <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;<br>         <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br><br>         <span class=\"hljs-attribute\">text-align</span>: center;<span class=\"hljs-comment\">/*水平方向居中*/</span><br>         <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">100px</span>;<span class=\"hljs-comment\">/*垂直方向居中 和高度像素值相同*/</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"浮动\"><a class=\"markdownIt-Anchor\" href=\"#浮动\"></a> 浮动</h3>\n<p>将span内容移动到右边显示</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span>&gt;<br>        &lt;<span class=\"hljs-selector-tag\">span</span>&gt;测试<span class=\"hljs-number\">1</span>&lt;/<span class=\"hljs-selector-tag\">span</span>&gt;<br>        &lt;<span class=\"hljs-selector-tag\">span</span> style=&quot;<span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:right</span>&quot;&gt;测试<span class=\"hljs-number\">2</span>&lt;/<span class=\"hljs-selector-tag\">span</span>&gt;<br>    &lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<p>浮动之后，块级标签不会占用一整行，但是浮动之后无法破坏了文档流，<strong>需要在最后加入</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">clear</span>: both;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"内边距\"><a class=\"markdownIt-Anchor\" href=\"#内边距\"></a> 内边距</h3>\n<p>边框内部设置内边距,不加左右就是全部</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">padding-top</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding-left</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding-right</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding-bottom</span>:<span class=\"hljs-number\">20px</span>;<br><span class=\"hljs-attribute\">padding</span>:<span class=\"hljs-number\">20px</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"外边距\"><a class=\"markdownIt-Anchor\" href=\"#外边距\"></a> 外边距</h3>\n<p>margin-top、margin-left、margin-right、margin-bottom</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">background-color</span>:dodgerblue;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">background-color</span>:red;<span class=\"hljs-attribute\">margin-top</span>:<span class=\"hljs-number\">20px</span>;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"去除外部间距\"><a class=\"markdownIt-Anchor\" href=\"#去除外部间距\"></a> 去除外部间距</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;style&gt;<br>     <span class=\"hljs-selector-tag\">body</span>&#123;<br>           <span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span> ;<br>         &#125;<br>&lt;/style&gt;    <br></code></pre></td></tr></table></figure>\n<h3 id=\"居中\"><a class=\"markdownIt-Anchor\" href=\"#居中\"></a> 居中</h3>\n<ul>\n<li>内容居中：text-align: center;</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> style=&quot;<span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">200px</span>;<span class=\"hljs-attribute\">text-align</span>: center;&quot;&gt;&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>区域居中：自己要有宽度加</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-attribute\">margin-left</span>:auto;<br><span class=\"hljs-attribute\">margin-right</span>:auto;<br></code></pre></td></tr></table></figure>\n<h3 id=\"鼠标放上去变色\"><a class=\"markdownIt-Anchor\" href=\"#鼠标放上去变色\"></a> 鼠标放上去变色</h3>\n<p>主要： ：hover</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.sub-header</span> <span class=\"hljs-selector-class\">.menu_list</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-pseudo\">:hover</span>&#123;<br>    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#ff6700</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"position定位\"><a class=\"markdownIt-Anchor\" href=\"#position定位\"></a> position定位</h3>\n<h4 id=\"fixed\"><a class=\"markdownIt-Anchor\" href=\"#fixed\"></a> fixed</h4>\n<p>固定在窗口的某个位置</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.back</span>&#123;<br>    <span class=\"hljs-attribute\">position</span>: fixed;<br>    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">60px</span>;<br>    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">60px</span>;<br>    <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid red;<br>    <span class=\"hljs-attribute\">right</span>:<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-attribute\">top</span>:<span class=\"hljs-number\">500px</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"relative和absolute\"><a class=\"markdownIt-Anchor\" href=\"#relative和absolute\"></a> relative和absolute</h4>\n<p>加入absolute的相对relative的位置变化。</p>\n<h2 id=\"bootstrap\"><a class=\"markdownIt-Anchor\" href=\"#bootstrap\"></a> BootStrap</h2>\n<h3 id=\"导航\"><a class=\"markdownIt-Anchor\" href=\"#导航\"></a> 导航</h3>\n<p><a href=\"https://v3.bootcss.com/components/#nav\">组件 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)</a></p>\n<h3 id=\"栅格\"><a class=\"markdownIt-Anchor\" href=\"#栅格\"></a> 栅格</h3>\n<p><a href=\"https://v3.bootcss.com/css/#grid\">全局 CSS 样式 · Bootstrap v3 中文文档 | Bootstrap 中文网 (bootcss.com)</a></p>\n<ul>\n<li>\n<p>把整体分为12格</p>\n</li>\n<li>\n<p>分类</p>\n<ul>\n<li>\n<p>响应式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.col-sm-</span>  <span class=\"hljs-number\">750px</span><br><span class=\"hljs-selector-class\">.col-md-</span>  <span class=\"hljs-number\">970px</span><br><span class=\"hljs-selector-class\">.col-lg-</span>  <span class=\"hljs-number\">1170px</span><br></code></pre></td></tr></table></figure>\n</li>\n<li>\n<p>非响应式</p>\n<p>.col-xs-</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-xs-<span class=\"hljs-number\">6</span>&quot; style=&quot;<span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#2aabd2</span><span class=\"hljs-string\">&quot;&gt;  1&lt;/div&gt;</span><br><span class=\"hljs-string\"> &lt;div class=&quot;</span>col-xs-<span class=\"hljs-number\">10</span><span class=\"hljs-string\">&quot; style=&quot;</span>background-color: <span class=\"hljs-number\">#5cb85c</span><span class=\"hljs-string\">&quot;&gt; 2 &lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>列偏移</p>\n</li>\n</ul>\n<p>col-xs-offset-2</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-xs-offset-<span class=\"hljs-number\">2</span> col-xs-<span class=\"hljs-number\">6</span>&quot; style=&quot;<span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#2aabd2</span><span class=\"hljs-string\">&quot;&gt;  1&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"container\"><a class=\"markdownIt-Anchor\" href=\"#container\"></a> container</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;container&quot;&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">9</span>&quot;&gt;左边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">3</span>&quot;&gt;右边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;container-fluid&quot;&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">9</span>&quot;&gt;左边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;<span class=\"hljs-selector-tag\">div</span> class=&quot;col-sm-<span class=\"hljs-number\">3</span>&quot;&gt;右边&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br>&lt;/<span class=\"hljs-selector-tag\">div</span>&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"图标\"><a class=\"markdownIt-Anchor\" href=\"#图标\"></a> 图标</h3>\n<p>1.bootsrap</p>\n<p>2.font awesome</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;script <span class=\"hljs-attribute\">src</span>=&quot;https://kit.fontawesome.com/<span class=\"hljs-number\">5</span>efd8aed42.js<span class=\"hljs-string\">&quot; crossorigin=&quot;</span>anonymous<span class=\"hljs-string\">&quot;&gt;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"javascript\"><a class=\"markdownIt-Anchor\" href=\"#javascript\"></a> JavaScript</h2>\n<p>是一门编程语言，浏览器是JavaScript语言的解释器。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">&lt;script <span class=\"hljs-attribute\">src</span>=&quot;static/js/jquery-<span class=\"hljs-number\">3.6</span>.<span class=\"hljs-number\">1</span><span class=\"hljs-selector-class\">.min</span><span class=\"hljs-selector-class\">.js</span>&quot;&gt;&lt;/script&gt;<br>&lt;script <span class=\"hljs-attribute\">src</span>=&quot;static/plugins/bootstrap-<span class=\"hljs-number\">3.4</span>.<span class=\"hljs-number\">1</span>/js/bootstrap<span class=\"hljs-selector-class\">.min</span><span class=\"hljs-selector-class\">.js</span>&quot;&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure>\n<h3 id=\"dom和bom\"><a class=\"markdownIt-Anchor\" href=\"#dom和bom\"></a> DOM和BOM</h3>\n<p>相当于语言的内置模块</p>\n<h4 id=\"dom\"><a class=\"markdownIt-Anchor\" href=\"#dom\"></a> DOM</h4>\n<p>DOM，就是一个模块，模块可以对HTML页面中的标签进行操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//创建标签&lt;div&gt;&lt;/div&gt;</span><br><span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElementById</span>(<span class=\"hljs-string\">&quot;div&quot;</span>);<br><br><span class=\"hljs-comment\">//在标签中添加内容</span><br> tag.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&quot;123&quot;</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//根据ID获取标签</span><br><span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;xx&quot;</span>);<br><br><span class=\"hljs-comment\">//在标签中添加内容</span><br> tag.<span class=\"hljs-property\">innerText</span> = <span class=\"hljs-string\">&quot;123&quot;</span>;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;city&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--    &lt;li&gt;北京&lt;/li&gt; --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--    &lt;li&gt;上海&lt;/li&gt; --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--    &lt;li&gt;深圳&lt;/li&gt; --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> cityList = [<span class=\"hljs-string\">&quot;北京&quot;</span>, <span class=\"hljs-string\">&quot;上海&quot;</span>, <span class=\"hljs-string\">&quot;深圳&quot;</span>, <span class=\"hljs-string\">&quot;广州&quot;</span>];</span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> idx <span class=\"hljs-keyword\">in</span> cityList) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> text = cityList[idx];</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//创建li标签</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;li&quot;</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//在标签中添加内容</span></span><br><span class=\"language-javascript\">        tag.<span class=\"hljs-property\">innerText</span> = text;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//添加到id=city的标签中(DOM)</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;city&quot;</span>);</span><br><span class=\"language-javascript\">        parent.<span class=\"hljs-title function_\">append</span>(tag);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"jquery\"><a class=\"markdownIt-Anchor\" href=\"#jquery\"></a> jQuery</h3>\n<p>相当于第三方模块</p>\n<h3 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\"></a> 变量</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;小明&quot;</span>;<span class=\"hljs-comment\">//变量</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name);<span class=\"hljs-comment\">//打印</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"字符串类型\"><a class=\"markdownIt-Anchor\" href=\"#字符串类型\"></a> 字符串类型</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;小明&quot;</span>;<span class=\"hljs-comment\">//变量</span><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-title class_\">String</span>(<span class=\"hljs-string\">&quot;小明&quot;</span>);<span class=\"hljs-comment\">//变量</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">//常见功能</span><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;中国联通&quot;</span>;<br><br><span class=\"hljs-keyword\">var</span> v1 = name.<span class=\"hljs-property\">length</span>;<span class=\"hljs-comment\">//获取长度</span><br><span class=\"hljs-keyword\">var</span> v2 = name[<span class=\"hljs-number\">0</span>];<span class=\"hljs-comment\">//获得第一个&quot;中”</span><br><span class=\"hljs-keyword\">var</span> v3 = name.<span class=\"hljs-title function_\">trim</span>();<span class=\"hljs-comment\">//去除空白</span><br><span class=\"hljs-keyword\">var</span> v4 = name.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>);<span class=\"hljs-comment\">//前取后不取，获得&quot;中国&quot;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h3>\n<p>定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><span class=\"hljs-keyword\">var</span> v2 = <span class=\"hljs-title class_\">Array</span>([<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>]);<br></code></pre></td></tr></table></figure>\n<p>操作</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><span class=\"hljs-comment\">//获取值</span><br><span class=\"hljs-keyword\">var</span> v2 = v1[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-comment\">//修改值</span><br>v1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;小明&quot;</span>;<br><span class=\"hljs-comment\">//在尾部添加值</span><br>v1.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&quot;联通&quot;</span>);<br><span class=\"hljs-comment\">//在前面插入值</span><br>v1.<span class=\"hljs-title function_\">unshift</span>(<span class=\"hljs-string\">&quot;移动&quot;</span>);<br><span class=\"hljs-comment\">//指定位置插入值</span><br><span class=\"hljs-comment\">//格式：v1.splice(索引位置,0,元素);</span><br>v1.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">&quot;元素&quot;</span>);<span class=\"hljs-comment\">//[11,&quot;中国&quot;,22,33,44]</span><br><br><span class=\"hljs-comment\">//删除</span><br>v1.<span class=\"hljs-title function_\">pop</span>()<span class=\"hljs-comment\">//尾部删除</span><br>v1.<span class=\"hljs-title function_\">shift</span>()<span class=\"hljs-comment\">//头部删除</span><br>v1.<span class=\"hljs-title function_\">splice</span>(索引位置,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//删除索引位置的元素</span><br>v1.<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//删除索引位置2的元素 [11,33,44]</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\"></a> 循环</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> idx <span class=\"hljs-keyword\">in</span> v1)&#123;<br>    <br>   <span class=\"hljs-comment\">//idx=0/1/2/3    data=v1[idx] </span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> v1 = [<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">44</span>];<br><br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;v1.<span class=\"hljs-property\">length</span>;i++)&#123;<br>    <br>   <span class=\"hljs-comment\">//i=0/1/2/3    data=v1[idx] </span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态标签\"><a class=\"markdownIt-Anchor\" href=\"#动态标签\"></a> 动态标签</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> cityList=[<span class=\"hljs-string\">&quot;北京&quot;</span>,<span class=\"hljs-string\">&quot;上海&quot;</span>,<span class=\"hljs-string\">&quot;深圳&quot;</span>,<span class=\"hljs-string\">&quot;广州&quot;</span>];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> idx <span class=\"hljs-keyword\">in</span> cityList)&#123;<br>        <span class=\"hljs-keyword\">var</span> text = cityList[idx];<br><br>        <span class=\"hljs-comment\">//创建li标签</span><br>        <span class=\"hljs-keyword\">var</span> tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;li&quot;</span>);<br>        <span class=\"hljs-comment\">//在标签中添加内容</span><br>        tag.<span class=\"hljs-property\">innerText</span> = text;<br>        <span class=\"hljs-comment\">//添加到id=city的标签中(DOM)</span><br>        <span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;city&quot;</span>);<br>        parent.<span class=\"hljs-title function_\">append</span>(tag);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"对象字典\"><a class=\"markdownIt-Anchor\" href=\"#对象字典\"></a> 对象（字典）</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">info = &#123;<br>    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;小明&quot;</span><br>    <span class=\"hljs-attr\">age</span>:<span class=\"hljs-number\">18</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"对对象进行操作\"><a class=\"markdownIt-Anchor\" href=\"#对对象进行操作\"></a> 对对象进行操作</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">info.<span class=\"hljs-property\">age</span>  <span class=\"hljs-comment\">//获取内容</span><br>info.<span class=\"hljs-property\">name</span>=<span class=\"hljs-string\">&quot;小红&quot;</span>;  <span class=\"hljs-comment\">//修改内容</span><br><span class=\"hljs-keyword\">delete</span> info[<span class=\"hljs-string\">&quot;name&quot;</span>];  <span class=\"hljs-comment\">//删除内容</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"对对象进行循环\"><a class=\"markdownIt-Anchor\" href=\"#对对象进行循环\"></a> 对对象进行循环</h4>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> info)&#123;<br>   <span class=\"hljs-comment\">//key=name/age     data=info[key]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"动态表格\"><a class=\"markdownIt-Anchor\" href=\"#动态表格\"></a> 动态表格</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> dataList = [<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小明&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小白&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小红&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">4</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小军&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;,<br>        &#123;<span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">5</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;小李&quot;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">19</span>&#125;<br>    ];<br><br>    <span class=\"hljs-keyword\">for</span> (idx <span class=\"hljs-keyword\">in</span> dataList) &#123;<br>        <span class=\"hljs-keyword\">var</span> info = dataList[idx];<br>        <span class=\"hljs-keyword\">var</span> tr = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;tr&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> info) &#123;<br>            <span class=\"hljs-keyword\">var</span> my_text = info[key];<br>            <span class=\"hljs-keyword\">var</span> td = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;td&quot;</span>)<br>            td.<span class=\"hljs-property\">innerText</span> = my_text;<br>            tr.<span class=\"hljs-title function_\">appendChild</span>(td);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">var</span> body_tag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;body&quot;</span>);<br>        body_tag.<span class=\"hljs-title function_\">append</span>(tr);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"条件语句\"><a class=\"markdownIt-Anchor\" href=\"#条件语句\"></a> 条件语句</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span>( 条件 ) &#123;<br><br>&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>&#123;<br><br>&#125;<span class=\"hljs-keyword\">else</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">func</span>(<span class=\"hljs-params\"></span>)&#123;<br>   ...<br>&#125;<br><br><span class=\"hljs-comment\">//执行函数</span><br>   <span class=\"hljs-title function_\">func</span>();<br></code></pre></td></tr></table></figure>\n<h3 id=\"事件绑定\"><a class=\"markdownIt-Anchor\" href=\"#事件绑定\"></a> 事件绑定</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;请输入内容&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;my_txt&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;点击添加&quot;</span>  <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;addCityInfo()&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;my_city&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addCityInfo</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//找到标签</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> txtTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;my_txt&quot;</span>);</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//获取用户输入的内容</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">var</span> new_string = txtTag.<span class=\"hljs-property\">value</span>;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//判断用户输入是否为空</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">if</span> (new_string.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">//创建新的标签</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">var</span> newTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;li&quot;</span>);</span><br><span class=\"language-javascript\">            newTag.<span class=\"hljs-property\">innerText</span> = new_string;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">//标签添加到ul中</span></span><br><span class=\"language-javascript\">            <span class=\"hljs-keyword\">var</span> parentTag = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;my_city&quot;</span>);</span><br><span class=\"language-javascript\">            parentTag.<span class=\"hljs-title function_\">appendChild</span>(newTag);</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">//将输入框内容清空</span></span><br><span class=\"language-javascript\">            txtTag.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&quot;&quot;</span>;</span><br><span class=\"language-javascript\">        &#125;<span class=\"hljs-keyword\">else</span>&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;输入不能为空！&quot;</span>);</span><br><span class=\"language-javascript\">        &#125;</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"jquery-2\"><a class=\"markdownIt-Anchor\" href=\"#jquery-2\"></a> JQuery</h2>\n<h3 id=\"初识jquery\"><a class=\"markdownIt-Anchor\" href=\"#初识jquery\"></a> 初识JQuery</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;JQ_test&quot;</span>&gt;</span> JQuery测试 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">  </span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//利用JQuery实现某些功能</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//找到id=&quot;&quot;的标签并修改</span></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-string\">&quot;#JQ_test&quot;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;JQ修改&quot;</span>);</span><br><span class=\"language-javascript\">    </span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"直接寻找标签\"><a class=\"markdownIt-Anchor\" href=\"#直接寻找标签\"></a> 直接寻找标签</h3>\n<ul>\n<li>ID选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;JQ_test&quot;</span>&gt;</span> JQuery测试 <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#JQ_test&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>样式选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>中国联通<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>标签选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>中国联通<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>层级选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1.c2 a&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>多选择器</li>\n</ul>\n<p>选择多个标签同时操作</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;#&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;u1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;p1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.c1,#u1,p&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>属性选择器</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n1&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;n2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;input[name=&#x27;n1&#x27;]&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"间接寻找标签\"><a class=\"markdownIt-Anchor\" href=\"#间接寻找标签\"></a> 间接寻找标签</h3>\n<ul>\n<li>找到上一个兄弟</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>北京<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>广州<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>深圳<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">prev</span>()\t<span class=\"hljs-comment\">//上一个</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>)<br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">next</span>()\t<span class=\"hljs-comment\">//下一个</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-title function_\">next</span>()\t<span class=\"hljs-comment\">//下下一个</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">siblings</span>()\t<span class=\"hljs-comment\">//所有同级标签（兄弟）</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>找父子</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>老大<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;d2&quot;</span>&gt;</span>老二<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">parent</span>()\t<span class=\"hljs-comment\">//父亲</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">parent</span>()\t<span class=\"hljs-comment\">//祖父</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">children</span>()\t<span class=\"hljs-comment\">//所有孩子</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">children</span>(<span class=\"hljs-string\">&quot;.d2&quot;</span>)\t<span class=\"hljs-comment\">//所有的孩子中寻找class=d2的孩子</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;.d2&quot;</span>)\t<span class=\"hljs-comment\">//去寻找class=d2的所有子孙</span><br>$(<span class=\"hljs-string\">&quot;#c2&quot;</span>).<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;div&quot;</span>)\t<span class=\"hljs-comment\">//去寻找div标签的所有子孙</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"案例菜单切换\"><a class=\"markdownIt-Anchor\" href=\"#案例菜单切换\"></a> 案例：菜单切换</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>菜单<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.menu</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">800px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#2aabd2</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.menu</span> <span class=\"hljs-selector-class\">.header</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">cursor</span>: pointer; <span class=\"hljs-comment\">/* 鼠标放上去变成手 */</span></span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span> <span class=\"hljs-number\">5px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> dotted <span class=\"hljs-number\">#ddd</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">linear-gradient</span>(<span class=\"hljs-number\">#37ff00</span>, <span class=\"hljs-number\">#16a5d3</span>);</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.item</span> <span class=\"hljs-selector-tag\">a</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">text-decoration</span>: none;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">5px</span> <span class=\"hljs-number\">5px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border-bottom</span>: <span class=\"hljs-number\">1px</span> dotted <span class=\"hljs-number\">#ddd</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.hide</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: none;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;menu&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>北京<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>海淀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>朝阳区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>大兴区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>昌平区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>上海<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>宝山区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>普陀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>浦东新区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>青浦区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>北京2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>海淀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>朝阳区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>大兴区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>昌平区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;clickme(this)&quot;</span>&gt;</span>上海2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content hide&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>宝山区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>普陀区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>浦东新区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>青浦区<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//方法一：大家都可以展示</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// let i = 0;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// function clickme(self) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     if (i++ % 2 === 0) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().removeClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125; else &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().addClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// &#125;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//方法二：大家都可以展示</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// function clickme(self) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     var hasHide = $(self).next().hasClass(&quot;hide&quot;)</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     if (hasHide) &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().removeClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125; else &#123;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//         $(self).next().addClass(&quot;hide&quot;);</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//     &#125;</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">// &#125;</span></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-comment\">//只展示自己，隐藏别人</span></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">clickme</span>(<span class=\"hljs-params\">self</span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//把自己的内容展示出来</span></span><br><span class=\"language-javascript\">        $(self).<span class=\"hljs-title function_\">next</span>().<span class=\"hljs-title function_\">removeClass</span>(<span class=\"hljs-string\">&quot;hide&quot;</span>);</span><br><span class=\"language-javascript\">        $(self).<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">siblings</span>().<span class=\"hljs-title function_\">find</span>(<span class=\"hljs-string\">&quot;.content&quot;</span>).<span class=\"hljs-title function_\">addClass</span>(<span class=\"hljs-string\">&quot;hide&quot;</span>);</span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"操作样式\"><a class=\"markdownIt-Anchor\" href=\"#操作样式\"></a> 操作样式</h3>\n<ul>\n<li>\n<p>addClass</p>\n</li>\n<li>\n<p>removeClass</p>\n</li>\n<li>\n<p>hasClass</p>\n</li>\n</ul>\n<h3 id=\"值的操作\"><a class=\"markdownIt-Anchor\" href=\"#值的操作\"></a> 值的操作</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c1&quot;</span>&gt;</span>内容<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">text</span>() <span class=\"hljs-comment\">//获取内容</span><br>$(<span class=\"hljs-string\">&quot;#c1&quot;</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;测试&quot;</span>) <span class=\"hljs-comment\">//设置内容</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;c2&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;c2&quot;</span>).<span class=\"hljs-title function_\">val</span>()   <span class=\"hljs-comment\">//获取用户输入值</span><br>$(<span class=\"hljs-string\">&quot;c2&quot;</span>).<span class=\"hljs-title function_\">val</span>(<span class=\"hljs-string\">&quot;txt&quot;</span>)   <span class=\"hljs-comment\">//设置用户输入值</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"案例动态创建数据\"><a class=\"markdownIt-Anchor\" href=\"#案例动态创建数据\"></a> 案例：动态创建数据</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>动态创建数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txtUser&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;txtEmail&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;邮箱&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;getinfo()&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;view&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getinfo</span>(<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> username = $(<span class=\"hljs-string\">&quot;#txtUser&quot;</span>).<span class=\"hljs-title function_\">val</span>();   <span class=\"hljs-comment\">//设置用户输入值</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> email = $(<span class=\"hljs-string\">&quot;#txtEmail&quot;</span>).<span class=\"hljs-title function_\">val</span>();</span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">const</span> datastr = username + <span class=\"hljs-string\">&#x27;-&#x27;</span> + email;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//创建li标签</span></span><br><span class=\"language-javascript\">        <span class=\"hljs-keyword\">let</span> lusr = $(<span class=\"hljs-string\">&quot;&lt;li&gt;&quot;</span>).<span class=\"hljs-title function_\">text</span>(datastr);</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">//把新创建的li标签添加到ul里面</span></span><br><span class=\"language-javascript\">        $(<span class=\"hljs-string\">&quot;#view&quot;</span>).<span class=\"hljs-title function_\">append</span>(lusr);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    &#125;</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"事件\"><a class=\"markdownIt-Anchor\" href=\"#事件\"></a> 事件</h3>\n<p>绑定事件直接用 <code>$(&quot;&quot;)</code> 获取到标签直接定义事件即可 。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">$(<span class=\"hljs-string\">&quot;.item&quot;</span>).<span class=\"hljs-title function_\">children</span>().<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;hello python&quot;</span>)<br>        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">remove</span>()<br>    &#125;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"案例设置和删除标签\"><a class=\"markdownIt-Anchor\" href=\"#案例设置和删除标签\"></a> 案例：设置和删除标签</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>设置和删除标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.item</span> <span class=\"hljs-selector-tag\">a</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: block;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">text-decoration</span>: none;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;item&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    <span class=\"hljs-keyword\">let</span> a = $(<span class=\"hljs-string\">&quot;.item&quot;</span>).<span class=\"hljs-title function_\">children</span>();</span><br><span class=\"language-javascript\">    $(a).<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;hello python&quot;</span>);<span class=\"hljs-comment\">//设置标签</span></span><br><span class=\"language-javascript\">        $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">remove</span>();<span class=\"hljs-comment\">//删除标签</span></span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>当页面框架加载完成之后执行代码(封装在$function之内):</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            $(<span class=\"hljs-string\">&quot;.item&quot;</span>).<span class=\"hljs-title function_\">children</span>().<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">text</span>(<span class=\"hljs-string\">&quot;hello python&quot;</span>);</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"案例表格操作\"><a class=\"markdownIt-Anchor\" href=\"#案例表格操作\"></a> 案例：表格操作</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>Alleyf<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;删除&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>CHUIYUGIN<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;删除&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>小明<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;button&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;删除&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;delete&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">        <span class=\"hljs-comment\">// 找到所有class为delete的标签</span></span><br><span class=\"language-javascript\">        $(<span class=\"hljs-string\">&quot;.delete&quot;</span>).<span class=\"hljs-title function_\">click</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-comment\">// 删除当前行</span></span><br><span class=\"language-javascript\">            $(<span class=\"hljs-variable language_\">this</span>).<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">parent</span>().<span class=\"hljs-title function_\">remove</span>();</span><br><span class=\"language-javascript\">        &#125;)</span><br><span class=\"language-javascript\">    &#125;)</span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"前端整合\"><a class=\"markdownIt-Anchor\" href=\"#前端整合\"></a> 前端整合</h2>\n<ul>\n<li>HTNL</li>\n<li>CSS</li>\n<li>JavaScript</li>\n<li>Bootstrap(动态效果依赖jQuery)</li>\n</ul>\n<h3 id=\"案例添加数据页面\"><a class=\"markdownIt-Anchor\" href=\"#案例添加数据页面\"></a> 案例：添加数据页面</h3>\n<blockquote>\n<p>人员信息录入功能，需要提供用户信息：</p>\n<p>用户名、年龄、薪资、部门、入职时间（*）</p>\n<ul>\n<li>时间的选择：不能输入；选择：（插件）datetimepicker</li>\n</ul>\n<ul>\n<li>下载插件</li>\n<li>应用插件</li>\n</ul>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>添加数据页面<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--生产版本--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-3.4.1/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-datetimepicker-master/css/bootstrap-datetimepicker.min.css&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-horizontal&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;姓名&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;年龄&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>薪资<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;薪资&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;brabch&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;inputbranch&quot;</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>IT部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>销售部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>人事资源管理部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>售后部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">option</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span>运营部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">option</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row clearfix&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-6&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-2 control-label&quot;</span>&gt;</span>入职日期<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-10&quot;</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dt&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;email&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-control&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;入职日期&quot;</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-sm-offset-6 col-sm-10&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>提 交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><br><span class=\"hljs-comment\">&lt;!--JS代码块位置--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://kit.fontawesome.com/5efd8aed42.js&quot;</span> <span class=\"hljs-attr\">crossorigin</span>=<span class=\"hljs-string\">&quot;anonymous&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/js/jquery-3.6.1.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-datetimepicker-master/js/bootstrap-datetimepicker.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;static/plugins/bootstrap-datetimepicker-master/js/locales/bootstrap-datetimepicker.zh-CN.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\">    $(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;</span><br><span class=\"language-javascript\">        $(<span class=\"hljs-string\">&#x27;#dt&#x27;</span>).<span class=\"hljs-title function_\">datetimepicker</span>(&#123;</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">fomat</span>: <span class=\"hljs-string\">&#x27;yyyy-mm-dd&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">startDate</span>: <span class=\"hljs-string\">&#x27;0&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">language</span>: <span class=\"hljs-string\">&#x27;zh-CN&#x27;</span>,</span><br><span class=\"language-javascript\">            <span class=\"hljs-attr\">autoclose</span>: <span class=\"hljs-literal\">true</span></span><br><span class=\"language-javascript\">        &#125;);</span><br><span class=\"language-javascript\">    &#125;);</span><br><span class=\"language-javascript\"></span><br><span class=\"language-javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"mysql\"><a class=\"markdownIt-Anchor\" href=\"#mysql\"></a> MySQL</h2>\n<h3 id=\"进入mysqlcmd进入终端\"><a class=\"markdownIt-Anchor\" href=\"#进入mysqlcmd进入终端\"></a> 进入MySQL：cmd进入终端</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">mysql <span class=\"hljs-operator\">-</span>u root <span class=\"hljs-operator\">-</span>p1234<br></code></pre></td></tr></table></figure>\n<h3 id=\"查看\"><a class=\"markdownIt-Anchor\" href=\"#查看\"></a> 查看</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> databases;<br></code></pre></td></tr></table></figure>\n<h3 id=\"退出\"><a class=\"markdownIt-Anchor\" href=\"#退出\"></a> 退出</h3>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">exit;<br></code></pre></td></tr></table></figure>\n<h3 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\"></a> 基本数据类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">tinyint</td>\n<td>短整形()，相当于java的short，有符号(默认)，取值范围：-128<sub>127；无符号(用关键词unsigned指定)，取值范围：0</sub>255</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>int</strong></td>\n<td>整形，相当于java的int</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">bigint</td>\n<td>长整形，相当于java的long</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td>单精度浮点型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>double</strong></td>\n<td>双精度浮点型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">decimal</td>\n<td>准确的小数值，eg：wage decimal(m,n) –总共m位数(负号不算)，其中小数点后有n位，m<s>max</s>=65，n<s>max</s>=30.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>datatime</strong></td>\n<td>日期类型，YYYY-MM-DD HH:MM:SS(2022-12-09 21:03:00)，dt转为字符串类型显示**（dt.strftime(“%Y-%m-%d %H:%M:%S”)）**</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">data</td>\n<td>日期类型（无时分秒）YYYY-MM-DD</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td>日期类型（可存储时间戳）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>char</strong></td>\n<td>定长字符，固定字符长度，最大255个字符，速度快，常存储：手机号，邮箱，加密后的密码等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>varchar</strong></td>\n<td>不定长字符，有多少存多少，最大65535个字节，节省空间，长度是动态变化的。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">text</td>\n<td>大文字，用于存储很长的字符内容，可存储65535个字符，例如：文章，新闻等。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mediumtext</td>\n<td>中等文本，最多存储16777215（2<sup>24</sup>-1)个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">longtext</td>\n<td>长文本，最多存储4294967295（4GB）（2<sup>32</sup>-1)个字符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">blob</td>\n<td>字节数据类型，存储图片、音频等文件</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数据库管理文件夹\"><a class=\"markdownIt-Anchor\" href=\"#数据库管理文件夹\"></a> 数据库管理(文件夹)</h3>\n<ul>\n<li>查看当前已有数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> databases;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>创建数据库 (文件夹)</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> database 数据库名；<br><span class=\"hljs-keyword\">create</span> database 数据库名 <span class=\"hljs-keyword\">DEFAULT</span> CHARSET utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>删除数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">drop</span> database 数据库名；<br></code></pre></td></tr></table></figure>\n<ul>\n<li>进入数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">use 数据库名；<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查看当前数据库下的所有数据表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> tables；<br></code></pre></td></tr></table></figure>\n<h3 id=\"数据表管理\"><a class=\"markdownIt-Anchor\" href=\"#数据表管理\"></a> 数据表管理</h3>\n<ul>\n<li>创建表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> 表名(<br>\t字段名 类型，<br>    字段名 类型，<br>    ···<br>    字段名 类型<br>)<span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8；<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> 表名(<br>\t字段名 类型 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> auto_increment <span class=\"hljs-keyword\">primary</span> key，\t<span class=\"hljs-comment\">--主键（不允许为空，不允许重复）自增特性</span><br>    字段名 类型 <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>，<span class=\"hljs-comment\">--不允许为空</span><br>    字段名 类型 <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">3</span>，<span class=\"hljs-comment\">--插入数据时，默认值为3，当不插入值时默认为3</span><br>    ···<br>    字段名 类型 <span class=\"hljs-keyword\">null</span> \t<span class=\"hljs-comment\">--允许为空（默认）</span><br>)<span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8；<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><mark>主键一般用于表示当前行的编号</mark>（类似于身份证）。</p>\n</blockquote>\n<ul>\n<li>示例</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> medocsys(<br>\tid <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> auto_increment <span class=\"hljs-keyword\">primary</span> key,<br>\tname <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">20</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>    pwd <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">15</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span><br>) <span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查看创建表的信息</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">desc</span> 表名<br></code></pre></td></tr></table></figure>\n<ul>\n<li>插入数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">单条插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br>批量插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),···(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br></code></pre></td></tr></table></figure>\n<h3 id=\"数据行操作\"><a class=\"markdownIt-Anchor\" href=\"#数据行操作\"></a> 数据行操作</h3>\n<h4 id=\"新增数据\"><a class=\"markdownIt-Anchor\" href=\"#新增数据\"></a> 新增数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">单条插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br>批量插入<br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> 表名(字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span>，···，字段名) <span class=\"hljs-keyword\">values</span>(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据),···(数据<span class=\"hljs-number\">1</span>，数据<span class=\"hljs-number\">2</span>，···，数据);<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除数据\"><a class=\"markdownIt-Anchor\" href=\"#删除数据\"></a> 删除数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> 表名；<span class=\"hljs-comment\">--删除所有数据</span><br><span class=\"hljs-keyword\">delete</span> <span class=\"hljs-keyword\">from</span> 表名 <span class=\"hljs-keyword\">where</span> 条件；<span class=\"hljs-comment\">--删除满足条件的数据</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>delete from tb1 where id&gt;=10 or name=”yugin”;</p>\n</blockquote>\n<h4 id=\"修改数据\"><a class=\"markdownIt-Anchor\" href=\"#修改数据\"></a> 修改数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> 表名 <span class=\"hljs-keyword\">set</span> 字段名<span class=\"hljs-operator\">=</span>值；<br><span class=\"hljs-keyword\">update</span> 表名 <span class=\"hljs-keyword\">set</span> 字段名<span class=\"hljs-number\">1</span><span class=\"hljs-operator\">=</span>值，字段名<span class=\"hljs-number\">2</span><span class=\"hljs-operator\">=</span>值；<br><span class=\"hljs-keyword\">update</span> 表名 <span class=\"hljs-keyword\">set</span> 字段名<span class=\"hljs-operator\">=</span>值 <span class=\"hljs-keyword\">where</span> 条件；<br>eg：<span class=\"hljs-keyword\">update</span> tb1 <span class=\"hljs-keyword\">set</span> name<span class=\"hljs-operator\">=</span>&quot;yugin&quot;, pwd<span class=\"hljs-operator\">=</span>pwd<span class=\"hljs-operator\">+</span>&quot;10&quot;;<br></code></pre></td></tr></table></figure>\n<h4 id=\"查询数据\"><a class=\"markdownIt-Anchor\" href=\"#查询数据\"></a> 查询数据</h4>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">查询表所有数据<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> 表名；<br>查询对应字段的数据<br><span class=\"hljs-keyword\">select</span> 字段名<span class=\"hljs-number\">1</span>，字段名<span class=\"hljs-number\">2</span> <span class=\"hljs-keyword\">from</span> 表名；<br>条件查询数据<br><span class=\"hljs-keyword\">select</span> <span class=\"hljs-operator\">*</span> <span class=\"hljs-keyword\">from</span> 表名 <span class=\"hljs-keyword\">where</span> id <span class=\"hljs-operator\">&gt;</span> <span class=\"hljs-number\">3</span>；<br></code></pre></td></tr></table></figure>\n<h3 id=\"小结\"><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h3>\n<p>一般开发：</p>\n<ul>\n<li>创建数据库</li>\n<li>创建数据表</li>\n</ul>\n<blockquote>\n<p><mark>提前用工具创建好</mark></p>\n</blockquote>\n<ul>\n<li>创建数据库</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> database unicom <span class=\"hljs-keyword\">DEFAULT</span> CHARSET utf8 <span class=\"hljs-keyword\">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>创建表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">create</span> <span class=\"hljs-keyword\">table</span> admin(<br>\tid <span class=\"hljs-type\">int</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> auto_increment <span class=\"hljs-keyword\">primary</span> key,<br>    username <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">16</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>    password <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">64</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span>,<br>    mobile <span class=\"hljs-type\">char</span>(<span class=\"hljs-number\">11</span>) <span class=\"hljs-keyword\">not</span> <span class=\"hljs-keyword\">null</span> \t<br>)<span class=\"hljs-keyword\">default</span> charset<span class=\"hljs-operator\">=</span>utf8;<br></code></pre></td></tr></table></figure>\n<h3 id=\"python操作mysql\"><a class=\"markdownIt-Anchor\" href=\"#python操作mysql\"></a> Python操作MySQL</h3>\n<ul>\n<li>创建数据</li>\n</ul>\n<blockquote>\n<p>在进行增删改的时候需要执行<code>commit</code>，不然数据库没有数据</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br><br><span class=\"hljs-comment\">#1.连接上本地mysql</span><br>conn = pymysql.connect(host=<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,port=<span class=\"hljs-number\">3306</span>,user=<span class=\"hljs-string\">&quot;root&quot;</span>,password=<span class=\"hljs-string\">&quot;1234&quot;</span>,charset=<span class=\"hljs-string\">&quot;utf8&quot;</span>,db=<span class=\"hljs-string\">&quot;unicom&quot;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class=\"hljs-comment\">#发送指令</span><br>sql=<span class=\"hljs-string\">&quot;insert into admin(username,password,mobile) values(%(name)s,%(psw)s,%(mobile)s)&quot;</span><br>cursor.execute(sql,&#123;<span class=\"hljs-string\">&quot;name&quot;</span>:<span class=\"hljs-string\">&#x27;alleyf2&#x27;</span>,<span class=\"hljs-string\">&quot;psw&quot;</span>:<span class=\"hljs-string\">&#x27;alleyf1234&#x27;</span>,<span class=\"hljs-string\">&quot;mobile&quot;</span>:<span class=\"hljs-string\">&#x27;18127896898&#x27;</span>&#125;)<br>conn.commit()<br><br><span class=\"hljs-comment\">#关闭</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure>\n<ul>\n<li>查询数据</li>\n</ul>\n<blockquote>\n<p>在进行查询的时候不需要执行<code>commit</code>，但是要执行<code>fetchall/fetchone</code>获取到返回的数据</p>\n<p>返回列表的形式，列表里面包含字典。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pymysql<br><br><br><span class=\"hljs-comment\">#1.连接上本地mysql</span><br>conn = pymysql.connect(host=<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,port=<span class=\"hljs-number\">3306</span>,user=<span class=\"hljs-string\">&quot;root&quot;</span>,password=<span class=\"hljs-string\">&quot;1234&quot;</span>,charset=<span class=\"hljs-string\">&quot;utf8&quot;</span>,db=<span class=\"hljs-string\">&quot;unicom&quot;</span>)<br>cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)<br><br><span class=\"hljs-comment\">#发送指令</span><br>sql=<span class=\"hljs-string\">&quot;select * from admin&quot;</span><br><br><span class=\"hljs-comment\"># 获取返回的所有数据（包含字典成员的列表）</span><br>cursor.execute(sql)<br>data_list = cursor.fetchall()<br><br><span class=\"hljs-comment\"># 获取返回的第一条数据</span><br>cursor.execute(sql)<br>my_first = cursor.fetchone()<br><br><span class=\"hljs-keyword\">for</span> row_dict <span class=\"hljs-keyword\">in</span> data_list:<br> <span class=\"hljs-built_in\">print</span>(row_dict)<br><br><span class=\"hljs-built_in\">print</span>(my_first)<br><br><span class=\"hljs-comment\">#关闭</span><br>cursor.close()<br>conn.close()<br></code></pre></td></tr></table></figure>\n<h2 id=\"django\"><a class=\"markdownIt-Anchor\" href=\"#django\"></a> Django</h2>\n<h3 id=\"默认文件介绍\"><a class=\"markdownIt-Anchor\" href=\"#默认文件介绍\"></a> 默认文件介绍</h3>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">│  manage<span class=\"hljs-selector-class\">.py</span>\t【项目的管理，启动项目，创建app，数据管理】【不能动】【常常用】<br>│<br>├─<span class=\"hljs-selector-class\">.idea</span><br>│  │  <span class=\"hljs-selector-class\">.gitignore</span><br>│  │  misc<span class=\"hljs-selector-class\">.xml</span><br>│  │  modules<span class=\"hljs-selector-class\">.xml</span><br>│  │  mysite<span class=\"hljs-selector-class\">.iml</span><br>│  │  workspace<span class=\"hljs-selector-class\">.xml</span><br>│  │<br>│  └─inspectionProfiles<br>│          profiles_settings<span class=\"hljs-selector-class\">.xml</span><br>│<br>├─mysite<br>│  │  settings<span class=\"hljs-selector-class\">.py</span>\t【项目配置文件】【常修改】<br>│  │  urls<span class=\"hljs-selector-class\">.py</span>\t【URL和函数的对应关系】【常修改】<br>│  │  asgi<span class=\"hljs-selector-class\">.py</span>\t【接收网络请求】【不能动】<br>│  │  wsgi<span class=\"hljs-selector-class\">.py</span>\t【接收网络请求】【不能动】<br>│  │  __init__<span class=\"hljs-selector-class\">.py</span><br>│  │<br>│  └─__pycache__<br>│          settings<span class=\"hljs-selector-class\">.cpython-310</span><span class=\"hljs-selector-class\">.pyc</span><br>│          __init__<span class=\"hljs-selector-class\">.cpython-310</span><span class=\"hljs-selector-class\">.pyc</span><br>│<br>└─__pycache__<br>        manage<span class=\"hljs-selector-class\">.cpython-310</span>.pyc<br></code></pre></td></tr></table></figure>\n<h3 id=\"app\"><a class=\"markdownIt-Anchor\" href=\"#app\"></a> APP</h3>\n<h4 id=\"创建app\"><a class=\"markdownIt-Anchor\" href=\"#创建app\"></a> 创建APP</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">python manage.py startapp [名字]<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">-项目<br>\t-app，用户管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>\t-app，订单管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>\t-app，后台管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>   \t-app，网站管理【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>   \t-app，API    【表结构、函数、<span class=\"hljs-selector-tag\">HTML</span>模板、CSS等独立】<br>   \t···<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><figcaption><span>basic</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs visual\">├─app1<br>│  │  admin.py\t【固定，不用动】django默认提供了admin后台管理<br>│  │  apps.py\t【固定，不用动】app启动类<br>│  │  models.py\t【重要，模型层】对数据库操作<br>│  │  tests.py\t【固定，不用动】单元测试<br>│  │  views.py\t【重要，视图层】前后端交互处理请求返回结果的函数<br>│  │  __init__.py<br>│  │<br>│  └─migrations\t【固定，不用动】数据库变更记录<br>│          __init__.py<br></code></pre></td></tr></table></figure>\n<h3 id=\"快速上手\"><a class=\"markdownIt-Anchor\" href=\"#快速上手\"></a> 快速上手</h3>\n<ul>\n<li><strong>确保app已注册【<a href=\"http://setting.py\">setting.py</a>】</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">INSTALLED_APPS = [<br>    <span class=\"hljs-string\">&quot;django.contrib.admin&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.auth&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.contenttypes&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.sessions&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.messages&quot;</span>,<br>    <span class=\"hljs-string\">&quot;django.contrib.staticfiles&quot;</span>,<br>    <span class=\"hljs-string\">&quot;app01.apps.App01Config&quot;</span>          <span class=\"hljs-comment\">#注册app01</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>编写URL和视图函数对应关系【<a href=\"http://urls.py\">urls.py</a>】</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.contrib <span class=\"hljs-keyword\">import</span> admin<br><span class=\"hljs-keyword\">from</span> django.urls <span class=\"hljs-keyword\">import</span> path<br><span class=\"hljs-keyword\">from</span> app01 <span class=\"hljs-keyword\">import</span> views<br><br>urlpatterns = [<br>    <span class=\"hljs-comment\"># path(&quot;admin/&quot;, admin.site.urls),</span><br>    path(<span class=\"hljs-string\">&quot;index/&quot;</span>, views.index),<br>]<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>编写视图函数【<a href=\"http://view.py\">view.py</a>】</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, HttpResponse<br><br><br><span class=\"hljs-comment\"># Create your views here.</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">index</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;欢迎访问YUGIN Blog&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>启动Django项目</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-number\">1.</span>命令行启动<br>python manage.py runserver<br><span class=\"hljs-number\">2.</span>pycharm启动<br>直接点击pycharm里的启动按钮<br></code></pre></td></tr></table></figure>\n<h3 id=\"编写页面\"><a class=\"markdownIt-Anchor\" href=\"#编写页面\"></a> 编写页面</h3>\n<h4 id=\"引入html\"><a class=\"markdownIt-Anchor\" href=\"#引入html\"></a> 引入HTML</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_list</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-comment\"># 根据app注册顺序,去每个app目录下的templates中寻找对应的html</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_list.html&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"静态文件\"><a class=\"markdownIt-Anchor\" href=\"#静态文件\"></a> 静态文件</h4>\n<p>一般开发过程中：</p>\n<ul>\n<li>图片</li>\n<li>CSS</li>\n<li>Js</li>\n</ul>\n<p>都会当做静态文件处理！</p>\n<ul>\n<li>\n<p>一般在app目录下放置static文件夹</p>\n</li>\n<li>\n<p>注意Django一般引入静态文件：</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户列表<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>用户列表<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"模板语法\"><a class=\"markdownIt-Anchor\" href=\"#模板语法\"></a> 模板语法</h3>\n<ul>\n<li>\n<p>本质上：在html中写一些占位符，由数据对这些占位符进行替换和处理。</p>\n</li>\n<li>\n<p>注意：取单独值的时候用<code>.</code>进行索引</p>\n</li>\n</ul>\n<p><strong><a href=\"http://views.py\">views.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">tpl</span>(<span class=\"hljs-params\">request</span>):<br>    name = <span class=\"hljs-string\">&quot;小明&quot;</span><br>    roles = [<span class=\"hljs-string\">&quot;管理员&quot;</span>, <span class=\"hljs-string\">&quot;CEO&quot;</span>, <span class=\"hljs-string\">&quot;保安&quot;</span>]<br>    user_info = &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭志&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;101000&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;CTO&quot;</span>&#125;<br><br>    data_list = [<br>        &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;郭志&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;101000&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;CTO&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;赵健&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;1010&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;保安&quot;</span>&#125;,<br>        &#123;<span class=\"hljs-string\">&quot;name&quot;</span>: <span class=\"hljs-string\">&quot;芦荟&quot;</span>, <span class=\"hljs-string\">&quot;salary&quot;</span>: <span class=\"hljs-string\">&quot;201000&quot;</span>, <span class=\"hljs-string\">&quot;role&quot;</span>: <span class=\"hljs-string\">&quot;CEO&quot;</span>&#125;<br>    ]<br><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;tpl.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;n1&quot;</span>: name, <span class=\"hljs-string\">&quot;n2&quot;</span>: roles, <span class=\"hljs-string\">&quot;n3&quot;</span>: user_info,<span class=\"hljs-string\">&quot;n4&quot;</span>:data_list&#125;)<br></code></pre></td></tr></table></figure>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>模板语法的学习<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>模板语法的学习<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br>&#123;#字符串#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>&#123;#列表#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n2.0 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n2.1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>&#123;&#123; n2.2 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>&#123;#循环列表#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>    &#123;% for item in n2 %&#125;<br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>&#123;#字典#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; n3.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; n3.salary &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>&#123;&#123; n3.role &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br><br>&#123;#循环字典#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    &#123;% for key,valuse in n3.items %&#125;<br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; key &#125;&#125; = &#123;&#123; valuse &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br>&#123;#列表套字典#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; n4.1 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; n4.1.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br>&#123;#列表套字典加循环#&#125;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>    &#123;% for item in n4 %&#125;<br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>&#123;&#123; item.name &#125;&#125; = &#123;&#123;item.salary &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br><br>&#123;#条件语句#&#125;<br>&#123;% if n1 == &quot;小明&quot;%&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>是小明<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>&#123;% else %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>不是小明<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>&#123;% endif %&#125;<br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"案例热搜展示\"><a class=\"markdownIt-Anchor\" href=\"#案例热搜展示\"></a> 案例：热搜展示</h4>\n<p><strong><a href=\"http://views.py\">views.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">news</span>(<span class=\"hljs-params\">request</span>):<br>    url = <span class=\"hljs-string\">&quot;http://api.54dh.cn/API/search/rs/?type=weibo&quot;</span><br>    dic = &#123;<span class=\"hljs-string\">&#x27;user-agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0&#x27;</span>&#125;<br>    r = requests.post(url, headers=dic)<br>    r.raise_for_status()<br>    r.encoding = r.apparent_encoding<br>    info = &#123;<span class=\"hljs-string\">&#x27;info&#x27;</span>: r.json()&#125;<br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;news.html&quot;</span>, info)<br></code></pre></td></tr></table></figure>\n<p><strong>HTML</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>热搜展示<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        * &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">font-family</span>: 微软雅黑, serif;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">letter-spacing</span>: .<span class=\"hljs-number\">05em</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">5px</span> auto;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">linear-gradient</span>(to right, <span class=\"hljs-number\">#a997a4</span>, <span class=\"hljs-number\">#b3e8ee</span>);</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\"></span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row container&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-12 text-center&quot;</span>&gt;</span>热搜展示---&#123;&#123; info.time &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot; text-center&quot;</span>&gt;</span><br>        &#123;% for item in info.data %&#125;<br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;&#123; item.link &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; item.title &#125;&#125;--&#123;&#123; item.heat &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span><br>        &#123;% endfor %&#125;<br><br><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"请求和响应\"><a class=\"markdownIt-Anchor\" href=\"#请求和响应\"></a> 请求和响应</h3>\n<ul>\n<li><strong>通过此方式可以获取到get请求中的参数和post请求中的数据</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">something</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        <span class=\"hljs-comment\"># 获取get请求中携带的参数</span><br>        parameters = request.GET<br>        <span class=\"hljs-comment\"># 获取post请求中提交的数据</span><br>        data = request.POST<br>        <span class=\"hljs-built_in\">print</span>(parameters)<br>        <span class=\"hljs-built_in\">print</span>(data)<br>        <span class=\"hljs-keyword\">return</span> HttpResponse(parameters[<span class=\"hljs-string\">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>重定向：返回重定向的网址给浏览器，浏览器去请求该网址</strong></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;https://www.baidu.com&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"案例用户登录\"><a class=\"markdownIt-Anchor\" href=\"#案例用户登录\"></a> 案例：用户登录</h4>\n<p><strong><a href=\"http://views.py\">views.py</a></strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, HttpResponse,redirect<br><span class=\"hljs-keyword\">import</span> requests<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">login</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>       <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;login.html&quot;</span>)<br>    <span class=\"hljs-comment\">#POST请求</span><br>    <span class=\"hljs-keyword\">else</span>:<br>        username=request.POST.get(<span class=\"hljs-string\">&quot;user&quot;</span>)<br>        pwd = request.POST.get(<span class=\"hljs-string\">&quot;pwd&quot;</span>)<br>        <span class=\"hljs-comment\">#print(request.POST)</span><br>        <span class=\"hljs-keyword\">if</span> username == <span class=\"hljs-string\">&#x27;root&#x27;</span> <span class=\"hljs-keyword\">and</span> pwd == <span class=\"hljs-string\">&#x27;1234&#x27;</span>:<br>             <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;http://chuiyugin.github.io&quot;</span>)<br>        <span class=\"hljs-keyword\">else</span>:<br>             <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;login.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;error_msg&quot;</span>:<span class=\"hljs-string\">&quot;用户名或密码错误&quot;</span>&#125;)<br></code></pre></td></tr></table></figure>\n<p><strong>HTML</strong></p>\n<ul>\n<li>注意： 在html表单（form）中加上<code>&#123;% csrf_token %&#125;</code></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户登录<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/login/&quot;</span>&gt;</span><br>    &#123;#提交表单一定要添加#&#125;<br>    &#123;% csrf_token %&#125;<br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pwd&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提交&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;row container&quot;</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;col-xs-12 &quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color:darkred;&quot;</span>&gt;</span>&#123;&#123; error_msg &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"数据库操作\"><a class=\"markdownIt-Anchor\" href=\"#数据库操作\"></a> 数据库操作</h3>\n<blockquote>\n<p>Django使用ORM框架实现对数据库的操作，安装<code>mysqlclient</code>第三方库辅助操作</p>\n</blockquote>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">pip install mysqlclient<br></code></pre></td></tr></table></figure>\n<h4 id=\"orm\"><a class=\"markdownIt-Anchor\" href=\"#orm\"></a> ORM</h4>\n<blockquote>\n<p>ORM可以帮助我们完成两件事：</p>\n<ol>\n<li>创建、修改、删除数据库中的表（不用写SQL语句）【无法创建数据库】</li>\n<li>操作表中的数据</li>\n</ol>\n</blockquote>\n<h4 id=\"配置settingpy文件\"><a class=\"markdownIt-Anchor\" href=\"#配置settingpy文件\"></a> 配置setting.py文件</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">DATABASES = &#123;<br>    <span class=\"hljs-string\">&#x27;default&#x27;</span>: &#123;<br>        <span class=\"hljs-string\">&#x27;ENGINE&#x27;</span>: <span class=\"hljs-string\">&#x27;django.db.backends.mysql&#x27;</span>, <span class=\"hljs-comment\">#连接MYSQL数据库</span><br>        <span class=\"hljs-string\">&#x27;NAME&#x27;</span>: <span class=\"hljs-string\">&#x27;day15&#x27;</span>,  <span class=\"hljs-comment\"># 数据库名</span><br>        <span class=\"hljs-string\">&#x27;USER&#x27;</span>: <span class=\"hljs-string\">&#x27;root&#x27;</span>,  <span class=\"hljs-comment\"># 数据库用户名</span><br>        <span class=\"hljs-string\">&#x27;PASSWORD&#x27;</span>: <span class=\"hljs-string\">&#x27;1234&#x27;</span>,  <span class=\"hljs-comment\"># 数据库密码</span><br>        <span class=\"hljs-string\">&#x27;HOST&#x27;</span>: <span class=\"hljs-string\">&#x27;127.0.0.1&#x27;</span>,  <span class=\"hljs-comment\"># 数据库主机地址</span><br>        <span class=\"hljs-string\">&#x27;PORT&#x27;</span>: <span class=\"hljs-number\">3306</span>,  <span class=\"hljs-comment\"># 数据库连接端口号</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"django操作表\"><a class=\"markdownIt-Anchor\" href=\"#django操作表\"></a> Django操作表</h4>\n<h5 id=\"创建表\"><a class=\"markdownIt-Anchor\" href=\"#创建表\"></a> 创建表</h5>\n<ul>\n<li>在models.py中创建表类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Userinfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    password = models.CharField(max_length=<span class=\"hljs-number\">64</span>)<br>    mobile = models.CharField(max_length=<span class=\"hljs-number\">11</span>)<br>    email = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    age = models.IntegerField()<br></code></pre></td></tr></table></figure>\n<ul>\n<li>在终端执行命令创建该表</li>\n</ul>\n<p>注意：<strong>1.终端路径在项目名目录下。2.app需要已经注册。3.表名是app的名称加上类名</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">python manage.py makemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure>\n<h5 id=\"删除表\"><a class=\"markdownIt-Anchor\" href=\"#删除表\"></a> 删除表</h5>\n<p>直接将<code>models.py</code>里面的类注释掉即可</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Userinfo</span>(models.Model):<br><span class=\"hljs-comment\">#     name = models.CharField(max_length=32)</span><br><span class=\"hljs-comment\">#     password = models.CharField(max_length=64)</span><br><span class=\"hljs-comment\">#     mobile = models.CharField(max_length=11)</span><br><span class=\"hljs-comment\">#     email = models.CharField(max_length=32)</span><br><span class=\"hljs-comment\">#     age = models.IntegerField()</span><br><span class=\"hljs-comment\">#     docpath = models.CharField(max_length=64, default=&quot;&quot;)</span><br><span class=\"hljs-comment\">#     imgpath = models.CharField(max_length=64, null=True, blank=True)</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"修改表\"><a class=\"markdownIt-Anchor\" href=\"#修改表\"></a> 修改表</h5>\n<ul>\n<li>删除字段（直接注释掉）</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#删除imgpath字段</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Userinfo</span>(models.Model):<br>    name = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    password = models.CharField(max_length=<span class=\"hljs-number\">64</span>)<br>    mobile = models.CharField(max_length=<span class=\"hljs-number\">11</span>)<br>    email = models.CharField(max_length=<span class=\"hljs-number\">32</span>)<br>    age = models.IntegerField()<br>    docpath = models.CharField(max_length=<span class=\"hljs-number\">64</span>, default=<span class=\"hljs-string\">&quot;&quot;</span>)<br>    <span class=\"hljs-comment\">#imgpath = models.CharField(max_length=64, null=True, blank=True)</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>修改字段</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#修改max_length属性</span><br>docpath = models.CharField(max_length=<span class=\"hljs-number\">128</span>, default=<span class=\"hljs-string\">&quot;&quot;</span>)<span class=\"hljs-comment\">#将max_length直接改为128</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>添加字段</li>\n</ul>\n<blockquote>\n<p>在表中新建字段（列）时，由于已存在的字段可能已有数据，所以新增列必须要指定新增列对应的数据：</p>\n<ol>\n<li>手动输入一个值（全部行都为输入的值）</li>\n<li>设置默认值(default后面的值)</li>\n</ol>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">docpath = models.CharField(default=<span class=\"hljs-string\">&quot;&quot;</span>)<br>docpath = models.CharField(default=<span class=\"hljs-number\">2</span>)<br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>允许为空</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">imgpath = models.CharField(null=<span class=\"hljs-literal\">True</span>, blank=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n<h5 id=\"操作表中的数据\"><a class=\"markdownIt-Anchor\" href=\"#操作表中的数据\"></a> 操作表中的数据</h5>\n<ol>\n<li>添加数据( <a href=\"http://models.py\">models.py</a> )</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># ***************添加数据***************</span><br><span class=\"hljs-comment\"># 本质：insert into app1_userinfo(name,password,mobile,email) values(&quot;yugin&quot;,&quot;123456&quot;,&quot;18127896898&quot;,&quot;1726123207@qq.com&quot;)</span><br>Userinfo.objects.create(name=<span class=\"hljs-string\">&quot;yugin&quot;</span>, password=<span class=\"hljs-string\">&quot;123456&quot;</span>, mobile=<span class=\"hljs-string\">&quot;18127896898&quot;</span>, email=<span class=\"hljs-string\">&quot;1726123207@qq.com&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>在views.py中引入models.py中的类即可进行添加数据：</p>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Department</span>(models.Model):<br>    title = models.CharField(max_length=<span class=\"hljs-number\">16</span>)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://views.py\">views.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Department,Userinfo<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">orm</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-comment\">#测试orm操作表中的数据</span><br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;销售部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;IT部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;运营部门&quot;</span>)<br><br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;成功&quot;</span>)<br></code></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>更新数据</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 条件更新</span><br>Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">2</span>).update(password=<span class=\"hljs-string\">&#x27;a123456&#x27;</span>)<br><span class=\"hljs-comment\"># 全更新</span><br>Userinfo.objects.<span class=\"hljs-built_in\">all</span>().update(mobile=<span class=\"hljs-string\">&#x27;13125018525&#x27;</span>)<br></code></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>删除数据</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 条件删除</span><br>Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">2</span>).delete()<br><span class=\"hljs-comment\"># 删除表中全部数据</span><br>Userinfo.objects.<span class=\"hljs-built_in\">all</span>().delete()<br></code></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查询数据</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#条件查询</span><br>\t<span class=\"hljs-comment\">#查询结果不唯一时，返回包含对象的queryset(列表)：</span><br>    \tuserinfo = Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span>) \t<br>\t<span class=\"hljs-comment\">#已知查询结果唯一时利用first()获取第一条数据，返回对象：</span><br>    \tuserobj = Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=<span class=\"hljs-number\">1</span>).first()<br><span class=\"hljs-comment\">#全查询</span><br>\t<span class=\"hljs-comment\">#返回包含对象的列表：</span><br>\t\tuserinfo = Userinfo.objects.<span class=\"hljs-built_in\">all</span>()<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_list</span>(<span class=\"hljs-params\">request</span>):<br>    userlist = []<br>    userinfo = Userinfo.objects.<span class=\"hljs-built_in\">all</span>()<br>    <span class=\"hljs-keyword\">for</span> info <span class=\"hljs-keyword\">in</span> userinfo:<br>        datadic = &#123;<span class=\"hljs-string\">&#x27;id&#x27;</span>: info.<span class=\"hljs-built_in\">id</span>, <span class=\"hljs-string\">&#x27;name&#x27;</span>: info.name, <span class=\"hljs-string\">&#x27;password&#x27;</span>: info.password, <span class=\"hljs-string\">&#x27;mobile&#x27;</span>: info.mobile, <span class=\"hljs-string\">&#x27;email&#x27;</span>: info.email&#125;<br>        userlist.append(datadic)<br>    <span class=\"hljs-built_in\">print</span>(userlist)<br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_list.html&quot;</span>, &#123;<span class=\"hljs-string\">&#x27;userlist&#x27;</span>: userlist&#125;)<br></code></pre></td></tr></table></figure>\n<h4 id=\"案例用户管理\"><a class=\"markdownIt-Anchor\" href=\"#案例用户管理\"></a> 案例：用户管理</h4>\n<p>要求：</p>\n<ol>\n<li>展示用户列表\n<ul>\n<li>url路由</li>\n<li>view函数\n<ol>\n<li>获取用户信息</li>\n<li>HTML渲染</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>添加用户\n<ul>\n<li>post请求</li>\n<li>添加用户</li>\n<li>HTML渲染</li>\n</ul>\n</li>\n<li>删除用户\n<ul>\n<li>a标签传递用户id参数get请求</li>\n<li>筛选删除指定用户</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>展示数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户管理系统<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>INFO列表<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/info/add/&quot;</span>&gt;</span>点此添加数据<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">border</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>    &#123;% for obj in data_list %&#125;<br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/info/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>添加数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% load static %&#125;<br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>用户管理系统<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">&quot;stylesheet&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>添加用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">&quot;/info/add/&quot;</span>&gt;</span><br><br>    &#123;% csrf_token %&#125;<br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;用户名&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;pwd&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;密码&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;age&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">&quot;年龄&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span>  <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;提 交&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br><br><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;js/jquery-3.6.1.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/js/bootstrap.min.js&#x27; %&#125;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://views.py\">views.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.shortcuts <span class=\"hljs-keyword\">import</span> render, HttpResponse,redirect<br><span class=\"hljs-keyword\">import</span> requests<br><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Department,Userinfo<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">orm</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-comment\">#测试orm操作表中的数据</span><br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;销售部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;IT部门&quot;</span>)<br>    Department.objects.create(title=<span class=\"hljs-string\">&quot;运营部门&quot;</span>)<br><br>    <span class=\"hljs-keyword\">return</span> HttpResponse(<span class=\"hljs-string\">&quot;成功&quot;</span>)<br><br><span class=\"hljs-keyword\">from</span> app01.models <span class=\"hljs-keyword\">import</span> Department,Userinfo<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">info_list</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-comment\">#获取数据库中所有的用户信息</span><br>    <span class=\"hljs-comment\">#[对象,对象]</span><br>    data_list = Userinfo.objects.<span class=\"hljs-built_in\">all</span>()<br><br>    <span class=\"hljs-comment\">#渲染，返回给用户</span><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;info_list.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;data_list&quot;</span>:data_list&#125;)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">info_add</span>(<span class=\"hljs-params\">request</span>):<br><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>       <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;info_add.html&quot;</span>)<br><br>    <span class=\"hljs-comment\">#获取到用户提交的数据</span><br>    user = request.POST.get(<span class=\"hljs-string\">&quot;user&quot;</span>)<br>    pwd = request.POST.get(<span class=\"hljs-string\">&quot;pwd&quot;</span>)<br>    age = request.POST.get(<span class=\"hljs-string\">&quot;age&quot;</span>)<br><br><br><br>    <span class=\"hljs-comment\">#添加到数据库</span><br>    Userinfo.objects.create(name=user,password=pwd,age=age)<br><br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/info/list/&quot;</span>)<br><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">info_delete</span>(<span class=\"hljs-params\">request</span>):<br>    nid = request.GET.get(<span class=\"hljs-string\">&quot;nid&quot;</span>)<br>    Userinfo.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).delete()<br><br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/info/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h2 id=\"django开发\"><a class=\"markdownIt-Anchor\" href=\"#django开发\"></a> Django开发</h2>\n<h3 id=\"设置表结构\"><a class=\"markdownIt-Anchor\" href=\"#设置表结构\"></a> 设置表结构</h3>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> django.db <span class=\"hljs-keyword\">import</span> models<br><br><br><span class=\"hljs-comment\"># Create your models here.</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Department</span>(models.Model):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;部门表&quot;&quot;&quot;</span><br>    title = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;标题&quot;</span>, max_length=<span class=\"hljs-number\">32</span>)<br><br><span class=\"hljs-comment\">#关联部门表</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserInfo</span>(models.Model):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;员工表&quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;姓名&quot;</span>, max_length=<span class=\"hljs-number\">16</span>)<br>    password = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;密码&quot;</span>, max_length=<span class=\"hljs-number\">16</span>)<br>    age = models.IntegerField(verbose_name=<span class=\"hljs-string\">&quot;年龄&quot;</span>)<br>    account = models.DecimalField(verbose_name=<span class=\"hljs-string\">&quot;账户余额&quot;</span>, max_digits=<span class=\"hljs-number\">10</span>, decimal_places=<span class=\"hljs-number\">2</span>, default=<span class=\"hljs-number\">0</span>)<br>    create_time = models.DateTimeField(verbose_name=<span class=\"hljs-string\">&quot;入职时间&quot;</span>)<br>    <span class=\"hljs-comment\"># Dejango中对字段值域的约束</span><br>    gender_choices = (<br>        (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;男&#x27;</span>),<br>        (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class=\"hljs-string\">&#x27;性别&#x27;</span>, choices=gender_choices)<br>    <span class=\"hljs-comment\"># 无约束</span><br>    <span class=\"hljs-comment\"># depart_id = models.BigIntegerField(verbose_name=&#x27;部门ID&#x27;)</span><br>    <span class=\"hljs-comment\"># 有约束</span><br>    <span class=\"hljs-comment\">#    -to:与之关联的表</span><br>    <span class=\"hljs-comment\">#    -to.field：与之关联的字段</span><br>    <span class=\"hljs-comment\"># 1.Django自动</span><br>    <span class=\"hljs-comment\">#     -将关联字段名添加到被关联的字段的后面(depart_id)</span><br>    <span class=\"hljs-comment\"># 2.外键表(部门表)的关联字段被删除</span><br>    <span class=\"hljs-comment\"># -2.1级联删除</span><br>    depart = models.ForeignKey(to=<span class=\"hljs-string\">&#x27;Department&#x27;</span>, to_field=<span class=\"hljs-string\">&#x27;id&#x27;</span>, on_delete=models.CASCADE)<br>    <span class=\"hljs-comment\"># -2.1置空</span><br>    <span class=\"hljs-comment\"># depart = models.ForeignKey(to=&#x27;Department&#x27;,to_field=&#x27;id&#x27;,null=True,blank=True,on_delete=models.SET_NULL)</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"部门管理\"><a class=\"markdownIt-Anchor\" href=\"#部门管理\"></a> 部门管理</h3>\n<h4 id=\"部门列表\"><a class=\"markdownIt-Anchor\" href=\"#部门列表\"></a> 部门列表</h4>\n<blockquote>\n<p>重要知识点 : <mark>url中传递动态参数</mark></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#urls.py</span><br>path(<span class=\"hljs-string\">&quot;depart/&lt;int:nid&gt;/edit/&quot;</span>, views.depart_edit),<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># Create your views here.</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_list</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;部门列表&quot;&quot;&quot;</span><br><br>    <span class=\"hljs-comment\"># 去数据库中获取所有的部门信息</span><br>    queryset = models.Department.objects.<span class=\"hljs-built_in\">all</span>()<br><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;depart_list.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;queryset&quot;</span>: queryset&#125;)<br></code></pre></td></tr></table></figure>\n<h4 id=\"新建部门\"><a class=\"markdownIt-Anchor\" href=\"#新建部门\"></a> 新建部门</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_add</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;添加部门&quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;depart_add.html&quot;</span>)<br>    <span class=\"hljs-comment\"># 获取用户POST提交过来的数据</span><br>    title = request.POST.get(<span class=\"hljs-string\">&quot;title&quot;</span>)<br>    <span class=\"hljs-comment\">#保存到数据库</span><br>    models.Department.objects.create(title=title)<br>    <span class=\"hljs-comment\">#重定向回到部门列表</span><br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除部门\"><a class=\"markdownIt-Anchor\" href=\"#删除部门\"></a> 删除部门</h4>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_delete</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;删除部门&quot;&quot;&quot;</span><br>    nid = request.GET.get(<span class=\"hljs-string\">&quot;nid&quot;</span>)<br>    models.Department.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).delete()<br>    <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h4 id=\"修改部门\"><a class=\"markdownIt-Anchor\" href=\"#修改部门\"></a> 修改部门</h4>\n<blockquote>\n<p>重要知识点 : <mark>url中传递动态参数</mark></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#urls.py</span><br>path(<span class=\"hljs-string\">&quot;depart/&lt;int:nid&gt;/edit/&quot;</span>, views.depart_edit),<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">depart_edit</span>(<span class=\"hljs-params\">request,nid</span>):<br>    <span class=\"hljs-string\">&quot;&quot;&quot;修改部门&quot;&quot;&quot;</span><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        row_object = models.Department.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).first()<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;depart_edit.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;row_object&quot;</span>:row_object&#125;)<br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;POST&quot;</span>:<br>        title = request.POST.get(<span class=\"hljs-string\">&quot;title&quot;</span>)<br>        models.Department.objects.<span class=\"hljs-built_in\">filter</span>(<span class=\"hljs-built_in\">id</span>=nid).update(title=title)<br>        <span class=\"hljs-comment\"># 重定向回到部门列表</span><br>        <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/depart/list/&quot;</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"html模板继承\"><a class=\"markdownIt-Anchor\" href=\"#html模板继承\"></a> HTML模板继承</h3>\n<blockquote>\n<p>模板继承可以使父模板的内容复用，子模版直接继承父模板的全部内容并可以覆盖父模板中相应的块。</p>\n</blockquote>\n<p><strong>语法—父模板中：</strong></p>\n<p>1.定义父模板中的块block标签</p>\n<p>2.标识出哪些在子模版中是允许被修改的</p>\n<p>3.block标签：在父模板中定义，可以在子模版中覆盖</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% block block_name %&#125;<br>\t父模板可以被覆盖的内容<br>&#123;% endblock blocl_name%&#125;  (**切记一定要写endblock**)<br></code></pre></td></tr></table></figure>\n<p><strong>语法—子模版中：</strong></p>\n<p>1.继承模板extends标签（<strong>写在模板文件的第一行</strong>）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% entends &#x27;layout.html&#x27; %&#125;<br></code></pre></td></tr></table></figure>\n<p>2.子模版 重写父模板中的内容块</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% block block_name %&#125;<br>\t子模版用来覆盖父模板中 block_name 块的内容<br>&#123;% endblock blocl_name%&#125;  (**切记一定要写endblock**)<br></code></pre></td></tr></table></figure>\n<h4 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\"></a> 实例</h4>\n<ul>\n<li>父模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/add/&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>新建部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- Default panel contents --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;glyphicon glyphicon-pushpin&quot;</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                部门列表<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!-- Table --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>部门名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                &#123;% for obj in queryset %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-success btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/&#123;&#123; obj.id &#125;&#125;/edit/&quot;</span>&gt;</span>编辑<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-danger btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>继承模板</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/add/&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>新建部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- Default panel contents --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;glyphicon glyphicon-pushpin&quot;</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                部门列表<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!-- Table --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>部门名称<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                &#123;% for obj in queryset %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.title &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-success btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/&#123;&#123; obj.id &#125;&#125;/edit/&quot;</span>&gt;</span>编辑<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-danger btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"主题一用户管理\"><a class=\"markdownIt-Anchor\" href=\"#主题一用户管理\"></a> 主题一：用户管理</h3>\n<ul>\n<li>向数据库插入数据</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) <span class=\"hljs-keyword\">values</span>(&quot;刘冬&quot;,&quot;1234&quot;,&quot;23&quot;,&quot;100.87&quot;,&quot;2010-1-11&quot;,&quot;1&quot;,&quot;1&quot;);<br><br><span class=\"hljs-keyword\">insert</span> <span class=\"hljs-keyword\">into</span> app01_userinfo(name,password,age,account,create_time,gender,depart_id_id) <span class=\"hljs-keyword\">values</span>(&quot;Alleyf&quot;,&quot;1234&quot;,&quot;20&quot;,&quot;9000.87&quot;,&quot;2012-1-11&quot;,&quot;1&quot;,&quot;2&quot;);<br><br><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">--------------+---------------+------+-----+---------+----------------+</span><br><span class=\"hljs-operator\">|</span> Field        <span class=\"hljs-operator\">|</span> Type          <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">Null</span> <span class=\"hljs-operator\">|</span> Key <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">Default</span> <span class=\"hljs-operator\">|</span> Extra          <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">--------------+---------------+------+-----+---------+----------------+</span><br><span class=\"hljs-operator\">|</span> id           <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">bigint</span>        <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span> PRI <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span> auto_increment <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> name         <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">16</span>)   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> password     <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">varchar</span>(<span class=\"hljs-number\">64</span>)   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> age          <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">int</span>           <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> account      <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">decimal</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> create_time  <span class=\"hljs-operator\">|</span> datetime(<span class=\"hljs-number\">6</span>)   <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> gender       <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">smallint</span>      <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span>     <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">|</span> depart_id_id <span class=\"hljs-operator\">|</span> <span class=\"hljs-type\">bigint</span>        <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NO</span>   <span class=\"hljs-operator\">|</span> MUL <span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">NULL</span>    <span class=\"hljs-operator\">|</span>                <span class=\"hljs-operator\">|</span><br><span class=\"hljs-operator\">+</span><span class=\"hljs-comment\">--------------+---------------+------+-----+---------+----------------+</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"modelform和form\"><a class=\"markdownIt-Anchor\" href=\"#modelform和form\"></a> ModelForm和Form</h3>\n<ul>\n<li>\n<p>原始方式：不会采用（本质）【麻烦】</p>\n<ul>\n<li>\n<p>没有数据校验</p>\n</li>\n<li>\n<p>错误，应该有提示</p>\n</li>\n<li>\n<p>页面上，每个字段都需要我们重新写一遍，数据冗余</p>\n</li>\n<li>\n<p>关联的数据，需要手动获取并循环展示在页面中</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Django组件</p>\n<ol>\n<li>Form组件（较简便）</li>\n<li>ModelForm组件（最简便）</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"modelform示例\"><a class=\"markdownIt-Anchor\" href=\"#modelform示例\"></a> ModelForm示例</h4>\n<ul>\n<li><a href=\"http://models.py\">models.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserInfo</span>(models.Model):<br>    <span class=\"hljs-string\">&quot;&quot;&quot; 员工表 &quot;&quot;&quot;</span><br>    name = models.CharField(verbose_name=<span class=\"hljs-string\">&#x27;姓名&#x27;</span>, max_length=<span class=\"hljs-number\">16</span>)<br>    password = models.CharField(verbose_name=<span class=\"hljs-string\">&quot;密码&quot;</span>, max_length=<span class=\"hljs-number\">64</span>)<br>    age = models.IntegerField(verbose_name=<span class=\"hljs-string\">&quot;年龄&quot;</span>)<br>    account = models.DecimalField(verbose_name=<span class=\"hljs-string\">&quot;账户余额&quot;</span>, max_digits=<span class=\"hljs-number\">10</span>, decimal_places=<span class=\"hljs-number\">2</span>, default=<span class=\"hljs-number\">0</span>)<br>    create_time = models.DateTimeField(verbose_name=<span class=\"hljs-string\">&quot;入职时间&quot;</span>)<br><br>    depart_id = models.ForeignKey(to=<span class=\"hljs-string\">&quot;Department&quot;</span>, to_field=<span class=\"hljs-string\">&quot;id&quot;</span>, on_delete=models.CASCADE,verbose_name=<span class=\"hljs-string\">&quot;部门&quot;</span>)<br>    <span class=\"hljs-comment\"># Dejango中对字段值域的约束</span><br>    gender_choices = (<br>        (<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&#x27;男&#x27;</span>),<br>        (<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;女&#x27;</span>),<br>    )<br>    gender = models.SmallIntegerField(verbose_name=<span class=\"hljs-string\">&#x27;性别&#x27;</span>, choices=gender_choices)<br></code></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://views.py\">views.py</a></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># 用户管理</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_list</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-comment\"># 获取所有的用户列表</span><br>    queryset = models.UserInfo.objects.<span class=\"hljs-built_in\">all</span>()<br><br>    <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_list.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;queryset&quot;</span>: queryset&#125;)<br><br><br><span class=\"hljs-comment\"># ModelForm</span><br><span class=\"hljs-keyword\">from</span> django <span class=\"hljs-keyword\">import</span> forms<br><br><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">userInfoForm</span>(forms.ModelForm):<br>    <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Meta</span>:<br>        model = models.UserInfo<br>        fields = [<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;password&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;create_time&quot;</span>, <span class=\"hljs-string\">&quot;gender&quot;</span>, <span class=\"hljs-string\">&quot;depart_id&quot;</span>]<br>        widgets = &#123;<br>            <span class=\"hljs-comment\"># &quot;name&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;password&quot;: forms.PasswordInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;age&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;account&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-string\">&quot;create_time&quot;</span>: forms.DateTimeInput(attrs=&#123;<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot; form-control input&quot;</span>, <span class=\"hljs-string\">&quot;type&quot;</span>: <span class=\"hljs-string\">&quot;datetime-local&quot;</span>&#125;),<br>            <span class=\"hljs-comment\"># &quot;gender&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>            <span class=\"hljs-comment\"># &quot;depart&quot;: forms.Select(attrs=&#123;&quot;class&quot;: &quot;form-control input&quot;&#125;),</span><br>        &#125;<br><br>    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">__init__</span>(<span class=\"hljs-params\">self, *args, **kwargs</span>):<br>        <span class=\"hljs-built_in\">super</span>().__init__(*args, **kwargs)<br>        <span class=\"hljs-comment\"># 循环找到所有的字段,给其添加样式</span><br>        <span class=\"hljs-keyword\">for</span> name, field <span class=\"hljs-keyword\">in</span> self.fields.items():<br>            <span class=\"hljs-comment\"># 想让某一个不加</span><br>            <span class=\"hljs-keyword\">if</span> name == <span class=\"hljs-string\">&quot;create_time&quot;</span>:<br>                <span class=\"hljs-keyword\">continue</span><br>            field.widget.attrs = &#123;<span class=\"hljs-string\">&quot;class&quot;</span>: <span class=\"hljs-string\">&quot;input form-control&quot;</span>, <span class=\"hljs-string\">&quot;placeholder&quot;</span>: field.label&#125;<br><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">user_add</span>(<span class=\"hljs-params\">request</span>):<br>    <span class=\"hljs-comment\"># 添加用户</span><br>    <span class=\"hljs-keyword\">if</span> request.method == <span class=\"hljs-string\">&quot;GET&quot;</span>:<br>        form = userInfoForm()<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_add.html&quot;</span>, &#123;<span class=\"hljs-string\">&quot;form&quot;</span>: form&#125;)<br>    <span class=\"hljs-comment\"># 用户POST提交数据，数据校验</span><br>    form = userInfoForm(data=request.POST)<br>    <span class=\"hljs-keyword\">if</span> form.is_valid():<br>      <span class=\"hljs-comment\"># 如果合法保存到数据库</span><br>      form.save()<br>      <span class=\"hljs-keyword\">return</span> redirect(<span class=\"hljs-string\">&quot;/user/list&quot;</span>)<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> render(request, <span class=\"hljs-string\">&quot;user_add.html&quot;</span>,&#123;<span class=\"hljs-string\">&quot;form&quot;</span>: form&#125;)<br></code></pre></td></tr></table></figure>\n<ul>\n<li>user_list.html(未用ModelForm)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/user/add/&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>新建用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 20px&quot;</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!-- Default panel contents --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;glyphicon glyphicon-pushpin&quot;</span> <span class=\"hljs-attr\">aria-hidden</span>=<span class=\"hljs-string\">&quot;true&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                用户列表<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>            <span class=\"hljs-comment\">&lt;!-- Table --&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;table&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>ID<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>姓名<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>密码<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>年龄<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>余额<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>入职时间<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>性别<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>所属部门<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>操作<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span><br>                &#123;% for obj in queryset %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.account &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.create_time|date:&quot;Y-m-d&quot; &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.get_gender_display &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span>&#123;&#123; obj.depart_id.title &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-success btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/&#123;&#123; obj.id &#125;&#125;/edit/&quot;</span>&gt;</span>编辑<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-danger btn-xs&quot;</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">&quot;/depart/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span><br>                    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>user_add.html(使用ModelForm)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\">&#123;% extends &quot;layout.html&quot; %&#125;<br><br>&#123;% block  content %&#125;<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel panel-default&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-heading&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-title&quot;</span>&gt;</span>新建用户<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h3</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;panel-body&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">&quot;post&quot;</span> <span class=\"hljs-attr\">novalidate</span>&gt;</span><br>                    &#123;% csrf_token %&#125;<br>                    &#123;% for field in form %&#125;<br>                        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;form-group&quot;</span>&gt;</span><br>                            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">label</span>&gt;</span>&#123;&#123; field.label &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">label</span>&gt;</span><br>                            &#123;&#123; field &#125;&#125;<br>                         <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: #2aabd2&quot;</span>&gt;</span>&#123;&#123; field.errors.0 &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br>                        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>                    &#123;% endfor %&#125;<br>                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;submit&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;btn btn-primary&quot;</span>&gt;</span>提 交<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>在配置文件<code>settings.py</code>中可以设置语言种类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\"># LANGUAGE_CODE = &quot;en-us&quot; 英文</span><br>LANGUAGE_CODE = <span class=\"hljs-string\">&quot;zh-hans&quot;</span> 中文<br></code></pre></td></tr></table></figure>\n<h3 id=\"主题二靓号管理\"><a class=\"markdownIt-Anchor\" href=\"#主题二靓号管理\"></a> 主题二：靓号管理</h3>\n<p>靓号管理</p>\n"},{"title":"算法笔记","date":"2023-11-05T12:00:00.000Z","excerpt":"算法笔记的学习与分享总结!","_content":"# 算法笔记\n\n## C/C++快速入门\n\n### 头文件\n\n* 当我们忘记函数包含在哪个头文件下时或者头文件包含较多时，可以使用这个万能头文件来代替。但这个头文件也有缺点，最明显的是使用后**编译时间太长**。另外，由于 `include＜bits/stdc++.h＞`不是C++的标准头文件，所以会**有少部分编译器不支持**。因此建议使用**标准头文件**！\n\n### 主函数\n\n* 主函数是一个程序的入口位置，整个程序从主函数开始执行，而且一个程序最多只能有一个主函数。\n\n### 基本数据类型\n\n#### 变量的定义 \n\n* 变量是在程序运行过程中**其值可以改变的量**，需要在**定义**之后才可以使用。\n\n#### 变量的类型\n\n##### 基本数据类型\n\n* 基本数据类型分为**整型、浮点型、字符型和布尔型**。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310102009603.png)\n\n* 注意在计算机系统中不管正数与负数的表示和存储都是以**补码**的形式。\n* **原码**的表示为：第一位表示符号（0为正，1为负），其余位表示数值。\n* **反码**的表示方法分为正数和负数两种：\n  - 正数的反码等于原码本身。\n  - 负数的反码是在其原码的基础上，符号位不变（即首位不变），其余各位按位取反。\n* **补码**的表示方法同样分为正数和负数两种：\n  - 正数的补码是其原码本身。\n  - 负数的补码是在其原码的基础上，符号位不变，其余各位按位取反后加1（即在反码的基础上加1）。\n\n##### 整型(int)\n* 对于整型`int`而言，一个整数占**32bit**，即**4个Byte**，一般绝对值在$$10^9$$范围以内的整数都可以定义为**int型**。\n\n##### 长整型(long long)\n\n+ 对于长整型`long long`而言，一个整数占**64bit**，即**8个Byte**，如果需要的整数取值范围超过**2147483647**(超过$$10^{10}$$)就需要使用**长整型**。\n\n##### 浮点型\n\n* `%f`是**单精度浮点型**(`float`)和**双精度浮点型**(`double`)的输出格式\n* 对于浮点型而言，一般不需要使用`float`，碰到浮点型都应该使用`double`来进行存储。\n\n##### 字符型\n\n###### 字符变量和字符常量\n\n```cpp\nchar c;\nchar c = 'e';\n```\n\n+ 从上面的程序中可以看出来，第一段的`c`被成为**字符变量**，对于带单引号的`‘e’`则被称为**字符常量**，而且必须是**单个字符**。\n+ **小写字母**比**大写字母**的**ASCII码值**大**32**。\n+ `%c`是`char`型的输出格式。\n\n###### 转义字符\n\n- **ASCII码**中有一部分是**控制字符**，是**不可显示**的。\n\n+ 比较常用的转义字符：\n\n> \\n 表示换行\n>\n> \\0 表示空字符NULL，其ASCII码为0，要注意 \\0 不是空格\n\n###### 字符串常量\n\n字符串常量可以作为初值赋给字符串数组，并且使用`%s`的格式输出。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char str[25] = \"this is the char test\";\n    printf(\"%s\",str);\n    return 0;\n}\n```\n\n输出结果：\n\n```\nthis is the char test\n```\n\n##### 布尔型\n\n布尔型变量只能是**true(真、非零)**和**false(假、零)**。\n\n#### 强制类型转换\n\n强制类型转换的格式如下：\n\n> (新类型名)变量名\n\n#### 符号常量和const常量\n\n* 符号常量通俗而言就是替换，也称为“宏定义”。\n\n```cpp\n#define 标识符 常量\n#define pi 3.14\n```\n\n* 另一种定义常量的办法是const常量。\n\n```cpp\nconst 数据类型 变量名 = 常量;\nconst double pi = 3.14;\n```\n\n> 这两种写法都被称为常量，一旦确定其值后将无法改变。\n\n#### 运算符\n\n##### 算术运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122043030.png)\n\n##### 关系运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122044294.png)\n\n##### 逻辑运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122045903.png)\n\n##### 条件运算符\n\n```cpp\nA : B ? C\n```\n\n+ 如果A为真，执行并返回B的结果；如果A为假，那么执行并返回C的结果。\n\n##### 位运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122048285.png)\n\n### 顺序结构\n\n#### 使用scanf和printf输入/输出\n\n##### scanf格式符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131437646.png)\n\n+ 注意上表中最后一行，数组名称本身就代表了这个数组第一个元素的地址，所以不需要加取地址运算符。因此在`scanf`中，除了`char`数组整个输入的情况不加`&`之外，其他变量类型都需要加`&`。\n\n+ 注意字符数组使用`%s`读入的时候以**空格**和**换行**为读入结束的标志。\n\n##### printf格式符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131513505.png)\n\n+ 对于`double`类型的变量，其在`printf`中的输出格式变成了`%f`，而在`scanf`中却是`%lf`。\n\n##### 三种实用的输出格式\n\n###### %md\n\n+ `%md`可以使不足**m**位的`int`型变量以**m**位进行右对齐输出，其中高位用**空格**补齐，如果变量本身超过**m**位，则保持原样。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    int a = 123;\n    int b = 12345678;\n    printf(\"%5d\\n\",a);\n    printf(\"%5d\\n\",b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n  123\n12345678\n```\n\n###### %0md\n\n+ `%0md`只是在`%md`中间多加了**0**。和`%md`的唯一不同在于当变量不足**m**位时，将在前面补足够数量的**0**而不是空格。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    int a = 123;\n    int b = 12345678;\n    printf(\"%05d\\n\",a);\n    printf(\"%05d\\n\",b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n00123\n12345678\n```\n\n###### %.mf\n\n+ %.mf可以让浮点数保留m位小数输出，精度是“四舍六入五成双”，具体而言为：\n  + 5前为奇数，舍5入1；\n  + 5前为偶数，舍5不进（0是偶数）。\n\n#### 使用getchar()和putchar()输入/输出字符\n\n+ `getchar()`用来输入单个字符，`putchar()`用来输出单个字符。\n+ `getchar()`可以识别并读入换行符。\n\n#### typedef\n\n+ `typedef`能够给复杂的数据类型起一个别名，这样在使用过程中就可以使用别名来替换原来的写法。\n\n```cpp\n#include <cstdio>\nusing namespace std;\ntypedef long long LL;\nint main(){\n    LL a = 123456789123454321;\n    printf(\"%lld\\n\",a);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123456789123454321\n```\n\n### 选择结构\n\n#### if语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171623893.png)\n\n#### if语句的嵌套\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624875.png)\n\n#### switch语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624551.png)\n\n### 循环结构\n\n#### while语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171628441.png)\n\n* 在while语句中，只要条件A成立就一直执行省略号里面的内容。\n\n#### do...while语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171630802.png)\n\n* do...while语句会先执行省略号中的内容一次，然后才判断**条件A**是否**成立**，如果**条件A**成立，就继续反复执行省略号中的内容，直到某一次条件A**不再成立**，则退出循环。\n\n#### for语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634133.png)\n\n+ for语句的具体格式如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634463.png)\n\n#### break和continue语句\n\n+ `break`语句不仅可以强制退出`switch`语句，而且break同样可以退出循环语句，即可以在需要的条件下直接退出循环。\n+ `continue`语句的作用和`break`语句的作用有点相似，它可以在需要的地方临时结束循环的**当前轮回**，然后进入**下一轮回**。\n\n### 数组\n\n#### 一维数组\n\n+ **数组**就是把**相同数据类型**的变量组合在一起而产生的**数据集合**，**数组**就是从某个地址开始**连续若干个位置**形成的元素集合。（*数组的地址是连续存放的*）\n+ 一维数组的定义格式如下：\n\n```\n数据类型 数组名[数组大小]；\n```\n\n+ 数组大小必须是**整数常量**，不可以是变量。\n\n#### 冒泡排序\n\n+ 冒泡的本质是在于**交换**，即每次通过交换的方式把**当前剩余元素**的**最大值**移动到一端，而**当剩余元素**减少为**0**时，排序结束。\n\n```cpp\n#include <cstdio>\n#include <math.h>\nusing namespace std;\nint main(){\n    int temp = 0;\n    int a[7] = {3,6,10,9,4,8,7};//n=7\n    for(int i=1;i<=6;i++)//整个过程执行n-1趟\n    {\n        //每一趟中将左边元素与右边相邻元素依次对比，若大的数在左边，则交换这两个数\n        //当该趟结束的时候，该趟的最大数被移到了该趟剩余数的最右边\n        for(int j=0;j<7-i;j++)\n        {\n            if(a[j]>a[j+1])\n            {\n                temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n            }\n        }\n    }\n    for(int i=0;i<=6;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    return 0;\n}\n```\n\n#### 二维数组\n\n+ 二维数组是一位数组的扩展：\n\n```cpp\n数据类型 数组名[第一维大小][第二维大小];\n```\n\n+ `int a[5][6]`数组的直观理解：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310182107408.png)\n\n+ **特别提醒：**如果数组的大小较大，大概在$$10^6$$的级别，则**需要定义在主函数外面**，否则会使得程序异常退出，原因是函数内部申请的局部变量来自**系统栈**，所允许申请的**空间较小**；而函数外部申请的全局变量来自**静态存储区**，允许申请的**空间较大**。\n\n#### memset——对数组中每个元素赋相同的初值\n\n+ **需要注意的是**：`memset`使用的是按**字节**赋值，即对**每个字节**赋相同的值，这样的话，在`int`型数组中每个数据的**四个字节**都会被分配为**相同的值**，因此为了避免出错，只建议对非`char`型的数组赋值为**0**和**-1**；\n+ 使用`memset`对数组赋值时需要用`#include<string.h>`头文件；\n\n+ `memset`函数的格式为：\n\n```cpp\nmemset(数组名，赋的数值，sizeof(数组名));\n```\n\n#### 字符数组\n\n##### 字符数组的初始化\n\n+ 和普通数组一样，字符数组也可以采用循环的方法初始化；\n+ 除此之外，字符数组也可以通过**直接赋值字符串**来进行初始化（**仅限于初始化**，程序的其他位置不允许这样直接赋值整个字符串）\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char str[10] = \"YUGIN!\";\n    for(int i=0; i<6;i++)\n    {\n        printf(\"%c\",str[i]);\n    }\n    return 0;\n}\n```\n\n+ 输出：\n\n```\nYUGIN!\n```\n\n##### 字符数组的输入输出\n\n###### scanf输入，printf输出\n\n+ `scanf`和`printf`对字符类型有`%c`和`%s`两种格式，其中`%c`用来输入**单个字符**，`%s`用来输入**一个字符串**并存在**字符数组**中。\n+ `%c`格式能够识别**空格**和**换行符**并将其输入，`%s`通过**空格**或**换行符**来识别**一个字符串的结束**。\n\n+ `scanf`在使用`%s`时，后面对应的数组名是不需要加`&`**取地址运算符**的。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char str[10];\n    scanf(\"%s\",str);\n    printf(\"%s\",str);\n    return 0;\n}\n```\n\n+ 输入输出：\n\n```\n输入：test test test\n输出：test\n```\n\n###### getchar输入，putchar输出\n\n+ `getchar`和`putchar`分别用来输入和输出**单个字符**；\n+ 输入和输出示例：\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char a;\n    a=getchar();\n    getchar();//可以用作吸收某些字符\n    putchar(a);\n    putchar('\\n');\n    return 0;\n}\n```\n\n###### gets输入，puts输出\n\n+ `gets`用来输入**一行字符串**（即**一个一维数组**，只有遇到`\\n`时结束）\n+ `puts`用来输出一行字符串（即一个一维数组，只有遇到`\\n`时结束）\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char a[20];\n    char b[4][10];\n    gets(a);\n    for(int i=0;i<2;i++)\n    {\n        gets(b[i]);\n    }\n    puts(a);\n    for(int i=0;i<2;i++)\n    {\n        puts(b[i]);\n    }\n    return 0;\n}\n```\n\n+ 输入输出示例：\n\n```\n输入：\nthis is \nyugin's\nblog\n输出：\nthis is \nyugin's\nblog\n```\n\n##### 字符数组的存放方式\n\n+ 由于**字符数组**是由若干个`char`类型的元素组成，因此**字符数组**的每一位都是一个`char`字符。\n+ 在**一维数组**（或是**二维数组的第二维**）的末尾都有一个**空字符**`\\0`，用于表示存放的**字符串的结尾**。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221521845.png)\n\n+ 特别注意：**空字符**`\\0`的**ASCII**码为**0**，即空字符`NULL`，会占用一个**字符位**，因此在初始化的时候**数组长度**至少比**字符串长度**多一个长度。\n+ 如果不是使用`scanf`函数的`%s`格式或`gets`函数输入字符串（例如使用`getchar`），则需要手动在字符数组最后加入`\\0`，否则输出字符串会因为无法识别字符串末尾而输出**乱码**。\n\n#### string.h头文件\n\n+ `string.h`头文件包含了许多用于字符数组的函数。\n\n##### strlen()函数\n\n+ `strlen()`函数可以得到字符数组中第一个`\\0`前的字符的个数并返回，其格式如下：\n\n```cpp\nlen = strlen(字符数组)；\n```\n\n##### strcmp()函数\n\n+ strcmp函数返回两个字符串大小的比较结果，比较原则是字典序，其格式如下：\n\n```cpp\ncmp = strcmp(字符数组1，字符数组2);\n```\n\n+ 字典序的解释：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221535589.png)\n\n##### strcpy()函数\n\n+ `strcpy()`函数可以把一个字符串复制给另一个字符串，其格式如下：\n\n```cpp\nstrcpy(字符数组1,字符数组2);\nputs(字符数组1);\n```\n\n+ 注意：是把**字符数组2**复制给**字符数组1**，包括**结束符**`\\0`；\n\n##### strcat()函数\n\n+ `strcat()`可以把一个字符串接到另一个字符串后面，其格式如下：\n\n```cpp\nstrcpy(字符数组1,字符数组2);\nputs(字符数组1);\n```\n\n+ 注意：是把**字符数组2**接到**字符数组1**后面；\n\n##### sscanf()和sprintf()\n\n+ `sscanf()`和`sprintf()`是处理字符串问题的利器！\n\n+ `sscanf()`和`sprintf()`的使用格式如下：\n\n```\nsscanf(str,\"%d\",&n);\nsprintf(str,\"%d\",n);\n```\n\n+ 上面`sscanf()`写法的作用是把字符数组`str`的中的内容以`\"%d\"`的格式写到`n`中（**从左到右**）。\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\nint main(){\n    char a[20] = \"123\";\n    int n=0;\n    sscanf(a,\"%d\",&n);\n    printf(\"%d\",n);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123\n```\n\n+ 上面`sprintf()`写法的作用是把`n`以`\"%d\"`的格式写到`str`字符数组中（**从右到左**）。\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\nint main(){\n    char a[20];\n    int n=123433;\n    sprintf(a,\"%d\",n);\n    printf(\"%s\",a);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123433\n```\n\n+ 上面的仅仅是简单的应用，实际上`sscanf()`和`sprintf()`可以进行更加复杂的字符串处理：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\nint main(){\n    char str[100];\n    int n=520;\n    double db=2002.080512121;\n    char str2[20]=\"yugin!\";\n    char str3[20]=\"I\";\n    sprintf(str,\"%s%d%s,%.4f\",str3,n,str2,db);\n    printf(\"%s\",str);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\nI520yugin!,2002.0805\n```\n\n+ 最后指出，`sscanf()`和`sprintf()`也可以支持正则表达式，则许多字符串问题将迎刃而解。\n\n### 函数\n\n+ 函数是一个实现一定功能的语句的集合，并在需要时可以反复调用而不必每次都重新写一遍。\n+ 函数的基本语法格式：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221718986.png)\n\n#### 全局变量\n\n+ 全局变量是指在定义之后的所有程序段内都有效的变量（即定义在所有函数之前）\n\n#### 局部变量\n\n+ 与全局变量相对，局部变量定义在函数内部，且只在函数内部生效，函数结束时局部变量便销毁。\n\n#### 再谈main()函数\n\n+ 主函数对一个程序而言只有一个，且无论主函数写在哪个位置，整个程序一定是从主函数的第一个语句开始执行，然后在需要时再调用其他函数。\n+ `main()`函数的结构：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221723044.png)\n\n#### 以数组作为函数的参数\n\n+ 函数的参数可以是数组，且数组作为参数时，参数中数组的第一维不需要填写长度（如果是二维数组，则**第二维需要填写长度**）\n+ 数组作为参数时，在函数中对数组元素的修改就**等同于对原素组进行修改**（与普通的局部变量不同）\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//函数\nvoid changStr(int a[],int b[][3])\n{\n    a[0]=1;\n    a[1]=3;\n    b[1][2]=5;\n}\n//主函数\nint main(){\n    int inter[5]={0};\n    int in[2][3]={0};\n    changStr(inter,in);\n    printf(\"%d\\n\",inter[0]);\n    printf(\"%d\\n\",inter[1]);\n    printf(\"%d\",in[1][2]);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n1\n3\n5\n```\n\n+ 注意：虽然数组可以作为参数，但是却不允许作为返回类型出现。\n\n#### 函数的嵌套调用\n\n+ 函数的嵌套调用是指在一个函数中调用另一个函数，调用方式和`main()`函数调用其他函数一样。\n\n#### 函数递归调用\n\n+ 函数递归调用是指一个函数调用该函数本身；\n\n+ 类似下面计算n的阶乘的代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//函数\nint F(int n)\n{\n    if(n==0) return 1;\n    else return F(n-1)*n;\n}\n//主函数\nint main(){\n    int a=3;\n    printf(\"%d\",F(a));\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n6\n```\n\n### 指针\n\n#### 什么是指针\n\n+ 在C语言中，**指针**就是**内存地址**，**指针变量**是指用来**存放内存地址的变量**。\n+ 在C/C++语言中，**指针**一般被认为是**指针变量**，指针变量的内容存储的是**其指向的对象的首地址**，指向的对象可以是**变量**（指针变量也是变量），**数组**，**函数**等**占据存储空间的实体**。\n+ 只要在变量前面加上`&`，就表示变量的地址。\n+ 指针是一个`unsigned`类型的函数。\n\n#### 指针变量\n\n+ 指针变量是用来存放指针（或者可以理解为地址）。\n+ 在某种数据类型后加`*`来表示这是一个指针变量，定义如下：\n\n```cpp\nint *p;\ndouble *p;\nchar *p;\n```\n\n+ 给指针变量赋值的方式一般是把变量的地址取出来，然后赋给对应类型的指针变量：\n\n```cpp\nint a;\nint *p = &a;\n```\n\n+ 如果`p`是指针（即`p`保存的是某个数据类型的地址），则`*p`就是这个地址所存放的元素：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int a;\n    int *p = &a;\n    a=233;\n    printf(\"%d\",*p);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n233\n```\n\n+ 指针变量也可以进行加减法，其中**减法**的结果是两个地址偏移的距离。\n+ 例如，对于`int*`类型的指针变量`p`而言，`p+1`是指`p`所指的int型变量的下一个`int`型变量地址，这个所谓的“下一个”是跨越了一整个`int`型（即**4Byte**）。\n+ 指针变量也支持自增和自减的操作，示例如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int a;\n    int *p = &a;\n    a=233;\n    printf(\"%d\\n\",p);\n    printf(\"%d\\n\",p+1);\n    p++;\n    printf(\"%d\",p);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n113245364\n113245368\n113245368\n```\n\n#### 指针与数组\n\n+ **数组名称**作为**首地址**使用，因此`a == &a[0]`和`a+i == &a[i]`成立。\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int a[10]={1,2,4,5,7};\n    int *p = a;\n    int *q;\n    printf(\"%d\\n\",p);\n    q=&a[5];\n    printf(\"%d\\n\",q);\n    printf(\"%d\",q-p);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n1241512688\n1241512708\n5\n```\n\n+ `&a[0]`和`&a[5]`之间相差5个`int`（**4个Byte**），因此输出5。\n\n#### 使用指针变量作为函数参数\n\n+ 指针类型也可以作为**函数参数**的类型，这时视为把**变量的地址**传入函数。如果在函数中对这个地址中的元素进行改变，原先的数据就会确实地被改变。\n+ 使用指针编写交换数据地函数：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//交换函数\nvoid my_swap(int *a,int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n//主函数\nint main(){\n    int a=1;\n    int b=2;\n    my_swap(&a,&b);\n    printf(\"a=%d b=%d\",a,b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\na=2 b=1\n```\n\n#### 引用\n\n##### 引用的含义\n\n+ 引用是**C++**中一个强有力的语法，引用不产生**副本**，而是给原变量起了个**别名**。\n+ 因此**对引用变量操作就是对原变量操作**。\n+ 引用使用方法只需要在参数类型后面变量名前面加`&`就行，例子如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//引用示例函数\nvoid change(int &x)\n{\n    x=5;\n}\n//主函数\nint main(){\n    int b=88;\n    change(b);\n    printf(\"b=%d\",b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\nb=5\n```\n\n+ 注意要把**引用**的`&`和取**地址运算符**`&`区分开来，引用并不是取地址的意思。\n\n##### 指针的引用\n\n+ 通过引用和函数来更改变量指针的地址：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//交换函数\nvoid my_swap(int* &p1,int* &p2)\n{\n    int* temp = p1;\n    p1 = p2;\n    p2 = temp;\n}\n//主函数\nint main(){\n    int a=1;\n    int b=2;\n    int* p_a = &a;\n    int* p_b = &b;\n    my_swap(p_a,p_b);//必须用指针变量传入，引用不可以使用常量。\n    printf(\"a=%d b=%d\",*p_a,*p_b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\na=2 b=1\n```\n\n+ 需要强调的是，**引用**是产生**变量的别名**，因此**常量不可使用引用**，上述代码不可写成`my_swap(&a,&b);`，必须用**指针变量**进行传入。\n\n### 结构体(struct)的使用\n\n#### 结构体的定义\n\n+ 定义一个结构体的基本格式如下：\n\n```cpp\nstruct Name{\n  //一些基本的数据结构或者自定义的数据类型\n};\n```\n\n+ 结构体可以这样定义：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\tchar name[20];\n\tchar major[20];\n}Alice,Bob,stu[1000];\n```\n\n+ 其中`studentInfo`是这个结构体的名字，内部定义了相关的数据。**大括号外**定义了**结构体变量**和**结构体数组**。\n\n+ 结构体同样能够像基本数据类型那样定义：\n\n```cpp\nstudentInfo Alice;\nstudentInfo stu[1000];\n```\n\n+ 值得注意的是，结构体里面能够定义除了自己本身之外的任何数据类型。\n\n```cpp\nstruct node{\n\tnode n;//不能定义node型变量，因为和本身一致\n\tnode* next;//可以定义node*型指针变量\n};\n```\n\n+ 虽然不能定义自己本身，但是可以定义自身类型的指针变量。\n\n#### 访问结构体内的元素\n\n+ 访问结构体内的元素有两种方法：`\".\"`和`\"->\"`操作。\n+ 如果把`studentInfo`定义成如下：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\tstudentInfo* next;\n}stu,*p;\n```\n\n+ 这样`studentInfo`中多了一个指针`next`用来指向下一个学生的地址，且结构体变量中定义了**普通变量**`stu`和**指针变量**`p`。\n\n+ 因此访问`stu`中的变量的写法如下：\n\n```cpp\nstu.id\nstu.gender\nstu.next\n```\n\n+ 访问指针变量`p`中的元素的写法如下：\n\n```cpp\n(*p).id\n(*p).gender\n(*p).next\n```\n\n+ 还有一种访问结构体指针变量内元素更加简洁的写法：\n\n```cpp\np->id\np->gender\np->next\n```\n\n#### 结构体的初始化\n\n+ 结构体的初始化推荐使用**构造函数**的方法。\n+ 构造函数的特点是**函数名与结构体名一致**而且**不需要写返回函数**。\n+ 其中自己定义构造函数的格式如下：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\t//以下构造函数的参数用于对结构体内部变量进行赋值\n\tstudentInfo(int _id,char _gender)\n\t{\n\t\tid = _id;\n\t\tgender = _gender;\n\t}\n};\n```\n\n+ 根据上述代码，即可直接对结构体的变量进行赋值：\n\n```cpp\nstudentInfo stu = studentInfo(20020805,'M');\n```\n\n+ 需要注意，如果**自己重新定义了构造函数**，则不能不经初始化就定义结构体变量，如下定义能够适应更多不同的场合：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\t//原始构造函数，用以不初始化就定义结构体变量\n\tstudentInfo(){}\n\t//只初始化gender的构造函数\n\tstudentInfo(char _gender)\n\t{\n\t\tgender = _gender;\n\t}\n\t//以下构造函数的参数用于对结构体内部两个变量进行赋值\n\tstudentInfo(int _id,char _gender)\n\t{\n\t\tid = _id;\n\t\tgender = _gender;\n\t}\n};\n```\n\n### 补充\n\n#### cin和cout\n\n+ cin和cout是C++的输入输出函数，需要添加头文件`#include <iostream>`和`using namespace std;`才能使用。\n\n##### cin\n\n+ `cin`采用输入运算符`\">>\"`来进行输入，例如\n\n```cpp\ncin >> n >> db >> c >> str;\n```\n\n+ 如果想读入一整行，则需要`getline`函数：\n\n```cpp\nchar str[100];\ncin.getline(str,100);\n```\n\n+ 如果是`string`容器，则需要使用以下方式输入：\n\n```cpp\nchar str[100];\ngetline(cin,str);\n```\n\n##### cout\n\n+ `cout`采用输出运算符`\"<<\"`来进行输出，例如\n\n```cpp\ncout << n << db << c << '\\n' << str << endl;\n```\n\n+ `endl`和`'\\n'`都是表示换行的意思。\n+ 由于`cin`和`cout`在输入和输出大量数据时表现糟糕，因此不建议使用。\n\n#### 浮点数的比较\n\n+ 由于计算机中采用有限二进制编码，存储并不总是准确，因此需要需要引入极小数`eps`来对这种误差进行纠正。\n+ 圆周率`pi`的表达式可以使用`acos(-1.0)`来进行表示。\n\n```cpp\nconst double esp = 1e-8;\nconst double pi = acos(-1.0);\n\n#define Equ(a,b) (fabs(a-b)<eps)\n```\n\n### 黑盒测试\n\n#### 单点测试\n\n+ 对于单点测试而言，单点测试只需要按照正常逻辑执行一遍程序即可，是“一次性”的写法，即程序只需要一组数据能够完整执行即可。\n\n#### 多点测试\n\n+ 对于多点测试，要求程序能够一次运行所有数据，并要求所有输出的结果都必须正确。\n\n##### while...EOF型\n\n+ 当题目没有说明有多少数据读入时，就可以利用`scanf`返回值是否为`EOF`来判断输入是否结束。\n\n```cpp\nwhile(scanf(\"%d\",&n) != EOF){\n\t...\n}\n```\n\n+ 如果读入的是字符串，其对应写法如下：\n\n```cpp\nwhile(scanf(\"%s\",str) != EOF){\n\t...\n}\nwhile(gets(str) != NULL){\n\t...\n}\n```\n\n## 入门模拟\n\n### 再谈字符串输入输出\n\n+ 在比较早的`C/C++`版本中，经常可以看到推荐使用`gets`函数来进行整行字符串的输入，就像下面这样的简单写法即可输入一整行：\n\n```cpp\ngets(str);\n```\n\n+ 但是当输入的字符串长度超过数组长度上限`MAX_LEN`时，`gets`函数会把超出的部分也一并读进来，并且会覆盖数组之外的内存空间，这就导致了一定的安全风险，因此`C++11`标准将`gets`函数废弃了，然后在`C++14`时将该函数移除，如果现在想要整行输入的话，推荐使用`cin.getline`函数（见下文）。\n\n```cpp\ncin.getline(str, MAX_LEN);\n```\n\n+ 例如下面一道例题：\n\n```cpp\n//题目：输入一行字符串，然后直接输出这行字符串本身。\n//输入描述：一行由大小写字母或空格组成的字符串，至少一个字符，不超过50个字符。\n//输出描述：原样输出输入的字符串。\n//**************************样例**************************\n//输入：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo\n//输出：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo\n//**************************代码**************************\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int MAX_LEN = 1000000;\n//主函数\nint main(){\n    char str[MAX_LEN];\n    cin.getline(str,MAX_LEN);//由gets(str);函数换成了cin.getline(str,MAX_LEN);\n    puts(str);\n    return 0;\n}\n```\n\n### 再谈sscanf()和sprintf()\n\n#### 关于sscanf()\n\n+ `sscanf`是C语言标准库中的一个函数，用于从字符串中读取格式化输入。在C++中也可以使用`sscanf`函数，但更常用的是使用C++标准库中的`stringstream`类来进行字符串解析。\n\n+ `sscanf`函数的原型如下：\n\n```cpp\nint sscanf(const char* str, const char* format, ...);\n```\n\n+ 其中，`str`是要解析的字符串，`format`是格式化字符串，用于指定解析的规则，`...`是可变参数列表，用于接收解析出来的数据。\n\n+ 与之相似的函数还有`scanf`和`fscanf`。其中，`scanf`从标准输入（通常是键盘）读取数据，而`fscanf`从文件中读取数据。\n\n在使用`sscanf`函数时，需要注意以下几点：\n\n- `format`字符串中可以包含格式说明符，如 `%d`, `%f`, `%s`, `%c`, `%x`, `%o`, `%u`, `%e`, `%g`, `%p`, `%n`, 等等。\n- `format`字符串中可以包含空格、制表符、换行符等空白字符，用于跳过输入字符串中的空白字符。\n- `format`字符串中可以包含方括号 `[]`，用于指定一个字符集合。例如，`%[a-z]` 表示匹配小写字母。\n- `format`字符串中可以包含星号 `*`，表示跳过该项输入。\n- `sscanf()` 函数**返回成功匹配并赋值的个数**。如果返回值小于参数个数，则表示解析失败。\n\n基于最后一条性质可以实现下述例题：\n\n+ 题目描述：\n\n```\n给定一个字符串，它可能是以下三种格式中的一种：\n\nA is greater than B\nA is equal to B plus C\nNo Information\n其中前两种情况中的A、B、C均为正整数，而第三种情况中没有数字。请确认字符串代表的信息是否从算术上成立，如果成立，那么输出Yes；否则输出No；如果是第三种情况，那么输出三个问号（即???）。\n\n注：\n\n1、请将字符串整行读入后使用sscanf函数进行处理\n```\n\n+ 输入描述：\n\n```\n一行满足题意的字符串，其中A、B、C为不超过100的正整数。\n```\n\n+ 输出描述：\n\n```\n根据题意输出Yes、No或???。\n```\n\n+ 样例：\n\n```\n*******************样例1*****************\n输入:\n10 is greater than 5\n输出:\nYes\n*******************样例2*****************\n输入:\n6 is equal to 1 plus 3\n输出:\nNo\n*******************样例3*****************\n输入:\nNo Information\n输出:\n???\n```\n\n+ 实现代码：\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string.h>\nusing namespace std;\nconst int MAX_LEN = 1000;\n//主函数\nint main(){\n    int A = 0,B = 0,C = 0;\n    char str[MAX_LEN];\n    cin.getline(str,MAX_LEN);\n    if(sscanf(str,\"%d is greater than %d\",&A,&B) == 2)//利用sscanf() 函数返回成功匹配并赋值的个数。\n    {\n       if(A>B)\n       {\n           printf(\"Yes\");\n       }\n       else\n       {\n           printf(\"No\");\n       }\n    }\n    else if(sscanf(str,\"%d is equal to %d plus %d\",&A,&B,&C) == 3)//利用sscanf() 函数返回成功匹配并赋值的个数。\n    {\n        if(A==B+C)\n        {\n            printf(\"Yes\");\n        }\n        else\n        {\n            printf(\"No\");\n        }\n    }\n    else\n    {\n        printf(\"???\");\n    }\n    return 0;\n}\n```\n\n+ 总结：利用`sscanf()` 函数返回成功匹配并赋值的个数，从而能够很好地解决问题。\n\n#### 关于sprintf()\n\n+ `sprintf`是C语言标准库中的一个函数，用于将格式化的数据写入字符串中。在C++中也可以使用`sprintf`函数，但更常用的是使用C++标准库中的`ostringstream`类来进行字符串解析。\n\n+ `sprintf`函数的原型如下：\n\n```c\nint sprintf(char *str, const char *format, ...);\n```\n\n+ 其中，`str`是要写入的字符串，`format`是格式化字符串，用于指定写入的规则，`...`是可变参数列表，用于接收要写入的数据。\n\n+ 与之相似的函数还有`printf`和`fprintf`。其中，`printf`将输出写入标准输出（通常是屏幕），而`fprintf`将输出写入文件。\n\n在使用`sprintf`函数时，需要注意以下几点：\n\n- `format`字符串中可以包含格式说明符，如 `%d`, `%f`, `%s`, `%c`, `%x`, `%o`, `%u`, `%e`, `%g`, `%p`, `%n`, 等等。\n- `format`字符串中可以包含空格、制表符、换行符等空白字符，用于控制输出格式。\n- `format`字符串中可以包含方括号 `[]`，用于指定一个字符集合。例如，`%[a-z]` 表示匹配小写字母。\n- `sprintf()` **函数返回成功写入的字符数。**如果返回值小于0，则表示写入失败。\n\n例题：[sprintf函数](https://sunnywhy.com/sfbj/2/5/37)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string.h>\nusing namespace std;\nconst int MAX_LEN = 1000;\n//主函数\nint main(){\n    char str[MAX_LEN];\n    int year,month,day,hour,minute,second;\n    scanf(\"%d %d %d %d %d %d\",&year,&month,&day,&hour,&minute,&second);\n    sprintf(str,\"%04d-%02d-%02d %02d:%02d:%02d\",year,month,day,hour,minute,second);//注意此处的ssprintf()函数注释将需要的字符串写入到字符串数组中\n    printf(\"%s\",str);//注意此处字符串数组需要采用printf()函数进行输出\n    return 0;\n}\n```\n\n+ 总结：\n\n+ 注意代码中的`ssprintf()`函数注释**将需要的字符串写入到字符串数组**中；\n+ 注意代码最后的输出字符串数组需要采用`printf()`函数进行输出。\n\n### 再谈结构体与函数数组传参\n\n+ 例题：[结构体与构造函数II](https://sunnywhy.com/sfbj/2/8/43)\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n//结构体\nstruct Student {\n    int id;\n    char name[15];\n    //构造函数\n    Student(){}\n    Student(int _id,char _name[]){//函数中的数组传参\n        id = _id;\n        strcpy(name,_name);//复制字符串数组\n    }\n};\n//主函数\nint main() {\n    Student student;\n    char name[15];\n    int id;\n    scanf(\"%d\",&id);\n    getchar();\n    scanf(\"%s\",name);//读入字符串。\n    student = Student(id,name);\n    printf(\"%d\\n%s\",student.id,student.name);\n    return 0;\n}\n```\n\n+ 总结：注意上述代码中的函数数组传参，以及字符串数组赋值；\n+ 注意如何利用`scanf()`函数读入字符串。\n\n### 再谈cin和cout\n\n+ 例题：[cin与cout](https://sunnywhy.com/sfbj/2/9/45)\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <iomanip>//数据格式控制函数的头文件\nconst int MAX_LEN  = 200;\nusing namespace std;\n//主函数\nint main(){\n    int a;\n    double b;\n    char str[MAX_LEN];\n    cin >> a >> b;\n    getchar();\n    cin.getline(str,MAX_LEN);\n    //fixed()函数与setprecision(int n)并用，可以控制小数点后面有n位。注意：setprecision()函数是控制有效数字的位数，而fixed()函数与setprecision(int n )函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！\n    cout << a << endl << fixed << setprecision(2) << b << endl << str;\n    return 0;\n}\n```\n\n+ 总结：\n+ `#include <iomanip>`是数据格式控制函数的头文件；\n+ 在使用`cout`函数输出的时候`fixed()`函数与`setprecision(int n)`并用，可以控制小数点后面有**n位**。注意：`setprecision()`函数是控制有效数字的位数，而`fixed()`函数与`setprecision(int n )`函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！\n+ 如果只使用`setprecision(int n)` 函数效果如下：\n\n```cpp\ncout << setprecision(3) << 0.12345 << endl;\ncout << setprecision(3) << 1.23456 << endl;\n\n输出：\n0.123\n1.23\n```\n\n+ 当要保留对应位数的小数(**四舍五入**)的时候，就需要采用`fixed()`函数，效果如下：\n\n```cpp\ncout << fixed << setprecision(3) << 0.12345 << endl;\ncout << fixed << setprecision(3) << 1.23456 << endl;\n\n输出：\n0.123\n1.235\n```\n\n### 再谈浮点精度比较\n\n+ 例题：[浮点精度比较](https://sunnywhy.com/sfbj/2/9/46)\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <cmath>\nusing namespace std;\nconst double eps = 1e-8;\n//主函数\nint main(){\n    int a,b,c,d;\n    scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n    double res1 = a* asin(sqrt(b) / 2);\n    double res2 = c* asin(sqrt(d) / 2);\n    if(res1 - res2 > eps)//公式1>公式2\n    {\n        printf(\"1\");\n    }\n    else if(res2 - res1 > eps)//公式2>公式1\n    {\n        printf(\"2\");\n    }\n    else\n    {\n        printf(\"0\");\n    }\n    return 0;\n}\n```\n\n+ 总结：一般为了避免计算机精度误差造成浮点数大小比较不准，采用浮点数常量大小为`const double eps = 1e-8;`的数据来进行区分。\n\n### 再谈if语句\n\n+ `if(a==b==0)`和i`f(a==0&&b==0)`的区别：\n+ 这两个表达式的区别在于它们的运算顺序不同。\n  + `if(a==b==0)`的运算顺序是先比较a和b是否相等(`a==b`)，然后再将**结果**与0比较。如果a和b都为0，但是`true`不等于0，所以表达式`a==b==0`为`false`。而当a和b**不相等**时，表达式`a==b==0`为`true`。\n  + `if(a==0&&b==0)`的运算顺序是先判断a是否等于0，然后再判断b是否等于0。只有当a和b都等于0时，这个表达式的结果才为`true`；否则，结果为`false`。\n  + 因此，这两个表达式的含义是不同的。需要特别注意！\n\n### 简单模拟\n\n+ 简单模拟的题目不涉及算法，一般完全根据题目描述来进行代码编写，考察的是**代码能力**！\n\n例题：[2的幂](https://sunnywhy.com/sfbj/3/1/61)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <cmath>\nusing namespace std;\nconst int m = 1007;\n//主函数\nint main(){\n    int num;\n    scanf(\"%d\",&num);\n    int res=1;\n    for(int i=1;i<=num;i++)\n    {\n        res = ((res%m)*(2%m))%m;\n    }\n    printf(\"%d\",res);\n    return 0;\n}\n```\n\n+ 总结：该题的**数据大小**远大于**C++**中的`long long`类型，因此不能直接进行计算，需要根据题目提示的公式**进行简化**，从而正确计算得到结果！\n\n例题：[B1032 挖掘机技术哪家强](https://pintia.cn/problem-sets/994805260223102976/exam/problems/994805289432236032?type=7&page=0)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint list_chengji[100010]={0};\nint main(){\n    int num;\n    int max_chengji=-1;//注意此处最大成绩设置为-1，否则无法通过最大成绩就是为0的测试点。\n    int xuhao,chengji,res_xuhao;\n    scanf(\"%d\",&num);\n    for(int i=0;i<num;i++){\n        scanf(\"%d %d\",&xuhao,&chengji);\n        list_chengji[xuhao]+=chengji;\n    }\n    for(int k=1;k<100010;k++)\n    {\n        if(list_chengji[k]>max_chengji)\n        {\n            max_chengji = list_chengji[k];\n            res_xuhao = k;\n        }\n    }\n    printf(\"%d %d\\n\",res_xuhao,max_chengji);\n    return 0;\n}\n```\n\n+ 总结：这道题目要**细心**，注意在代码中计算最大成绩的时候**初始值**要设置为`-1`，否则无法通过最大成绩就是为**0**的测试点。\n\n### 查找元素\n\n+ 查找元素类题目：给定一些元素，然后查找某个满足某条件的元素。\n+ 一般而言，如果需要在一个比较小范围的数据集中查找，那么直接遍历每一个数据即可。\n+ 如果需要查找的范围比较大，可以采用**二分查找**等算法来进行更快速的查找。\n\n例题：[寻找元素对](https://sunnywhy.com/sfbj/3/2/64)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int list[1010];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&list[i]);\n    }\n    int x,flag=0;\n    scanf(\"%d\",&x);\n    for(int k=0;k<n-1;k++)\n    {\n        for(int j=k+1;j<n;j++)\n        {\n            if(x==list[k]+list[j])\n            {\n                flag++;\n            }\n        }\n    }\n    printf(\"%d\",flag);\n    return 0;\n}\n```\n\n### 图形输出\n\n+ 所谓图形，其实是由若干字符组成，因此只需要弄清楚规则就能编写代码，有以下两种方法：\n  + 通过规律直接进行输出；\n  + 定义一个二维字符数组，通过规律填充字符数组，最后再输出整个二维数组。\n\n例题：[画X](https://sunnywhy.com/sfbj/3/3/67)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int n;\n    char list[101][101];\n    memset(list,' ',sizeof(list));//初始化数组\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n        for(int k=0;k<n;k++)\n        {\n            if(i<n/2||i>n/2)\n            {\n                if(k==i||k==n-1-i)\n                {\n                    list[i][k]='*';\n                }\n            }\n            else if(i==n/2)\n            {\n                if(k==i)\n                {\n                    list[i][k]='*';\n                }\n            }\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(i<=n/2)\n        {\n            for(int k=0;k<n-i;k++)\n            {\n                printf(\"%c\",list[i][k]);\n            }\n        }\n        else\n        {\n            for(int k=0;k<=i;k++)\n            {\n                printf(\"%c\",list[i][k]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n+ 总结：这类型题目主要在于找到图案的规律，若图案比较复杂可以放在二维字符数组中进行输出，注意一下二维字符数组的初始化可以采用`memset(list,' ',sizeof(list));`函数！\n\n### 日期处理\n\n+ 日期处理问题主要考虑平年和闰年的关系(由此产生的二月天数之间的差别)、大月和小月的问题，细节比较繁杂！\n\n例题：[周几](https://sunnywhy.com/sfbj/3/4/73)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//初始化平年闰年的数组\n//0是平年，1是闰年\nint year_list[2][13]={\n        {0,31,28,31,30,31,30,31,31,30,31,30,31},\n        {0,31,29,31,30,31,30,31,31,30,31,30,31}\n};\n//是否闰年判断函数\nbool leap_year(int year)\n{\n    if(year%400==0||(year%4==0&&year%100!=0))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n//判断日期前后,如果day在day1之前就是true，否则为false\nbool before_afer(int year,int month,int day,int year1,int month1,int day1)\n{\n    if(year1-year>0)\n    {\n        return true;\n    }\n    else if(year1-year<0)\n    {\n        return false;\n    }\n    else if(year1-year==0)\n    {\n        if(month1-month>0)\n        {\n            return true;\n        }\n        else if(month1-month<0)\n        {\n            return false;\n        }\n        else if(month1==month)\n        {\n            if(day1-day>0)\n            {\n                return true;\n            }\n            else if(day1-day<=0)\n            {\n                return false;\n            }\n        }\n    }\n}\n//计算两个日期之间的天数差值,day在day1之前，采用日期减法\nint count_days(int year,int month,int day,int year1,int month1,int day1)\n{\n    int num=0;\n    if(year1==year&&month1==month&&day1==day)\n    {\n        return 0;\n    }\n    else\n    {\n        while(true)\n        {\n            day1--;\n            if(day1<1)\n            {\n                month1--;\n                if(month1<1)\n                {\n                    year1--;\n                    month1=12;\n                }\n                day1=year_list[leap_year(year1)][month1];\n            }\n            num++;\n            if(year1==year&&month1==month&&day1==day)\n            {\n                break;\n            }\n        }\n        return num;\n    }\n}\n//主函数\nint main(){\n    int year,month,day;\n    scanf(\"%d-%d-%d\",&year,&month,&day);\n    int num=0,shengyu=0;\n    //2021-05-02是周日，用0表示（用这个日期作为基准）\n    bool b_a = before_afer(2021,5,2,year,month,day);\n    if(b_a)\n    {\n        num=count_days(2021,5,2,year,month,day);\n        shengyu=num%7;\n        printf(\"%d\",shengyu);\n    }\n    else\n    {\n        num=count_days(year,month,day,2021,5,2);\n        shengyu=num%7;\n        if(shengyu==0)\n        {\n            printf(\"%d\",0);\n        }\n        else\n        {\n            printf(\"%d\",7-shengyu);\n        }\n    }\n    return 0;\n}\n```\n\n+ 总结：虽然本题我采用了日期减法作为函数进行运算，但是和日期减法的想法相似，主要思想如下：\n\n  + 直接给日期加上指定的天数并不是很容易的事情，所以我们可以换个思路，**每次只加1天**，**一直加到指定的天数为止**。这样我们就把问题转换为计算加1天之后的新日期，而这个问题就相对简单许多。\n  + 假设当前日期的年、月、日分别是year、month、day，那么加一天之后 day 就变成了 day+1，之后我们需要判断这个新的day是否超过了当前月份month 所拥有的总天数，如果没超过，那么相安无事，算法结束；如果超过了，那么就需要令月份month 加 1、同时让day重置为 1（即把日期变为下一个月的 1 号）。接下来，如果加了 1 之后的月份 month 变为了 13 月，那么就需要令年份year加 1、同时置月份 month重置为 1（即把日期变为下一年的 1 月）。\n  + 这个过程需要知道每个月有多少天，为了方便直接取出每个月的天数，不妨设置一个二维数组`int year_list[2][13]`，用来存放每个月的天数，其中第一维为 0 时表示平年，为 1 时表示闰年。至于平年和闰年的判断方式也很简单：年份是 400 的倍数时是闰年，年份是 4 的倍数但不是 100 的倍数时也是闰年，其他情况都是平年。\n  + 代码如下：\n\n  ```cpp\n  #include <cstdio>\n  #include <string.h>\n  using namespace std;\n  //初始化平年闰年的数组\n  //0是平年，1是闰年\n  int year_list[2][13]={\n          {0,31,28,31,30,31,30,31,31,30,31,30,31},\n          {0,31,29,31,30,31,30,31,31,30,31,30,31}\n  };\n  //是否闰年判断函数\n  bool leap_year(int year)\n  {\n      if(year%400==0||(year%4==0&&year%100!=0))\n      {\n          return true;\n      }\n      else\n      {\n          return false;\n      }\n  }\n  //主函数\n  int main(){\n      int year,month,day;\n      scanf(\"%d-%d-%d\",&year,&month,&day);\n      int n;\n      scanf(\"%d\",&n);\n      for(int i=1;i<=n;i++)\n      {\n          day++;\n          if(day>year_list[leap_year(year)][month])\n          {\n              month++;\n              day=1;\n              if(month>12)\n              {\n                  year++;\n                  month=1;\n              }\n          }\n      }\n      printf(\"%04d-%02d-%02d\", year, month, day);   // 按格式输出年月日\n      return 0;\n  }\n  ```\n\n  + 最后，这道例题的思考方式如下：**首先确认一个基准日期**->**(2021-05-02是周日，用0表示)**->**计算输入的日期在基准日期之前或者之后**->**计算相差多少天**->**最后计算输入的日期是周几**！\n  + 通过上述步骤，该题迎刃而解！\n\n### 进制转换\n\n对于一个p进制数需要转换为q进制数，一般需要分为以下两步：\n\n+ p进制数x转十进制数y：\n  ![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311125587.png)\n\n  + 实现代码：\n\n ```cpp\n    //p进制数x转10进制数y的函数\n    int p_ten(int x,int p)\n    {\n        int y=0,product=1;\n        while(x!=0)\n        {\n            y=y+(x%10)*product;\n            x=x/10;\n            product=product*p;\n        }\n        return y;\n    }\n ```\n\n+ 十进制数y转q进制数z的函数(除基取余法)：\n\n    + 采用\"除基取余法\"，意思是每次将带转换的数除q，将得到的余数作为低位存储，而商继续除q并进行上面的操作，最后当商为0时，将所有位从高到低输出就可以得到z！\n      \n    + 例如十进制数**11**转换为**二进制**：\n      \n      ![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311132044.png)\n      \n    + 实现代码：\n\n    + 代码中采用`do...while`而不是`while`的原因是如果十进制恰好是**0**会造成直接跳出循环导致结果出错，因此采用`do...while`语句。\n\n```cpp\n//十进制数y转q进制数z的函数(除基取余法)\nint ten_q(int y,int q,int z_list[])\n{\n    int num=0,z=0;\n    do {\n        z_list[num]=y%q;\n        num++;\n        y=y/q;\n    }while(y!=0);\n    return num;\n}\n```\n\n例题：[K进制转十进制](https://sunnywhy.com/sfbj/3/5/77)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <cmath>\nusing namespace std;\n//p进制数x转10进制数y的函数\nint p_ten(int x,int p)\n{\n    int y=0,product=1;\n    while(x!=0)\n    {\n        y=y+(x%10)*product;\n        x=x/10;\n        product=product*p;\n    }\n    return y;\n}\n//十进制数y转q进制数z的函数(除基取余法)\nint ten_q(int y,int q,int z_list[])\n{\n    int num=0,z=0;\n    do {\n        z_list[num]=y%q;\n        num++;\n        y=y/q;\n    }while(y!=0);\n    return num;\n}\n//主函数\nint main(){\n    char str[10];//用于存储k进制串\n    int k,str_len;\n    int sum=0;\n    scanf(\"%s %d\",str,&k);\n    str_len = strlen(str);\n    for(int i=0;i<str_len;i++)\n    {\n        if(str[i]>='A'&&str[i]<='F')\n        {\n            sum+=(str[i]-'A'+10)*pow(k,str_len-1-i);\n        }\n        else\n        {\n            sum+=(str[i]-'0')*pow(k,str_len-1-i);\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n```\n\n+ 总结：这道例题无法直接使用上述两个函数，因此需要根据题意重新构造，但是难度不大，需要处理十进制以上的数据。\n\n### 字符串处理\n\n+ 字符串处理类题目可能实现逻辑比较麻烦，而且需要考虑许多细节和边界情况，因此是一种很好体现代码能力的题型。\n\n例题：[单词倒序](https://sunnywhy.com/sfbj/3/6/79)\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\nusing namespace std;\nconst int MAXN = 1010;\n//主函数   \nint main(){\n    char str[MAXN],str2[MAXN];\n    cin.getline(str,MAXN);\n    int str_len = strlen(str);\n    int flag=0,m=0;\n    for(int i=str_len-1;i>=0;i--)\n    {\n        flag++;\n        if(str[i]==' ')\n        {\n            for(int j=i+1;j<=i+flag-1;j++)\n            {\n                str2[m]=str[j];\n                m++;\n            }\n            str2[m]=' ';\n            m++;\n            flag=0;\n        }\n        else if(i==0)\n        {\n            for(int j=i;j<=i+flag-1;j++)\n            {\n                str2[m]=str[j];\n                m++;\n            }\n            str2[m]=' ';\n            m++;\n            flag=0;\n        }\n    }\n    str2[str_len]='\\0';\n    for(int k=0;k<str_len;k++)\n    {\n        printf(\"%c\",str2[k]);\n    }\n    return 0;\n}\n```\n\n+ 总结：细心分析，按照逻辑编写代码，问题即可迎刃而解。\n\n例题：[公共前缀](https://sunnywhy.com/sfbj/3/6/83)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 55;\n//主函数\nint main(){\n    char str[MAXN][MAXN];\n    int n;\n    int min_strlen=100,num=0,flag=0;\n    scanf(\"%d\",&n);\n    getchar();//吸收换行符\n    for(int i=0;i<n;i++)\n    {\n        cin.getline(str[i],MAXN);\n        if(min_strlen>(int)strlen(str[i]))\n        {\n            min_strlen=(int)strlen(str[i]);\n        }\n    }\n    for(int i=0;i<min_strlen;i++)\n    {\n        for(int k=0;k<n-1;k++)\n        {\n            if(str[k][i]!=str[k+1][i])\n            {\n                flag++;\n            }\n        }\n        if(flag)\n        {\n            num=i-1;\n            break;\n        }\n        num=i;\n    }\n    //printf(\"%d\",min_strlen);\n    for(int i=0;i<=num;i++)\n    {\n        printf(\"%c\",str[0][i]);\n    }\n    return 0;\n}\n```\n\n+ 总结：注意一下本题中在需要使用循环输入的时候要采用`getchar();`函数吸收一下换行符，否则换行符会输入至字符数组中！\n\n## C++标准模板库(STL)介绍\n\n### vector的常见用法详解\n\n+ `\"vector\"`->变长数组，即\"长度根据需要而自动改变的数组\";\n+ 要使用`vector`，需要添加`vector`头文件，即`#include <vector>`;\n\n## 算法初步\n\n### 排序\n\n+ 本章先介绍**两种**基础的排序算法：**选择排序**与**插入排序**。\n\n#### 选择排序\n\n+ **简单选择排序**：对于一个序列`A`中的元素`A[1]-A[n]`，令`i`从`1`到`n`枚举，进行`n`趟操作，每趟从待排序部分`[i,n]`中选择最小元素，令其与待排序部分的第一个元素`A[i]`进行交换，这样元素`A[i]`就会与当前有序区间`[1,i-1]`形成新的有序区间`[1,i]`。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011059055.png)\n\n+ 总共需要进行n趟操作(1<=i<=n)，每趟操作选出待排序部分[i,n]中的最小元素，令其与A[i]交换。总复杂度为$$O(n^2)$$\n\n+ 实现代码：\n\n```cpp\n//选择排序函数\nvoid select_sort(int list[],int num)\n{\n    int min_num,k,temp;\n    for(int i=0;i<num;i++)\n    {\n        min_num=list[i];\n        k=i;\n        for(int j=i;j<num;j++)\n        {\n            if(list[j]<min_num)\n            {\n                min_num = list[j];\n                k=j;\n            }\n        }\n        temp=list[i];\n        list[i]=min_num;\n        list[k]=temp;\n    }\n}\n```\n\n#### 插入排序\n\n+ **直接插入排序**：对于一个序列`A`中的元素`A[1]-A[n]`，令`i`从`1`到`n-1`枚举，进行`n-1`趟操作。假设某一趟时，序列`A`的前`i-1`个元素`A[1]-A[i-1]`已经有序，而范围`[i,n]`还未有序，那么该趟从范围`[1,i-1]`中寻找某个位置`j`，使得将`A[i]`插入位置`j`后(此时`A[j]-A[i-1]`会后移一位至`A[j+1]-A[i]`)，范围`[1,i]`有序。\n+ 思想如下图所示：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319809.png)\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319528.png)\n\n+ 实现代码：\n\n```cpp\n//插入排序函数\nvoid insert_sort(int list[],int num)\n{\n    int temp,j;\n    for(int i=1;i<num;i++)//进行n-1趟\n    {\n        temp=list[i];\n        j=i;\n        while(j>0&&temp<list[j-1])//只要temp小于前一个元素list[j-1]\n        {\n            list[j]=list[j-1];//把list[j-1]移到list[j]\n            j--;\n        }\n        list[j]=temp;//插入位置为j\n    }\n}\n```\n\n#### 排序题与sort函数的应用\n\n+ 由于排序题中大部分只需要得到排序的最终结果，而不需要去写完整的排序过程，因此推荐采用`C++`中的`sort()`函数进行处理。\n\n##### 如何使用sort()函数排序\n\n+ `sort()`函数的使用必须加上头文件`\\#include <algorithm>`和`using namespace std;`，其使用方式如下：\n\n```cpp\nsort(首元素地址(必填),尾元素地址的下一个地址(必填),比较函数(非必填));\n```\n\n##### 如何实现比较函数cmp\n\n###### 基本数据类型数组的排序\n\n+ 若比较函数不填，则默认按照从小到大的顺序排序。\n+ 例如：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n//主函数\nint main(){\n    int a[5]={1,2,3,4,5};\n    sort(a,a+5);\n    for(int i=0;i<5;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n1 2 3 4 5 \n```\n\n+ 如果想要实现从大到小来排序，则需要编写cmp(比较函数)：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nbool cmp(int a,int b)\n{\n    return a>b;//可以理解为当a>b时，把a放在b前面\n}\n//主函数\nint main(){\n    int a[5]={1,2,3,4,5};\n    sort(a,a+5,cmp);\n    for(int i=0;i<5;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n5 4 3 2 1 \n```\n\n+ **记忆方法**：\n  + 数据“从小到大”就用`“<”`，因为`a<b`是**左小右大**\n  + 数据“从大到小”就用`“>”`，因为`a>b`是**左大右小**\n\n###### 结构体数组排序\n\n+ 一级排序\n\n```cpp\nbool cmp(node a,node b)\n{\n\treturn a.x>b.x;\n}\n```\n\n+ 二级排序\n\n```cpp\nbool cmp(node a,node b)\n{\n\tif(a.x!=b.x)\n\t{\n\t\treturn a.x>b.x;\n\t}\n\telse\n\t{\n\t\treturn a.y<b.y;\n\t}\n}\n```\n\n例题：[考场排名](https://sunnywhy.com/sfbj/4/1/97)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1100;\n//结构体\nstruct stu{\n    char name[20];\n    int score;\n    int kaochang;\n    int paiming;\n};\n\n//比较函数\nbool cmp1(stu a,stu b)\n{\n    return a.score>b.score;\n}\n\nbool cmp2(stu a,stu b)\n{\n        return strcmp(a.name,b.name)<0;\n\n}\n\n//主函数\nint main(){\n    int n,num_kaochang,sum=0,num[15];\n    scanf(\"%d\",&n);\n    stu stu[MAXN];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&num_kaochang);\n        for(int k=sum;k<num_kaochang+sum;k++)\n        {\n            scanf(\"%s\",stu[k].name);\n            scanf(\"%d\",&stu[k].score);\n            stu[k].kaochang=i;\n        }\n        num[i]=num_kaochang;\n        sort(stu+sum,stu+sum+num_kaochang, cmp1);\n        stu[sum].paiming=1;\n        for(int m=sum;m<sum+num_kaochang;m++)\n        {\n            if(stu[m].score==stu[m-1].score)\n            {\n                stu[m].paiming=stu[m-1].paiming;\n            }\n            else\n            {\n                stu[m].paiming=m+1-sum;//局部排名数值要减去sum\n            }\n        }\n        sum+=num_kaochang;\n    }\n    sort(stu,stu+sum, cmp2);\n    for(int i=0;i<sum;i++)\n    {\n        printf(\"%s %d %d\\n\",stu[i].name,stu[i].score,stu[i].paiming);\n    }\n    return 0;\n}\n```\n\n+ 总结：注意一下**字符串数组的比较函数**的写法，以及这道题目局部（考场）排名的大小需要减去`sum`值。\n\n例题：[A1025 PAT Ranking](https://pintia.cn/problem-sets/994805342720868352/exam/problems/994805474338127872?type=7&page=0)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 51000;\n//结构体\nstruct stu{\n    char name[20];\n    int score;\n    int kaochang;\n    int paiming;\n    int final_rank;\n};\n\n//比较函数\nbool cmp1(stu a,stu b)\n{\n    return a.score>b.score;\n}\n\nbool cmp2(stu a,stu b)\n{\n    if(a.final_rank==b.final_rank)\n    {\n        return strcmp(a.name,b.name)<0;\n    }\n    else\n    {\n        return a.final_rank<b.final_rank;\n    }\n\n}\n//主函数\nint main(){\n    int n,num_kaochang,sum=0;\n    scanf(\"%d\",&n);\n    stu stu[MAXN];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&num_kaochang);\n        for(int k=sum;k<num_kaochang+sum;k++)\n        {\n            scanf(\"%s\",stu[k].name);\n            scanf(\"%d\",&stu[k].score);\n            stu[k].kaochang=i+1;\n        }\n        //排local_rank\n        sort(stu+sum,stu+sum+num_kaochang, cmp1);\n        stu[sum].paiming=1;\n        for(int m=sum;m<sum+num_kaochang;m++)\n        {\n            if(stu[m].score==stu[m-1].score)\n            {\n                stu[m].paiming=stu[m-1].paiming;\n            }\n            else\n            {\n                stu[m].paiming=m+1-sum;//局部排名数值要减去sum\n            }\n        }\n        sum+=num_kaochang;\n    }\n    //按照成绩重新进行排名，不区分考场\n    sort(stu,stu+sum, cmp1);\n    stu[0].final_rank=1;\n    for(int m=1;m<sum;m++)\n    {\n        if(stu[m].score==stu[m-1].score)\n        {\n            stu[m].final_rank=stu[m-1].final_rank;\n        }\n        else\n        {\n            stu[m].final_rank=m+1;\n        }\n    }\n    //按照字典序排输出\n    sort(stu,stu+sum, cmp2);\n    //输出\n    printf(\"%d\\n\",sum);\n    for(int i=0;i<sum;i++)\n    {\n        printf(\"%s %d %d %d\\n\",stu[i].name,stu[i].final_rank,stu[i].kaochang,stu[i].paiming);\n    }\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n+ 总结：可以在**结构体数组**中把对应要输出的内容提前定义，这样在运算赋值之后就可以直接输出。\n\n### 散列\n\n#### 散列的定义和整数散列\n\n+ 散列(Hash)，简单而言，就是将**元素**通过一个**函数**转换为**整数**，使得该整数可以尽量**唯一地**代表这个元素。\n+ 其中把这个转换函数称为**散列函数H**，也就是说，如果元素在转换前为`Key`，那么转换后为一个整数`H(Key)`。\n\n+ 常用的散列函数：**直接定址法**、**平方取中法**、**除留余数法**等......\n+ 如果两个不同的元素`Key1`和`Key2`，它们的Hash值`H(Key1)`和`H(Key2)`是相同的话，就称为**冲突**。\n+ 解决冲突的主要办法有：**线性探查法**、**平方探查法**、**链地址法(拉链法)**\n+ 其中第一种和第二种都计算了新的**Hash值**，称为**开放定址法**\n+ 散列表的特点是能够使用空间来换取时间\n\n#### 字符串Hash初步\n\n+ **字符串Hash**是指将一个字符串`Str`映射成一个整数，使得该整数可以尽可能唯一地代表字符串`Str`。\n+ 为了讨论问题方便，先假设字符串均有大写字母`'A'-'Z'`组成，在此基础上，不妨把大写字母`'A'-'Z'`看成`0-25`。\n+ 由此便可以将字符串映射为整数(注意：转换成整数最大为$$26^{1en}-1$$其中`len`为字符串长度)\n+ 代码如下：\n\n```cpp\nint HashFunc(char Str[],int len)//Hash函数，将字符串Str转换为整数\n{\n\tint id=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tid=id*26+(Str[i]-'A');//转换为整数\n\t}\n\treturn id;\n}\n```\n\n+ 如果字符串中出现了小写字母，那么可以把大写字母`'A'-'Z'`看成`0-25`，把小写字母`'a'-'z'`看成`26-51`，其余相同。\n\n+ 代码：\n\n```cpp\nint HashFunc(char Str[],int len)//Hash函数，将字符串Str转换为整数\n{\n\tint id=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tif(Str[i]>='A'&&Str[i]<='Z')\n\t\t{\n\t\t\tid=id*52+(Str[i]-'A');//转换为整数\n\t\t}\n\t\telse if(Str[i]>='a'&&Str[i]<='z')\n\t\t{\n\t\t\tid=id*52+(Str[i]-'a')+26;//转换为整数\n\t\t}\n\t}\n\treturn id;\n}\n```\n\n+ 再增加不同的字符代码编写方式**同理**；\n\n例题：[字符串出现次数](https://sunnywhy.com/sfbj/4/2/105)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1010;\nchar str[MAXN][5];\nint hashTable[26*26*26+10]={0};\n//字符串转Hash函数\nint HashFunc(char s[],int len)\n{\n    int id=0;\n    for(int i=0;i<len;i++)\n    {\n        id=id*26+(s[i]-'A');\n    }\n    return id;\n}\n\n//主函数\nint main(){\n    int n,m;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%s\",str[i]);\n        hashTable[HashFunc(str[i],3)]++;\n    }\n    scanf(\"%d\",&m);\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%s\",str[i]);\n        printf(\"%d\",hashTable[HashFunc(str[i],3)]);\n        if(i!=m-1)\n        {\n            printf(\" \");\n        }\n    }\n    return 0;\n}\n```\n\n+ 总结：该题直接给出字符串散列的处理方法！重点掌握字符串转整数函数的编写和应用。\n\n例题：[2-SUM-hash](https://sunnywhy.com/sfbj/4/2/104)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1000001;\nint num[MAXN]={0},hashTable[MAXN]={0};\n//主函数\nint main(){\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&num[i]);\n        hashTable[num[i]]++;\n    }\n    int ans=0;\n    for(int i=0;i<n;i++)\n    {\n        if(k-num[i]>=0&&hashTable[k-num[i]])\n        {\n            ans++;\n        }\n    }\n    printf(\"%d\",ans/2);\n    return 0;\n}\n```\n\n+ 总结：这道题目的巧妙之处在于通过用求和值`k`减去`a`后的值`b`是否还在**哈希表**中来判断是否满足条件。这样巧妙利用了**空间换时间**的思想，只用一次循环即可完成！最后注意最终结果需要再`÷2`！\n\n### 递归\n\n分治\n\n+ 分治->\"分而治之\"\n+ 分治法将原问题划分成若干个**规模较小**而**结构**与原问题**相同**或者**相似**的子问题，然后分别解决这些子问题，最后**合并**子问题的解，即可得到原问题的解。\n  + 分解：将原问题划分成若干个**规模较小**而**结构**与原问题**相同**或者**相似**的子问题；\n  + 解决：递归求解所有子问题。如果存在子问题的规模足够小就可以直接解决；\n  + 合并：将子问题的解合并为原问题的解。\n+ 分治法分解成的子问题应该是相互独立的、没有交叉的。\n+ 分治法作为一种算法思想，既可以使用**递归**的手段去实现，也可以通过**非递归**的手段去实现。\n\n递归\n\n+ 递归在于**反复调用自身函数**，但是每次把**问题范围缩小**，直到范围缩小到可以直接得到边界数据的结果，然后再在返回的路上求出对应的解。\n+ 递归很适合用来实现分治思想；\n+ 递归的逻辑中一般有两个重要概念：\n  + 递归边界\n  + 递归式（或称递归调用）\n+ 递归式是将原问题分解为若干个子问题的手段；\n+ 递归边界是分解的尽头。\n+ 例题->递归求解n的阶乘：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//函数\nint F(int n)\n{\n    if(n==0) return 1;//递归边界\n    else return F(n-1)*n;//递归式\n}\n//主函数\nint main(){\n    int a=3;\n    printf(\"%d\",F(a));\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n6\n```\n\n+ 其实现过程如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041745796.png)\n\n+ 例题->递归求解斐波那契数列的第n项：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n//斐波那契数列递归函数（输出第n项的值）\nint F(int n)\n{\n    if(n==0||n==1)\n        return 1;//递归边界\n    else return F(n-1)+F(n-2);//递归式\n}\n//主函数\nint main(){\n    int n=4;\n    printf(\"%d\",F(n));\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n5\n```\n\n+ 其实现过程如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041755805.png)\n\n+ 例题->**全排列问题**：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041758963.png)\n\n+ **思路**：\n+ 从递归的角度考虑，把问题描述成：\"输出**1 - n**这**n**个整数的全排列\"，那么它就可以分解成若干个子问题：\n  + 输出以1开头的全排列：`(1,2,3)`、`(1,3,2)`;\n  + 输出以2开头的全排列：`(2,1,3)`、`(2,3,1)`;\n  + 输出以3开头的全排列：`(3,1,2)`、`(3,2,1)`;\n  + 以此类推......直到第n个。\n+ 由此，不妨设定一个数组`p[MAXN]`用于存放当前的排列;\n+ 再设定一个散列数组`bool HashTable[MAXN]={false};`用于指示当前元素k是否在数组`p`中，\n  + 如果已经存在于`p`中时`HashTable[k]=true;`\n  + 如果不存在于`p`中时`HashTable[k]=false;`\n+ 因为要按照**字典序**对全排列进行输出，我们需要按顺序往数组`p`中第1位到n位中填入数字。\n+ 不妨假设我们当前已经填好了`p[1]-p[index]`部分的数字，下一步需要填`P[index+1]`这个位置的数字。\n+ 显然需要从1-n中枚举有哪些数字还没有在`p[1]-p[index]`部分，即满足`HashTable[k]==false`这个条件，那么就将该数字填入`p[index]`中。\n+ 然后将`HashTable[k]=true`，表示`k`这个数据已经填入了数组`p`中。\n+ 然后可以像上述步骤一样处理`index+2`的数据，即`p[1]-p[index+1]`已经填好，即进行递归->重复执行`Full_permutation(index+1);`直到后续**递归完成**。\n+ 当递归完成后，需要再将`HashTable[k]=false`，以便后续能够继续使用这个数据。\n+ 最后**递归边界**显然是当`index`到达`n+1`时，说明数组`p`中的第**1 - n**位都已经填好了，只需要按顺序进行输出即可。\n+ 下面是当`n=3`时候的代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n//全排列递归函数变量定义\nconst  int MAXN = 20;\nint n;//输出index-n的全排列\nint p[MAXN];\nbool HashTable[MAXN]={false};\n//全排列递归函数\nvoid Full_permutation(int index)\n{\n    //递归边界\n    if(index==n+1)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            printf(\"%d\",p[i]);\n        }\n        printf(\"\\n\");\n        return ;\n    }\n    //递归式\n    for(int k=1;k<=n;k++)\n    {\n        if(!HashTable[k])//HashTable[k]==false->说明该元素还没有被用上\n        {\n            p[index]=k;//处理这一种情况\n            HashTable[k] = true;//到这里说明假设1到index已经排好\n            //递归进入函数再排index+1之后的部分\n            Full_permutation(index+1);\n            //递归返回结束后循环还没有结束，继续处理下一循环的问题\n            HashTable[k] = false;//已经处理完p[index]=k;这一种情况，还原状态\n        }\n    }\n}\n\n//主函数\nint main(){\n    n=3;\n    Full_permutation(1);//index从1开始\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123\n132\n213\n231\n312\n321\n```\n\n+ 例题->**n皇后问题**：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051551338.png)\n\n+ 思路：\n\n+ 根据题意很容易想到**每行**和**每列**只能放置一个皇后，只需要将**n列**或者**n行**皇后的位置写出即可代表一种情况。\n+ 例如将皇后的行号写出，图4-4a的序号为`24135`，图4-4b的序号为`35142`。\n+ 按照这个思路只需要枚举**1 - n**的所有排列，并且查看每个排列对应的放置方案是否合法，统计合法的方案即可，总共只有`n!`个排列。\n+ 可以参考全排列的方法，生成一段排列序号后，在递归边界判断序号是否合法，代码如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//n皇后函数变量定义\nconst  int MAXN = 20;\nint n;//输出index-n的全排列\nint p[MAXN];\nbool HashTable[MAXN]={false};\nint my_count = 0;//记录合法的皇后排列个数\n\n//n皇后问题递归函数\nvoid n_queens(int index)\n{\n    //递归边界\n    if(index==n+1)\n    {\n        bool flag = true;\n        for(int i=1;i<n;i++)\n        {\n            for(int j=i+1;j<=n;j++)\n            {\n                if(abs(i-j)==abs(p[i]-p[j]))\n                {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if(flag)\n        {\n            my_count++;\n        }\n        return ;\n    }\n    //递归式\n    for(int k=1;k<=n;k++)\n    {\n        if(!HashTable[k])//HashTable[k]==false->说明该元素还没有被用上\n        {\n            p[index]=k;//处理这一种情况\n            HashTable[k] = true;//到这里说明假设1到index已经排好\n            //递归进入函数再排index+1之后的部分\n            n_queens(index+1);\n            //递归返回结束后循环还没有结束，继续处理下一循环的问题\n            HashTable[k] = false;//已经处理完p[index]=k;这一种情况，还原状态\n        }\n    }\n}\n\n//主函数\nint main(){\n    n=8;\n    n_queens(1);//index从1开始\n    printf(\"%d\",my_count);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n92\n```\n\n+ 总结：\n+ 上述方法在序列完成时再判断该序列是否合法，未使用任何优化方法，称为**暴力法**。\n+ 事实上，可以发现当已经放置了一部分皇后以后（对应生成了排列的一部分），如果后续皇后无论怎么放置都冲突的话，即可中止递归了。\n+ 一般而言，如果在到达**递归边界**前的某层，由于一些事实导致已经不需要再往任何一个子问题递归了，就可以直接返回上一层，一般这种做法称为**回溯法**。\n+ 代码如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n//n皇后函数变量定义\nconst  int MAXN = 20;\nint n;//输出index-n的全排列\nint p[MAXN];\nbool HashTable[MAXN]={false};\nint my_count = 0;//记录合法的皇后排列个数\n\n//n皇后问题递归函数\nvoid n_queens(int index)\n{\n    //递归边界,到达递归边界都是合法序列\n    if(index==n+1)\n    {\n        my_count++;\n        return ;\n    }\n    //递归式\n    for(int k=1;k<=n;k++)\n    {\n        if(!HashTable[k])//HashTable[k]==false->说明该元素还没有被用上\n        {\n            p[index]=k;//处理这一种情况\n            HashTable[k] = true;//到这里说明假设1到index已经排好\n            bool flag = true;\n            for(int pre=1;pre<index;pre++)\n            {\n                if(abs(index-pre)==abs(p[index]-p[pre]))\n                {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag)\n            {\n                //递归进入函数再排index+1之后的部分\n                n_queens(index+1);\n            }\n            //递归返回结束后循环还没有结束，继续处理下一循环的问题\n            HashTable[k] = false;//已经处理完p[index]=k;这一种情况，还原状态\n        }\n    }\n}\n\n//主函数\nint main(){\n    n=8;\n    n_queens(1);//index从1开始\n    printf(\"%d\",my_count);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n92\n```\n\n例题：[反转字符串](https://sunnywhy.com/sfbj/4/3/113)\n\n+ 方法一：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051954513.png)\n\n+ 方法一代码：\n\n```cpp\n//递归求字符串逆函数1\nvoid rev_1(char* str)\n{\n    char temp;\n    int len;\n    temp = *str;\n    len = strlen(str);\n    *str = *(str+len-1);\n    *(str+len-1)='\\0';\n    if(strlen(str+1)>=2)\n    {\n        rev_1(str+1);\n    }\n    *(str+len-1)=temp;\n}\n```\n\n+ 方法二：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051958349.png)\n\n+ 方法二代码：\n\n```cpp\n//递归求字符串逆函数2\nvoid rev_2(char* str,int left,int right)\n{\n    char temp;\n    temp = str[left];\n    str[left] = str[right];\n    str[right] = temp;\n    if(left+1<right-1)\n    {\n        rev_2(str,left+1,right-1);\n    }\n}\n```\n\n+ 总代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 110;\nchar str[MAXN],rev_str[MAXN];\nint n;\n//递归求字符串逆函数1\nvoid rev_1(char* str)\n{\n    char temp;\n    int len;\n    temp = *str;\n    len = strlen(str);\n    *str = *(str+len-1);\n    *(str+len-1)='\\0';\n    if(strlen(str+1)>=2)\n    {\n        rev_1(str+1);\n    }\n    *(str+len-1)=temp;\n}\n\n//递归求字符串逆函数2\nvoid rev_2(char* str,int left,int right)\n{\n    char temp;\n    temp = str[left];\n    str[left] = str[right];\n    str[right] = temp;\n    if(left+1<right-1)\n    {\n        rev_2(str,left+1,right-1);\n    }\n}\n\n//主函数\nint main(){\n    scanf(\"%s\",str);\n    //rev_1(str);\n    rev_2(str,0,strlen(str)-1);\n    printf(\"%s\", str);\n    return 0;\n}\n```\n\n+ 总结：上述介绍的两种方法可以多深入体会。\n\n例题：[上楼](https://sunnywhy.com/sfbj/4/3/118)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//递归判断上楼梯方式数\nint F(int n)\n{\n    if(n<=1)\n        return 1;\n    else\n        return F(n-1)+F(n-2);//最后只有加一级或者两级，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可\n}\n\n//主函数\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",F(n));\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n+ 总结：最后要到达最高级只有加**一级**或者**两级**，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可。\n\n例题：[汉诺塔](https://sunnywhy.com/sfbj/4/3/119)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nint my_count=0;\n//汉诺塔问题\nvoid hanoi(int n,char from,char to,char mid)\n{\n    if(n==1)\n    {\n        printf(\"%c->%c\\n\",from,to);\n    }\n    else\n    {\n        hanoi(n-1,from,mid,to);//要想移动n级汉诺塔需要先移动n-1级汉诺塔到另一边\n        printf(\"%c->%c\\n\",from,to);//把最后最大的一块移动到目的位置\n        hanoi(n-1,mid,to,from);//最后把剩下n-1级的汉诺塔移动到目标位置\n    }\n}\n\n//主函数\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",(int)pow(2,n)-1);\n    hanoi(n,'A','C','B');\n    return 0;\n}\n```\n\n+ 总结：要想移动`n`级汉诺塔需要先移动`n-1`级汉诺塔到另一边，然后把最后最大的一块移动到目的位置，最后把剩下`n-1`级的汉诺塔移动到目标位置，从而形成递归。\n\n例题：[棋盘覆盖问题](https://sunnywhy.com/sfbj/4/3/120)\n\n+ 说明：这道题目是一道典型的二维**分治问题**。\n+ 思路：要想采用**分治**的方法并且使用**递归**来进行求解，就需要划分成相同方案的子问题，划分的思路如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311071535777.png)\n\n+ 以此类推，在划分到只剩下2×2大小的方块后就很容易地采用骨牌进行填充。\n+ 代码如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 256*256;\nint my_index = 0;\n\n//建立坐标结构体\nstruct point\n{\n    int x , y;\n    //原始构造函数，不需要初始化变量\n    point(){}\n    //传参构造函数\n    point(int _x,int _y)\n    {\n        x=_x;\n        y=_y;\n    }\n};\n//定义存储的点数组\npoint arr[MAXN];\n\n//递归获取棋盘覆盖函数\n/*\nx,y是左下角方格坐标，代表原点\ncx,cy是黑点坐标\nsize是传入此函数时整体方格的大小\n*/\nvoid chees_cover(int x,int y,int cx,int cy,int size)\n{\n    int h;\n    if(size == 1)\n        return;\n    h = size/2;\n    //黑色方格在左上角\n    if(cy>=y+h&&cx<x+h)//假如黑色方块在左上角\n    {\n        arr[my_index++]=point(x+h,y+h-1);//从黑色方块在左上角\n        //确认骨牌的原点在右下角\n        //以下的三个if语句同理\n        chees_cover(x,y+h,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x,y+h, x+h-1,y+h,h);//\n    }\n    //黑色方格在右上角\n    if(cy>=y+h&&cx>=x+h)\n    {\n        arr[my_index++]=point(x+h-1,y+h-1);\n        chees_cover(x+h,y+h,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x+h,y+h,x+h,y+h,h);\n    }\n    //黑色方格在左下角\n    if(cy<y+h&&cx<x+h)\n    {\n        arr[my_index++]=point(x+h,y+h);\n        chees_cover(x,y,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x,y,x+h-1,y+h-1,h);\n    }\n    //黑色方格在右下角\n    if(cy<y+h&&cx>=x+h)\n    {\n        arr[my_index++]=point(x+h-1,y+h);\n        chees_cover(x+h,y,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x+h,y,x+h,y+h-1,h);\n    }\n}\n\n//定义排序比较函数\nint cmd(point px,point py)\n{\n    if(px.x==py.x)\n    {\n        return px.y < py.y;\n    }\n    else\n    {\n        return px.x < py.x;\n    }\n}\n\n//主函数\nint main(){\n    int k,cx,cy,size;\n    scanf(\"%d%d%d\",&k,&cx,&cy);\n    size = (int)pow(2,k);\n    chees_cover(1,1,cx,cy,size);\n    sort(arr,arr+my_index,cmd);\n    for(int i=0;i<my_index;i++)\n    {\n        printf(\"%d %d\\n\",arr[i].x,arr[i].y);\n    }\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n例题：[谢尔宾斯基地毯](https://sunnywhy.com/sfbj/4/3/123)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 3*3*3*3*3*3*3;\nchar arr[MAXN][MAXN];\n\n//定义谢尔宾斯基地毯递归函数\nvoid cover(int n,int x,int y)\n{\n    int unit = (int)pow(3.0,n-2);\n    if(n==1)\n    {\n        arr[x][y]=' ';\n    }\n    else\n    {\n        cover(n-1,x,y);\n        cover(n-1,x,y+unit);\n        cover(n-1,x,y+2*unit);\n        cover(n-1,x+unit,y);\n        for(int i=x+unit;i<x+2*unit;i++)\n        {\n            for(int j=y+unit;j<y+2*unit;j++)\n            {\n                arr[i][j]='X';\n            }\n        }\n        cover(n-1,x+unit,y+2*unit);\n        cover(n-1,x+2*unit,y);\n        cover(n-1,x+2*unit,y+unit);\n        cover(n-1,x+2*unit,y+2*unit);\n    }\n}\n\n//主函数\nint main(){\n    int n,my_unit;\n    scanf(\"%d\",&n);\n    my_unit = pow(3.0,n-1);\n    for(int i=0;i<my_unit+2;i++)\n    {\n        for(int j=0;j<my_unit+2;j++)\n        {\n            if(i==0||i==my_unit+1||j==0||j==my_unit+1)\n            {\n                arr[i][j]='+';\n            }\n            else\n                arr[i][j]=' ';\n        }\n    }\n    cover(n,1,1);\n    //printf(\"%d %d\",n,my_unit);\n    for(int i=0;i<my_unit+2;i++)\n    {\n        for(int j=0;j<my_unit+2;j++)\n        {\n            printf(\"%c\",arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n+ 总结：这种题目主要找准递归的**起始位置**，根据**起始位置**即可输出完整图形。\n\n#### 一种递归式的非零自然数全分解方法\n\n+ 在开始讲之前，首先介绍一下这个方法针对的问题背景：一个非零自然数(1,2,3,……)既不重复也不遗漏地任意分解为非零自然数(如：3=1+1+1=1+2)，在本篇暂且称为非零自然数的全分解。\n+ 在非零自然数的全分解中，总共有多少种分解方法，并列出所有分解方法，在本篇暂且称为非零自然数的全分解问题。\n\n##### 基本概念\n\n1. **分解末项**\n   + 一个分解中的最后一项称为分解末项。如“3=1+2”中分解末项为“2”，再如“3=1+1+1”中分解末项为“1”。\n2. **分解基数B**\n  + 分解基数，在数值上定义为分解末项的前一项，举个例子：“5=1+4”称为分解基数B=1的一个分解，“5=1+2+2”称为分解基数B=2的一个分解。\n  + 我们也可以把“5=1+4”到“5=1+2+2”的过程理解为一个将分解末项“4”按分解基数B=2的分解。实际上这种理解更为重要，因为在本方法中，我们本质上也是针对分解末项的分解。\n\n##### 分解规则\n\n1. 关于分解基数\n     + **分解基数单调不减**。如：“7=2+5=2+1+4”为一个错误的分解过程，因为第一级分解基数为2，第二级分解基数为1，违反分解基数单调不减原则。所以，“7=2+5=2+2+3”才是一个正确的分解过程。\n2. 关于分解末项\n     + **分解末项应不小于分解基数**。如：“5=1+1+3”为一个正确的分解，“5=1+3+1”为一个错误的分解。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311102020016.jpeg)\n\n+ 根据前述的两条分解规则，对7的全分解过程如上图所示，可以看到总共有14种分解方法。实际上，7的全分解就是这14种分解方法。\n\n例题：[自然数分解之方案数](https://sunnywhy.com/sfbj/4/3/125)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//递归求解自然数分解方案数量函数\nint func(int pre,int now)\n{\n    int temp=0;\n    for(int i=1;2*i<=now;i++)\n    {\n        if(i>=pre)\n        {\n            temp+=func(i,now-i);\n            temp++;\n        }\n    }\n    return temp;\n}\n\n//主函数\nint main(){\n    int n,num;\n    scanf(\"%d\",&n);\n    num = func(0,n);\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n+ 总结：\n  + **递归边界**是：当我们需要拆分的数为1时，表示无法拆分，因此返回0。\n  + 总而言之，`func(pre,now)`所返回的整数表示该组合后续能够拆分的总数。\n\n例题：[自然数分解之最大积](https://sunnywhy.com/sfbj/4/3/124)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//递归求解自然数分解之最大积\nint func(int pre,int now)\n{\n    int my_max=-1;\n    for(int i=1;2*i<=now;i++)\n    {\n        if(i>=pre)\n        {\n            my_max=max(my_max,max(i*(now-i),func(i,now-i)));\n        }\n    }\n    return max(my_max,pre*my_max);\n}\n\n//主函数\nint main(){\n    int n,num;\n    scanf(\"%d\",&n);\n    num = func(0,n);\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n+ 总结：这题与**自然数分解之方案数**较为相似，只需要把递归函数`temp`的计数改为计算乘积最大值即可。\n\n#### 动态规划\n\n例题：[数塔](https://sunnywhy.com/sfbj/4/3/116)\n\n+ 思路：数塔问题是经典的动态规划问题，通过归纳可以得到一个信息：\n\n  + 如果要求出`dp[i][j]`,那么一定要求出其两个子问题：\n  + 从位置`(i+1,j)`到达最底层的最大和`dp[i+1][j]`;\n  + 从位置`(i+1,j+1)`到达最底层的最大和`dp[i+1][j+1]`;\n  + 即进行了一次决策，走位置`(i,j)`的左下还是右下：\n  + 式子如下：\n\n  ```cpp\n  dp[i][j]=max(dp(i+1,j),dp(i+1,j+1))+f[i][j];\n  ```\n\n  + 把`dp[i][j]`称为问题的**状态**，而把上面的式子称为**状态转移方程**。\n\n+ 例题代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 25;\nint f[MAXN][MAXN],dp[MAXN][MAXN];\nint n;\n//数塔递归函数（动态规划）\nint getMax(int i,int j)\n{\n    if(i==n)\n    {\n        return f[n][j];\n    }\n    else\n    {\n        dp[i][j]=max(getMax(i+1,j),getMax(i+1,j+1))+f[i][j];\n        return dp[i][j];\n    }\n}\n//主函数\nint main(){\n    scanf(\"%d\",&n);\n    for(int k=1;k<=n;k++)\n    {\n        for(int m=1;m<=k;m++)\n        {\n            scanf(\"%d\",&f[k][m]);\n        }\n    }\n    dp[1][1]= getMax(1,1);\n    printf(\"%d\",dp[1][1]);\n    return 0;\n}\n```\n\n### 贪心\n\n#### 简单贪心\n","source":"_posts/algorithm2.md","raw":"---\ntitle: 算法笔记\ntags: [数据结构]\ncategories: [数据结构]\ndate: 2023-11-5 20:00:00\nexcerpt: 算法笔记的学习与分享总结!\n---\n# 算法笔记\n\n## C/C++快速入门\n\n### 头文件\n\n* 当我们忘记函数包含在哪个头文件下时或者头文件包含较多时，可以使用这个万能头文件来代替。但这个头文件也有缺点，最明显的是使用后**编译时间太长**。另外，由于 `include＜bits/stdc++.h＞`不是C++的标准头文件，所以会**有少部分编译器不支持**。因此建议使用**标准头文件**！\n\n### 主函数\n\n* 主函数是一个程序的入口位置，整个程序从主函数开始执行，而且一个程序最多只能有一个主函数。\n\n### 基本数据类型\n\n#### 变量的定义 \n\n* 变量是在程序运行过程中**其值可以改变的量**，需要在**定义**之后才可以使用。\n\n#### 变量的类型\n\n##### 基本数据类型\n\n* 基本数据类型分为**整型、浮点型、字符型和布尔型**。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310102009603.png)\n\n* 注意在计算机系统中不管正数与负数的表示和存储都是以**补码**的形式。\n* **原码**的表示为：第一位表示符号（0为正，1为负），其余位表示数值。\n* **反码**的表示方法分为正数和负数两种：\n  - 正数的反码等于原码本身。\n  - 负数的反码是在其原码的基础上，符号位不变（即首位不变），其余各位按位取反。\n* **补码**的表示方法同样分为正数和负数两种：\n  - 正数的补码是其原码本身。\n  - 负数的补码是在其原码的基础上，符号位不变，其余各位按位取反后加1（即在反码的基础上加1）。\n\n##### 整型(int)\n* 对于整型`int`而言，一个整数占**32bit**，即**4个Byte**，一般绝对值在$$10^9$$范围以内的整数都可以定义为**int型**。\n\n##### 长整型(long long)\n\n+ 对于长整型`long long`而言，一个整数占**64bit**，即**8个Byte**，如果需要的整数取值范围超过**2147483647**(超过$$10^{10}$$)就需要使用**长整型**。\n\n##### 浮点型\n\n* `%f`是**单精度浮点型**(`float`)和**双精度浮点型**(`double`)的输出格式\n* 对于浮点型而言，一般不需要使用`float`，碰到浮点型都应该使用`double`来进行存储。\n\n##### 字符型\n\n###### 字符变量和字符常量\n\n```cpp\nchar c;\nchar c = 'e';\n```\n\n+ 从上面的程序中可以看出来，第一段的`c`被成为**字符变量**，对于带单引号的`‘e’`则被称为**字符常量**，而且必须是**单个字符**。\n+ **小写字母**比**大写字母**的**ASCII码值**大**32**。\n+ `%c`是`char`型的输出格式。\n\n###### 转义字符\n\n- **ASCII码**中有一部分是**控制字符**，是**不可显示**的。\n\n+ 比较常用的转义字符：\n\n> \\n 表示换行\n>\n> \\0 表示空字符NULL，其ASCII码为0，要注意 \\0 不是空格\n\n###### 字符串常量\n\n字符串常量可以作为初值赋给字符串数组，并且使用`%s`的格式输出。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char str[25] = \"this is the char test\";\n    printf(\"%s\",str);\n    return 0;\n}\n```\n\n输出结果：\n\n```\nthis is the char test\n```\n\n##### 布尔型\n\n布尔型变量只能是**true(真、非零)**和**false(假、零)**。\n\n#### 强制类型转换\n\n强制类型转换的格式如下：\n\n> (新类型名)变量名\n\n#### 符号常量和const常量\n\n* 符号常量通俗而言就是替换，也称为“宏定义”。\n\n```cpp\n#define 标识符 常量\n#define pi 3.14\n```\n\n* 另一种定义常量的办法是const常量。\n\n```cpp\nconst 数据类型 变量名 = 常量;\nconst double pi = 3.14;\n```\n\n> 这两种写法都被称为常量，一旦确定其值后将无法改变。\n\n#### 运算符\n\n##### 算术运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122043030.png)\n\n##### 关系运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122044294.png)\n\n##### 逻辑运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122045903.png)\n\n##### 条件运算符\n\n```cpp\nA : B ? C\n```\n\n+ 如果A为真，执行并返回B的结果；如果A为假，那么执行并返回C的结果。\n\n##### 位运算符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122048285.png)\n\n### 顺序结构\n\n#### 使用scanf和printf输入/输出\n\n##### scanf格式符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131437646.png)\n\n+ 注意上表中最后一行，数组名称本身就代表了这个数组第一个元素的地址，所以不需要加取地址运算符。因此在`scanf`中，除了`char`数组整个输入的情况不加`&`之外，其他变量类型都需要加`&`。\n\n+ 注意字符数组使用`%s`读入的时候以**空格**和**换行**为读入结束的标志。\n\n##### printf格式符\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131513505.png)\n\n+ 对于`double`类型的变量，其在`printf`中的输出格式变成了`%f`，而在`scanf`中却是`%lf`。\n\n##### 三种实用的输出格式\n\n###### %md\n\n+ `%md`可以使不足**m**位的`int`型变量以**m**位进行右对齐输出，其中高位用**空格**补齐，如果变量本身超过**m**位，则保持原样。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    int a = 123;\n    int b = 12345678;\n    printf(\"%5d\\n\",a);\n    printf(\"%5d\\n\",b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n  123\n12345678\n```\n\n###### %0md\n\n+ `%0md`只是在`%md`中间多加了**0**。和`%md`的唯一不同在于当变量不足**m**位时，将在前面补足够数量的**0**而不是空格。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    int a = 123;\n    int b = 12345678;\n    printf(\"%05d\\n\",a);\n    printf(\"%05d\\n\",b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n00123\n12345678\n```\n\n###### %.mf\n\n+ %.mf可以让浮点数保留m位小数输出，精度是“四舍六入五成双”，具体而言为：\n  + 5前为奇数，舍5入1；\n  + 5前为偶数，舍5不进（0是偶数）。\n\n#### 使用getchar()和putchar()输入/输出字符\n\n+ `getchar()`用来输入单个字符，`putchar()`用来输出单个字符。\n+ `getchar()`可以识别并读入换行符。\n\n#### typedef\n\n+ `typedef`能够给复杂的数据类型起一个别名，这样在使用过程中就可以使用别名来替换原来的写法。\n\n```cpp\n#include <cstdio>\nusing namespace std;\ntypedef long long LL;\nint main(){\n    LL a = 123456789123454321;\n    printf(\"%lld\\n\",a);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123456789123454321\n```\n\n### 选择结构\n\n#### if语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171623893.png)\n\n#### if语句的嵌套\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624875.png)\n\n#### switch语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624551.png)\n\n### 循环结构\n\n#### while语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171628441.png)\n\n* 在while语句中，只要条件A成立就一直执行省略号里面的内容。\n\n#### do...while语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171630802.png)\n\n* do...while语句会先执行省略号中的内容一次，然后才判断**条件A**是否**成立**，如果**条件A**成立，就继续反复执行省略号中的内容，直到某一次条件A**不再成立**，则退出循环。\n\n#### for语句\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634133.png)\n\n+ for语句的具体格式如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634463.png)\n\n#### break和continue语句\n\n+ `break`语句不仅可以强制退出`switch`语句，而且break同样可以退出循环语句，即可以在需要的条件下直接退出循环。\n+ `continue`语句的作用和`break`语句的作用有点相似，它可以在需要的地方临时结束循环的**当前轮回**，然后进入**下一轮回**。\n\n### 数组\n\n#### 一维数组\n\n+ **数组**就是把**相同数据类型**的变量组合在一起而产生的**数据集合**，**数组**就是从某个地址开始**连续若干个位置**形成的元素集合。（*数组的地址是连续存放的*）\n+ 一维数组的定义格式如下：\n\n```\n数据类型 数组名[数组大小]；\n```\n\n+ 数组大小必须是**整数常量**，不可以是变量。\n\n#### 冒泡排序\n\n+ 冒泡的本质是在于**交换**，即每次通过交换的方式把**当前剩余元素**的**最大值**移动到一端，而**当剩余元素**减少为**0**时，排序结束。\n\n```cpp\n#include <cstdio>\n#include <math.h>\nusing namespace std;\nint main(){\n    int temp = 0;\n    int a[7] = {3,6,10,9,4,8,7};//n=7\n    for(int i=1;i<=6;i++)//整个过程执行n-1趟\n    {\n        //每一趟中将左边元素与右边相邻元素依次对比，若大的数在左边，则交换这两个数\n        //当该趟结束的时候，该趟的最大数被移到了该趟剩余数的最右边\n        for(int j=0;j<7-i;j++)\n        {\n            if(a[j]>a[j+1])\n            {\n                temp = a[j];\n                a[j] = a[j+1];\n                a[j+1] = temp;\n            }\n        }\n    }\n    for(int i=0;i<=6;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    return 0;\n}\n```\n\n#### 二维数组\n\n+ 二维数组是一位数组的扩展：\n\n```cpp\n数据类型 数组名[第一维大小][第二维大小];\n```\n\n+ `int a[5][6]`数组的直观理解：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310182107408.png)\n\n+ **特别提醒：**如果数组的大小较大，大概在$$10^6$$的级别，则**需要定义在主函数外面**，否则会使得程序异常退出，原因是函数内部申请的局部变量来自**系统栈**，所允许申请的**空间较小**；而函数外部申请的全局变量来自**静态存储区**，允许申请的**空间较大**。\n\n#### memset——对数组中每个元素赋相同的初值\n\n+ **需要注意的是**：`memset`使用的是按**字节**赋值，即对**每个字节**赋相同的值，这样的话，在`int`型数组中每个数据的**四个字节**都会被分配为**相同的值**，因此为了避免出错，只建议对非`char`型的数组赋值为**0**和**-1**；\n+ 使用`memset`对数组赋值时需要用`#include<string.h>`头文件；\n\n+ `memset`函数的格式为：\n\n```cpp\nmemset(数组名，赋的数值，sizeof(数组名));\n```\n\n#### 字符数组\n\n##### 字符数组的初始化\n\n+ 和普通数组一样，字符数组也可以采用循环的方法初始化；\n+ 除此之外，字符数组也可以通过**直接赋值字符串**来进行初始化（**仅限于初始化**，程序的其他位置不允许这样直接赋值整个字符串）\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char str[10] = \"YUGIN!\";\n    for(int i=0; i<6;i++)\n    {\n        printf(\"%c\",str[i]);\n    }\n    return 0;\n}\n```\n\n+ 输出：\n\n```\nYUGIN!\n```\n\n##### 字符数组的输入输出\n\n###### scanf输入，printf输出\n\n+ `scanf`和`printf`对字符类型有`%c`和`%s`两种格式，其中`%c`用来输入**单个字符**，`%s`用来输入**一个字符串**并存在**字符数组**中。\n+ `%c`格式能够识别**空格**和**换行符**并将其输入，`%s`通过**空格**或**换行符**来识别**一个字符串的结束**。\n\n+ `scanf`在使用`%s`时，后面对应的数组名是不需要加`&`**取地址运算符**的。\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char str[10];\n    scanf(\"%s\",str);\n    printf(\"%s\",str);\n    return 0;\n}\n```\n\n+ 输入输出：\n\n```\n输入：test test test\n输出：test\n```\n\n###### getchar输入，putchar输出\n\n+ `getchar`和`putchar`分别用来输入和输出**单个字符**；\n+ 输入和输出示例：\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char a;\n    a=getchar();\n    getchar();//可以用作吸收某些字符\n    putchar(a);\n    putchar('\\n');\n    return 0;\n}\n```\n\n###### gets输入，puts输出\n\n+ `gets`用来输入**一行字符串**（即**一个一维数组**，只有遇到`\\n`时结束）\n+ `puts`用来输出一行字符串（即一个一维数组，只有遇到`\\n`时结束）\n\n```cpp\n#include <cstdio>\nusing namespace std;\nint main(){\n    char a[20];\n    char b[4][10];\n    gets(a);\n    for(int i=0;i<2;i++)\n    {\n        gets(b[i]);\n    }\n    puts(a);\n    for(int i=0;i<2;i++)\n    {\n        puts(b[i]);\n    }\n    return 0;\n}\n```\n\n+ 输入输出示例：\n\n```\n输入：\nthis is \nyugin's\nblog\n输出：\nthis is \nyugin's\nblog\n```\n\n##### 字符数组的存放方式\n\n+ 由于**字符数组**是由若干个`char`类型的元素组成，因此**字符数组**的每一位都是一个`char`字符。\n+ 在**一维数组**（或是**二维数组的第二维**）的末尾都有一个**空字符**`\\0`，用于表示存放的**字符串的结尾**。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221521845.png)\n\n+ 特别注意：**空字符**`\\0`的**ASCII**码为**0**，即空字符`NULL`，会占用一个**字符位**，因此在初始化的时候**数组长度**至少比**字符串长度**多一个长度。\n+ 如果不是使用`scanf`函数的`%s`格式或`gets`函数输入字符串（例如使用`getchar`），则需要手动在字符数组最后加入`\\0`，否则输出字符串会因为无法识别字符串末尾而输出**乱码**。\n\n#### string.h头文件\n\n+ `string.h`头文件包含了许多用于字符数组的函数。\n\n##### strlen()函数\n\n+ `strlen()`函数可以得到字符数组中第一个`\\0`前的字符的个数并返回，其格式如下：\n\n```cpp\nlen = strlen(字符数组)；\n```\n\n##### strcmp()函数\n\n+ strcmp函数返回两个字符串大小的比较结果，比较原则是字典序，其格式如下：\n\n```cpp\ncmp = strcmp(字符数组1，字符数组2);\n```\n\n+ 字典序的解释：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221535589.png)\n\n##### strcpy()函数\n\n+ `strcpy()`函数可以把一个字符串复制给另一个字符串，其格式如下：\n\n```cpp\nstrcpy(字符数组1,字符数组2);\nputs(字符数组1);\n```\n\n+ 注意：是把**字符数组2**复制给**字符数组1**，包括**结束符**`\\0`；\n\n##### strcat()函数\n\n+ `strcat()`可以把一个字符串接到另一个字符串后面，其格式如下：\n\n```cpp\nstrcpy(字符数组1,字符数组2);\nputs(字符数组1);\n```\n\n+ 注意：是把**字符数组2**接到**字符数组1**后面；\n\n##### sscanf()和sprintf()\n\n+ `sscanf()`和`sprintf()`是处理字符串问题的利器！\n\n+ `sscanf()`和`sprintf()`的使用格式如下：\n\n```\nsscanf(str,\"%d\",&n);\nsprintf(str,\"%d\",n);\n```\n\n+ 上面`sscanf()`写法的作用是把字符数组`str`的中的内容以`\"%d\"`的格式写到`n`中（**从左到右**）。\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\nint main(){\n    char a[20] = \"123\";\n    int n=0;\n    sscanf(a,\"%d\",&n);\n    printf(\"%d\",n);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123\n```\n\n+ 上面`sprintf()`写法的作用是把`n`以`\"%d\"`的格式写到`str`字符数组中（**从右到左**）。\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\nint main(){\n    char a[20];\n    int n=123433;\n    sprintf(a,\"%d\",n);\n    printf(\"%s\",a);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123433\n```\n\n+ 上面的仅仅是简单的应用，实际上`sscanf()`和`sprintf()`可以进行更加复杂的字符串处理：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\nint main(){\n    char str[100];\n    int n=520;\n    double db=2002.080512121;\n    char str2[20]=\"yugin!\";\n    char str3[20]=\"I\";\n    sprintf(str,\"%s%d%s,%.4f\",str3,n,str2,db);\n    printf(\"%s\",str);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\nI520yugin!,2002.0805\n```\n\n+ 最后指出，`sscanf()`和`sprintf()`也可以支持正则表达式，则许多字符串问题将迎刃而解。\n\n### 函数\n\n+ 函数是一个实现一定功能的语句的集合，并在需要时可以反复调用而不必每次都重新写一遍。\n+ 函数的基本语法格式：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221718986.png)\n\n#### 全局变量\n\n+ 全局变量是指在定义之后的所有程序段内都有效的变量（即定义在所有函数之前）\n\n#### 局部变量\n\n+ 与全局变量相对，局部变量定义在函数内部，且只在函数内部生效，函数结束时局部变量便销毁。\n\n#### 再谈main()函数\n\n+ 主函数对一个程序而言只有一个，且无论主函数写在哪个位置，整个程序一定是从主函数的第一个语句开始执行，然后在需要时再调用其他函数。\n+ `main()`函数的结构：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221723044.png)\n\n#### 以数组作为函数的参数\n\n+ 函数的参数可以是数组，且数组作为参数时，参数中数组的第一维不需要填写长度（如果是二维数组，则**第二维需要填写长度**）\n+ 数组作为参数时，在函数中对数组元素的修改就**等同于对原素组进行修改**（与普通的局部变量不同）\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//函数\nvoid changStr(int a[],int b[][3])\n{\n    a[0]=1;\n    a[1]=3;\n    b[1][2]=5;\n}\n//主函数\nint main(){\n    int inter[5]={0};\n    int in[2][3]={0};\n    changStr(inter,in);\n    printf(\"%d\\n\",inter[0]);\n    printf(\"%d\\n\",inter[1]);\n    printf(\"%d\",in[1][2]);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n1\n3\n5\n```\n\n+ 注意：虽然数组可以作为参数，但是却不允许作为返回类型出现。\n\n#### 函数的嵌套调用\n\n+ 函数的嵌套调用是指在一个函数中调用另一个函数，调用方式和`main()`函数调用其他函数一样。\n\n#### 函数递归调用\n\n+ 函数递归调用是指一个函数调用该函数本身；\n\n+ 类似下面计算n的阶乘的代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//函数\nint F(int n)\n{\n    if(n==0) return 1;\n    else return F(n-1)*n;\n}\n//主函数\nint main(){\n    int a=3;\n    printf(\"%d\",F(a));\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n6\n```\n\n### 指针\n\n#### 什么是指针\n\n+ 在C语言中，**指针**就是**内存地址**，**指针变量**是指用来**存放内存地址的变量**。\n+ 在C/C++语言中，**指针**一般被认为是**指针变量**，指针变量的内容存储的是**其指向的对象的首地址**，指向的对象可以是**变量**（指针变量也是变量），**数组**，**函数**等**占据存储空间的实体**。\n+ 只要在变量前面加上`&`，就表示变量的地址。\n+ 指针是一个`unsigned`类型的函数。\n\n#### 指针变量\n\n+ 指针变量是用来存放指针（或者可以理解为地址）。\n+ 在某种数据类型后加`*`来表示这是一个指针变量，定义如下：\n\n```cpp\nint *p;\ndouble *p;\nchar *p;\n```\n\n+ 给指针变量赋值的方式一般是把变量的地址取出来，然后赋给对应类型的指针变量：\n\n```cpp\nint a;\nint *p = &a;\n```\n\n+ 如果`p`是指针（即`p`保存的是某个数据类型的地址），则`*p`就是这个地址所存放的元素：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int a;\n    int *p = &a;\n    a=233;\n    printf(\"%d\",*p);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n233\n```\n\n+ 指针变量也可以进行加减法，其中**减法**的结果是两个地址偏移的距离。\n+ 例如，对于`int*`类型的指针变量`p`而言，`p+1`是指`p`所指的int型变量的下一个`int`型变量地址，这个所谓的“下一个”是跨越了一整个`int`型（即**4Byte**）。\n+ 指针变量也支持自增和自减的操作，示例如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int a;\n    int *p = &a;\n    a=233;\n    printf(\"%d\\n\",p);\n    printf(\"%d\\n\",p+1);\n    p++;\n    printf(\"%d\",p);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n113245364\n113245368\n113245368\n```\n\n#### 指针与数组\n\n+ **数组名称**作为**首地址**使用，因此`a == &a[0]`和`a+i == &a[i]`成立。\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int a[10]={1,2,4,5,7};\n    int *p = a;\n    int *q;\n    printf(\"%d\\n\",p);\n    q=&a[5];\n    printf(\"%d\\n\",q);\n    printf(\"%d\",q-p);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n1241512688\n1241512708\n5\n```\n\n+ `&a[0]`和`&a[5]`之间相差5个`int`（**4个Byte**），因此输出5。\n\n#### 使用指针变量作为函数参数\n\n+ 指针类型也可以作为**函数参数**的类型，这时视为把**变量的地址**传入函数。如果在函数中对这个地址中的元素进行改变，原先的数据就会确实地被改变。\n+ 使用指针编写交换数据地函数：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//交换函数\nvoid my_swap(int *a,int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n}\n//主函数\nint main(){\n    int a=1;\n    int b=2;\n    my_swap(&a,&b);\n    printf(\"a=%d b=%d\",a,b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\na=2 b=1\n```\n\n#### 引用\n\n##### 引用的含义\n\n+ 引用是**C++**中一个强有力的语法，引用不产生**副本**，而是给原变量起了个**别名**。\n+ 因此**对引用变量操作就是对原变量操作**。\n+ 引用使用方法只需要在参数类型后面变量名前面加`&`就行，例子如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//引用示例函数\nvoid change(int &x)\n{\n    x=5;\n}\n//主函数\nint main(){\n    int b=88;\n    change(b);\n    printf(\"b=%d\",b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\nb=5\n```\n\n+ 注意要把**引用**的`&`和取**地址运算符**`&`区分开来，引用并不是取地址的意思。\n\n##### 指针的引用\n\n+ 通过引用和函数来更改变量指针的地址：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//交换函数\nvoid my_swap(int* &p1,int* &p2)\n{\n    int* temp = p1;\n    p1 = p2;\n    p2 = temp;\n}\n//主函数\nint main(){\n    int a=1;\n    int b=2;\n    int* p_a = &a;\n    int* p_b = &b;\n    my_swap(p_a,p_b);//必须用指针变量传入，引用不可以使用常量。\n    printf(\"a=%d b=%d\",*p_a,*p_b);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\na=2 b=1\n```\n\n+ 需要强调的是，**引用**是产生**变量的别名**，因此**常量不可使用引用**，上述代码不可写成`my_swap(&a,&b);`，必须用**指针变量**进行传入。\n\n### 结构体(struct)的使用\n\n#### 结构体的定义\n\n+ 定义一个结构体的基本格式如下：\n\n```cpp\nstruct Name{\n  //一些基本的数据结构或者自定义的数据类型\n};\n```\n\n+ 结构体可以这样定义：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\tchar name[20];\n\tchar major[20];\n}Alice,Bob,stu[1000];\n```\n\n+ 其中`studentInfo`是这个结构体的名字，内部定义了相关的数据。**大括号外**定义了**结构体变量**和**结构体数组**。\n\n+ 结构体同样能够像基本数据类型那样定义：\n\n```cpp\nstudentInfo Alice;\nstudentInfo stu[1000];\n```\n\n+ 值得注意的是，结构体里面能够定义除了自己本身之外的任何数据类型。\n\n```cpp\nstruct node{\n\tnode n;//不能定义node型变量，因为和本身一致\n\tnode* next;//可以定义node*型指针变量\n};\n```\n\n+ 虽然不能定义自己本身，但是可以定义自身类型的指针变量。\n\n#### 访问结构体内的元素\n\n+ 访问结构体内的元素有两种方法：`\".\"`和`\"->\"`操作。\n+ 如果把`studentInfo`定义成如下：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\tstudentInfo* next;\n}stu,*p;\n```\n\n+ 这样`studentInfo`中多了一个指针`next`用来指向下一个学生的地址，且结构体变量中定义了**普通变量**`stu`和**指针变量**`p`。\n\n+ 因此访问`stu`中的变量的写法如下：\n\n```cpp\nstu.id\nstu.gender\nstu.next\n```\n\n+ 访问指针变量`p`中的元素的写法如下：\n\n```cpp\n(*p).id\n(*p).gender\n(*p).next\n```\n\n+ 还有一种访问结构体指针变量内元素更加简洁的写法：\n\n```cpp\np->id\np->gender\np->next\n```\n\n#### 结构体的初始化\n\n+ 结构体的初始化推荐使用**构造函数**的方法。\n+ 构造函数的特点是**函数名与结构体名一致**而且**不需要写返回函数**。\n+ 其中自己定义构造函数的格式如下：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\t//以下构造函数的参数用于对结构体内部变量进行赋值\n\tstudentInfo(int _id,char _gender)\n\t{\n\t\tid = _id;\n\t\tgender = _gender;\n\t}\n};\n```\n\n+ 根据上述代码，即可直接对结构体的变量进行赋值：\n\n```cpp\nstudentInfo stu = studentInfo(20020805,'M');\n```\n\n+ 需要注意，如果**自己重新定义了构造函数**，则不能不经初始化就定义结构体变量，如下定义能够适应更多不同的场合：\n\n```cpp\nstruct studentInfo{\n\tint id;\n\tchar gender;//'F'or'M'\n\t//原始构造函数，用以不初始化就定义结构体变量\n\tstudentInfo(){}\n\t//只初始化gender的构造函数\n\tstudentInfo(char _gender)\n\t{\n\t\tgender = _gender;\n\t}\n\t//以下构造函数的参数用于对结构体内部两个变量进行赋值\n\tstudentInfo(int _id,char _gender)\n\t{\n\t\tid = _id;\n\t\tgender = _gender;\n\t}\n};\n```\n\n### 补充\n\n#### cin和cout\n\n+ cin和cout是C++的输入输出函数，需要添加头文件`#include <iostream>`和`using namespace std;`才能使用。\n\n##### cin\n\n+ `cin`采用输入运算符`\">>\"`来进行输入，例如\n\n```cpp\ncin >> n >> db >> c >> str;\n```\n\n+ 如果想读入一整行，则需要`getline`函数：\n\n```cpp\nchar str[100];\ncin.getline(str,100);\n```\n\n+ 如果是`string`容器，则需要使用以下方式输入：\n\n```cpp\nchar str[100];\ngetline(cin,str);\n```\n\n##### cout\n\n+ `cout`采用输出运算符`\"<<\"`来进行输出，例如\n\n```cpp\ncout << n << db << c << '\\n' << str << endl;\n```\n\n+ `endl`和`'\\n'`都是表示换行的意思。\n+ 由于`cin`和`cout`在输入和输出大量数据时表现糟糕，因此不建议使用。\n\n#### 浮点数的比较\n\n+ 由于计算机中采用有限二进制编码，存储并不总是准确，因此需要需要引入极小数`eps`来对这种误差进行纠正。\n+ 圆周率`pi`的表达式可以使用`acos(-1.0)`来进行表示。\n\n```cpp\nconst double esp = 1e-8;\nconst double pi = acos(-1.0);\n\n#define Equ(a,b) (fabs(a-b)<eps)\n```\n\n### 黑盒测试\n\n#### 单点测试\n\n+ 对于单点测试而言，单点测试只需要按照正常逻辑执行一遍程序即可，是“一次性”的写法，即程序只需要一组数据能够完整执行即可。\n\n#### 多点测试\n\n+ 对于多点测试，要求程序能够一次运行所有数据，并要求所有输出的结果都必须正确。\n\n##### while...EOF型\n\n+ 当题目没有说明有多少数据读入时，就可以利用`scanf`返回值是否为`EOF`来判断输入是否结束。\n\n```cpp\nwhile(scanf(\"%d\",&n) != EOF){\n\t...\n}\n```\n\n+ 如果读入的是字符串，其对应写法如下：\n\n```cpp\nwhile(scanf(\"%s\",str) != EOF){\n\t...\n}\nwhile(gets(str) != NULL){\n\t...\n}\n```\n\n## 入门模拟\n\n### 再谈字符串输入输出\n\n+ 在比较早的`C/C++`版本中，经常可以看到推荐使用`gets`函数来进行整行字符串的输入，就像下面这样的简单写法即可输入一整行：\n\n```cpp\ngets(str);\n```\n\n+ 但是当输入的字符串长度超过数组长度上限`MAX_LEN`时，`gets`函数会把超出的部分也一并读进来，并且会覆盖数组之外的内存空间，这就导致了一定的安全风险，因此`C++11`标准将`gets`函数废弃了，然后在`C++14`时将该函数移除，如果现在想要整行输入的话，推荐使用`cin.getline`函数（见下文）。\n\n```cpp\ncin.getline(str, MAX_LEN);\n```\n\n+ 例如下面一道例题：\n\n```cpp\n//题目：输入一行字符串，然后直接输出这行字符串本身。\n//输入描述：一行由大小写字母或空格组成的字符串，至少一个字符，不超过50个字符。\n//输出描述：原样输出输入的字符串。\n//**************************样例**************************\n//输入：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo\n//输出：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo\n//**************************代码**************************\n#include <cstdio>\n#include <iostream>\nusing namespace std;\nconst int MAX_LEN = 1000000;\n//主函数\nint main(){\n    char str[MAX_LEN];\n    cin.getline(str,MAX_LEN);//由gets(str);函数换成了cin.getline(str,MAX_LEN);\n    puts(str);\n    return 0;\n}\n```\n\n### 再谈sscanf()和sprintf()\n\n#### 关于sscanf()\n\n+ `sscanf`是C语言标准库中的一个函数，用于从字符串中读取格式化输入。在C++中也可以使用`sscanf`函数，但更常用的是使用C++标准库中的`stringstream`类来进行字符串解析。\n\n+ `sscanf`函数的原型如下：\n\n```cpp\nint sscanf(const char* str, const char* format, ...);\n```\n\n+ 其中，`str`是要解析的字符串，`format`是格式化字符串，用于指定解析的规则，`...`是可变参数列表，用于接收解析出来的数据。\n\n+ 与之相似的函数还有`scanf`和`fscanf`。其中，`scanf`从标准输入（通常是键盘）读取数据，而`fscanf`从文件中读取数据。\n\n在使用`sscanf`函数时，需要注意以下几点：\n\n- `format`字符串中可以包含格式说明符，如 `%d`, `%f`, `%s`, `%c`, `%x`, `%o`, `%u`, `%e`, `%g`, `%p`, `%n`, 等等。\n- `format`字符串中可以包含空格、制表符、换行符等空白字符，用于跳过输入字符串中的空白字符。\n- `format`字符串中可以包含方括号 `[]`，用于指定一个字符集合。例如，`%[a-z]` 表示匹配小写字母。\n- `format`字符串中可以包含星号 `*`，表示跳过该项输入。\n- `sscanf()` 函数**返回成功匹配并赋值的个数**。如果返回值小于参数个数，则表示解析失败。\n\n基于最后一条性质可以实现下述例题：\n\n+ 题目描述：\n\n```\n给定一个字符串，它可能是以下三种格式中的一种：\n\nA is greater than B\nA is equal to B plus C\nNo Information\n其中前两种情况中的A、B、C均为正整数，而第三种情况中没有数字。请确认字符串代表的信息是否从算术上成立，如果成立，那么输出Yes；否则输出No；如果是第三种情况，那么输出三个问号（即???）。\n\n注：\n\n1、请将字符串整行读入后使用sscanf函数进行处理\n```\n\n+ 输入描述：\n\n```\n一行满足题意的字符串，其中A、B、C为不超过100的正整数。\n```\n\n+ 输出描述：\n\n```\n根据题意输出Yes、No或???。\n```\n\n+ 样例：\n\n```\n*******************样例1*****************\n输入:\n10 is greater than 5\n输出:\nYes\n*******************样例2*****************\n输入:\n6 is equal to 1 plus 3\n输出:\nNo\n*******************样例3*****************\n输入:\nNo Information\n输出:\n???\n```\n\n+ 实现代码：\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string.h>\nusing namespace std;\nconst int MAX_LEN = 1000;\n//主函数\nint main(){\n    int A = 0,B = 0,C = 0;\n    char str[MAX_LEN];\n    cin.getline(str,MAX_LEN);\n    if(sscanf(str,\"%d is greater than %d\",&A,&B) == 2)//利用sscanf() 函数返回成功匹配并赋值的个数。\n    {\n       if(A>B)\n       {\n           printf(\"Yes\");\n       }\n       else\n       {\n           printf(\"No\");\n       }\n    }\n    else if(sscanf(str,\"%d is equal to %d plus %d\",&A,&B,&C) == 3)//利用sscanf() 函数返回成功匹配并赋值的个数。\n    {\n        if(A==B+C)\n        {\n            printf(\"Yes\");\n        }\n        else\n        {\n            printf(\"No\");\n        }\n    }\n    else\n    {\n        printf(\"???\");\n    }\n    return 0;\n}\n```\n\n+ 总结：利用`sscanf()` 函数返回成功匹配并赋值的个数，从而能够很好地解决问题。\n\n#### 关于sprintf()\n\n+ `sprintf`是C语言标准库中的一个函数，用于将格式化的数据写入字符串中。在C++中也可以使用`sprintf`函数，但更常用的是使用C++标准库中的`ostringstream`类来进行字符串解析。\n\n+ `sprintf`函数的原型如下：\n\n```c\nint sprintf(char *str, const char *format, ...);\n```\n\n+ 其中，`str`是要写入的字符串，`format`是格式化字符串，用于指定写入的规则，`...`是可变参数列表，用于接收要写入的数据。\n\n+ 与之相似的函数还有`printf`和`fprintf`。其中，`printf`将输出写入标准输出（通常是屏幕），而`fprintf`将输出写入文件。\n\n在使用`sprintf`函数时，需要注意以下几点：\n\n- `format`字符串中可以包含格式说明符，如 `%d`, `%f`, `%s`, `%c`, `%x`, `%o`, `%u`, `%e`, `%g`, `%p`, `%n`, 等等。\n- `format`字符串中可以包含空格、制表符、换行符等空白字符，用于控制输出格式。\n- `format`字符串中可以包含方括号 `[]`，用于指定一个字符集合。例如，`%[a-z]` 表示匹配小写字母。\n- `sprintf()` **函数返回成功写入的字符数。**如果返回值小于0，则表示写入失败。\n\n例题：[sprintf函数](https://sunnywhy.com/sfbj/2/5/37)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <iostream>\n#include <string.h>\nusing namespace std;\nconst int MAX_LEN = 1000;\n//主函数\nint main(){\n    char str[MAX_LEN];\n    int year,month,day,hour,minute,second;\n    scanf(\"%d %d %d %d %d %d\",&year,&month,&day,&hour,&minute,&second);\n    sprintf(str,\"%04d-%02d-%02d %02d:%02d:%02d\",year,month,day,hour,minute,second);//注意此处的ssprintf()函数注释将需要的字符串写入到字符串数组中\n    printf(\"%s\",str);//注意此处字符串数组需要采用printf()函数进行输出\n    return 0;\n}\n```\n\n+ 总结：\n\n+ 注意代码中的`ssprintf()`函数注释**将需要的字符串写入到字符串数组**中；\n+ 注意代码最后的输出字符串数组需要采用`printf()`函数进行输出。\n\n### 再谈结构体与函数数组传参\n\n+ 例题：[结构体与构造函数II](https://sunnywhy.com/sfbj/2/8/43)\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n//结构体\nstruct Student {\n    int id;\n    char name[15];\n    //构造函数\n    Student(){}\n    Student(int _id,char _name[]){//函数中的数组传参\n        id = _id;\n        strcpy(name,_name);//复制字符串数组\n    }\n};\n//主函数\nint main() {\n    Student student;\n    char name[15];\n    int id;\n    scanf(\"%d\",&id);\n    getchar();\n    scanf(\"%s\",name);//读入字符串。\n    student = Student(id,name);\n    printf(\"%d\\n%s\",student.id,student.name);\n    return 0;\n}\n```\n\n+ 总结：注意上述代码中的函数数组传参，以及字符串数组赋值；\n+ 注意如何利用`scanf()`函数读入字符串。\n\n### 再谈cin和cout\n\n+ 例题：[cin与cout](https://sunnywhy.com/sfbj/2/9/45)\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <iomanip>//数据格式控制函数的头文件\nconst int MAX_LEN  = 200;\nusing namespace std;\n//主函数\nint main(){\n    int a;\n    double b;\n    char str[MAX_LEN];\n    cin >> a >> b;\n    getchar();\n    cin.getline(str,MAX_LEN);\n    //fixed()函数与setprecision(int n)并用，可以控制小数点后面有n位。注意：setprecision()函数是控制有效数字的位数，而fixed()函数与setprecision(int n )函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！\n    cout << a << endl << fixed << setprecision(2) << b << endl << str;\n    return 0;\n}\n```\n\n+ 总结：\n+ `#include <iomanip>`是数据格式控制函数的头文件；\n+ 在使用`cout`函数输出的时候`fixed()`函数与`setprecision(int n)`并用，可以控制小数点后面有**n位**。注意：`setprecision()`函数是控制有效数字的位数，而`fixed()`函数与`setprecision(int n )`函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！\n+ 如果只使用`setprecision(int n)` 函数效果如下：\n\n```cpp\ncout << setprecision(3) << 0.12345 << endl;\ncout << setprecision(3) << 1.23456 << endl;\n\n输出：\n0.123\n1.23\n```\n\n+ 当要保留对应位数的小数(**四舍五入**)的时候，就需要采用`fixed()`函数，效果如下：\n\n```cpp\ncout << fixed << setprecision(3) << 0.12345 << endl;\ncout << fixed << setprecision(3) << 1.23456 << endl;\n\n输出：\n0.123\n1.235\n```\n\n### 再谈浮点精度比较\n\n+ 例题：[浮点精度比较](https://sunnywhy.com/sfbj/2/9/46)\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <cmath>\nusing namespace std;\nconst double eps = 1e-8;\n//主函数\nint main(){\n    int a,b,c,d;\n    scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n    double res1 = a* asin(sqrt(b) / 2);\n    double res2 = c* asin(sqrt(d) / 2);\n    if(res1 - res2 > eps)//公式1>公式2\n    {\n        printf(\"1\");\n    }\n    else if(res2 - res1 > eps)//公式2>公式1\n    {\n        printf(\"2\");\n    }\n    else\n    {\n        printf(\"0\");\n    }\n    return 0;\n}\n```\n\n+ 总结：一般为了避免计算机精度误差造成浮点数大小比较不准，采用浮点数常量大小为`const double eps = 1e-8;`的数据来进行区分。\n\n### 再谈if语句\n\n+ `if(a==b==0)`和i`f(a==0&&b==0)`的区别：\n+ 这两个表达式的区别在于它们的运算顺序不同。\n  + `if(a==b==0)`的运算顺序是先比较a和b是否相等(`a==b`)，然后再将**结果**与0比较。如果a和b都为0，但是`true`不等于0，所以表达式`a==b==0`为`false`。而当a和b**不相等**时，表达式`a==b==0`为`true`。\n  + `if(a==0&&b==0)`的运算顺序是先判断a是否等于0，然后再判断b是否等于0。只有当a和b都等于0时，这个表达式的结果才为`true`；否则，结果为`false`。\n  + 因此，这两个表达式的含义是不同的。需要特别注意！\n\n### 简单模拟\n\n+ 简单模拟的题目不涉及算法，一般完全根据题目描述来进行代码编写，考察的是**代码能力**！\n\n例题：[2的幂](https://sunnywhy.com/sfbj/3/1/61)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <cmath>\nusing namespace std;\nconst int m = 1007;\n//主函数\nint main(){\n    int num;\n    scanf(\"%d\",&num);\n    int res=1;\n    for(int i=1;i<=num;i++)\n    {\n        res = ((res%m)*(2%m))%m;\n    }\n    printf(\"%d\",res);\n    return 0;\n}\n```\n\n+ 总结：该题的**数据大小**远大于**C++**中的`long long`类型，因此不能直接进行计算，需要根据题目提示的公式**进行简化**，从而正确计算得到结果！\n\n例题：[B1032 挖掘机技术哪家强](https://pintia.cn/problem-sets/994805260223102976/exam/problems/994805289432236032?type=7&page=0)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint list_chengji[100010]={0};\nint main(){\n    int num;\n    int max_chengji=-1;//注意此处最大成绩设置为-1，否则无法通过最大成绩就是为0的测试点。\n    int xuhao,chengji,res_xuhao;\n    scanf(\"%d\",&num);\n    for(int i=0;i<num;i++){\n        scanf(\"%d %d\",&xuhao,&chengji);\n        list_chengji[xuhao]+=chengji;\n    }\n    for(int k=1;k<100010;k++)\n    {\n        if(list_chengji[k]>max_chengji)\n        {\n            max_chengji = list_chengji[k];\n            res_xuhao = k;\n        }\n    }\n    printf(\"%d %d\\n\",res_xuhao,max_chengji);\n    return 0;\n}\n```\n\n+ 总结：这道题目要**细心**，注意在代码中计算最大成绩的时候**初始值**要设置为`-1`，否则无法通过最大成绩就是为**0**的测试点。\n\n### 查找元素\n\n+ 查找元素类题目：给定一些元素，然后查找某个满足某条件的元素。\n+ 一般而言，如果需要在一个比较小范围的数据集中查找，那么直接遍历每一个数据即可。\n+ 如果需要查找的范围比较大，可以采用**二分查找**等算法来进行更快速的查找。\n\n例题：[寻找元素对](https://sunnywhy.com/sfbj/3/2/64)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int list[1010];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&list[i]);\n    }\n    int x,flag=0;\n    scanf(\"%d\",&x);\n    for(int k=0;k<n-1;k++)\n    {\n        for(int j=k+1;j<n;j++)\n        {\n            if(x==list[k]+list[j])\n            {\n                flag++;\n            }\n        }\n    }\n    printf(\"%d\",flag);\n    return 0;\n}\n```\n\n### 图形输出\n\n+ 所谓图形，其实是由若干字符组成，因此只需要弄清楚规则就能编写代码，有以下两种方法：\n  + 通过规律直接进行输出；\n  + 定义一个二维字符数组，通过规律填充字符数组，最后再输出整个二维数组。\n\n例题：[画X](https://sunnywhy.com/sfbj/3/3/67)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//主函数\nint main(){\n    int n;\n    char list[101][101];\n    memset(list,' ',sizeof(list));//初始化数组\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n        for(int k=0;k<n;k++)\n        {\n            if(i<n/2||i>n/2)\n            {\n                if(k==i||k==n-1-i)\n                {\n                    list[i][k]='*';\n                }\n            }\n            else if(i==n/2)\n            {\n                if(k==i)\n                {\n                    list[i][k]='*';\n                }\n            }\n        }\n    }\n    for(int i=0;i<n;i++)\n    {\n        if(i<=n/2)\n        {\n            for(int k=0;k<n-i;k++)\n            {\n                printf(\"%c\",list[i][k]);\n            }\n        }\n        else\n        {\n            for(int k=0;k<=i;k++)\n            {\n                printf(\"%c\",list[i][k]);\n            }\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```\n\n+ 总结：这类型题目主要在于找到图案的规律，若图案比较复杂可以放在二维字符数组中进行输出，注意一下二维字符数组的初始化可以采用`memset(list,' ',sizeof(list));`函数！\n\n### 日期处理\n\n+ 日期处理问题主要考虑平年和闰年的关系(由此产生的二月天数之间的差别)、大月和小月的问题，细节比较繁杂！\n\n例题：[周几](https://sunnywhy.com/sfbj/3/4/73)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//初始化平年闰年的数组\n//0是平年，1是闰年\nint year_list[2][13]={\n        {0,31,28,31,30,31,30,31,31,30,31,30,31},\n        {0,31,29,31,30,31,30,31,31,30,31,30,31}\n};\n//是否闰年判断函数\nbool leap_year(int year)\n{\n    if(year%400==0||(year%4==0&&year%100!=0))\n    {\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n}\n//判断日期前后,如果day在day1之前就是true，否则为false\nbool before_afer(int year,int month,int day,int year1,int month1,int day1)\n{\n    if(year1-year>0)\n    {\n        return true;\n    }\n    else if(year1-year<0)\n    {\n        return false;\n    }\n    else if(year1-year==0)\n    {\n        if(month1-month>0)\n        {\n            return true;\n        }\n        else if(month1-month<0)\n        {\n            return false;\n        }\n        else if(month1==month)\n        {\n            if(day1-day>0)\n            {\n                return true;\n            }\n            else if(day1-day<=0)\n            {\n                return false;\n            }\n        }\n    }\n}\n//计算两个日期之间的天数差值,day在day1之前，采用日期减法\nint count_days(int year,int month,int day,int year1,int month1,int day1)\n{\n    int num=0;\n    if(year1==year&&month1==month&&day1==day)\n    {\n        return 0;\n    }\n    else\n    {\n        while(true)\n        {\n            day1--;\n            if(day1<1)\n            {\n                month1--;\n                if(month1<1)\n                {\n                    year1--;\n                    month1=12;\n                }\n                day1=year_list[leap_year(year1)][month1];\n            }\n            num++;\n            if(year1==year&&month1==month&&day1==day)\n            {\n                break;\n            }\n        }\n        return num;\n    }\n}\n//主函数\nint main(){\n    int year,month,day;\n    scanf(\"%d-%d-%d\",&year,&month,&day);\n    int num=0,shengyu=0;\n    //2021-05-02是周日，用0表示（用这个日期作为基准）\n    bool b_a = before_afer(2021,5,2,year,month,day);\n    if(b_a)\n    {\n        num=count_days(2021,5,2,year,month,day);\n        shengyu=num%7;\n        printf(\"%d\",shengyu);\n    }\n    else\n    {\n        num=count_days(year,month,day,2021,5,2);\n        shengyu=num%7;\n        if(shengyu==0)\n        {\n            printf(\"%d\",0);\n        }\n        else\n        {\n            printf(\"%d\",7-shengyu);\n        }\n    }\n    return 0;\n}\n```\n\n+ 总结：虽然本题我采用了日期减法作为函数进行运算，但是和日期减法的想法相似，主要思想如下：\n\n  + 直接给日期加上指定的天数并不是很容易的事情，所以我们可以换个思路，**每次只加1天**，**一直加到指定的天数为止**。这样我们就把问题转换为计算加1天之后的新日期，而这个问题就相对简单许多。\n  + 假设当前日期的年、月、日分别是year、month、day，那么加一天之后 day 就变成了 day+1，之后我们需要判断这个新的day是否超过了当前月份month 所拥有的总天数，如果没超过，那么相安无事，算法结束；如果超过了，那么就需要令月份month 加 1、同时让day重置为 1（即把日期变为下一个月的 1 号）。接下来，如果加了 1 之后的月份 month 变为了 13 月，那么就需要令年份year加 1、同时置月份 month重置为 1（即把日期变为下一年的 1 月）。\n  + 这个过程需要知道每个月有多少天，为了方便直接取出每个月的天数，不妨设置一个二维数组`int year_list[2][13]`，用来存放每个月的天数，其中第一维为 0 时表示平年，为 1 时表示闰年。至于平年和闰年的判断方式也很简单：年份是 400 的倍数时是闰年，年份是 4 的倍数但不是 100 的倍数时也是闰年，其他情况都是平年。\n  + 代码如下：\n\n  ```cpp\n  #include <cstdio>\n  #include <string.h>\n  using namespace std;\n  //初始化平年闰年的数组\n  //0是平年，1是闰年\n  int year_list[2][13]={\n          {0,31,28,31,30,31,30,31,31,30,31,30,31},\n          {0,31,29,31,30,31,30,31,31,30,31,30,31}\n  };\n  //是否闰年判断函数\n  bool leap_year(int year)\n  {\n      if(year%400==0||(year%4==0&&year%100!=0))\n      {\n          return true;\n      }\n      else\n      {\n          return false;\n      }\n  }\n  //主函数\n  int main(){\n      int year,month,day;\n      scanf(\"%d-%d-%d\",&year,&month,&day);\n      int n;\n      scanf(\"%d\",&n);\n      for(int i=1;i<=n;i++)\n      {\n          day++;\n          if(day>year_list[leap_year(year)][month])\n          {\n              month++;\n              day=1;\n              if(month>12)\n              {\n                  year++;\n                  month=1;\n              }\n          }\n      }\n      printf(\"%04d-%02d-%02d\", year, month, day);   // 按格式输出年月日\n      return 0;\n  }\n  ```\n\n  + 最后，这道例题的思考方式如下：**首先确认一个基准日期**->**(2021-05-02是周日，用0表示)**->**计算输入的日期在基准日期之前或者之后**->**计算相差多少天**->**最后计算输入的日期是周几**！\n  + 通过上述步骤，该题迎刃而解！\n\n### 进制转换\n\n对于一个p进制数需要转换为q进制数，一般需要分为以下两步：\n\n+ p进制数x转十进制数y：\n  ![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311125587.png)\n\n  + 实现代码：\n\n ```cpp\n    //p进制数x转10进制数y的函数\n    int p_ten(int x,int p)\n    {\n        int y=0,product=1;\n        while(x!=0)\n        {\n            y=y+(x%10)*product;\n            x=x/10;\n            product=product*p;\n        }\n        return y;\n    }\n ```\n\n+ 十进制数y转q进制数z的函数(除基取余法)：\n\n    + 采用\"除基取余法\"，意思是每次将带转换的数除q，将得到的余数作为低位存储，而商继续除q并进行上面的操作，最后当商为0时，将所有位从高到低输出就可以得到z！\n      \n    + 例如十进制数**11**转换为**二进制**：\n      \n      ![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311132044.png)\n      \n    + 实现代码：\n\n    + 代码中采用`do...while`而不是`while`的原因是如果十进制恰好是**0**会造成直接跳出循环导致结果出错，因此采用`do...while`语句。\n\n```cpp\n//十进制数y转q进制数z的函数(除基取余法)\nint ten_q(int y,int q,int z_list[])\n{\n    int num=0,z=0;\n    do {\n        z_list[num]=y%q;\n        num++;\n        y=y/q;\n    }while(y!=0);\n    return num;\n}\n```\n\n例题：[K进制转十进制](https://sunnywhy.com/sfbj/3/5/77)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <cmath>\nusing namespace std;\n//p进制数x转10进制数y的函数\nint p_ten(int x,int p)\n{\n    int y=0,product=1;\n    while(x!=0)\n    {\n        y=y+(x%10)*product;\n        x=x/10;\n        product=product*p;\n    }\n    return y;\n}\n//十进制数y转q进制数z的函数(除基取余法)\nint ten_q(int y,int q,int z_list[])\n{\n    int num=0,z=0;\n    do {\n        z_list[num]=y%q;\n        num++;\n        y=y/q;\n    }while(y!=0);\n    return num;\n}\n//主函数\nint main(){\n    char str[10];//用于存储k进制串\n    int k,str_len;\n    int sum=0;\n    scanf(\"%s %d\",str,&k);\n    str_len = strlen(str);\n    for(int i=0;i<str_len;i++)\n    {\n        if(str[i]>='A'&&str[i]<='F')\n        {\n            sum+=(str[i]-'A'+10)*pow(k,str_len-1-i);\n        }\n        else\n        {\n            sum+=(str[i]-'0')*pow(k,str_len-1-i);\n        }\n    }\n    printf(\"%d\",sum);\n    return 0;\n}\n```\n\n+ 总结：这道例题无法直接使用上述两个函数，因此需要根据题意重新构造，但是难度不大，需要处理十进制以上的数据。\n\n### 字符串处理\n\n+ 字符串处理类题目可能实现逻辑比较麻烦，而且需要考虑许多细节和边界情况，因此是一种很好体现代码能力的题型。\n\n例题：[单词倒序](https://sunnywhy.com/sfbj/3/6/79)\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\nusing namespace std;\nconst int MAXN = 1010;\n//主函数   \nint main(){\n    char str[MAXN],str2[MAXN];\n    cin.getline(str,MAXN);\n    int str_len = strlen(str);\n    int flag=0,m=0;\n    for(int i=str_len-1;i>=0;i--)\n    {\n        flag++;\n        if(str[i]==' ')\n        {\n            for(int j=i+1;j<=i+flag-1;j++)\n            {\n                str2[m]=str[j];\n                m++;\n            }\n            str2[m]=' ';\n            m++;\n            flag=0;\n        }\n        else if(i==0)\n        {\n            for(int j=i;j<=i+flag-1;j++)\n            {\n                str2[m]=str[j];\n                m++;\n            }\n            str2[m]=' ';\n            m++;\n            flag=0;\n        }\n    }\n    str2[str_len]='\\0';\n    for(int k=0;k<str_len;k++)\n    {\n        printf(\"%c\",str2[k]);\n    }\n    return 0;\n}\n```\n\n+ 总结：细心分析，按照逻辑编写代码，问题即可迎刃而解。\n\n例题：[公共前缀](https://sunnywhy.com/sfbj/3/6/83)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 55;\n//主函数\nint main(){\n    char str[MAXN][MAXN];\n    int n;\n    int min_strlen=100,num=0,flag=0;\n    scanf(\"%d\",&n);\n    getchar();//吸收换行符\n    for(int i=0;i<n;i++)\n    {\n        cin.getline(str[i],MAXN);\n        if(min_strlen>(int)strlen(str[i]))\n        {\n            min_strlen=(int)strlen(str[i]);\n        }\n    }\n    for(int i=0;i<min_strlen;i++)\n    {\n        for(int k=0;k<n-1;k++)\n        {\n            if(str[k][i]!=str[k+1][i])\n            {\n                flag++;\n            }\n        }\n        if(flag)\n        {\n            num=i-1;\n            break;\n        }\n        num=i;\n    }\n    //printf(\"%d\",min_strlen);\n    for(int i=0;i<=num;i++)\n    {\n        printf(\"%c\",str[0][i]);\n    }\n    return 0;\n}\n```\n\n+ 总结：注意一下本题中在需要使用循环输入的时候要采用`getchar();`函数吸收一下换行符，否则换行符会输入至字符数组中！\n\n## C++标准模板库(STL)介绍\n\n### vector的常见用法详解\n\n+ `\"vector\"`->变长数组，即\"长度根据需要而自动改变的数组\";\n+ 要使用`vector`，需要添加`vector`头文件，即`#include <vector>`;\n\n## 算法初步\n\n### 排序\n\n+ 本章先介绍**两种**基础的排序算法：**选择排序**与**插入排序**。\n\n#### 选择排序\n\n+ **简单选择排序**：对于一个序列`A`中的元素`A[1]-A[n]`，令`i`从`1`到`n`枚举，进行`n`趟操作，每趟从待排序部分`[i,n]`中选择最小元素，令其与待排序部分的第一个元素`A[i]`进行交换，这样元素`A[i]`就会与当前有序区间`[1,i-1]`形成新的有序区间`[1,i]`。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011059055.png)\n\n+ 总共需要进行n趟操作(1<=i<=n)，每趟操作选出待排序部分[i,n]中的最小元素，令其与A[i]交换。总复杂度为$$O(n^2)$$\n\n+ 实现代码：\n\n```cpp\n//选择排序函数\nvoid select_sort(int list[],int num)\n{\n    int min_num,k,temp;\n    for(int i=0;i<num;i++)\n    {\n        min_num=list[i];\n        k=i;\n        for(int j=i;j<num;j++)\n        {\n            if(list[j]<min_num)\n            {\n                min_num = list[j];\n                k=j;\n            }\n        }\n        temp=list[i];\n        list[i]=min_num;\n        list[k]=temp;\n    }\n}\n```\n\n#### 插入排序\n\n+ **直接插入排序**：对于一个序列`A`中的元素`A[1]-A[n]`，令`i`从`1`到`n-1`枚举，进行`n-1`趟操作。假设某一趟时，序列`A`的前`i-1`个元素`A[1]-A[i-1]`已经有序，而范围`[i,n]`还未有序，那么该趟从范围`[1,i-1]`中寻找某个位置`j`，使得将`A[i]`插入位置`j`后(此时`A[j]-A[i-1]`会后移一位至`A[j+1]-A[i]`)，范围`[1,i]`有序。\n+ 思想如下图所示：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319809.png)\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319528.png)\n\n+ 实现代码：\n\n```cpp\n//插入排序函数\nvoid insert_sort(int list[],int num)\n{\n    int temp,j;\n    for(int i=1;i<num;i++)//进行n-1趟\n    {\n        temp=list[i];\n        j=i;\n        while(j>0&&temp<list[j-1])//只要temp小于前一个元素list[j-1]\n        {\n            list[j]=list[j-1];//把list[j-1]移到list[j]\n            j--;\n        }\n        list[j]=temp;//插入位置为j\n    }\n}\n```\n\n#### 排序题与sort函数的应用\n\n+ 由于排序题中大部分只需要得到排序的最终结果，而不需要去写完整的排序过程，因此推荐采用`C++`中的`sort()`函数进行处理。\n\n##### 如何使用sort()函数排序\n\n+ `sort()`函数的使用必须加上头文件`\\#include <algorithm>`和`using namespace std;`，其使用方式如下：\n\n```cpp\nsort(首元素地址(必填),尾元素地址的下一个地址(必填),比较函数(非必填));\n```\n\n##### 如何实现比较函数cmp\n\n###### 基本数据类型数组的排序\n\n+ 若比较函数不填，则默认按照从小到大的顺序排序。\n+ 例如：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n//主函数\nint main(){\n    int a[5]={1,2,3,4,5};\n    sort(a,a+5);\n    for(int i=0;i<5;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n1 2 3 4 5 \n```\n\n+ 如果想要实现从大到小来排序，则需要编写cmp(比较函数)：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nbool cmp(int a,int b)\n{\n    return a>b;//可以理解为当a>b时，把a放在b前面\n}\n//主函数\nint main(){\n    int a[5]={1,2,3,4,5};\n    sort(a,a+5,cmp);\n    for(int i=0;i<5;i++)\n    {\n        printf(\"%d \",a[i]);\n    }\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n5 4 3 2 1 \n```\n\n+ **记忆方法**：\n  + 数据“从小到大”就用`“<”`，因为`a<b`是**左小右大**\n  + 数据“从大到小”就用`“>”`，因为`a>b`是**左大右小**\n\n###### 结构体数组排序\n\n+ 一级排序\n\n```cpp\nbool cmp(node a,node b)\n{\n\treturn a.x>b.x;\n}\n```\n\n+ 二级排序\n\n```cpp\nbool cmp(node a,node b)\n{\n\tif(a.x!=b.x)\n\t{\n\t\treturn a.x>b.x;\n\t}\n\telse\n\t{\n\t\treturn a.y<b.y;\n\t}\n}\n```\n\n例题：[考场排名](https://sunnywhy.com/sfbj/4/1/97)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1100;\n//结构体\nstruct stu{\n    char name[20];\n    int score;\n    int kaochang;\n    int paiming;\n};\n\n//比较函数\nbool cmp1(stu a,stu b)\n{\n    return a.score>b.score;\n}\n\nbool cmp2(stu a,stu b)\n{\n        return strcmp(a.name,b.name)<0;\n\n}\n\n//主函数\nint main(){\n    int n,num_kaochang,sum=0,num[15];\n    scanf(\"%d\",&n);\n    stu stu[MAXN];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&num_kaochang);\n        for(int k=sum;k<num_kaochang+sum;k++)\n        {\n            scanf(\"%s\",stu[k].name);\n            scanf(\"%d\",&stu[k].score);\n            stu[k].kaochang=i;\n        }\n        num[i]=num_kaochang;\n        sort(stu+sum,stu+sum+num_kaochang, cmp1);\n        stu[sum].paiming=1;\n        for(int m=sum;m<sum+num_kaochang;m++)\n        {\n            if(stu[m].score==stu[m-1].score)\n            {\n                stu[m].paiming=stu[m-1].paiming;\n            }\n            else\n            {\n                stu[m].paiming=m+1-sum;//局部排名数值要减去sum\n            }\n        }\n        sum+=num_kaochang;\n    }\n    sort(stu,stu+sum, cmp2);\n    for(int i=0;i<sum;i++)\n    {\n        printf(\"%s %d %d\\n\",stu[i].name,stu[i].score,stu[i].paiming);\n    }\n    return 0;\n}\n```\n\n+ 总结：注意一下**字符串数组的比较函数**的写法，以及这道题目局部（考场）排名的大小需要减去`sum`值。\n\n例题：[A1025 PAT Ranking](https://pintia.cn/problem-sets/994805342720868352/exam/problems/994805474338127872?type=7&page=0)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 51000;\n//结构体\nstruct stu{\n    char name[20];\n    int score;\n    int kaochang;\n    int paiming;\n    int final_rank;\n};\n\n//比较函数\nbool cmp1(stu a,stu b)\n{\n    return a.score>b.score;\n}\n\nbool cmp2(stu a,stu b)\n{\n    if(a.final_rank==b.final_rank)\n    {\n        return strcmp(a.name,b.name)<0;\n    }\n    else\n    {\n        return a.final_rank<b.final_rank;\n    }\n\n}\n//主函数\nint main(){\n    int n,num_kaochang,sum=0;\n    scanf(\"%d\",&n);\n    stu stu[MAXN];\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&num_kaochang);\n        for(int k=sum;k<num_kaochang+sum;k++)\n        {\n            scanf(\"%s\",stu[k].name);\n            scanf(\"%d\",&stu[k].score);\n            stu[k].kaochang=i+1;\n        }\n        //排local_rank\n        sort(stu+sum,stu+sum+num_kaochang, cmp1);\n        stu[sum].paiming=1;\n        for(int m=sum;m<sum+num_kaochang;m++)\n        {\n            if(stu[m].score==stu[m-1].score)\n            {\n                stu[m].paiming=stu[m-1].paiming;\n            }\n            else\n            {\n                stu[m].paiming=m+1-sum;//局部排名数值要减去sum\n            }\n        }\n        sum+=num_kaochang;\n    }\n    //按照成绩重新进行排名，不区分考场\n    sort(stu,stu+sum, cmp1);\n    stu[0].final_rank=1;\n    for(int m=1;m<sum;m++)\n    {\n        if(stu[m].score==stu[m-1].score)\n        {\n            stu[m].final_rank=stu[m-1].final_rank;\n        }\n        else\n        {\n            stu[m].final_rank=m+1;\n        }\n    }\n    //按照字典序排输出\n    sort(stu,stu+sum, cmp2);\n    //输出\n    printf(\"%d\\n\",sum);\n    for(int i=0;i<sum;i++)\n    {\n        printf(\"%s %d %d %d\\n\",stu[i].name,stu[i].final_rank,stu[i].kaochang,stu[i].paiming);\n    }\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n+ 总结：可以在**结构体数组**中把对应要输出的内容提前定义，这样在运算赋值之后就可以直接输出。\n\n### 散列\n\n#### 散列的定义和整数散列\n\n+ 散列(Hash)，简单而言，就是将**元素**通过一个**函数**转换为**整数**，使得该整数可以尽量**唯一地**代表这个元素。\n+ 其中把这个转换函数称为**散列函数H**，也就是说，如果元素在转换前为`Key`，那么转换后为一个整数`H(Key)`。\n\n+ 常用的散列函数：**直接定址法**、**平方取中法**、**除留余数法**等......\n+ 如果两个不同的元素`Key1`和`Key2`，它们的Hash值`H(Key1)`和`H(Key2)`是相同的话，就称为**冲突**。\n+ 解决冲突的主要办法有：**线性探查法**、**平方探查法**、**链地址法(拉链法)**\n+ 其中第一种和第二种都计算了新的**Hash值**，称为**开放定址法**\n+ 散列表的特点是能够使用空间来换取时间\n\n#### 字符串Hash初步\n\n+ **字符串Hash**是指将一个字符串`Str`映射成一个整数，使得该整数可以尽可能唯一地代表字符串`Str`。\n+ 为了讨论问题方便，先假设字符串均有大写字母`'A'-'Z'`组成，在此基础上，不妨把大写字母`'A'-'Z'`看成`0-25`。\n+ 由此便可以将字符串映射为整数(注意：转换成整数最大为$$26^{1en}-1$$其中`len`为字符串长度)\n+ 代码如下：\n\n```cpp\nint HashFunc(char Str[],int len)//Hash函数，将字符串Str转换为整数\n{\n\tint id=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tid=id*26+(Str[i]-'A');//转换为整数\n\t}\n\treturn id;\n}\n```\n\n+ 如果字符串中出现了小写字母，那么可以把大写字母`'A'-'Z'`看成`0-25`，把小写字母`'a'-'z'`看成`26-51`，其余相同。\n\n+ 代码：\n\n```cpp\nint HashFunc(char Str[],int len)//Hash函数，将字符串Str转换为整数\n{\n\tint id=0;\n\tfor(int i=0;i<len;i++)\n\t{\n\t\tif(Str[i]>='A'&&Str[i]<='Z')\n\t\t{\n\t\t\tid=id*52+(Str[i]-'A');//转换为整数\n\t\t}\n\t\telse if(Str[i]>='a'&&Str[i]<='z')\n\t\t{\n\t\t\tid=id*52+(Str[i]-'a')+26;//转换为整数\n\t\t}\n\t}\n\treturn id;\n}\n```\n\n+ 再增加不同的字符代码编写方式**同理**；\n\n例题：[字符串出现次数](https://sunnywhy.com/sfbj/4/2/105)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1010;\nchar str[MAXN][5];\nint hashTable[26*26*26+10]={0};\n//字符串转Hash函数\nint HashFunc(char s[],int len)\n{\n    int id=0;\n    for(int i=0;i<len;i++)\n    {\n        id=id*26+(s[i]-'A');\n    }\n    return id;\n}\n\n//主函数\nint main(){\n    int n,m;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%s\",str[i]);\n        hashTable[HashFunc(str[i],3)]++;\n    }\n    scanf(\"%d\",&m);\n    for(int i=0;i<m;i++)\n    {\n        scanf(\"%s\",str[i]);\n        printf(\"%d\",hashTable[HashFunc(str[i],3)]);\n        if(i!=m-1)\n        {\n            printf(\" \");\n        }\n    }\n    return 0;\n}\n```\n\n+ 总结：该题直接给出字符串散列的处理方法！重点掌握字符串转整数函数的编写和应用。\n\n例题：[2-SUM-hash](https://sunnywhy.com/sfbj/4/2/104)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int MAXN = 1000001;\nint num[MAXN]={0},hashTable[MAXN]={0};\n//主函数\nint main(){\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    for(int i=0;i<n;i++)\n    {\n        scanf(\"%d\",&num[i]);\n        hashTable[num[i]]++;\n    }\n    int ans=0;\n    for(int i=0;i<n;i++)\n    {\n        if(k-num[i]>=0&&hashTable[k-num[i]])\n        {\n            ans++;\n        }\n    }\n    printf(\"%d\",ans/2);\n    return 0;\n}\n```\n\n+ 总结：这道题目的巧妙之处在于通过用求和值`k`减去`a`后的值`b`是否还在**哈希表**中来判断是否满足条件。这样巧妙利用了**空间换时间**的思想，只用一次循环即可完成！最后注意最终结果需要再`÷2`！\n\n### 递归\n\n分治\n\n+ 分治->\"分而治之\"\n+ 分治法将原问题划分成若干个**规模较小**而**结构**与原问题**相同**或者**相似**的子问题，然后分别解决这些子问题，最后**合并**子问题的解，即可得到原问题的解。\n  + 分解：将原问题划分成若干个**规模较小**而**结构**与原问题**相同**或者**相似**的子问题；\n  + 解决：递归求解所有子问题。如果存在子问题的规模足够小就可以直接解决；\n  + 合并：将子问题的解合并为原问题的解。\n+ 分治法分解成的子问题应该是相互独立的、没有交叉的。\n+ 分治法作为一种算法思想，既可以使用**递归**的手段去实现，也可以通过**非递归**的手段去实现。\n\n递归\n\n+ 递归在于**反复调用自身函数**，但是每次把**问题范围缩小**，直到范围缩小到可以直接得到边界数据的结果，然后再在返回的路上求出对应的解。\n+ 递归很适合用来实现分治思想；\n+ 递归的逻辑中一般有两个重要概念：\n  + 递归边界\n  + 递归式（或称递归调用）\n+ 递归式是将原问题分解为若干个子问题的手段；\n+ 递归边界是分解的尽头。\n+ 例题->递归求解n的阶乘：\n\n```cpp\n#include <cstdio>\n#include <string.h>\nusing namespace std;\n//函数\nint F(int n)\n{\n    if(n==0) return 1;//递归边界\n    else return F(n-1)*n;//递归式\n}\n//主函数\nint main(){\n    int a=3;\n    printf(\"%d\",F(a));\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n6\n```\n\n+ 其实现过程如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041745796.png)\n\n+ 例题->递归求解斐波那契数列的第n项：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n//斐波那契数列递归函数（输出第n项的值）\nint F(int n)\n{\n    if(n==0||n==1)\n        return 1;//递归边界\n    else return F(n-1)+F(n-2);//递归式\n}\n//主函数\nint main(){\n    int n=4;\n    printf(\"%d\",F(n));\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n5\n```\n\n+ 其实现过程如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041755805.png)\n\n+ 例题->**全排列问题**：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041758963.png)\n\n+ **思路**：\n+ 从递归的角度考虑，把问题描述成：\"输出**1 - n**这**n**个整数的全排列\"，那么它就可以分解成若干个子问题：\n  + 输出以1开头的全排列：`(1,2,3)`、`(1,3,2)`;\n  + 输出以2开头的全排列：`(2,1,3)`、`(2,3,1)`;\n  + 输出以3开头的全排列：`(3,1,2)`、`(3,2,1)`;\n  + 以此类推......直到第n个。\n+ 由此，不妨设定一个数组`p[MAXN]`用于存放当前的排列;\n+ 再设定一个散列数组`bool HashTable[MAXN]={false};`用于指示当前元素k是否在数组`p`中，\n  + 如果已经存在于`p`中时`HashTable[k]=true;`\n  + 如果不存在于`p`中时`HashTable[k]=false;`\n+ 因为要按照**字典序**对全排列进行输出，我们需要按顺序往数组`p`中第1位到n位中填入数字。\n+ 不妨假设我们当前已经填好了`p[1]-p[index]`部分的数字，下一步需要填`P[index+1]`这个位置的数字。\n+ 显然需要从1-n中枚举有哪些数字还没有在`p[1]-p[index]`部分，即满足`HashTable[k]==false`这个条件，那么就将该数字填入`p[index]`中。\n+ 然后将`HashTable[k]=true`，表示`k`这个数据已经填入了数组`p`中。\n+ 然后可以像上述步骤一样处理`index+2`的数据，即`p[1]-p[index+1]`已经填好，即进行递归->重复执行`Full_permutation(index+1);`直到后续**递归完成**。\n+ 当递归完成后，需要再将`HashTable[k]=false`，以便后续能够继续使用这个数据。\n+ 最后**递归边界**显然是当`index`到达`n+1`时，说明数组`p`中的第**1 - n**位都已经填好了，只需要按顺序进行输出即可。\n+ 下面是当`n=3`时候的代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n//全排列递归函数变量定义\nconst  int MAXN = 20;\nint n;//输出index-n的全排列\nint p[MAXN];\nbool HashTable[MAXN]={false};\n//全排列递归函数\nvoid Full_permutation(int index)\n{\n    //递归边界\n    if(index==n+1)\n    {\n        for(int i=1;i<=n;i++)\n        {\n            printf(\"%d\",p[i]);\n        }\n        printf(\"\\n\");\n        return ;\n    }\n    //递归式\n    for(int k=1;k<=n;k++)\n    {\n        if(!HashTable[k])//HashTable[k]==false->说明该元素还没有被用上\n        {\n            p[index]=k;//处理这一种情况\n            HashTable[k] = true;//到这里说明假设1到index已经排好\n            //递归进入函数再排index+1之后的部分\n            Full_permutation(index+1);\n            //递归返回结束后循环还没有结束，继续处理下一循环的问题\n            HashTable[k] = false;//已经处理完p[index]=k;这一种情况，还原状态\n        }\n    }\n}\n\n//主函数\nint main(){\n    n=3;\n    Full_permutation(1);//index从1开始\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n123\n132\n213\n231\n312\n321\n```\n\n+ 例题->**n皇后问题**：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051551338.png)\n\n+ 思路：\n\n+ 根据题意很容易想到**每行**和**每列**只能放置一个皇后，只需要将**n列**或者**n行**皇后的位置写出即可代表一种情况。\n+ 例如将皇后的行号写出，图4-4a的序号为`24135`，图4-4b的序号为`35142`。\n+ 按照这个思路只需要枚举**1 - n**的所有排列，并且查看每个排列对应的放置方案是否合法，统计合法的方案即可，总共只有`n!`个排列。\n+ 可以参考全排列的方法，生成一段排列序号后，在递归边界判断序号是否合法，代码如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//n皇后函数变量定义\nconst  int MAXN = 20;\nint n;//输出index-n的全排列\nint p[MAXN];\nbool HashTable[MAXN]={false};\nint my_count = 0;//记录合法的皇后排列个数\n\n//n皇后问题递归函数\nvoid n_queens(int index)\n{\n    //递归边界\n    if(index==n+1)\n    {\n        bool flag = true;\n        for(int i=1;i<n;i++)\n        {\n            for(int j=i+1;j<=n;j++)\n            {\n                if(abs(i-j)==abs(p[i]-p[j]))\n                {\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        if(flag)\n        {\n            my_count++;\n        }\n        return ;\n    }\n    //递归式\n    for(int k=1;k<=n;k++)\n    {\n        if(!HashTable[k])//HashTable[k]==false->说明该元素还没有被用上\n        {\n            p[index]=k;//处理这一种情况\n            HashTable[k] = true;//到这里说明假设1到index已经排好\n            //递归进入函数再排index+1之后的部分\n            n_queens(index+1);\n            //递归返回结束后循环还没有结束，继续处理下一循环的问题\n            HashTable[k] = false;//已经处理完p[index]=k;这一种情况，还原状态\n        }\n    }\n}\n\n//主函数\nint main(){\n    n=8;\n    n_queens(1);//index从1开始\n    printf(\"%d\",my_count);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n92\n```\n\n+ 总结：\n+ 上述方法在序列完成时再判断该序列是否合法，未使用任何优化方法，称为**暴力法**。\n+ 事实上，可以发现当已经放置了一部分皇后以后（对应生成了排列的一部分），如果后续皇后无论怎么放置都冲突的话，即可中止递归了。\n+ 一般而言，如果在到达**递归边界**前的某层，由于一些事实导致已经不需要再往任何一个子问题递归了，就可以直接返回上一层，一般这种做法称为**回溯法**。\n+ 代码如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n//n皇后函数变量定义\nconst  int MAXN = 20;\nint n;//输出index-n的全排列\nint p[MAXN];\nbool HashTable[MAXN]={false};\nint my_count = 0;//记录合法的皇后排列个数\n\n//n皇后问题递归函数\nvoid n_queens(int index)\n{\n    //递归边界,到达递归边界都是合法序列\n    if(index==n+1)\n    {\n        my_count++;\n        return ;\n    }\n    //递归式\n    for(int k=1;k<=n;k++)\n    {\n        if(!HashTable[k])//HashTable[k]==false->说明该元素还没有被用上\n        {\n            p[index]=k;//处理这一种情况\n            HashTable[k] = true;//到这里说明假设1到index已经排好\n            bool flag = true;\n            for(int pre=1;pre<index;pre++)\n            {\n                if(abs(index-pre)==abs(p[index]-p[pre]))\n                {\n                    flag = false;\n                    break;\n                }\n            }\n            if(flag)\n            {\n                //递归进入函数再排index+1之后的部分\n                n_queens(index+1);\n            }\n            //递归返回结束后循环还没有结束，继续处理下一循环的问题\n            HashTable[k] = false;//已经处理完p[index]=k;这一种情况，还原状态\n        }\n    }\n}\n\n//主函数\nint main(){\n    n=8;\n    n_queens(1);//index从1开始\n    printf(\"%d\",my_count);\n    return 0;\n}\n```\n\n+ 输出：\n\n```\n92\n```\n\n例题：[反转字符串](https://sunnywhy.com/sfbj/4/3/113)\n\n+ 方法一：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051954513.png)\n\n+ 方法一代码：\n\n```cpp\n//递归求字符串逆函数1\nvoid rev_1(char* str)\n{\n    char temp;\n    int len;\n    temp = *str;\n    len = strlen(str);\n    *str = *(str+len-1);\n    *(str+len-1)='\\0';\n    if(strlen(str+1)>=2)\n    {\n        rev_1(str+1);\n    }\n    *(str+len-1)=temp;\n}\n```\n\n+ 方法二：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051958349.png)\n\n+ 方法二代码：\n\n```cpp\n//递归求字符串逆函数2\nvoid rev_2(char* str,int left,int right)\n{\n    char temp;\n    temp = str[left];\n    str[left] = str[right];\n    str[right] = temp;\n    if(left+1<right-1)\n    {\n        rev_2(str,left+1,right-1);\n    }\n}\n```\n\n+ 总代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 110;\nchar str[MAXN],rev_str[MAXN];\nint n;\n//递归求字符串逆函数1\nvoid rev_1(char* str)\n{\n    char temp;\n    int len;\n    temp = *str;\n    len = strlen(str);\n    *str = *(str+len-1);\n    *(str+len-1)='\\0';\n    if(strlen(str+1)>=2)\n    {\n        rev_1(str+1);\n    }\n    *(str+len-1)=temp;\n}\n\n//递归求字符串逆函数2\nvoid rev_2(char* str,int left,int right)\n{\n    char temp;\n    temp = str[left];\n    str[left] = str[right];\n    str[right] = temp;\n    if(left+1<right-1)\n    {\n        rev_2(str,left+1,right-1);\n    }\n}\n\n//主函数\nint main(){\n    scanf(\"%s\",str);\n    //rev_1(str);\n    rev_2(str,0,strlen(str)-1);\n    printf(\"%s\", str);\n    return 0;\n}\n```\n\n+ 总结：上述介绍的两种方法可以多深入体会。\n\n例题：[上楼](https://sunnywhy.com/sfbj/4/3/118)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//递归判断上楼梯方式数\nint F(int n)\n{\n    if(n<=1)\n        return 1;\n    else\n        return F(n-1)+F(n-2);//最后只有加一级或者两级，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可\n}\n\n//主函数\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",F(n));\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n+ 总结：最后要到达最高级只有加**一级**或者**两级**，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可。\n\n例题：[汉诺塔](https://sunnywhy.com/sfbj/4/3/119)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nint my_count=0;\n//汉诺塔问题\nvoid hanoi(int n,char from,char to,char mid)\n{\n    if(n==1)\n    {\n        printf(\"%c->%c\\n\",from,to);\n    }\n    else\n    {\n        hanoi(n-1,from,mid,to);//要想移动n级汉诺塔需要先移动n-1级汉诺塔到另一边\n        printf(\"%c->%c\\n\",from,to);//把最后最大的一块移动到目的位置\n        hanoi(n-1,mid,to,from);//最后把剩下n-1级的汉诺塔移动到目标位置\n    }\n}\n\n//主函数\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",(int)pow(2,n)-1);\n    hanoi(n,'A','C','B');\n    return 0;\n}\n```\n\n+ 总结：要想移动`n`级汉诺塔需要先移动`n-1`级汉诺塔到另一边，然后把最后最大的一块移动到目的位置，最后把剩下`n-1`级的汉诺塔移动到目标位置，从而形成递归。\n\n例题：[棋盘覆盖问题](https://sunnywhy.com/sfbj/4/3/120)\n\n+ 说明：这道题目是一道典型的二维**分治问题**。\n+ 思路：要想采用**分治**的方法并且使用**递归**来进行求解，就需要划分成相同方案的子问题，划分的思路如下：\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311071535777.png)\n\n+ 以此类推，在划分到只剩下2×2大小的方块后就很容易地采用骨牌进行填充。\n+ 代码如下：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 256*256;\nint my_index = 0;\n\n//建立坐标结构体\nstruct point\n{\n    int x , y;\n    //原始构造函数，不需要初始化变量\n    point(){}\n    //传参构造函数\n    point(int _x,int _y)\n    {\n        x=_x;\n        y=_y;\n    }\n};\n//定义存储的点数组\npoint arr[MAXN];\n\n//递归获取棋盘覆盖函数\n/*\nx,y是左下角方格坐标，代表原点\ncx,cy是黑点坐标\nsize是传入此函数时整体方格的大小\n*/\nvoid chees_cover(int x,int y,int cx,int cy,int size)\n{\n    int h;\n    if(size == 1)\n        return;\n    h = size/2;\n    //黑色方格在左上角\n    if(cy>=y+h&&cx<x+h)//假如黑色方块在左上角\n    {\n        arr[my_index++]=point(x+h,y+h-1);//从黑色方块在左上角\n        //确认骨牌的原点在右下角\n        //以下的三个if语句同理\n        chees_cover(x,y+h,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x,y+h, x+h-1,y+h,h);//\n    }\n    //黑色方格在右上角\n    if(cy>=y+h&&cx>=x+h)\n    {\n        arr[my_index++]=point(x+h-1,y+h-1);\n        chees_cover(x+h,y+h,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x+h,y+h,x+h,y+h,h);\n    }\n    //黑色方格在左下角\n    if(cy<y+h&&cx<x+h)\n    {\n        arr[my_index++]=point(x+h,y+h);\n        chees_cover(x,y,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x,y,x+h-1,y+h-1,h);\n    }\n    //黑色方格在右下角\n    if(cy<y+h&&cx>=x+h)\n    {\n        arr[my_index++]=point(x+h-1,y+h);\n        chees_cover(x+h,y,cx,cy,h);\n    }\n    else\n    {\n        chees_cover(x+h,y,x+h,y+h-1,h);\n    }\n}\n\n//定义排序比较函数\nint cmd(point px,point py)\n{\n    if(px.x==py.x)\n    {\n        return px.y < py.y;\n    }\n    else\n    {\n        return px.x < py.x;\n    }\n}\n\n//主函数\nint main(){\n    int k,cx,cy,size;\n    scanf(\"%d%d%d\",&k,&cx,&cy);\n    size = (int)pow(2,k);\n    chees_cover(1,1,cx,cy,size);\n    sort(arr,arr+my_index,cmd);\n    for(int i=0;i<my_index;i++)\n    {\n        printf(\"%d %d\\n\",arr[i].x,arr[i].y);\n    }\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n例题：[谢尔宾斯基地毯](https://sunnywhy.com/sfbj/4/3/123)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 3*3*3*3*3*3*3;\nchar arr[MAXN][MAXN];\n\n//定义谢尔宾斯基地毯递归函数\nvoid cover(int n,int x,int y)\n{\n    int unit = (int)pow(3.0,n-2);\n    if(n==1)\n    {\n        arr[x][y]=' ';\n    }\n    else\n    {\n        cover(n-1,x,y);\n        cover(n-1,x,y+unit);\n        cover(n-1,x,y+2*unit);\n        cover(n-1,x+unit,y);\n        for(int i=x+unit;i<x+2*unit;i++)\n        {\n            for(int j=y+unit;j<y+2*unit;j++)\n            {\n                arr[i][j]='X';\n            }\n        }\n        cover(n-1,x+unit,y+2*unit);\n        cover(n-1,x+2*unit,y);\n        cover(n-1,x+2*unit,y+unit);\n        cover(n-1,x+2*unit,y+2*unit);\n    }\n}\n\n//主函数\nint main(){\n    int n,my_unit;\n    scanf(\"%d\",&n);\n    my_unit = pow(3.0,n-1);\n    for(int i=0;i<my_unit+2;i++)\n    {\n        for(int j=0;j<my_unit+2;j++)\n        {\n            if(i==0||i==my_unit+1||j==0||j==my_unit+1)\n            {\n                arr[i][j]='+';\n            }\n            else\n                arr[i][j]=' ';\n        }\n    }\n    cover(n,1,1);\n    //printf(\"%d %d\",n,my_unit);\n    for(int i=0;i<my_unit+2;i++)\n    {\n        for(int j=0;j<my_unit+2;j++)\n        {\n            printf(\"%c\",arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    system(\"pause\");// 防止运行后自动退出，需头文件stdlib.h\n    return 0;\n}\n```\n\n+ 总结：这种题目主要找准递归的**起始位置**，根据**起始位置**即可输出完整图形。\n\n#### 一种递归式的非零自然数全分解方法\n\n+ 在开始讲之前，首先介绍一下这个方法针对的问题背景：一个非零自然数(1,2,3,……)既不重复也不遗漏地任意分解为非零自然数(如：3=1+1+1=1+2)，在本篇暂且称为非零自然数的全分解。\n+ 在非零自然数的全分解中，总共有多少种分解方法，并列出所有分解方法，在本篇暂且称为非零自然数的全分解问题。\n\n##### 基本概念\n\n1. **分解末项**\n   + 一个分解中的最后一项称为分解末项。如“3=1+2”中分解末项为“2”，再如“3=1+1+1”中分解末项为“1”。\n2. **分解基数B**\n  + 分解基数，在数值上定义为分解末项的前一项，举个例子：“5=1+4”称为分解基数B=1的一个分解，“5=1+2+2”称为分解基数B=2的一个分解。\n  + 我们也可以把“5=1+4”到“5=1+2+2”的过程理解为一个将分解末项“4”按分解基数B=2的分解。实际上这种理解更为重要，因为在本方法中，我们本质上也是针对分解末项的分解。\n\n##### 分解规则\n\n1. 关于分解基数\n     + **分解基数单调不减**。如：“7=2+5=2+1+4”为一个错误的分解过程，因为第一级分解基数为2，第二级分解基数为1，违反分解基数单调不减原则。所以，“7=2+5=2+2+3”才是一个正确的分解过程。\n2. 关于分解末项\n     + **分解末项应不小于分解基数**。如：“5=1+1+3”为一个正确的分解，“5=1+3+1”为一个错误的分解。\n\n![](https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311102020016.jpeg)\n\n+ 根据前述的两条分解规则，对7的全分解过程如上图所示，可以看到总共有14种分解方法。实际上，7的全分解就是这14种分解方法。\n\n例题：[自然数分解之方案数](https://sunnywhy.com/sfbj/4/3/125)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//递归求解自然数分解方案数量函数\nint func(int pre,int now)\n{\n    int temp=0;\n    for(int i=1;2*i<=now;i++)\n    {\n        if(i>=pre)\n        {\n            temp+=func(i,now-i);\n            temp++;\n        }\n    }\n    return temp;\n}\n\n//主函数\nint main(){\n    int n,num;\n    scanf(\"%d\",&n);\n    num = func(0,n);\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n+ 总结：\n  + **递归边界**是：当我们需要拆分的数为1时，表示无法拆分，因此返回0。\n  + 总而言之，`func(pre,now)`所返回的整数表示该组合后续能够拆分的总数。\n\n例题：[自然数分解之最大积](https://sunnywhy.com/sfbj/4/3/124)\n\n+ 代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\n//递归求解自然数分解之最大积\nint func(int pre,int now)\n{\n    int my_max=-1;\n    for(int i=1;2*i<=now;i++)\n    {\n        if(i>=pre)\n        {\n            my_max=max(my_max,max(i*(now-i),func(i,now-i)));\n        }\n    }\n    return max(my_max,pre*my_max);\n}\n\n//主函数\nint main(){\n    int n,num;\n    scanf(\"%d\",&n);\n    num = func(0,n);\n    printf(\"%d\",num);\n    return 0;\n}\n```\n\n+ 总结：这题与**自然数分解之方案数**较为相似，只需要把递归函数`temp`的计数改为计算乘积最大值即可。\n\n#### 动态规划\n\n例题：[数塔](https://sunnywhy.com/sfbj/4/3/116)\n\n+ 思路：数塔问题是经典的动态规划问题，通过归纳可以得到一个信息：\n\n  + 如果要求出`dp[i][j]`,那么一定要求出其两个子问题：\n  + 从位置`(i+1,j)`到达最底层的最大和`dp[i+1][j]`;\n  + 从位置`(i+1,j+1)`到达最底层的最大和`dp[i+1][j+1]`;\n  + 即进行了一次决策，走位置`(i,j)`的左下还是右下：\n  + 式子如下：\n\n  ```cpp\n  dp[i][j]=max(dp(i+1,j),dp(i+1,j+1))+f[i][j];\n  ```\n\n  + 把`dp[i][j]`称为问题的**状态**，而把上面的式子称为**状态转移方程**。\n\n+ 例题代码：\n\n```cpp\n#include <cstdio>\n#include <string.h>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\nconst int MAXN = 25;\nint f[MAXN][MAXN],dp[MAXN][MAXN];\nint n;\n//数塔递归函数（动态规划）\nint getMax(int i,int j)\n{\n    if(i==n)\n    {\n        return f[n][j];\n    }\n    else\n    {\n        dp[i][j]=max(getMax(i+1,j),getMax(i+1,j+1))+f[i][j];\n        return dp[i][j];\n    }\n}\n//主函数\nint main(){\n    scanf(\"%d\",&n);\n    for(int k=1;k<=n;k++)\n    {\n        for(int m=1;m<=k;m++)\n        {\n            scanf(\"%d\",&f[k][m]);\n        }\n    }\n    dp[1][1]= getMax(1,1);\n    printf(\"%d\",dp[1][1]);\n    return 0;\n}\n```\n\n### 贪心\n\n#### 简单贪心\n","slug":"algorithm2","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7um000jlsvs9gtifd85","content":"<h1 id=\"算法笔记\"><a class=\"markdownIt-Anchor\" href=\"#算法笔记\"></a> 算法笔记</h1>\n<h2 id=\"cc快速入门\"><a class=\"markdownIt-Anchor\" href=\"#cc快速入门\"></a> C/C++快速入门</h2>\n<h3 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\"></a> 头文件</h3>\n<ul>\n<li>当我们忘记函数包含在哪个头文件下时或者头文件包含较多时，可以使用这个万能头文件来代替。但这个头文件也有缺点，最明显的是使用后<strong>编译时间太长</strong>。另外，由于 <code>include＜bits/stdc++.h＞</code>不是C++的标准头文件，所以会<strong>有少部分编译器不支持</strong>。因此建议使用<strong>标准头文件</strong>！</li>\n</ul>\n<h3 id=\"主函数\"><a class=\"markdownIt-Anchor\" href=\"#主函数\"></a> 主函数</h3>\n<ul>\n<li>主函数是一个程序的入口位置，整个程序从主函数开始执行，而且一个程序最多只能有一个主函数。</li>\n</ul>\n<h3 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\"></a> 基本数据类型</h3>\n<h4 id=\"变量的定义\"><a class=\"markdownIt-Anchor\" href=\"#变量的定义\"></a> 变量的定义</h4>\n<ul>\n<li>变量是在程序运行过程中<strong>其值可以改变的量</strong>，需要在<strong>定义</strong>之后才可以使用。</li>\n</ul>\n<h4 id=\"变量的类型\"><a class=\"markdownIt-Anchor\" href=\"#变量的类型\"></a> 变量的类型</h4>\n<h5 id=\"基本数据类型-2\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型-2\"></a> 基本数据类型</h5>\n<ul>\n<li>基本数据类型分为<strong>整型、浮点型、字符型和布尔型</strong>。</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310102009603.png\" alt=\"\" /></p>\n<ul>\n<li>注意在计算机系统中不管正数与负数的表示和存储都是以<strong>补码</strong>的形式。</li>\n<li><strong>原码</strong>的表示为：第一位表示符号（0为正，1为负），其余位表示数值。</li>\n<li><strong>反码</strong>的表示方法分为正数和负数两种：\n<ul>\n<li>正数的反码等于原码本身。</li>\n<li>负数的反码是在其原码的基础上，符号位不变（即首位不变），其余各位按位取反。</li>\n</ul>\n</li>\n<li><strong>补码</strong>的表示方法同样分为正数和负数两种：\n<ul>\n<li>正数的补码是其原码本身。</li>\n<li>负数的补码是在其原码的基础上，符号位不变，其余各位按位取反后加1（即在反码的基础上加1）。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"整型int\"><a class=\"markdownIt-Anchor\" href=\"#整型int\"></a> 整型(int)</h5>\n<ul>\n<li>对于整型<code>int</code>而言，一个整数占<strong>32bit</strong>，即<strong>4个Byte</strong>，一般绝对值在$$10^9$$范围以内的整数都可以定义为<strong>int型</strong>。</li>\n</ul>\n<h5 id=\"长整型long-long\"><a class=\"markdownIt-Anchor\" href=\"#长整型long-long\"></a> 长整型(long long)</h5>\n<ul>\n<li>对于长整型<code>long long</code>而言，一个整数占<strong>64bit</strong>，即<strong>8个Byte</strong>，如果需要的整数取值范围超过<strong>2147483647</strong>(超过$$10^{10}$$)就需要使用<strong>长整型</strong>。</li>\n</ul>\n<h5 id=\"浮点型\"><a class=\"markdownIt-Anchor\" href=\"#浮点型\"></a> 浮点型</h5>\n<ul>\n<li><code>%f</code>是<strong>单精度浮点型</strong>(<code>float</code>)和<strong>双精度浮点型</strong>(<code>double</code>)的输出格式</li>\n<li>对于浮点型而言，一般不需要使用<code>float</code>，碰到浮点型都应该使用<code>double</code>来进行存储。</li>\n</ul>\n<h5 id=\"字符型\"><a class=\"markdownIt-Anchor\" href=\"#字符型\"></a> 字符型</h5>\n<h6 id=\"字符变量和字符常量\"><a class=\"markdownIt-Anchor\" href=\"#字符变量和字符常量\"></a> 字符变量和字符常量</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">char</span> c;<br><span class=\"hljs-type\">char</span> c = <span class=\"hljs-string\">&#x27;e&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>从上面的程序中可以看出来，第一段的<code>c</code>被成为<strong>字符变量</strong>，对于带单引号的<code>‘e’</code>则被称为<strong>字符常量</strong>，而且必须是<strong>单个字符</strong>。</li>\n<li><strong>小写字母</strong>比<strong>大写字母</strong>的<strong>ASCII码值</strong>大<strong>32</strong>。</li>\n<li><code>%c</code>是<code>char</code>型的输出格式。</li>\n</ul>\n<h6 id=\"转义字符\"><a class=\"markdownIt-Anchor\" href=\"#转义字符\"></a> 转义字符</h6>\n<ul>\n<li><strong>ASCII码</strong>中有一部分是<strong>控制字符</strong>，是<strong>不可显示</strong>的。</li>\n</ul>\n<ul>\n<li>比较常用的转义字符：</li>\n</ul>\n<blockquote>\n<p>\\n 表示换行</p>\n<p>\\0 表示空字符NULL，其ASCII码为0，要注意 \\0 不是空格</p>\n</blockquote>\n<h6 id=\"字符串常量\"><a class=\"markdownIt-Anchor\" href=\"#字符串常量\"></a> 字符串常量</h6>\n<p>字符串常量可以作为初值赋给字符串数组，并且使用<code>%s</code>的格式输出。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">25</span>] = <span class=\"hljs-string\">&quot;this is the char test&quot;</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> the <span class=\"hljs-built_in\">char</span> test<br></code></pre></td></tr></table></figure>\n<h5 id=\"布尔型\"><a class=\"markdownIt-Anchor\" href=\"#布尔型\"></a> 布尔型</h5>\n<p>布尔型变量只能是<strong>true(真、非零)<strong>和</strong>false(假、零)</strong>。</p>\n<h4 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\"></a> 强制类型转换</h4>\n<p>强制类型转换的格式如下：</p>\n<blockquote>\n<p>(新类型名)变量名</p>\n</blockquote>\n<h4 id=\"符号常量和const常量\"><a class=\"markdownIt-Anchor\" href=\"#符号常量和const常量\"></a> 符号常量和const常量</h4>\n<ul>\n<li>符号常量通俗而言就是替换，也称为“宏定义”。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> 标识符 常量</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pi 3.14</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>另一种定义常量的办法是const常量。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">const</span> 数据类型 变量名 = 常量;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> pi = <span class=\"hljs-number\">3.14</span>;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>这两种写法都被称为常量，一旦确定其值后将无法改变。</p>\n</blockquote>\n<h4 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\"></a> 运算符</h4>\n<h5 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\"></a> 算术运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122043030.png\" alt=\"\" /></p>\n<h5 id=\"关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#关系运算符\"></a> 关系运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122044294.png\" alt=\"\" /></p>\n<h5 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\"></a> 逻辑运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122045903.png\" alt=\"\" /></p>\n<h5 id=\"条件运算符\"><a class=\"markdownIt-Anchor\" href=\"#条件运算符\"></a> 条件运算符</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">A : B ? C<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果A为真，执行并返回B的结果；如果A为假，那么执行并返回C的结果。</li>\n</ul>\n<h5 id=\"位运算符\"><a class=\"markdownIt-Anchor\" href=\"#位运算符\"></a> 位运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122048285.png\" alt=\"\" /></p>\n<h3 id=\"顺序结构\"><a class=\"markdownIt-Anchor\" href=\"#顺序结构\"></a> 顺序结构</h3>\n<h4 id=\"使用scanf和printf输入输出\"><a class=\"markdownIt-Anchor\" href=\"#使用scanf和printf输入输出\"></a> 使用scanf和printf输入/输出</h4>\n<h5 id=\"scanf格式符\"><a class=\"markdownIt-Anchor\" href=\"#scanf格式符\"></a> scanf格式符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131437646.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>注意上表中最后一行，数组名称本身就代表了这个数组第一个元素的地址，所以不需要加取地址运算符。因此在<code>scanf</code>中，除了<code>char</code>数组整个输入的情况不加<code>&amp;</code>之外，其他变量类型都需要加<code>&amp;</code>。</p>\n</li>\n<li>\n<p>注意字符数组使用<code>%s</code>读入的时候以<strong>空格</strong>和<strong>换行</strong>为读入结束的标志。</p>\n</li>\n</ul>\n<h5 id=\"printf格式符\"><a class=\"markdownIt-Anchor\" href=\"#printf格式符\"></a> printf格式符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131513505.png\" alt=\"\" /></p>\n<ul>\n<li>对于<code>double</code>类型的变量，其在<code>printf</code>中的输出格式变成了<code>%f</code>，而在<code>scanf</code>中却是<code>%lf</code>。</li>\n</ul>\n<h5 id=\"三种实用的输出格式\"><a class=\"markdownIt-Anchor\" href=\"#三种实用的输出格式\"></a> 三种实用的输出格式</h5>\n<h6 id=\"md\"><a class=\"markdownIt-Anchor\" href=\"#md\"></a> %md</h6>\n<ul>\n<li><code>%md</code>可以使不足<strong>m</strong>位的<code>int</code>型变量以<strong>m</strong>位进行右对齐输出，其中高位用<strong>空格</strong>补齐，如果变量本身超过<strong>m</strong>位，则保持原样。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">123</span>;<br>    <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">12345678</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%5d\\n&quot;</span>,a);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%5d\\n&quot;</span>,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">  <span class=\"hljs-number\">123</span><br><span class=\"hljs-number\">12345678</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"0md\"><a class=\"markdownIt-Anchor\" href=\"#0md\"></a> %0md</h6>\n<ul>\n<li><code>%0md</code>只是在<code>%md</code>中间多加了<strong>0</strong>。和<code>%md</code>的唯一不同在于当变量不足<strong>m</strong>位时，将在前面补足够数量的<strong>0</strong>而不是空格。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">123</span>;<br>    <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">12345678</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d\\n&quot;</span>,a);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d\\n&quot;</span>,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">00123</span><br><span class=\"hljs-number\">12345678</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"mf\"><a class=\"markdownIt-Anchor\" href=\"#mf\"></a> %.mf</h6>\n<ul>\n<li>%.mf可以让浮点数保留m位小数输出，精度是“四舍六入五成双”，具体而言为：\n<ul>\n<li>5前为奇数，舍5入1；</li>\n<li>5前为偶数，舍5不进（0是偶数）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用getchar和putchar输入输出字符\"><a class=\"markdownIt-Anchor\" href=\"#使用getchar和putchar输入输出字符\"></a> 使用getchar()和putchar()输入/输出字符</h4>\n<ul>\n<li><code>getchar()</code>用来输入单个字符，<code>putchar()</code>用来输出单个字符。</li>\n<li><code>getchar()</code>可以识别并读入换行符。</li>\n</ul>\n<h4 id=\"typedef\"><a class=\"markdownIt-Anchor\" href=\"#typedef\"></a> typedef</h4>\n<ul>\n<li><code>typedef</code>能够给复杂的数据类型起一个别名，这样在使用过程中就可以使用别名来替换原来的写法。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    LL a = <span class=\"hljs-number\">123456789123454321</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lld\\n&quot;</span>,a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123456789123454321<br></code></pre></td></tr></table></figure>\n<h3 id=\"选择结构\"><a class=\"markdownIt-Anchor\" href=\"#选择结构\"></a> 选择结构</h3>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\"></a> if语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171623893.png\" alt=\"\" /></p>\n<h4 id=\"if语句的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#if语句的嵌套\"></a> if语句的嵌套</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624875.png\" alt=\"\" /></p>\n<h4 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\"></a> switch语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624551.png\" alt=\"\" /></p>\n<h3 id=\"循环结构\"><a class=\"markdownIt-Anchor\" href=\"#循环结构\"></a> 循环结构</h3>\n<h4 id=\"while语句\"><a class=\"markdownIt-Anchor\" href=\"#while语句\"></a> while语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171628441.png\" alt=\"\" /></p>\n<ul>\n<li>在while语句中，只要条件A成立就一直执行省略号里面的内容。</li>\n</ul>\n<h4 id=\"dowhile语句\"><a class=\"markdownIt-Anchor\" href=\"#dowhile语句\"></a> do…while语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171630802.png\" alt=\"\" /></p>\n<ul>\n<li>do…while语句会先执行省略号中的内容一次，然后才判断<strong>条件A</strong>是否<strong>成立</strong>，如果<strong>条件A</strong>成立，就继续反复执行省略号中的内容，直到某一次条件A<strong>不再成立</strong>，则退出循环。</li>\n</ul>\n<h4 id=\"for语句\"><a class=\"markdownIt-Anchor\" href=\"#for语句\"></a> for语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634133.png\" alt=\"\" /></p>\n<ul>\n<li>for语句的具体格式如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634463.png\" alt=\"\" /></p>\n<h4 id=\"break和continue语句\"><a class=\"markdownIt-Anchor\" href=\"#break和continue语句\"></a> break和continue语句</h4>\n<ul>\n<li><code>break</code>语句不仅可以强制退出<code>switch</code>语句，而且break同样可以退出循环语句，即可以在需要的条件下直接退出循环。</li>\n<li><code>continue</code>语句的作用和<code>break</code>语句的作用有点相似，它可以在需要的地方临时结束循环的<strong>当前轮回</strong>，然后进入<strong>下一轮回</strong>。</li>\n</ul>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h3>\n<h4 id=\"一维数组\"><a class=\"markdownIt-Anchor\" href=\"#一维数组\"></a> 一维数组</h4>\n<ul>\n<li><strong>数组</strong>就是把<strong>相同数据类型</strong>的变量组合在一起而产生的<strong>数据集合</strong>，<strong>数组</strong>就是从某个地址开始<strong>连续若干个位置</strong>形成的元素集合。（<em>数组的地址是连续存放的</em>）</li>\n<li>一维数组的定义格式如下：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">数据类型 数组名<span class=\"hljs-selector-attr\">[数组大小]</span>；<br></code></pre></td></tr></table></figure>\n<ul>\n<li>数组大小必须是<strong>整数常量</strong>，不可以是变量。</li>\n</ul>\n<h4 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\"></a> 冒泡排序</h4>\n<ul>\n<li>冒泡的本质是在于<strong>交换</strong>，即每次通过交换的方式把<strong>当前剩余元素</strong>的<strong>最大值</strong>移动到一端，而<strong>当剩余元素</strong>减少为<strong>0</strong>时，排序结束。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">7</span>] = &#123;<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>&#125;;<span class=\"hljs-comment\">//n=7</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">6</span>;i++)<span class=\"hljs-comment\">//整个过程执行n-1趟</span><br>    &#123;<br>        <span class=\"hljs-comment\">//每一趟中将左边元素与右边相邻元素依次对比，若大的数在左边，则交换这两个数</span><br>        <span class=\"hljs-comment\">//当该趟结束的时候，该趟的最大数被移到了该趟剩余数的最右边</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">7</span>-i;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(a[j]&gt;a[j+<span class=\"hljs-number\">1</span>])<br>            &#123;<br>                temp = a[j];<br>                a[j] = a[j+<span class=\"hljs-number\">1</span>];<br>                a[j+<span class=\"hljs-number\">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">6</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"二维数组\"><a class=\"markdownIt-Anchor\" href=\"#二维数组\"></a> 二维数组</h4>\n<ul>\n<li>二维数组是一位数组的扩展：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">数据类型 数组名[第一维大小][第二维大小];<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>int a[5][6]</code>数组的直观理解：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310182107408.png\" alt=\"\" /></p>\n<ul>\n<li><strong>特别提醒：<strong>如果数组的大小较大，大概在$$10^6$$的级别，则</strong>需要定义在主函数外面</strong>，否则会使得程序异常退出，原因是函数内部申请的局部变量来自<strong>系统栈</strong>，所允许申请的<strong>空间较小</strong>；而函数外部申请的全局变量来自<strong>静态存储区</strong>，允许申请的<strong>空间较大</strong>。</li>\n</ul>\n<h4 id=\"memset对数组中每个元素赋相同的初值\"><a class=\"markdownIt-Anchor\" href=\"#memset对数组中每个元素赋相同的初值\"></a> memset——对数组中每个元素赋相同的初值</h4>\n<ul>\n<li>\n<p><strong>需要注意的是</strong>：<code>memset</code>使用的是按<strong>字节</strong>赋值，即对<strong>每个字节</strong>赋相同的值，这样的话，在<code>int</code>型数组中每个数据的<strong>四个字节</strong>都会被分配为<strong>相同的值</strong>，因此为了避免出错，只建议对非<code>char</code>型的数组赋值为<strong>0</strong>和**-1**；</p>\n</li>\n<li>\n<p>使用<code>memset</code>对数组赋值时需要用<code>#include&lt;string.h&gt;</code>头文件；</p>\n</li>\n<li>\n<p><code>memset</code>函数的格式为：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">memset</span>(数组名，赋的数值，<span class=\"hljs-built_in\">sizeof</span>(数组名));<br></code></pre></td></tr></table></figure>\n<h4 id=\"字符数组\"><a class=\"markdownIt-Anchor\" href=\"#字符数组\"></a> 字符数组</h4>\n<h5 id=\"字符数组的初始化\"><a class=\"markdownIt-Anchor\" href=\"#字符数组的初始化\"></a> 字符数组的初始化</h5>\n<ul>\n<li>和普通数组一样，字符数组也可以采用循环的方法初始化；</li>\n<li>除此之外，字符数组也可以通过<strong>直接赋值字符串</strong>来进行初始化（<strong>仅限于初始化</strong>，程序的其他位置不允许这样直接赋值整个字符串）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">&quot;YUGIN!&quot;</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">6</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,str[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs erlang-repl\">YUGIN!<br></code></pre></td></tr></table></figure>\n<h5 id=\"字符数组的输入输出\"><a class=\"markdownIt-Anchor\" href=\"#字符数组的输入输出\"></a> 字符数组的输入输出</h5>\n<h6 id=\"scanf输入printf输出\"><a class=\"markdownIt-Anchor\" href=\"#scanf输入printf输出\"></a> scanf输入，printf输出</h6>\n<ul>\n<li>\n<p><code>scanf</code>和<code>printf</code>对字符类型有<code>%c</code>和<code>%s</code>两种格式，其中<code>%c</code>用来输入<strong>单个字符</strong>，<code>%s</code>用来输入<strong>一个字符串</strong>并存在<strong>字符数组</strong>中。</p>\n</li>\n<li>\n<p><code>%c</code>格式能够识别<strong>空格</strong>和<strong>换行符</strong>并将其输入，<code>%s</code>通过<strong>空格</strong>或<strong>换行符</strong>来识别<strong>一个字符串的结束</strong>。</p>\n</li>\n<li>\n<p><code>scanf</code>在使用<code>%s</code>时，后面对应的数组名是不需要加<code>&amp;</code><strong>取地址运算符</strong>的。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">10</span>];<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输入输出：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">输入：<span class=\"hljs-built_in\">test</span> <span class=\"hljs-built_in\">test</span> <span class=\"hljs-built_in\">test</span><br>输出：<span class=\"hljs-built_in\">test</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"getchar输入putchar输出\"><a class=\"markdownIt-Anchor\" href=\"#getchar输入putchar输出\"></a> getchar输入，putchar输出</h6>\n<ul>\n<li><code>getchar</code>和<code>putchar</code>分别用来输入和输出<strong>单个字符</strong>；</li>\n<li>输入和输出示例：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a;<br>    a=<span class=\"hljs-built_in\">getchar</span>();<br>    <span class=\"hljs-built_in\">getchar</span>();<span class=\"hljs-comment\">//可以用作吸收某些字符</span><br>    <span class=\"hljs-built_in\">putchar</span>(a);<br>    <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h6 id=\"gets输入puts输出\"><a class=\"markdownIt-Anchor\" href=\"#gets输入puts输出\"></a> gets输入，puts输出</h6>\n<ul>\n<li><code>gets</code>用来输入<strong>一行字符串</strong>（即<strong>一个一维数组</strong>，只有遇到<code>\\n</code>时结束）</li>\n<li><code>puts</code>用来输出一行字符串（即一个一维数组，只有遇到<code>\\n</code>时结束）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">char</span> b[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">10</span>];<br>    <span class=\"hljs-built_in\">gets</span>(a);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">gets</span>(b[i]);<br>    &#125;<br>    <span class=\"hljs-built_in\">puts</span>(a);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">puts</span>(b[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输入输出示例：</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">输入：<br>this <span class=\"hljs-keyword\">is</span> <br>yugin<span class=\"hljs-symbol\">&#x27;s</span><br>blog<br>输出：<br>this <span class=\"hljs-keyword\">is</span> <br>yugin<span class=\"hljs-symbol\">&#x27;s</span><br>blog<br></code></pre></td></tr></table></figure>\n<h5 id=\"字符数组的存放方式\"><a class=\"markdownIt-Anchor\" href=\"#字符数组的存放方式\"></a> 字符数组的存放方式</h5>\n<ul>\n<li>由于<strong>字符数组</strong>是由若干个<code>char</code>类型的元素组成，因此<strong>字符数组</strong>的每一位都是一个<code>char</code>字符。</li>\n<li>在<strong>一维数组</strong>（或是<strong>二维数组的第二维</strong>）的末尾都有一个<strong>空字符</strong><code>\\0</code>，用于表示存放的<strong>字符串的结尾</strong>。</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221521845.png\" alt=\"\" /></p>\n<ul>\n<li>特别注意：<strong>空字符</strong><code>\\0</code>的<strong>ASCII</strong>码为<strong>0</strong>，即空字符<code>NULL</code>，会占用一个<strong>字符位</strong>，因此在初始化的时候<strong>数组长度</strong>至少比<strong>字符串长度</strong>多一个长度。</li>\n<li>如果不是使用<code>scanf</code>函数的<code>%s</code>格式或<code>gets</code>函数输入字符串（例如使用<code>getchar</code>），则需要手动在字符数组最后加入<code>\\0</code>，否则输出字符串会因为无法识别字符串末尾而输出<strong>乱码</strong>。</li>\n</ul>\n<h4 id=\"stringh头文件\"><a class=\"markdownIt-Anchor\" href=\"#stringh头文件\"></a> string.h头文件</h4>\n<ul>\n<li><code>string.h</code>头文件包含了许多用于字符数组的函数。</li>\n</ul>\n<h5 id=\"strlen函数\"><a class=\"markdownIt-Anchor\" href=\"#strlen函数\"></a> strlen()函数</h5>\n<ul>\n<li><code>strlen()</code>函数可以得到字符数组中第一个<code>\\0</code>前的字符的个数并返回，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">len = <span class=\"hljs-built_in\">strlen</span>(字符数组)；<br></code></pre></td></tr></table></figure>\n<h5 id=\"strcmp函数\"><a class=\"markdownIt-Anchor\" href=\"#strcmp函数\"></a> strcmp()函数</h5>\n<ul>\n<li>strcmp函数返回两个字符串大小的比较结果，比较原则是字典序，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cmp = <span class=\"hljs-built_in\">strcmp</span>(字符数组<span class=\"hljs-number\">1</span>，字符数组<span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>字典序的解释：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221535589.png\" alt=\"\" /></p>\n<h5 id=\"strcpy函数\"><a class=\"markdownIt-Anchor\" href=\"#strcpy函数\"></a> strcpy()函数</h5>\n<ul>\n<li><code>strcpy()</code>函数可以把一个字符串复制给另一个字符串，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">strcpy</span>(字符数组<span class=\"hljs-number\">1</span>,字符数组<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">puts</span>(字符数组<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：是把<strong>字符数组2</strong>复制给<strong>字符数组1</strong>，包括<strong>结束符</strong><code>\\0</code>；</li>\n</ul>\n<h5 id=\"strcat函数\"><a class=\"markdownIt-Anchor\" href=\"#strcat函数\"></a> strcat()函数</h5>\n<ul>\n<li><code>strcat()</code>可以把一个字符串接到另一个字符串后面，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">strcpy</span>(字符数组<span class=\"hljs-number\">1</span>,字符数组<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">puts</span>(字符数组<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：是把<strong>字符数组2</strong>接到<strong>字符数组1</strong>后面；</li>\n</ul>\n<h5 id=\"sscanf和sprintf\"><a class=\"markdownIt-Anchor\" href=\"#sscanf和sprintf\"></a> sscanf()和sprintf()</h5>\n<ul>\n<li>\n<p><code>sscanf()</code>和<code>sprintf()</code>是处理字符串问题的利器！</p>\n</li>\n<li>\n<p><code>sscanf()</code>和<code>sprintf()</code>的使用格式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">sscanf(<span class=\"hljs-name\">str</span>,<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-symbol\">&amp;n</span>)<span class=\"hljs-comment\">;</span><br>sprintf(<span class=\"hljs-name\">str</span>,<span class=\"hljs-string\">&quot;%d&quot;</span>,n)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>上面<code>sscanf()</code>写法的作用是把字符数组<code>str</code>的中的内容以<code>&quot;%d&quot;</code>的格式写到<code>n</code>中（<strong>从左到右</strong>）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">20</span>] = <span class=\"hljs-string\">&quot;123&quot;</span>;<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">sscanf</span>(a,<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,n);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123<br></code></pre></td></tr></table></figure>\n<ul>\n<li>上面<code>sprintf()</code>写法的作用是把<code>n</code>以<code>&quot;%d&quot;</code>的格式写到<code>str</code>字符数组中（<strong>从右到左</strong>）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">123433</span>;<br>    <span class=\"hljs-built_in\">sprintf</span>(a,<span class=\"hljs-string\">&quot;%d&quot;</span>,n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123433<br></code></pre></td></tr></table></figure>\n<ul>\n<li>上面的仅仅是简单的应用，实际上<code>sscanf()</code>和<code>sprintf()</code>可以进行更加复杂的字符串处理：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">520</span>;<br>    <span class=\"hljs-type\">double</span> db=<span class=\"hljs-number\">2002.080512121</span>;<br>    <span class=\"hljs-type\">char</span> str2[<span class=\"hljs-number\">20</span>]=<span class=\"hljs-string\">&quot;yugin!&quot;</span>;<br>    <span class=\"hljs-type\">char</span> str3[<span class=\"hljs-number\">20</span>]=<span class=\"hljs-string\">&quot;I&quot;</span>;<br>    <span class=\"hljs-built_in\">sprintf</span>(str,<span class=\"hljs-string\">&quot;%s%d%s,%.4f&quot;</span>,str3,n,str2,db);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">I520yugin</span>!,<span class=\"hljs-number\">2002</span>.<span class=\"hljs-number\">0805</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>最后指出，<code>sscanf()</code>和<code>sprintf()</code>也可以支持正则表达式，则许多字符串问题将迎刃而解。</li>\n</ul>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<ul>\n<li>函数是一个实现一定功能的语句的集合，并在需要时可以反复调用而不必每次都重新写一遍。</li>\n<li>函数的基本语法格式：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221718986.png\" alt=\"\" /></p>\n<h4 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\"></a> 全局变量</h4>\n<ul>\n<li>全局变量是指在定义之后的所有程序段内都有效的变量（即定义在所有函数之前）</li>\n</ul>\n<h4 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\"></a> 局部变量</h4>\n<ul>\n<li>与全局变量相对，局部变量定义在函数内部，且只在函数内部生效，函数结束时局部变量便销毁。</li>\n</ul>\n<h4 id=\"再谈main函数\"><a class=\"markdownIt-Anchor\" href=\"#再谈main函数\"></a> 再谈main()函数</h4>\n<ul>\n<li>主函数对一个程序而言只有一个，且无论主函数写在哪个位置，整个程序一定是从主函数的第一个语句开始执行，然后在需要时再调用其他函数。</li>\n<li><code>main()</code>函数的结构：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221723044.png\" alt=\"\" /></p>\n<h4 id=\"以数组作为函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#以数组作为函数的参数\"></a> 以数组作为函数的参数</h4>\n<ul>\n<li>函数的参数可以是数组，且数组作为参数时，参数中数组的第一维不需要填写长度（如果是二维数组，则<strong>第二维需要填写长度</strong>）</li>\n<li>数组作为参数时，在函数中对数组元素的修改就<strong>等同于对原素组进行修改</strong>（与普通的局部变量不同）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">changStr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[],<span class=\"hljs-type\">int</span> b[][<span class=\"hljs-number\">3</span>])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    a[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;<br>    a[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">3</span>;<br>    b[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">5</span>;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> inter[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-type\">int</span> in[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">changStr</span>(inter,in);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,inter[<span class=\"hljs-number\">0</span>]);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,inter[<span class=\"hljs-number\">1</span>]);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,in[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1<br>3<br>5<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：虽然数组可以作为参数，但是却不允许作为返回类型出现。</li>\n</ul>\n<h4 id=\"函数的嵌套调用\"><a class=\"markdownIt-Anchor\" href=\"#函数的嵌套调用\"></a> 函数的嵌套调用</h4>\n<ul>\n<li>函数的嵌套调用是指在一个函数中调用另一个函数，调用方式和<code>main()</code>函数调用其他函数一样。</li>\n</ul>\n<h4 id=\"函数递归调用\"><a class=\"markdownIt-Anchor\" href=\"#函数递归调用\"></a> 函数递归调用</h4>\n<ul>\n<li>\n<p>函数递归调用是指一个函数调用该函数本身；</p>\n</li>\n<li>\n<p>类似下面计算n的阶乘的代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)*n;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(a));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">6<br></code></pre></td></tr></table></figure>\n<h3 id=\"指针\"><a class=\"markdownIt-Anchor\" href=\"#指针\"></a> 指针</h3>\n<h4 id=\"什么是指针\"><a class=\"markdownIt-Anchor\" href=\"#什么是指针\"></a> 什么是指针</h4>\n<ul>\n<li>在C语言中，<strong>指针</strong>就是<strong>内存地址</strong>，<strong>指针变量</strong>是指用来<strong>存放内存地址的变量</strong>。</li>\n<li>在C/C++语言中，<strong>指针</strong>一般被认为是<strong>指针变量</strong>，指针变量的内容存储的是<strong>其指向的对象的首地址</strong>，指向的对象可以是<strong>变量</strong>（指针变量也是变量），<strong>数组</strong>，<strong>函数</strong>等<strong>占据存储空间的实体</strong>。</li>\n<li>只要在变量前面加上<code>&amp;</code>，就表示变量的地址。</li>\n<li>指针是一个<code>unsigned</code>类型的函数。</li>\n</ul>\n<h4 id=\"指针变量\"><a class=\"markdownIt-Anchor\" href=\"#指针变量\"></a> 指针变量</h4>\n<ul>\n<li>指针变量是用来存放指针（或者可以理解为地址）。</li>\n<li>在某种数据类型后加<code>*</code>来表示这是一个指针变量，定义如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> *p;<br><span class=\"hljs-type\">double</span> *p;<br><span class=\"hljs-type\">char</span> *p;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>给指针变量赋值的方式一般是把变量的地址取出来，然后赋给对应类型的指针变量：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> a;<br><span class=\"hljs-type\">int</span> *p = &amp;a;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果<code>p</code>是指针（即<code>p</code>保存的是某个数据类型的地址），则<code>*p</code>就是这个地址所存放的元素：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-type\">int</span> *p = &amp;a;<br>    a=<span class=\"hljs-number\">233</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,*p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">233<br></code></pre></td></tr></table></figure>\n<ul>\n<li>指针变量也可以进行加减法，其中<strong>减法</strong>的结果是两个地址偏移的距离。</li>\n<li>例如，对于<code>int*</code>类型的指针变量<code>p</code>而言，<code>p+1</code>是指<code>p</code>所指的int型变量的下一个<code>int</code>型变量地址，这个所谓的“下一个”是跨越了一整个<code>int</code>型（即<strong>4Byte</strong>）。</li>\n<li>指针变量也支持自增和自减的操作，示例如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-type\">int</span> *p = &amp;a;<br>    a=<span class=\"hljs-number\">233</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,p);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,p+<span class=\"hljs-number\">1</span>);<br>    p++;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">113245364</span><br><span class=\"hljs-number\">113245368</span><br><span class=\"hljs-number\">113245368</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"指针与数组\"><a class=\"markdownIt-Anchor\" href=\"#指针与数组\"></a> 指针与数组</h4>\n<ul>\n<li><strong>数组名称</strong>作为<strong>首地址</strong>使用，因此<code>a == &amp;a[0]</code>和<code>a+i == &amp;a[i]</code>成立。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">10</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>&#125;;<br>    <span class=\"hljs-type\">int</span> *p = a;<br>    <span class=\"hljs-type\">int</span> *q;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,p);<br>    q=&amp;a[<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,q);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,q-p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">1241512688</span><br><span class=\"hljs-number\">1241512708</span><br><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>&amp;a[0]</code>和<code>&amp;a[5]</code>之间相差5个<code>int</code>（<strong>4个Byte</strong>），因此输出5。</li>\n</ul>\n<h4 id=\"使用指针变量作为函数参数\"><a class=\"markdownIt-Anchor\" href=\"#使用指针变量作为函数参数\"></a> 使用指针变量作为函数参数</h4>\n<ul>\n<li>指针类型也可以作为<strong>函数参数</strong>的类型，这时视为把<strong>变量的地址</strong>传入函数。如果在函数中对这个地址中的元素进行改变，原先的数据就会确实地被改变。</li>\n<li>使用指针编写交换数据地函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//交换函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">my_swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> *b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp;<br>    temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-built_in\">my_swap</span>(&amp;a,&amp;b);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;a=%d b=%d&quot;</span>,a,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-attribute\">a</span>=2 <span class=\"hljs-attribute\">b</span>=1<br></code></pre></td></tr></table></figure>\n<h4 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\"></a> 引用</h4>\n<h5 id=\"引用的含义\"><a class=\"markdownIt-Anchor\" href=\"#引用的含义\"></a> 引用的含义</h5>\n<ul>\n<li>引用是<strong>C++<strong>中一个强有力的语法，引用不产生</strong>副本</strong>，而是给原变量起了个<strong>别名</strong>。</li>\n<li>因此<strong>对引用变量操作就是对原变量操作</strong>。</li>\n<li>引用使用方法只需要在参数类型后面变量名前面加<code>&amp;</code>就行，例子如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//引用示例函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> &amp;x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    x=<span class=\"hljs-number\">5</span>;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">88</span>;<br>    <span class=\"hljs-built_in\">change</span>(b);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;b=%d&quot;</span>,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\"><span class=\"hljs-attribute\">b</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意要把<strong>引用</strong>的<code>&amp;</code>和取<strong>地址运算符</strong><code>&amp;</code>区分开来，引用并不是取地址的意思。</li>\n</ul>\n<h5 id=\"指针的引用\"><a class=\"markdownIt-Anchor\" href=\"#指针的引用\"></a> 指针的引用</h5>\n<ul>\n<li>通过引用和函数来更改变量指针的地址：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//交换函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">my_swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>* &amp;p1,<span class=\"hljs-type\">int</span>* &amp;p2)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span>* temp = p1;<br>    p1 = p2;<br>    p2 = temp;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-type\">int</span>* p_a = &amp;a;<br>    <span class=\"hljs-type\">int</span>* p_b = &amp;b;<br>    <span class=\"hljs-built_in\">my_swap</span>(p_a,p_b);<span class=\"hljs-comment\">//必须用指针变量传入，引用不可以使用常量。</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;a=%d b=%d&quot;</span>,*p_a,*p_b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-attribute\">a</span>=2 <span class=\"hljs-attribute\">b</span>=1<br></code></pre></td></tr></table></figure>\n<ul>\n<li>需要强调的是，<strong>引用</strong>是产生<strong>变量的别名</strong>，因此<strong>常量不可使用引用</strong>，上述代码不可写成<code>my_swap(&amp;a,&amp;b);</code>，必须用<strong>指针变量</strong>进行传入。</li>\n</ul>\n<h3 id=\"结构体struct的使用\"><a class=\"markdownIt-Anchor\" href=\"#结构体struct的使用\"></a> 结构体(struct)的使用</h3>\n<h4 id=\"结构体的定义\"><a class=\"markdownIt-Anchor\" href=\"#结构体的定义\"></a> 结构体的定义</h4>\n<ul>\n<li>定义一个结构体的基本格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Name</span>&#123;<br>  <span class=\"hljs-comment\">//一些基本的数据结构或者自定义的数据类型</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>结构体可以这样定义：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\t<span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>\t<span class=\"hljs-type\">char</span> major[<span class=\"hljs-number\">20</span>];<br>&#125;Alice,Bob,stu[<span class=\"hljs-number\">1000</span>];<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>其中<code>studentInfo</code>是这个结构体的名字，内部定义了相关的数据。<strong>大括号外</strong>定义了<strong>结构体变量</strong>和<strong>结构体数组</strong>。</p>\n</li>\n<li>\n<p>结构体同样能够像基本数据类型那样定义：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">studentInfo Alice;<br>studentInfo stu[<span class=\"hljs-number\">1000</span>];<br></code></pre></td></tr></table></figure>\n<ul>\n<li>值得注意的是，结构体里面能够定义除了自己本身之外的任何数据类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span>&#123;<br>\tnode n;<span class=\"hljs-comment\">//不能定义node型变量，因为和本身一致</span><br>\tnode* next;<span class=\"hljs-comment\">//可以定义node*型指针变量</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>虽然不能定义自己本身，但是可以定义自身类型的指针变量。</li>\n</ul>\n<h4 id=\"访问结构体内的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问结构体内的元素\"></a> 访问结构体内的元素</h4>\n<ul>\n<li>访问结构体内的元素有两种方法：<code>&quot;.&quot;</code>和<code>&quot;-&gt;&quot;</code>操作。</li>\n<li>如果把<code>studentInfo</code>定义成如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\tstudentInfo* next;<br>&#125;stu,*p;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>这样<code>studentInfo</code>中多了一个指针<code>next</code>用来指向下一个学生的地址，且结构体变量中定义了<strong>普通变量</strong><code>stu</code>和<strong>指针变量</strong><code>p</code>。</p>\n</li>\n<li>\n<p>因此访问<code>stu</code>中的变量的写法如下：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">stu.id<br>stu.gender<br>stu.next<br></code></pre></td></tr></table></figure>\n<ul>\n<li>访问指针变量<code>p</code>中的元素的写法如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">(*p).<span class=\"hljs-built_in\">id</span><br>(*p).<span class=\"hljs-built_in\">gender</span><br>(*p).next<br></code></pre></td></tr></table></figure>\n<ul>\n<li>还有一种访问结构体指针变量内元素更加简洁的写法：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">p-&gt;id<br>p-&gt;gender<br>p-&gt;next<br></code></pre></td></tr></table></figure>\n<h4 id=\"结构体的初始化\"><a class=\"markdownIt-Anchor\" href=\"#结构体的初始化\"></a> 结构体的初始化</h4>\n<ul>\n<li>结构体的初始化推荐使用<strong>构造函数</strong>的方法。</li>\n<li>构造函数的特点是<strong>函数名与结构体名一致</strong>而且<strong>不需要写返回函数</strong>。</li>\n<li>其中自己定义构造函数的格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\t<span class=\"hljs-comment\">//以下构造函数的参数用于对结构体内部变量进行赋值</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-type\">int</span> _id,<span class=\"hljs-type\">char</span> _gender)<br>\t&#123;<br>\t\tid = _id;<br>\t\tgender = _gender;<br>\t&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>根据上述代码，即可直接对结构体的变量进行赋值：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">studentInfo stu = <span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-number\">20020805</span>,<span class=\"hljs-string\">&#x27;M&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>需要注意，如果<strong>自己重新定义了构造函数</strong>，则不能不经初始化就定义结构体变量，如下定义能够适应更多不同的场合：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\t<span class=\"hljs-comment\">//原始构造函数，用以不初始化就定义结构体变量</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>()&#123;&#125;<br>\t<span class=\"hljs-comment\">//只初始化gender的构造函数</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-type\">char</span> _gender)<br>\t&#123;<br>\t\tgender = _gender;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//以下构造函数的参数用于对结构体内部两个变量进行赋值</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-type\">int</span> _id,<span class=\"hljs-type\">char</span> _gender)<br>\t&#123;<br>\t\tid = _id;<br>\t\tgender = _gender;<br>\t&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h3 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h3>\n<h4 id=\"cin和cout\"><a class=\"markdownIt-Anchor\" href=\"#cin和cout\"></a> cin和cout</h4>\n<ul>\n<li>cin和cout是C++的输入输出函数，需要添加头文件<code>#include &lt;iostream&gt;</code>和<code>using namespace std;</code>才能使用。</li>\n</ul>\n<h5 id=\"cin\"><a class=\"markdownIt-Anchor\" href=\"#cin\"></a> cin</h5>\n<ul>\n<li><code>cin</code>采用输入运算符<code>&quot;&gt;&gt;&quot;</code>来进行输入，例如</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cin &gt;&gt; n &gt;&gt; db &gt;&gt; c &gt;&gt; str;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果想读入一整行，则需要<code>getline</code>函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];<br>cin.<span class=\"hljs-built_in\">getline</span>(str,<span class=\"hljs-number\">100</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果是<code>string</code>容器，则需要使用以下方式输入：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];<br><span class=\"hljs-built_in\">getline</span>(cin,str);<br></code></pre></td></tr></table></figure>\n<h5 id=\"cout\"><a class=\"markdownIt-Anchor\" href=\"#cout\"></a> cout</h5>\n<ul>\n<li><code>cout</code>采用输出运算符<code>&quot;&lt;&lt;&quot;</code>来进行输出，例如</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cout &lt;&lt; n &lt;&lt; db &lt;&lt; c &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span> &lt;&lt; str &lt;&lt; endl;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>endl</code>和<code>'\\n'</code>都是表示换行的意思。</li>\n<li>由于<code>cin</code>和<code>cout</code>在输入和输出大量数据时表现糟糕，因此不建议使用。</li>\n</ul>\n<h4 id=\"浮点数的比较\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的比较\"></a> 浮点数的比较</h4>\n<ul>\n<li>由于计算机中采用有限二进制编码，存储并不总是准确，因此需要需要引入极小数<code>eps</code>来对这种误差进行纠正。</li>\n<li>圆周率<code>pi</code>的表达式可以使用<code>acos(-1.0)</code>来进行表示。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> esp = <span class=\"hljs-number\">1e-8</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> pi = <span class=\"hljs-built_in\">acos</span>(<span class=\"hljs-number\">-1.0</span>);<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Equ(a,b) (fabs(a-b)&lt;eps)</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"黑盒测试\"><a class=\"markdownIt-Anchor\" href=\"#黑盒测试\"></a> 黑盒测试</h3>\n<h4 id=\"单点测试\"><a class=\"markdownIt-Anchor\" href=\"#单点测试\"></a> 单点测试</h4>\n<ul>\n<li>对于单点测试而言，单点测试只需要按照正常逻辑执行一遍程序即可，是“一次性”的写法，即程序只需要一组数据能够完整执行即可。</li>\n</ul>\n<h4 id=\"多点测试\"><a class=\"markdownIt-Anchor\" href=\"#多点测试\"></a> 多点测试</h4>\n<ul>\n<li>对于多点测试，要求程序能够一次运行所有数据，并要求所有输出的结果都必须正确。</li>\n</ul>\n<h5 id=\"whileeof型\"><a class=\"markdownIt-Anchor\" href=\"#whileeof型\"></a> while…EOF型</h5>\n<ul>\n<li>当题目没有说明有多少数据读入时，就可以利用<code>scanf</code>返回值是否为<code>EOF</code>来判断输入是否结束。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n) != EOF)&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果读入的是字符串，其对应写法如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str) != EOF)&#123;<br>\t...<br>&#125;<br><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">gets</span>(str) != <span class=\"hljs-literal\">NULL</span>)&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"入门模拟\"><a class=\"markdownIt-Anchor\" href=\"#入门模拟\"></a> 入门模拟</h2>\n<h3 id=\"再谈字符串输入输出\"><a class=\"markdownIt-Anchor\" href=\"#再谈字符串输入输出\"></a> 再谈字符串输入输出</h3>\n<ul>\n<li>在比较早的<code>C/C++</code>版本中，经常可以看到推荐使用<code>gets</code>函数来进行整行字符串的输入，就像下面这样的简单写法即可输入一整行：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">gets</span>(str);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>但是当输入的字符串长度超过数组长度上限<code>MAX_LEN</code>时，<code>gets</code>函数会把超出的部分也一并读进来，并且会覆盖数组之外的内存空间，这就导致了一定的安全风险，因此<code>C++11</code>标准将<code>gets</code>函数废弃了，然后在<code>C++14</code>时将该函数移除，如果现在想要整行输入的话，推荐使用<code>cin.getline</code>函数（见下文）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cin.<span class=\"hljs-built_in\">getline</span>(str, MAX_LEN);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>例如下面一道例题：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//题目：输入一行字符串，然后直接输出这行字符串本身。</span><br><span class=\"hljs-comment\">//输入描述：一行由大小写字母或空格组成的字符串，至少一个字符，不超过50个字符。</span><br><span class=\"hljs-comment\">//输出描述：原样输出输入的字符串。</span><br><span class=\"hljs-comment\">//**************************样例**************************</span><br><span class=\"hljs-comment\">//输入：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo</span><br><span class=\"hljs-comment\">//输出：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo</span><br><span class=\"hljs-comment\">//**************************代码**************************</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN = <span class=\"hljs-number\">1000000</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAX_LEN);<span class=\"hljs-comment\">//由gets(str);函数换成了cin.getline(str,MAX_LEN);</span><br>    <span class=\"hljs-built_in\">puts</span>(str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"再谈sscanf和sprintf\"><a class=\"markdownIt-Anchor\" href=\"#再谈sscanf和sprintf\"></a> 再谈sscanf()和sprintf()</h3>\n<h4 id=\"关于sscanf\"><a class=\"markdownIt-Anchor\" href=\"#关于sscanf\"></a> 关于sscanf()</h4>\n<ul>\n<li>\n<p><code>sscanf</code>是C语言标准库中的一个函数，用于从字符串中读取格式化输入。在C<ins>中也可以使用<code>sscanf</code>函数，但更常用的是使用C</ins>标准库中的<code>stringstream</code>类来进行字符串解析。</p>\n</li>\n<li>\n<p><code>sscanf</code>函数的原型如下：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sscanf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* format, ...)</span></span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>其中，<code>str</code>是要解析的字符串，<code>format</code>是格式化字符串，用于指定解析的规则，<code>...</code>是可变参数列表，用于接收解析出来的数据。</p>\n</li>\n<li>\n<p>与之相似的函数还有<code>scanf</code>和<code>fscanf</code>。其中，<code>scanf</code>从标准输入（通常是键盘）读取数据，而<code>fscanf</code>从文件中读取数据。</p>\n</li>\n</ul>\n<p>在使用<code>sscanf</code>函数时，需要注意以下几点：</p>\n<ul>\n<li><code>format</code>字符串中可以包含格式说明符，如 <code>%d</code>, <code>%f</code>, <code>%s</code>, <code>%c</code>, <code>%x</code>, <code>%o</code>, <code>%u</code>, <code>%e</code>, <code>%g</code>, <code>%p</code>, <code>%n</code>, 等等。</li>\n<li><code>format</code>字符串中可以包含空格、制表符、换行符等空白字符，用于跳过输入字符串中的空白字符。</li>\n<li><code>format</code>字符串中可以包含方括号 <code>[]</code>，用于指定一个字符集合。例如，<code>%[a-z]</code> 表示匹配小写字母。</li>\n<li><code>format</code>字符串中可以包含星号 <code>*</code>，表示跳过该项输入。</li>\n<li><code>sscanf()</code> 函数<strong>返回成功匹配并赋值的个数</strong>。如果返回值小于参数个数，则表示解析失败。</li>\n</ul>\n<p>基于最后一条性质可以实现下述例题：</p>\n<ul>\n<li>题目描述：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">给定一个字符串，它可能是以下三种格式中的一种：<br><br><span class=\"hljs-selector-tag\">A</span> is greater than <span class=\"hljs-selector-tag\">B</span><br><span class=\"hljs-selector-tag\">A</span> is equal <span class=\"hljs-selector-tag\">to</span> <span class=\"hljs-selector-tag\">B</span> plus C<br>No Information<br>其中前两种情况中的<span class=\"hljs-selector-tag\">A</span>、<span class=\"hljs-selector-tag\">B</span>、C均为正整数，而第三种情况中没有数字。请确认字符串代表的信息是否从算术上成立，如果成立，那么输出Yes；否则输出No；如果是第三种情况，那么输出三个问号（即???）。<br><br>注：<br><br><span class=\"hljs-number\">1</span>、请将字符串整行读入后使用sscanf函数进行处理<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输入描述：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">一行满足题意的字符串，其中<span class=\"hljs-selector-tag\">A</span>、<span class=\"hljs-selector-tag\">B</span>、C为不超过<span class=\"hljs-number\">100</span>的正整数。<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出描述：</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">根据题意输出<span class=\"hljs-title class_\">Yes</span>、<span class=\"hljs-title class_\">No</span>或<span class=\"hljs-string\">??</span><span class=\"hljs-string\">?。</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>样例：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*样例1*</span>**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span>**<br>输入:<br>10 is greater than 5<br>输出:<br>Yes<br><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*样例2*</span>**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span>**<br>输入:<br>6 is equal to 1 plus 3<br>输出:<br>No<br><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*样例3*</span>**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span>**<br>输入:<br>No Information<br>输出:<br>???<br></code></pre></td></tr></table></figure>\n<ul>\n<li>实现代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN = <span class=\"hljs-number\">1000</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> A = <span class=\"hljs-number\">0</span>,B = <span class=\"hljs-number\">0</span>,C = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAX_LEN);<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">sscanf</span>(str,<span class=\"hljs-string\">&quot;%d is greater than %d&quot;</span>,&amp;A,&amp;B) == <span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">//利用sscanf() 函数返回成功匹配并赋值的个数。</span><br>    &#123;<br>       <span class=\"hljs-keyword\">if</span>(A&gt;B)<br>       &#123;<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>       &#125;<br>       <span class=\"hljs-keyword\">else</span><br>       &#123;<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>       &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">sscanf</span>(str,<span class=\"hljs-string\">&quot;%d is equal to %d plus %d&quot;</span>,&amp;A,&amp;B,&amp;C) == <span class=\"hljs-number\">3</span>)<span class=\"hljs-comment\">//利用sscanf() 函数返回成功匹配并赋值的个数。</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(A==B+C)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;???&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：利用<code>sscanf()</code> 函数返回成功匹配并赋值的个数，从而能够很好地解决问题。</li>\n</ul>\n<h4 id=\"关于sprintf\"><a class=\"markdownIt-Anchor\" href=\"#关于sprintf\"></a> 关于sprintf()</h4>\n<ul>\n<li>\n<p><code>sprintf</code>是C语言标准库中的一个函数，用于将格式化的数据写入字符串中。在C<ins>中也可以使用<code>sprintf</code>函数，但更常用的是使用C</ins>标准库中的<code>ostringstream</code>类来进行字符串解析。</p>\n</li>\n<li>\n<p><code>sprintf</code>函数的原型如下：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sprintf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>其中，<code>str</code>是要写入的字符串，<code>format</code>是格式化字符串，用于指定写入的规则，<code>...</code>是可变参数列表，用于接收要写入的数据。</p>\n</li>\n<li>\n<p>与之相似的函数还有<code>printf</code>和<code>fprintf</code>。其中，<code>printf</code>将输出写入标准输出（通常是屏幕），而<code>fprintf</code>将输出写入文件。</p>\n</li>\n</ul>\n<p>在使用<code>sprintf</code>函数时，需要注意以下几点：</p>\n<ul>\n<li><code>format</code>字符串中可以包含格式说明符，如 <code>%d</code>, <code>%f</code>, <code>%s</code>, <code>%c</code>, <code>%x</code>, <code>%o</code>, <code>%u</code>, <code>%e</code>, <code>%g</code>, <code>%p</code>, <code>%n</code>, 等等。</li>\n<li><code>format</code>字符串中可以包含空格、制表符、换行符等空白字符，用于控制输出格式。</li>\n<li><code>format</code>字符串中可以包含方括号 <code>[]</code>，用于指定一个字符集合。例如，<code>%[a-z]</code> 表示匹配小写字母。</li>\n<li><code>sprintf()</code> **函数返回成功写入的字符数。**如果返回值小于0，则表示写入失败。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/2/5/37\">sprintf函数</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN = <span class=\"hljs-number\">1000</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    <span class=\"hljs-type\">int</span> year,month,day,hour,minute,second;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d&quot;</span>,&amp;year,&amp;month,&amp;day,&amp;hour,&amp;minute,&amp;second);<br>    <span class=\"hljs-built_in\">sprintf</span>(str,<span class=\"hljs-string\">&quot;%04d-%02d-%02d %02d:%02d:%02d&quot;</span>,year,month,day,hour,minute,second);<span class=\"hljs-comment\">//注意此处的ssprintf()函数注释将需要的字符串写入到字符串数组中</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<span class=\"hljs-comment\">//注意此处字符串数组需要采用printf()函数进行输出</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>总结：</p>\n</li>\n<li>\n<p>注意代码中的<code>ssprintf()</code>函数注释<strong>将需要的字符串写入到字符串数组</strong>中；</p>\n</li>\n<li>\n<p>注意代码最后的输出字符串数组需要采用<code>printf()</code>函数进行输出。</p>\n</li>\n</ul>\n<h3 id=\"再谈结构体与函数数组传参\"><a class=\"markdownIt-Anchor\" href=\"#再谈结构体与函数数组传参\"></a> 再谈结构体与函数数组传参</h3>\n<ul>\n<li>例题：<a href=\"https://sunnywhy.com/sfbj/2/8/43\">结构体与构造函数II</a></li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">15</span>];<br>    <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-built_in\">Student</span>()&#123;&#125;<br>    <span class=\"hljs-built_in\">Student</span>(<span class=\"hljs-type\">int</span> _id,<span class=\"hljs-type\">char</span> _name[])&#123;<span class=\"hljs-comment\">//函数中的数组传参</span><br>        id = _id;<br>        <span class=\"hljs-built_in\">strcpy</span>(name,_name);<span class=\"hljs-comment\">//复制字符串数组</span><br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    Student student;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">15</span>];<br>    <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;id);<br>    <span class=\"hljs-built_in\">getchar</span>();<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,name);<span class=\"hljs-comment\">//读入字符串。</span><br>    student = <span class=\"hljs-built_in\">Student</span>(id,name);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n%s&quot;</span>,student.id,student.name);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：注意上述代码中的函数数组传参，以及字符串数组赋值；</li>\n<li>注意如何利用<code>scanf()</code>函数读入字符串。</li>\n</ul>\n<h3 id=\"再谈cin和cout\"><a class=\"markdownIt-Anchor\" href=\"#再谈cin和cout\"></a> 再谈cin和cout</h3>\n<ul>\n<li>例题：<a href=\"https://sunnywhy.com/sfbj/2/9/45\">cin与cout</a></li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span><span class=\"hljs-comment\">//数据格式控制函数的头文件</span></span><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN  = <span class=\"hljs-number\">200</span>;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-type\">double</span> b;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class=\"hljs-built_in\">getchar</span>();<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAX_LEN);<br>    <span class=\"hljs-comment\">//fixed()函数与setprecision(int n)并用，可以控制小数点后面有n位。注意：setprecision()函数是控制有效数字的位数，而fixed()函数与setprecision(int n )函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！</span><br>    cout &lt;&lt; a &lt;&lt; endl &lt;&lt; fixed &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">2</span>) &lt;&lt; b &lt;&lt; endl &lt;&lt; str;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：</li>\n<li><code>#include &lt;iomanip&gt;</code>是数据格式控制函数的头文件；</li>\n<li>在使用<code>cout</code>函数输出的时候<code>fixed()</code>函数与<code>setprecision(int n)</code>并用，可以控制小数点后面有<strong>n位</strong>。注意：<code>setprecision()</code>函数是控制有效数字的位数，而<code>fixed()</code>函数与<code>setprecision(int n )</code>函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！</li>\n<li>如果只使用<code>setprecision(int n)</code> 函数效果如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cout &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">0.12345</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">1.23456</span> &lt;&lt; endl;<br><br>输出：<br><span class=\"hljs-number\">0.123</span><br><span class=\"hljs-number\">1.23</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>当要保留对应位数的小数(<strong>四舍五入</strong>)的时候，就需要采用<code>fixed()</code>函数，效果如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cout &lt;&lt; fixed &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">0.12345</span> &lt;&lt; endl;<br>cout &lt;&lt; fixed &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">1.23456</span> &lt;&lt; endl;<br><br>输出：<br><span class=\"hljs-number\">0.123</span><br><span class=\"hljs-number\">1.235</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"再谈浮点精度比较\"><a class=\"markdownIt-Anchor\" href=\"#再谈浮点精度比较\"></a> 再谈浮点精度比较</h3>\n<ul>\n<li>例题：<a href=\"https://sunnywhy.com/sfbj/2/9/46\">浮点精度比较</a></li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> eps = <span class=\"hljs-number\">1e-8</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a,b,c,d;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);<br>    <span class=\"hljs-type\">double</span> res1 = a* <span class=\"hljs-built_in\">asin</span>(<span class=\"hljs-built_in\">sqrt</span>(b) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-type\">double</span> res2 = c* <span class=\"hljs-built_in\">asin</span>(<span class=\"hljs-built_in\">sqrt</span>(d) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">if</span>(res1 - res2 &gt; eps)<span class=\"hljs-comment\">//公式1&gt;公式2</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(res2 - res1 &gt; eps)<span class=\"hljs-comment\">//公式2&gt;公式1</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：一般为了避免计算机精度误差造成浮点数大小比较不准，采用浮点数常量大小为<code>const double eps = 1e-8;</code>的数据来进行区分。</li>\n</ul>\n<h3 id=\"再谈if语句\"><a class=\"markdownIt-Anchor\" href=\"#再谈if语句\"></a> 再谈if语句</h3>\n<ul>\n<li><code>if(a==b==0)</code>和i<code>f(a==0&amp;&amp;b==0)</code>的区别：</li>\n<li>这两个表达式的区别在于它们的运算顺序不同。\n<ul>\n<li><code>if(a==b==0)</code>的运算顺序是先比较a和b是否相等(<code>a==b</code>)，然后再将<strong>结果</strong>与0比较。如果a和b都为0，但是<code>true</code>不等于0，所以表达式<code>a==b==0</code>为<code>false</code>。而当a和b<strong>不相等</strong>时，表达式<code>a==b==0</code>为<code>true</code>。</li>\n<li><code>if(a==0&amp;&amp;b==0)</code>的运算顺序是先判断a是否等于0，然后再判断b是否等于0。只有当a和b都等于0时，这个表达式的结果才为<code>true</code>；否则，结果为<code>false</code>。</li>\n<li>因此，这两个表达式的含义是不同的。需要特别注意！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单模拟\"><a class=\"markdownIt-Anchor\" href=\"#简单模拟\"></a> 简单模拟</h3>\n<ul>\n<li>简单模拟的题目不涉及算法，一般完全根据题目描述来进行代码编写，考察的是<strong>代码能力</strong>！</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/1/61\">2的幂</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> m = <span class=\"hljs-number\">1007</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> num;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num);<br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=num;i++)<br>    &#123;<br>        res = ((res%m)*(<span class=\"hljs-number\">2</span>%m))%m;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,res);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：该题的<strong>数据大小</strong>远大于<strong>C++<strong>中的<code>long long</code>类型，因此不能直接进行计算，需要根据题目提示的公式</strong>进行简化</strong>，从而正确计算得到结果！</li>\n</ul>\n<p>例题：<a href=\"https://pintia.cn/problem-sets/994805260223102976/exam/problems/994805289432236032?type=7&amp;page=0\">B1032 挖掘机技术哪家强</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-type\">int</span> list_chengji[<span class=\"hljs-number\">100010</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> num;<br>    <span class=\"hljs-type\">int</span> max_chengji=<span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//注意此处最大成绩设置为-1，否则无法通过最大成绩就是为0的测试点。</span><br>    <span class=\"hljs-type\">int</span> xuhao,chengji,res_xuhao;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)&#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;xuhao,&amp;chengji);<br>        list_chengji[xuhao]+=chengji;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;<span class=\"hljs-number\">100010</span>;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(list_chengji[k]&gt;max_chengji)<br>        &#123;<br>            max_chengji = list_chengji[k];<br>            res_xuhao = k;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>,res_xuhao,max_chengji);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这道题目要<strong>细心</strong>，注意在代码中计算最大成绩的时候<strong>初始值</strong>要设置为<code>-1</code>，否则无法通过最大成绩就是为<strong>0</strong>的测试点。</li>\n</ul>\n<h3 id=\"查找元素\"><a class=\"markdownIt-Anchor\" href=\"#查找元素\"></a> 查找元素</h3>\n<ul>\n<li>查找元素类题目：给定一些元素，然后查找某个满足某条件的元素。</li>\n<li>一般而言，如果需要在一个比较小范围的数据集中查找，那么直接遍历每一个数据即可。</li>\n<li>如果需要查找的范围比较大，可以采用<strong>二分查找</strong>等算法来进行更快速的查找。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/2/64\">寻找元素对</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-type\">int</span> list[<span class=\"hljs-number\">1010</span>];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;list[i]);<br>    &#125;<br>    <span class=\"hljs-type\">int</span> x,flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n<span class=\"hljs-number\">-1</span>;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=k+<span class=\"hljs-number\">1</span>;j&lt;n;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(x==list[k]+list[j])<br>            &#123;<br>                flag++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,flag);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"图形输出\"><a class=\"markdownIt-Anchor\" href=\"#图形输出\"></a> 图形输出</h3>\n<ul>\n<li>所谓图形，其实是由若干字符组成，因此只需要弄清楚规则就能编写代码，有以下两种方法：\n<ul>\n<li>通过规律直接进行输出；</li>\n<li>定义一个二维字符数组，通过规律填充字符数组，最后再输出整个二维数组。</li>\n</ul>\n</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/3/67\">画X</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-type\">char</span> list[<span class=\"hljs-number\">101</span>][<span class=\"hljs-number\">101</span>];<br>    <span class=\"hljs-built_in\">memset</span>(list,<span class=\"hljs-string\">&#x27; &#x27;</span>,<span class=\"hljs-built_in\">sizeof</span>(list));<span class=\"hljs-comment\">//初始化数组</span><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n;k++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(i&lt;n/<span class=\"hljs-number\">2</span>||i&gt;n/<span class=\"hljs-number\">2</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(k==i||k==n<span class=\"hljs-number\">-1</span>-i)<br>                &#123;<br>                    list[i][k]=<span class=\"hljs-string\">&#x27;*&#x27;</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(i==n/<span class=\"hljs-number\">2</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(k==i)<br>                &#123;<br>                    list[i][k]=<span class=\"hljs-string\">&#x27;*&#x27;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&lt;=n/<span class=\"hljs-number\">2</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n-i;k++)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,list[i][k]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;=i;k++)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,list[i][k]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这类型题目主要在于找到图案的规律，若图案比较复杂可以放在二维字符数组中进行输出，注意一下二维字符数组的初始化可以采用<code>memset(list,' ',sizeof(list));</code>函数！</li>\n</ul>\n<h3 id=\"日期处理\"><a class=\"markdownIt-Anchor\" href=\"#日期处理\"></a> 日期处理</h3>\n<ul>\n<li>日期处理问题主要考虑平年和闰年的关系(由此产生的二月天数之间的差别)、大月和小月的问题，细节比较繁杂！</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/4/73\">周几</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//初始化平年闰年的数组</span><br><span class=\"hljs-comment\">//0是平年，1是闰年</span><br><span class=\"hljs-type\">int</span> year_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;<br>&#125;;<br><span class=\"hljs-comment\">//是否闰年判断函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">leap_year</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>||(year%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span>&amp;&amp;year%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>))<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//判断日期前后,如果day在day1之前就是true，否则为false</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">before_afer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year,<span class=\"hljs-type\">int</span> month,<span class=\"hljs-type\">int</span> day,<span class=\"hljs-type\">int</span> year1,<span class=\"hljs-type\">int</span> month1,<span class=\"hljs-type\">int</span> day1)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year1-year&gt;<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(year1-year&lt;<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(year1-year==<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(month1-month&gt;<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(month1-month&lt;<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(month1==month)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(day1-day&gt;<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(day1-day&lt;=<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//计算两个日期之间的天数差值,day在day1之前，采用日期减法</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">count_days</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year,<span class=\"hljs-type\">int</span> month,<span class=\"hljs-type\">int</span> day,<span class=\"hljs-type\">int</span> year1,<span class=\"hljs-type\">int</span> month1,<span class=\"hljs-type\">int</span> day1)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span>(year1==year&amp;&amp;month1==month&amp;&amp;day1==day)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>)<br>        &#123;<br>            day1--;<br>            <span class=\"hljs-keyword\">if</span>(day1&lt;<span class=\"hljs-number\">1</span>)<br>            &#123;<br>                month1--;<br>                <span class=\"hljs-keyword\">if</span>(month1&lt;<span class=\"hljs-number\">1</span>)<br>                &#123;<br>                    year1--;<br>                    month1=<span class=\"hljs-number\">12</span>;<br>                &#125;<br>                day1=year_list[<span class=\"hljs-built_in\">leap_year</span>(year1)][month1];<br>            &#125;<br>            num++;<br>            <span class=\"hljs-keyword\">if</span>(year1==year&amp;&amp;month1==month&amp;&amp;day1==day)<br>            &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> year,month,day;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d-%d-%d&quot;</span>,&amp;year,&amp;month,&amp;day);<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>,shengyu=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//2021-05-02是周日，用0表示（用这个日期作为基准）</span><br>    <span class=\"hljs-type\">bool</span> b_a = <span class=\"hljs-built_in\">before_afer</span>(<span class=\"hljs-number\">2021</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,year,month,day);<br>    <span class=\"hljs-keyword\">if</span>(b_a)<br>    &#123;<br>        num=<span class=\"hljs-built_in\">count_days</span>(<span class=\"hljs-number\">2021</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,year,month,day);<br>        shengyu=num%<span class=\"hljs-number\">7</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,shengyu);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        num=<span class=\"hljs-built_in\">count_days</span>(year,month,day,<span class=\"hljs-number\">2021</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>);<br>        shengyu=num%<span class=\"hljs-number\">7</span>;<br>        <span class=\"hljs-keyword\">if</span>(shengyu==<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-number\">0</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-number\">7</span>-shengyu);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>总结：虽然本题我采用了日期减法作为函数进行运算，但是和日期减法的想法相似，主要思想如下：</p>\n<ul>\n<li>直接给日期加上指定的天数并不是很容易的事情，所以我们可以换个思路，<strong>每次只加1天</strong>，<strong>一直加到指定的天数为止</strong>。这样我们就把问题转换为计算加1天之后的新日期，而这个问题就相对简单许多。</li>\n<li>假设当前日期的年、月、日分别是year、month、day，那么加一天之后 day 就变成了 day+1，之后我们需要判断这个新的day是否超过了当前月份month 所拥有的总天数，如果没超过，那么相安无事，算法结束；如果超过了，那么就需要令月份month 加 1、同时让day重置为 1（即把日期变为下一个月的 1 号）。接下来，如果加了 1 之后的月份 month 变为了 13 月，那么就需要令年份year加 1、同时置月份 month重置为 1（即把日期变为下一年的 1 月）。</li>\n<li>这个过程需要知道每个月有多少天，为了方便直接取出每个月的天数，不妨设置一个二维数组<code>int year_list[2][13]</code>，用来存放每个月的天数，其中第一维为 0 时表示平年，为 1 时表示闰年。至于平年和闰年的判断方式也很简单：年份是 400 的倍数时是闰年，年份是 4 的倍数但不是 100 的倍数时也是闰年，其他情况都是平年。</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//初始化平年闰年的数组</span><br><span class=\"hljs-comment\">//0是平年，1是闰年</span><br><span class=\"hljs-type\">int</span> year_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;<br>&#125;;<br><span class=\"hljs-comment\">//是否闰年判断函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">leap_year</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>||(year%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span>&amp;&amp;year%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>))<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> year,month,day;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d-%d-%d&quot;</span>,&amp;year,&amp;month,&amp;day);<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>    &#123;<br>        day++;<br>        <span class=\"hljs-keyword\">if</span>(day&gt;year_list[<span class=\"hljs-built_in\">leap_year</span>(year)][month])<br>        &#123;<br>            month++;<br>            day=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">if</span>(month&gt;<span class=\"hljs-number\">12</span>)<br>            &#123;<br>                year++;<br>                month=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%04d-%02d-%02d&quot;</span>, year, month, day);   <span class=\"hljs-comment\">// 按格式输出年月日</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>最后，这道例题的思考方式如下：<strong>首先确认一个基准日期</strong>-&gt;<strong>(2021-05-02是周日，用0表示)</strong>-&gt;<strong>计算输入的日期在基准日期之前或者之后</strong>-&gt;<strong>计算相差多少天</strong>-&gt;<strong>最后计算输入的日期是周几</strong>！</li>\n<li>通过上述步骤，该题迎刃而解！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进制转换\"><a class=\"markdownIt-Anchor\" href=\"#进制转换\"></a> 进制转换</h3>\n<p>对于一个p进制数需要转换为q进制数，一般需要分为以下两步：</p>\n<ul>\n<li>\n<p>p进制数x转十进制数y：<br />\n<img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311125587.png\" alt=\"\" /></p>\n<ul>\n<li>实现代码：</li>\n</ul>\n</li>\n</ul>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//p进制数x转10进制数y的函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">p_ten</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">0</span>,product=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        y=y+(x%<span class=\"hljs-number\">10</span>)*product;<br>        x=x/<span class=\"hljs-number\">10</span>;<br>        product=product*p;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>十进制数y转q进制数z的函数(除基取余法)：</p>\n<ul>\n<li>\n<p>采用&quot;除基取余法&quot;，意思是每次将带转换的数除q，将得到的余数作为低位存储，而商继续除q并进行上面的操作，最后当商为0时，将所有位从高到低输出就可以得到z！</p>\n</li>\n<li>\n<p>例如十进制数<strong>11</strong>转换为<strong>二进制</strong>：</p>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311132044.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>实现代码：</p>\n</li>\n<li>\n<p>代码中采用<code>do...while</code>而不是<code>while</code>的原因是如果十进制恰好是<strong>0</strong>会造成直接跳出循环导致结果出错，因此采用<code>do...while</code>语句。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//十进制数y转q进制数z的函数(除基取余法)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">ten_q</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> y,<span class=\"hljs-type\">int</span> q,<span class=\"hljs-type\">int</span> z_list[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>,z=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        z_list[num]=y%q;<br>        num++;<br>        y=y/q;<br>    &#125;<span class=\"hljs-keyword\">while</span>(y!=<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/5/77\">K进制转十进制</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//p进制数x转10进制数y的函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">p_ten</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">0</span>,product=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        y=y+(x%<span class=\"hljs-number\">10</span>)*product;<br>        x=x/<span class=\"hljs-number\">10</span>;<br>        product=product*p;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> y;<br>&#125;<br><span class=\"hljs-comment\">//十进制数y转q进制数z的函数(除基取余法)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">ten_q</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> y,<span class=\"hljs-type\">int</span> q,<span class=\"hljs-type\">int</span> z_list[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>,z=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        z_list[num]=y%q;<br>        num++;<br>        y=y/q;<br>    &#125;<span class=\"hljs-keyword\">while</span>(y!=<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">10</span>];<span class=\"hljs-comment\">//用于存储k进制串</span><br>    <span class=\"hljs-type\">int</span> k,str_len;<br>    <span class=\"hljs-type\">int</span> sum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s %d&quot;</span>,str,&amp;k);<br>    str_len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;str_len;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(str[i]&gt;=<span class=\"hljs-string\">&#x27;A&#x27;</span>&amp;&amp;str[i]&lt;=<span class=\"hljs-string\">&#x27;F&#x27;</span>)<br>        &#123;<br>            sum+=(str[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>+<span class=\"hljs-number\">10</span>)*<span class=\"hljs-built_in\">pow</span>(k,str_len<span class=\"hljs-number\">-1</span>-i);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            sum+=(str[i]-<span class=\"hljs-string\">&#x27;0&#x27;</span>)*<span class=\"hljs-built_in\">pow</span>(k,str_len<span class=\"hljs-number\">-1</span>-i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,sum);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这道例题无法直接使用上述两个函数，因此需要根据题意重新构造，但是难度不大，需要处理十进制以上的数据。</li>\n</ul>\n<h3 id=\"字符串处理\"><a class=\"markdownIt-Anchor\" href=\"#字符串处理\"></a> 字符串处理</h3>\n<ul>\n<li>字符串处理类题目可能实现逻辑比较麻烦，而且需要考虑许多细节和边界情况，因此是一种很好体现代码能力的题型。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/6/79\">单词倒序</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1010</span>;<br><span class=\"hljs-comment\">//主函数   </span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAXN],str2[MAXN];<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAXN);<br>    <span class=\"hljs-type\">int</span> str_len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    <span class=\"hljs-type\">int</span> flag=<span class=\"hljs-number\">0</span>,m=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=str_len<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--)<br>    &#123;<br>        flag++;<br>        <span class=\"hljs-keyword\">if</span>(str[i]==<span class=\"hljs-string\">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i+<span class=\"hljs-number\">1</span>;j&lt;=i+flag<span class=\"hljs-number\">-1</span>;j++)<br>            &#123;<br>                str2[m]=str[j];<br>                m++;<br>            &#125;<br>            str2[m]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>            m++;<br>            flag=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i;j&lt;=i+flag<span class=\"hljs-number\">-1</span>;j++)<br>            &#123;<br>                str2[m]=str[j];<br>                m++;<br>            &#125;<br>            str2[m]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>            m++;<br>            flag=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>    str2[str_len]=<span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;str_len;k++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,str2[k]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：细心分析，按照逻辑编写代码，问题即可迎刃而解。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/6/83\">公共前缀</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">55</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAXN][MAXN];<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-type\">int</span> min_strlen=<span class=\"hljs-number\">100</span>,num=<span class=\"hljs-number\">0</span>,flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">getchar</span>();<span class=\"hljs-comment\">//吸收换行符</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;<span class=\"hljs-built_in\">i</span>&lt;n;i++)<br>    &#123;<br>        cin.<span class=\"hljs-built_in\">getline</span>(str[i],MAXN);<br>        <span class=\"hljs-keyword\">if</span>(min_strlen&gt;(<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">strlen</span>(str[i]))<br>        &#123;<br>            min_strlen=(<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">strlen</span>(str[i]);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;min_strlen;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n<span class=\"hljs-number\">-1</span>;k++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(str[k][i]!=str[k+<span class=\"hljs-number\">1</span>][i])<br>            &#123;<br>                flag++;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag)<br>        &#123;<br>            num=i<span class=\"hljs-number\">-1</span>;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        num=i;<br>    &#125;<br>    <span class=\"hljs-comment\">//printf(&quot;%d&quot;,min_strlen);</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=num;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,str[<span class=\"hljs-number\">0</span>][i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：注意一下本题中在需要使用循环输入的时候要采用<code>getchar();</code>函数吸收一下换行符，否则换行符会输入至字符数组中！</li>\n</ul>\n<h2 id=\"c标准模板库stl介绍\"><a class=\"markdownIt-Anchor\" href=\"#c标准模板库stl介绍\"></a> C++标准模板库(STL)介绍</h2>\n<h3 id=\"vector的常见用法详解\"><a class=\"markdownIt-Anchor\" href=\"#vector的常见用法详解\"></a> vector的常见用法详解</h3>\n<ul>\n<li><code>&quot;vector&quot;</code>-&gt;变长数组，即&quot;长度根据需要而自动改变的数组&quot;;</li>\n<li>要使用<code>vector</code>，需要添加<code>vector</code>头文件，即<code>#include &lt;vector&gt;</code>;</li>\n</ul>\n<h2 id=\"算法初步\"><a class=\"markdownIt-Anchor\" href=\"#算法初步\"></a> 算法初步</h2>\n<h3 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h3>\n<ul>\n<li>本章先介绍<strong>两种</strong>基础的排序算法：<strong>选择排序</strong>与<strong>插入排序</strong>。</li>\n</ul>\n<h4 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\"></a> 选择排序</h4>\n<ul>\n<li><strong>简单选择排序</strong>：对于一个序列<code>A</code>中的元素<code>A[1]-A[n]</code>，令<code>i</code>从<code>1</code>到<code>n</code>枚举，进行<code>n</code>趟操作，每趟从待排序部分<code>[i,n]</code>中选择最小元素，令其与待排序部分的第一个元素<code>A[i]</code>进行交换，这样元素<code>A[i]</code>就会与当前有序区间<code>[1,i-1]</code>形成新的有序区间<code>[1,i]</code>。</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011059055.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>总共需要进行n趟操作(1&lt;=i&lt;=n)，每趟操作选出待排序部分[i,n]中的最小元素，令其与A[i]交换。总复杂度为$$O(n^2)$$</p>\n</li>\n<li>\n<p>实现代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//选择排序函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">select_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> list[],<span class=\"hljs-type\">int</span> num)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> min_num,k,temp;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>    &#123;<br>        min_num=list[i];<br>        k=i;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i;j&lt;num;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(list[j]&lt;min_num)<br>            &#123;<br>                min_num = list[j];<br>                k=j;<br>            &#125;<br>        &#125;<br>        temp=list[i];<br>        list[i]=min_num;<br>        list[k]=temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\"></a> 插入排序</h4>\n<ul>\n<li><strong>直接插入排序</strong>：对于一个序列<code>A</code>中的元素<code>A[1]-A[n]</code>，令<code>i</code>从<code>1</code>到<code>n-1</code>枚举，进行<code>n-1</code>趟操作。假设某一趟时，序列<code>A</code>的前<code>i-1</code>个元素<code>A[1]-A[i-1]</code>已经有序，而范围<code>[i,n]</code>还未有序，那么该趟从范围<code>[1,i-1]</code>中寻找某个位置<code>j</code>，使得将<code>A[i]</code>插入位置<code>j</code>后(此时<code>A[j]-A[i-1]</code>会后移一位至<code>A[j+1]-A[i]</code>)，范围<code>[1,i]</code>有序。</li>\n<li>思想如下图所示：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319809.png\" alt=\"\" /></p>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319528.png\" alt=\"\" /></p>\n<ul>\n<li>实现代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//插入排序函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> list[],<span class=\"hljs-type\">int</span> num)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp,j;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;num;i++)<span class=\"hljs-comment\">//进行n-1趟</span><br>    &#123;<br>        temp=list[i];<br>        j=i;<br>        <span class=\"hljs-keyword\">while</span>(j&gt;<span class=\"hljs-number\">0</span>&amp;&amp;temp&lt;list[j<span class=\"hljs-number\">-1</span>])<span class=\"hljs-comment\">//只要temp小于前一个元素list[j-1]</span><br>        &#123;<br>            list[j]=list[j<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">//把list[j-1]移到list[j]</span><br>            j--;<br>        &#125;<br>        list[j]=temp;<span class=\"hljs-comment\">//插入位置为j</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"排序题与sort函数的应用\"><a class=\"markdownIt-Anchor\" href=\"#排序题与sort函数的应用\"></a> 排序题与sort函数的应用</h4>\n<ul>\n<li>由于排序题中大部分只需要得到排序的最终结果，而不需要去写完整的排序过程，因此推荐采用<code>C++</code>中的<code>sort()</code>函数进行处理。</li>\n</ul>\n<h5 id=\"如何使用sort函数排序\"><a class=\"markdownIt-Anchor\" href=\"#如何使用sort函数排序\"></a> 如何使用sort()函数排序</h5>\n<ul>\n<li><code>sort()</code>函数的使用必须加上头文件<code>\\#include &lt;algorithm&gt;</code>和<code>using namespace std;</code>，其使用方式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">sort</span>(首元素地址(必填),尾元素地址的下一个地址(必填),比较函数(非必填));<br></code></pre></td></tr></table></figure>\n<h5 id=\"如何实现比较函数cmp\"><a class=\"markdownIt-Anchor\" href=\"#如何实现比较函数cmp\"></a> 如何实现比较函数cmp</h5>\n<h6 id=\"基本数据类型数组的排序\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型数组的排序\"></a> 基本数据类型数组的排序</h6>\n<ul>\n<li>若比较函数不填，则默认按照从小到大的顺序排序。</li>\n<li>例如：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br>    <span class=\"hljs-built_in\">sort</span>(a,a+<span class=\"hljs-number\">5</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果想要实现从大到小来排序，则需要编写cmp(比较函数)：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a,<span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a&gt;b;<span class=\"hljs-comment\">//可以理解为当a&gt;b时，把a放在b前面</span><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br>    <span class=\"hljs-built_in\">sort</span>(a,a+<span class=\"hljs-number\">5</span>,cmp);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">5 </span><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>记忆方法</strong>：\n<ul>\n<li>数据“从小到大”就用<code>“&lt;”</code>，因为<code>a&lt;b</code>是<strong>左小右大</strong></li>\n<li>数据“从大到小”就用<code>“&gt;”</code>，因为<code>a&gt;b</code>是<strong>左大右小</strong></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"结构体数组排序\"><a class=\"markdownIt-Anchor\" href=\"#结构体数组排序\"></a> 结构体数组排序</h6>\n<ul>\n<li>一级排序</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(node a,node b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a.x&gt;b.x;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>二级排序</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(node a,node b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(a.x!=b.x)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a.x&gt;b.x;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a.y&lt;b.y;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/1/97\">考场排名</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1100</span>;<br><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">stu</span>&#123;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> score;<br>    <span class=\"hljs-type\">int</span> kaochang;<br>    <span class=\"hljs-type\">int</span> paiming;<br>&#125;;<br><br><span class=\"hljs-comment\">//比较函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp1</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a.score&gt;b.score;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp2</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">strcmp</span>(a.name,b.name)&lt;<span class=\"hljs-number\">0</span>;<br><br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num_kaochang,sum=<span class=\"hljs-number\">0</span>,num[<span class=\"hljs-number\">15</span>];<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    stu stu[MAXN];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num_kaochang);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=sum;k&lt;num_kaochang+sum;k++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,stu[k].name);<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;stu[k].score);<br>            stu[k].kaochang=i;<br>        &#125;<br>        num[i]=num_kaochang;<br>        <span class=\"hljs-built_in\">sort</span>(stu+sum,stu+sum+num_kaochang, cmp1);<br>        stu[sum].paiming=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=sum;m&lt;sum+num_kaochang;m++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(stu[m].score==stu[m<span class=\"hljs-number\">-1</span>].score)<br>            &#123;<br>                stu[m].paiming=stu[m<span class=\"hljs-number\">-1</span>].paiming;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                stu[m].paiming=m+<span class=\"hljs-number\">1</span>-sum;<span class=\"hljs-comment\">//局部排名数值要减去sum</span><br>            &#125;<br>        &#125;<br>        sum+=num_kaochang;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(stu,stu+sum, cmp2);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;sum;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s %d %d\\n&quot;</span>,stu[i].name,stu[i].score,stu[i].paiming);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：注意一下<strong>字符串数组的比较函数</strong>的写法，以及这道题目局部（考场）排名的大小需要减去<code>sum</code>值。</li>\n</ul>\n<p>例题：<a href=\"https://pintia.cn/problem-sets/994805342720868352/exam/problems/994805474338127872?type=7&amp;page=0\">A1025 PAT Ranking</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">51000</span>;<br><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">stu</span>&#123;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> score;<br>    <span class=\"hljs-type\">int</span> kaochang;<br>    <span class=\"hljs-type\">int</span> paiming;<br>    <span class=\"hljs-type\">int</span> final_rank;<br>&#125;;<br><br><span class=\"hljs-comment\">//比较函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp1</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a.score&gt;b.score;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp2</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a.final_rank==b.final_rank)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">strcmp</span>(a.name,b.name)&lt;<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> a.final_rank&lt;b.final_rank;<br>    &#125;<br><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num_kaochang,sum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    stu stu[MAXN];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num_kaochang);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=sum;k&lt;num_kaochang+sum;k++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,stu[k].name);<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;stu[k].score);<br>            stu[k].kaochang=i+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">//排local_rank</span><br>        <span class=\"hljs-built_in\">sort</span>(stu+sum,stu+sum+num_kaochang, cmp1);<br>        stu[sum].paiming=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=sum;m&lt;sum+num_kaochang;m++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(stu[m].score==stu[m<span class=\"hljs-number\">-1</span>].score)<br>            &#123;<br>                stu[m].paiming=stu[m<span class=\"hljs-number\">-1</span>].paiming;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                stu[m].paiming=m+<span class=\"hljs-number\">1</span>-sum;<span class=\"hljs-comment\">//局部排名数值要减去sum</span><br>            &#125;<br>        &#125;<br>        sum+=num_kaochang;<br>    &#125;<br>    <span class=\"hljs-comment\">//按照成绩重新进行排名，不区分考场</span><br>    <span class=\"hljs-built_in\">sort</span>(stu,stu+sum, cmp1);<br>    stu[<span class=\"hljs-number\">0</span>].final_rank=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=<span class=\"hljs-number\">1</span>;m&lt;sum;m++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(stu[m].score==stu[m<span class=\"hljs-number\">-1</span>].score)<br>        &#123;<br>            stu[m].final_rank=stu[m<span class=\"hljs-number\">-1</span>].final_rank;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            stu[m].final_rank=m+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//按照字典序排输出</span><br>    <span class=\"hljs-built_in\">sort</span>(stu,stu+sum, cmp2);<br>    <span class=\"hljs-comment\">//输出</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,sum);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;sum;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s %d %d %d\\n&quot;</span>,stu[i].name,stu[i].final_rank,stu[i].kaochang,stu[i].paiming);<br>    &#125;<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：可以在<strong>结构体数组</strong>中把对应要输出的内容提前定义，这样在运算赋值之后就可以直接输出。</li>\n</ul>\n<h3 id=\"散列\"><a class=\"markdownIt-Anchor\" href=\"#散列\"></a> 散列</h3>\n<h4 id=\"散列的定义和整数散列\"><a class=\"markdownIt-Anchor\" href=\"#散列的定义和整数散列\"></a> 散列的定义和整数散列</h4>\n<ul>\n<li>\n<p>散列(Hash)，简单而言，就是将<strong>元素</strong>通过一个<strong>函数</strong>转换为<strong>整数</strong>，使得该整数可以尽量<strong>唯一地</strong>代表这个元素。</p>\n</li>\n<li>\n<p>其中把这个转换函数称为<strong>散列函数H</strong>，也就是说，如果元素在转换前为<code>Key</code>，那么转换后为一个整数<code>H(Key)</code>。</p>\n</li>\n<li>\n<p>常用的散列函数：<strong>直接定址法</strong>、<strong>平方取中法</strong>、<strong>除留余数法</strong>等…</p>\n</li>\n<li>\n<p>如果两个不同的元素<code>Key1</code>和<code>Key2</code>，它们的Hash值<code>H(Key1)</code>和<code>H(Key2)</code>是相同的话，就称为<strong>冲突</strong>。</p>\n</li>\n<li>\n<p>解决冲突的主要办法有：<strong>线性探查法</strong>、<strong>平方探查法</strong>、<strong>链地址法(拉链法)</strong></p>\n</li>\n<li>\n<p>其中第一种和第二种都计算了新的<strong>Hash值</strong>，称为<strong>开放定址法</strong></p>\n</li>\n<li>\n<p>散列表的特点是能够使用空间来换取时间</p>\n</li>\n</ul>\n<h4 id=\"字符串hash初步\"><a class=\"markdownIt-Anchor\" href=\"#字符串hash初步\"></a> 字符串Hash初步</h4>\n<ul>\n<li><strong>字符串Hash</strong>是指将一个字符串<code>Str</code>映射成一个整数，使得该整数可以尽可能唯一地代表字符串<code>Str</code>。</li>\n<li>为了讨论问题方便，先假设字符串均有大写字母<code>'A'-'Z'</code>组成，在此基础上，不妨把大写字母<code>'A'-'Z'</code>看成<code>0-25</code>。</li>\n<li>由此便可以将字符串映射为整数(注意：转换成整数最大为$$26^{1en}-1$$其中<code>len</code>为字符串长度)</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">HashFunc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> Str[],<span class=\"hljs-type\">int</span> len)</span><span class=\"hljs-comment\">//Hash函数，将字符串Str转换为整数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> id=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)<br>\t&#123;<br>\t\tid=id*<span class=\"hljs-number\">26</span>+(Str[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>);<span class=\"hljs-comment\">//转换为整数</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如果字符串中出现了小写字母，那么可以把大写字母<code>'A'-'Z'</code>看成<code>0-25</code>，把小写字母<code>'a'-'z'</code>看成<code>26-51</code>，其余相同。</p>\n</li>\n<li>\n<p>代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">HashFunc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> Str[],<span class=\"hljs-type\">int</span> len)</span><span class=\"hljs-comment\">//Hash函数，将字符串Str转换为整数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> id=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(Str[i]&gt;=<span class=\"hljs-string\">&#x27;A&#x27;</span>&amp;&amp;Str[i]&lt;=<span class=\"hljs-string\">&#x27;Z&#x27;</span>)<br>\t\t&#123;<br>\t\t\tid=id*<span class=\"hljs-number\">52</span>+(Str[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>);<span class=\"hljs-comment\">//转换为整数</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(Str[i]&gt;=<span class=\"hljs-string\">&#x27;a&#x27;</span>&amp;&amp;Str[i]&lt;=<span class=\"hljs-string\">&#x27;z&#x27;</span>)<br>\t\t&#123;<br>\t\t\tid=id*<span class=\"hljs-number\">52</span>+(Str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>)+<span class=\"hljs-number\">26</span>;<span class=\"hljs-comment\">//转换为整数</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>再增加不同的字符代码编写方式<strong>同理</strong>；</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/2/105\">字符串出现次数</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1010</span>;<br><span class=\"hljs-type\">char</span> str[MAXN][<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-type\">int</span> hashTable[<span class=\"hljs-number\">26</span>*<span class=\"hljs-number\">26</span>*<span class=\"hljs-number\">26</span>+<span class=\"hljs-number\">10</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-comment\">//字符串转Hash函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">HashFunc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> s[],<span class=\"hljs-type\">int</span> len)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> id=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)<br>    &#123;<br>        id=id*<span class=\"hljs-number\">26</span>+(s[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> id;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,m;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str[i]);<br>        hashTable[<span class=\"hljs-built_in\">HashFunc</span>(str[i],<span class=\"hljs-number\">3</span>)]++;<br>    &#125;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;m);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str[i]);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,hashTable[<span class=\"hljs-built_in\">HashFunc</span>(str[i],<span class=\"hljs-number\">3</span>)]);<br>        <span class=\"hljs-keyword\">if</span>(i!=m<span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：该题直接给出字符串散列的处理方法！重点掌握字符串转整数函数的编写和应用。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/2/104\">2-SUM-hash</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1000001</span>;<br><span class=\"hljs-type\">int</span> num[MAXN]=&#123;<span class=\"hljs-number\">0</span>&#125;,hashTable[MAXN]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,k;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;n,&amp;k);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num[i]);<br>        hashTable[num[i]]++;<br>    &#125;<br>    <span class=\"hljs-type\">int</span> ans=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(k-num[i]&gt;=<span class=\"hljs-number\">0</span>&amp;&amp;hashTable[k-num[i]])<br>        &#123;<br>            ans++;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,ans/<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这道题目的巧妙之处在于通过用求和值<code>k</code>减去<code>a</code>后的值<code>b</code>是否还在<strong>哈希表</strong>中来判断是否满足条件。这样巧妙利用了<strong>空间换时间</strong>的思想，只用一次循环即可完成！最后注意最终结果需要再<code>÷2</code>！</li>\n</ul>\n<h3 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\"></a> 递归</h3>\n<p>分治</p>\n<ul>\n<li>分治-&gt;“分而治之”</li>\n<li>分治法将原问题划分成若干个<strong>规模较小</strong>而<strong>结构</strong>与原问题<strong>相同</strong>或者<strong>相似</strong>的子问题，然后分别解决这些子问题，最后<strong>合并</strong>子问题的解，即可得到原问题的解。\n<ul>\n<li>分解：将原问题划分成若干个<strong>规模较小</strong>而<strong>结构</strong>与原问题<strong>相同</strong>或者<strong>相似</strong>的子问题；</li>\n<li>解决：递归求解所有子问题。如果存在子问题的规模足够小就可以直接解决；</li>\n<li>合并：将子问题的解合并为原问题的解。</li>\n</ul>\n</li>\n<li>分治法分解成的子问题应该是相互独立的、没有交叉的。</li>\n<li>分治法作为一种算法思想，既可以使用<strong>递归</strong>的手段去实现，也可以通过<strong>非递归</strong>的手段去实现。</li>\n</ul>\n<p>递归</p>\n<ul>\n<li>递归在于<strong>反复调用自身函数</strong>，但是每次把<strong>问题范围缩小</strong>，直到范围缩小到可以直接得到边界数据的结果，然后再在返回的路上求出对应的解。</li>\n<li>递归很适合用来实现分治思想；</li>\n<li>递归的逻辑中一般有两个重要概念：\n<ul>\n<li>递归边界</li>\n<li>递归式（或称递归调用）</li>\n</ul>\n</li>\n<li>递归式是将原问题分解为若干个子问题的手段；</li>\n<li>递归边界是分解的尽头。</li>\n<li>例题-&gt;递归求解n的阶乘：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)*n;<span class=\"hljs-comment\">//递归式</span><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(a));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">6<br></code></pre></td></tr></table></figure>\n<ul>\n<li>其实现过程如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041745796.png\" alt=\"\" /></p>\n<ul>\n<li>例题-&gt;递归求解斐波那契数列的第n项：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//斐波那契数列递归函数（输出第n项的值）</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>||n==<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)+<span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-2</span>);<span class=\"hljs-comment\">//递归式</span><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(n));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">5<br></code></pre></td></tr></table></figure>\n<ul>\n<li>其实现过程如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041755805.png\" alt=\"\" /></p>\n<ul>\n<li>例题-&gt;<strong>全排列问题</strong>：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041758963.png\" alt=\"\" /></p>\n<ul>\n<li><strong>思路</strong>：</li>\n<li>从递归的角度考虑，把问题描述成：“输出<strong>1 - n</strong>这<strong>n</strong>个整数的全排列”，那么它就可以分解成若干个子问题：\n<ul>\n<li>输出以1开头的全排列：<code>(1,2,3)</code>、<code>(1,3,2)</code>;</li>\n<li>输出以2开头的全排列：<code>(2,1,3)</code>、<code>(2,3,1)</code>;</li>\n<li>输出以3开头的全排列：<code>(3,1,2)</code>、<code>(3,2,1)</code>;</li>\n<li>以此类推…直到第n个。</li>\n</ul>\n</li>\n<li>由此，不妨设定一个数组<code>p[MAXN]</code>用于存放当前的排列;</li>\n<li>再设定一个散列数组<code>bool HashTable[MAXN]=&#123;false&#125;;</code>用于指示当前元素k是否在数组<code>p</code>中，\n<ul>\n<li>如果已经存在于<code>p</code>中时<code>HashTable[k]=true;</code></li>\n<li>如果不存在于<code>p</code>中时<code>HashTable[k]=false;</code></li>\n</ul>\n</li>\n<li>因为要按照<strong>字典序</strong>对全排列进行输出，我们需要按顺序往数组<code>p</code>中第1位到n位中填入数字。</li>\n<li>不妨假设我们当前已经填好了<code>p[1]-p[index]</code>部分的数字，下一步需要填<code>P[index+1]</code>这个位置的数字。</li>\n<li>显然需要从1-n中枚举有哪些数字还没有在<code>p[1]-p[index]</code>部分，即满足<code>HashTable[k]==false</code>这个条件，那么就将该数字填入<code>p[index]</code>中。</li>\n<li>然后将<code>HashTable[k]=true</code>，表示<code>k</code>这个数据已经填入了数组<code>p</code>中。</li>\n<li>然后可以像上述步骤一样处理<code>index+2</code>的数据，即<code>p[1]-p[index+1]</code>已经填好，即进行递归-&gt;重复执行<code>Full_permutation(index+1);</code>直到后续<strong>递归完成</strong>。</li>\n<li>当递归完成后，需要再将<code>HashTable[k]=false</code>，以便后续能够继续使用这个数据。</li>\n<li>最后<strong>递归边界</strong>显然是当<code>index</code>到达<code>n+1</code>时，说明数组<code>p</code>中的第<strong>1 - n</strong>位都已经填好了，只需要按顺序进行输出即可。</li>\n<li>下面是当<code>n=3</code>时候的代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//全排列递归函数变量定义</span><br><span class=\"hljs-type\">const</span>  <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-type\">int</span> n;<span class=\"hljs-comment\">//输出index-n的全排列</span><br><span class=\"hljs-type\">int</span> p[MAXN];<br><span class=\"hljs-type\">bool</span> HashTable[MAXN]=&#123;<span class=\"hljs-literal\">false</span>&#125;;<br><span class=\"hljs-comment\">//全排列递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Full_permutation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">if</span>(index==n+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,p[i]);<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-comment\">//递归式</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(!HashTable[k])<span class=\"hljs-comment\">//HashTable[k]==false-&gt;说明该元素还没有被用上</span><br>        &#123;<br>            p[index]=k;<span class=\"hljs-comment\">//处理这一种情况</span><br>            HashTable[k] = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//到这里说明假设1到index已经排好</span><br>            <span class=\"hljs-comment\">//递归进入函数再排index+1之后的部分</span><br>            <span class=\"hljs-built_in\">Full_permutation</span>(index+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//递归返回结束后循环还没有结束，继续处理下一循环的问题</span><br>            HashTable[k] = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//已经处理完p[index]=k;这一种情况，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    n=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">Full_permutation</span>(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//index从1开始</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123<br>132<br>213<br>231<br>312<br>321<br></code></pre></td></tr></table></figure>\n<ul>\n<li>例题-&gt;<strong>n皇后问题</strong>：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051551338.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>思路：</p>\n</li>\n<li>\n<p>根据题意很容易想到<strong>每行</strong>和<strong>每列</strong>只能放置一个皇后，只需要将<strong>n列</strong>或者<strong>n行</strong>皇后的位置写出即可代表一种情况。</p>\n</li>\n<li>\n<p>例如将皇后的行号写出，图4-4a的序号为<code>24135</code>，图4-4b的序号为<code>35142</code>。</p>\n</li>\n<li>\n<p>按照这个思路只需要枚举<strong>1 - n</strong>的所有排列，并且查看每个排列对应的放置方案是否合法，统计合法的方案即可，总共只有<code>n!</code>个排列。</p>\n</li>\n<li>\n<p>可以参考全排列的方法，生成一段排列序号后，在递归边界判断序号是否合法，代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//n皇后函数变量定义</span><br><span class=\"hljs-type\">const</span>  <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-type\">int</span> n;<span class=\"hljs-comment\">//输出index-n的全排列</span><br><span class=\"hljs-type\">int</span> p[MAXN];<br><span class=\"hljs-type\">bool</span> HashTable[MAXN]=&#123;<span class=\"hljs-literal\">false</span>&#125;;<br><span class=\"hljs-type\">int</span> my_count = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//记录合法的皇后排列个数</span><br><br><span class=\"hljs-comment\">//n皇后问题递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">n_queens</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">if</span>(index==n+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;n;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i+<span class=\"hljs-number\">1</span>;j&lt;=n;j++)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(i-j)==<span class=\"hljs-built_in\">abs</span>(p[i]-p[j]))<br>                &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag)<br>        &#123;<br>            my_count++;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-comment\">//递归式</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(!HashTable[k])<span class=\"hljs-comment\">//HashTable[k]==false-&gt;说明该元素还没有被用上</span><br>        &#123;<br>            p[index]=k;<span class=\"hljs-comment\">//处理这一种情况</span><br>            HashTable[k] = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//到这里说明假设1到index已经排好</span><br>            <span class=\"hljs-comment\">//递归进入函数再排index+1之后的部分</span><br>            <span class=\"hljs-built_in\">n_queens</span>(index+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//递归返回结束后循环还没有结束，继续处理下一循环的问题</span><br>            HashTable[k] = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//已经处理完p[index]=k;这一种情况，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    n=<span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-built_in\">n_queens</span>(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//index从1开始</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,my_count);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">92<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：</li>\n<li>上述方法在序列完成时再判断该序列是否合法，未使用任何优化方法，称为<strong>暴力法</strong>。</li>\n<li>事实上，可以发现当已经放置了一部分皇后以后（对应生成了排列的一部分），如果后续皇后无论怎么放置都冲突的话，即可中止递归了。</li>\n<li>一般而言，如果在到达<strong>递归边界</strong>前的某层，由于一些事实导致已经不需要再往任何一个子问题递归了，就可以直接返回上一层，一般这种做法称为<strong>回溯法</strong>。</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//n皇后函数变量定义</span><br><span class=\"hljs-type\">const</span>  <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-type\">int</span> n;<span class=\"hljs-comment\">//输出index-n的全排列</span><br><span class=\"hljs-type\">int</span> p[MAXN];<br><span class=\"hljs-type\">bool</span> HashTable[MAXN]=&#123;<span class=\"hljs-literal\">false</span>&#125;;<br><span class=\"hljs-type\">int</span> my_count = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//记录合法的皇后排列个数</span><br><br><span class=\"hljs-comment\">//n皇后问题递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">n_queens</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//递归边界,到达递归边界都是合法序列</span><br>    <span class=\"hljs-keyword\">if</span>(index==n+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        my_count++;<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-comment\">//递归式</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(!HashTable[k])<span class=\"hljs-comment\">//HashTable[k]==false-&gt;说明该元素还没有被用上</span><br>        &#123;<br>            p[index]=k;<span class=\"hljs-comment\">//处理这一种情况</span><br>            HashTable[k] = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//到这里说明假设1到index已经排好</span><br>            <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> pre=<span class=\"hljs-number\">1</span>;pre&lt;index;pre++)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(index-pre)==<span class=\"hljs-built_in\">abs</span>(p[index]-p[pre]))<br>                &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(flag)<br>            &#123;<br>                <span class=\"hljs-comment\">//递归进入函数再排index+1之后的部分</span><br>                <span class=\"hljs-built_in\">n_queens</span>(index+<span class=\"hljs-number\">1</span>);<br>            &#125;<br>            <span class=\"hljs-comment\">//递归返回结束后循环还没有结束，继续处理下一循环的问题</span><br>            HashTable[k] = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//已经处理完p[index]=k;这一种情况，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    n=<span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-built_in\">n_queens</span>(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//index从1开始</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,my_count);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">92<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/113\">反转字符串</a></p>\n<ul>\n<li>方法一：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051954513.png\" alt=\"\" /></p>\n<ul>\n<li>方法一代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//递归求字符串逆函数1</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    <span class=\"hljs-type\">int</span> len;<br>    temp = *str;<br>    len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    *str = *(str+len<span class=\"hljs-number\">-1</span>);<br>    *(str+len<span class=\"hljs-number\">-1</span>)=<span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str+<span class=\"hljs-number\">1</span>)&gt;=<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_1</span>(str+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    *(str+len<span class=\"hljs-number\">-1</span>)=temp;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>方法二：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051958349.png\" alt=\"\" /></p>\n<ul>\n<li>方法二代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//递归求字符串逆函数2</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str,<span class=\"hljs-type\">int</span> left,<span class=\"hljs-type\">int</span> right)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    temp = str[left];<br>    str[left] = str[right];<br>    str[right] = temp;<br>    <span class=\"hljs-keyword\">if</span>(left+<span class=\"hljs-number\">1</span>&lt;right<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_2</span>(str,left+<span class=\"hljs-number\">1</span>,right<span class=\"hljs-number\">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">110</span>;<br><span class=\"hljs-type\">char</span> str[MAXN],rev_str[MAXN];<br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-comment\">//递归求字符串逆函数1</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    <span class=\"hljs-type\">int</span> len;<br>    temp = *str;<br>    len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    *str = *(str+len<span class=\"hljs-number\">-1</span>);<br>    *(str+len<span class=\"hljs-number\">-1</span>)=<span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str+<span class=\"hljs-number\">1</span>)&gt;=<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_1</span>(str+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    *(str+len<span class=\"hljs-number\">-1</span>)=temp;<br>&#125;<br><br><span class=\"hljs-comment\">//递归求字符串逆函数2</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str,<span class=\"hljs-type\">int</span> left,<span class=\"hljs-type\">int</span> right)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    temp = str[left];<br>    str[left] = str[right];<br>    str[right] = temp;<br>    <span class=\"hljs-keyword\">if</span>(left+<span class=\"hljs-number\">1</span>&lt;right<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_2</span>(str,left+<span class=\"hljs-number\">1</span>,right<span class=\"hljs-number\">-1</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-comment\">//rev_1(str);</span><br>    <span class=\"hljs-built_in\">rev_2</span>(str,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">strlen</span>(str)<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：上述介绍的两种方法可以多深入体会。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/118\">上楼</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//递归判断上楼梯方式数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n&lt;=<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)+<span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-2</span>);<span class=\"hljs-comment\">//最后只有加一级或者两级，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可</span><br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(n));<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：最后要到达最高级只有加<strong>一级</strong>或者<strong>两级</strong>，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/119\">汉诺塔</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">int</span> my_count=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">//汉诺塔问题</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">hanoi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">char</span> from,<span class=\"hljs-type\">char</span> to,<span class=\"hljs-type\">char</span> mid)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c-&gt;%c\\n&quot;</span>,from,to);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">hanoi</span>(n<span class=\"hljs-number\">-1</span>,from,mid,to);<span class=\"hljs-comment\">//要想移动n级汉诺塔需要先移动n-1级汉诺塔到另一边</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c-&gt;%c\\n&quot;</span>,from,to);<span class=\"hljs-comment\">//把最后最大的一块移动到目的位置</span><br>        <span class=\"hljs-built_in\">hanoi</span>(n<span class=\"hljs-number\">-1</span>,mid,to,from);<span class=\"hljs-comment\">//最后把剩下n-1级的汉诺塔移动到目标位置</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,(<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,n)<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">hanoi</span>(n,<span class=\"hljs-string\">&#x27;A&#x27;</span>,<span class=\"hljs-string\">&#x27;C&#x27;</span>,<span class=\"hljs-string\">&#x27;B&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：要想移动<code>n</code>级汉诺塔需要先移动<code>n-1</code>级汉诺塔到另一边，然后把最后最大的一块移动到目的位置，最后把剩下<code>n-1</code>级的汉诺塔移动到目标位置，从而形成递归。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/120\">棋盘覆盖问题</a></p>\n<ul>\n<li>说明：这道题目是一道典型的二维<strong>分治问题</strong>。</li>\n<li>思路：要想采用<strong>分治</strong>的方法并且使用<strong>递归</strong>来进行求解，就需要划分成相同方案的子问题，划分的思路如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311071535777.png\" alt=\"\" /></p>\n<ul>\n<li>以此类推，在划分到只剩下2×2大小的方块后就很容易地采用骨牌进行填充。</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">256</span>*<span class=\"hljs-number\">256</span>;<br><span class=\"hljs-type\">int</span> my_index = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-comment\">//建立坐标结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">point</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> x , y;<br>    <span class=\"hljs-comment\">//原始构造函数，不需要初始化变量</span><br>    <span class=\"hljs-built_in\">point</span>()&#123;&#125;<br>    <span class=\"hljs-comment\">//传参构造函数</span><br>    <span class=\"hljs-built_in\">point</span>(<span class=\"hljs-type\">int</span> _x,<span class=\"hljs-type\">int</span> _y)<br>    &#123;<br>        x=_x;<br>        y=_y;<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">//定义存储的点数组</span><br>point arr[MAXN];<br><br><span class=\"hljs-comment\">//递归获取棋盘覆盖函数</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">x,y是左下角方格坐标，代表原点</span><br><span class=\"hljs-comment\">cx,cy是黑点坐标</span><br><span class=\"hljs-comment\">size是传入此函数时整体方格的大小</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">chees_cover</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> y,<span class=\"hljs-type\">int</span> cx,<span class=\"hljs-type\">int</span> cy,<span class=\"hljs-type\">int</span> size)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> h;<br>    <span class=\"hljs-keyword\">if</span>(size == <span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span>;<br>    h = size/<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-comment\">//黑色方格在左上角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&gt;=y+h&amp;&amp;cx&lt;x+h)<span class=\"hljs-comment\">//假如黑色方块在左上角</span><br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h,y+h<span class=\"hljs-number\">-1</span>);<span class=\"hljs-comment\">//从黑色方块在左上角</span><br>        <span class=\"hljs-comment\">//确认骨牌的原点在右下角</span><br>        <span class=\"hljs-comment\">//以下的三个if语句同理</span><br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y+h,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y+h, x+h<span class=\"hljs-number\">-1</span>,y+h,h);<span class=\"hljs-comment\">//</span><br>    &#125;<br>    <span class=\"hljs-comment\">//黑色方格在右上角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&gt;=y+h&amp;&amp;cx&gt;=x+h)<br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h<span class=\"hljs-number\">-1</span>,y+h<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y+h,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y+h,x+h,y+h,h);<br>    &#125;<br>    <span class=\"hljs-comment\">//黑色方格在左下角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&lt;y+h&amp;&amp;cx&lt;x+h)<br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h,y+h);<br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y,x+h<span class=\"hljs-number\">-1</span>,y+h<span class=\"hljs-number\">-1</span>,h);<br>    &#125;<br>    <span class=\"hljs-comment\">//黑色方格在右下角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&lt;y+h&amp;&amp;cx&gt;=x+h)<br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h<span class=\"hljs-number\">-1</span>,y+h);<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y,x+h,y+h<span class=\"hljs-number\">-1</span>,h);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//定义排序比较函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">cmd</span><span class=\"hljs-params\">(point px,point py)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(px.x==py.x)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> px.y &lt; py.y;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> px.x &lt; py.x;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> k,cx,cy,size;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>,&amp;k,&amp;cx,&amp;cy);<br>    size = (<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,k);<br>    <span class=\"hljs-built_in\">chees_cover</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,cx,cy,size);<br>    <span class=\"hljs-built_in\">sort</span>(arr,arr+my_index,cmd);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;my_index;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>,arr[i].x,arr[i].y);<br>    &#125;<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/123\">谢尔宾斯基地毯</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>;<br><span class=\"hljs-type\">char</span> arr[MAXN][MAXN];<br><br><span class=\"hljs-comment\">//定义谢尔宾斯基地毯递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">cover</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> y)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> unit = (<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">3.0</span>,n<span class=\"hljs-number\">-2</span>);<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        arr[x][y]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x,y);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x,y+unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x,y+<span class=\"hljs-number\">2</span>*unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+unit,y);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=x+unit;i&lt;x+<span class=\"hljs-number\">2</span>*unit;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=y+unit;j&lt;y+<span class=\"hljs-number\">2</span>*unit;j++)<br>            &#123;<br>                arr[i][j]=<span class=\"hljs-string\">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+unit,y+<span class=\"hljs-number\">2</span>*unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+<span class=\"hljs-number\">2</span>*unit,y);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+<span class=\"hljs-number\">2</span>*unit,y+unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+<span class=\"hljs-number\">2</span>*unit,y+<span class=\"hljs-number\">2</span>*unit);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,my_unit;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    my_unit = <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">3.0</span>,n<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;my_unit+<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;my_unit+<span class=\"hljs-number\">2</span>;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>||i==my_unit+<span class=\"hljs-number\">1</span>||j==<span class=\"hljs-number\">0</span>||j==my_unit+<span class=\"hljs-number\">1</span>)<br>            &#123;<br>                arr[i][j]=<span class=\"hljs-string\">&#x27;+&#x27;</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>                arr[i][j]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cover</span>(n,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">//printf(&quot;%d %d&quot;,n,my_unit);</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;my_unit+<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;my_unit+<span class=\"hljs-number\">2</span>;j++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,arr[i][j]);<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这种题目主要找准递归的<strong>起始位置</strong>，根据<strong>起始位置</strong>即可输出完整图形。</li>\n</ul>\n<h4 id=\"一种递归式的非零自然数全分解方法\"><a class=\"markdownIt-Anchor\" href=\"#一种递归式的非零自然数全分解方法\"></a> 一种递归式的非零自然数全分解方法</h4>\n<ul>\n<li>在开始讲之前，首先介绍一下这个方法针对的问题背景：一个非零自然数(1,2,3,……)既不重复也不遗漏地任意分解为非零自然数(如：3=1+1+1=1+2)，在本篇暂且称为非零自然数的全分解。</li>\n<li>在非零自然数的全分解中，总共有多少种分解方法，并列出所有分解方法，在本篇暂且称为非零自然数的全分解问题。</li>\n</ul>\n<h5 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\"></a> 基本概念</h5>\n<ol>\n<li><strong>分解末项</strong><br />\n   + 一个分解中的最后一项称为分解末项。如“3=1+2”中分解末项为“2”，再如“3=1+1+1”中分解末项为“1”。</li>\n<li><strong>分解基数B</strong><br />\n  + 分解基数，在数值上定义为分解末项的前一项，举个例子：“5=1+4”称为分解基数B=1的一个分解，“5=1+2+2”称为分解基数B=2的一个分解。<br />\n  + 我们也可以把“5=1+4”到“5=1+2+2”的过程理解为一个将分解末项“4”按分解基数B=2的分解。实际上这种理解更为重要，因为在本方法中，我们本质上也是针对分解末项的分解。</li>\n</ol>\n<h5 id=\"分解规则\"><a class=\"markdownIt-Anchor\" href=\"#分解规则\"></a> 分解规则</h5>\n<ol>\n<li>关于分解基数\n<ul>\n<li><strong>分解基数单调不减</strong>。如：“7=2+5=2+1+4”为一个错误的分解过程，因为第一级分解基数为2，第二级分解基数为1，违反分解基数单调不减原则。所以，“7=2+5=2+2+3”才是一个正确的分解过程。</li>\n</ul>\n</li>\n<li>关于分解末项\n<ul>\n<li><strong>分解末项应不小于分解基数</strong>。如：“5=1+1+3”为一个正确的分解，“5=1+3+1”为一个错误的分解。</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311102020016.jpeg\" alt=\"\" /></p>\n<ul>\n<li>根据前述的两条分解规则，对7的全分解过程如上图所示，可以看到总共有14种分解方法。实际上，7的全分解就是这14种分解方法。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/125\">自然数分解之方案数</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//递归求解自然数分解方案数量函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> pre,<span class=\"hljs-type\">int</span> now)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;<span class=\"hljs-number\">2</span>*i&lt;=now;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&gt;=pre)<br>        &#123;<br>            temp+=<span class=\"hljs-built_in\">func</span>(i,now-i);<br>            temp++;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    num = <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">0</span>,n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,num);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：\n<ul>\n<li><strong>递归边界</strong>是：当我们需要拆分的数为1时，表示无法拆分，因此返回0。</li>\n<li>总而言之，<code>func(pre,now)</code>所返回的整数表示该组合后续能够拆分的总数。</li>\n</ul>\n</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/124\">自然数分解之最大积</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//递归求解自然数分解之最大积</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> pre,<span class=\"hljs-type\">int</span> now)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> my_max=<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;<span class=\"hljs-number\">2</span>*i&lt;=now;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&gt;=pre)<br>        &#123;<br>            my_max=<span class=\"hljs-built_in\">max</span>(my_max,<span class=\"hljs-built_in\">max</span>(i*(now-i),<span class=\"hljs-built_in\">func</span>(i,now-i)));<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(my_max,pre*my_max);<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    num = <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">0</span>,n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,num);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这题与<strong>自然数分解之方案数</strong>较为相似，只需要把递归函数<code>temp</code>的计数改为计算乘积最大值即可。</li>\n</ul>\n<h4 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\"></a> 动态规划</h4>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/116\">数塔</a></p>\n<ul>\n<li>\n<p>思路：数塔问题是经典的动态规划问题，通过归纳可以得到一个信息：</p>\n<ul>\n<li>如果要求出<code>dp[i][j]</code>,那么一定要求出其两个子问题：</li>\n<li>从位置<code>(i+1,j)</code>到达最底层的最大和<code>dp[i+1][j]</code>;</li>\n<li>从位置<code>(i+1,j+1)</code>到达最底层的最大和<code>dp[i+1][j+1]</code>;</li>\n<li>即进行了一次决策，走位置<code>(i,j)</code>的左下还是右下：</li>\n<li>式子如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">dp[i][j]=<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">dp</span>(i+<span class=\"hljs-number\">1</span>,j),<span class=\"hljs-built_in\">dp</span>(i+<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>))+f[i][j];<br></code></pre></td></tr></table></figure>\n<ul>\n<li>把<code>dp[i][j]</code>称为问题的<strong>状态</strong>，而把上面的式子称为<strong>状态转移方程</strong>。</li>\n</ul>\n</li>\n<li>\n<p>例题代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">25</span>;<br><span class=\"hljs-type\">int</span> f[MAXN][MAXN],dp[MAXN][MAXN];<br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-comment\">//数塔递归函数（动态规划）</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getMax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i,<span class=\"hljs-type\">int</span> j)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(i==n)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> f[n][j];<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        dp[i][j]=<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">getMax</span>(i+<span class=\"hljs-number\">1</span>,j),<span class=\"hljs-built_in\">getMax</span>(i+<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>))+f[i][j];<br>        <span class=\"hljs-keyword\">return</span> dp[i][j];<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=<span class=\"hljs-number\">1</span>;m&lt;=k;m++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;f[k][m]);<br>        &#125;<br>    &#125;<br>    dp[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]= <span class=\"hljs-built_in\">getMax</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,dp[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"贪心\"><a class=\"markdownIt-Anchor\" href=\"#贪心\"></a> 贪心</h3>\n<h4 id=\"简单贪心\"><a class=\"markdownIt-Anchor\" href=\"#简单贪心\"></a> 简单贪心</h4>\n","site":{"data":{}},"more":"<h1 id=\"算法笔记\"><a class=\"markdownIt-Anchor\" href=\"#算法笔记\"></a> 算法笔记</h1>\n<h2 id=\"cc快速入门\"><a class=\"markdownIt-Anchor\" href=\"#cc快速入门\"></a> C/C++快速入门</h2>\n<h3 id=\"头文件\"><a class=\"markdownIt-Anchor\" href=\"#头文件\"></a> 头文件</h3>\n<ul>\n<li>当我们忘记函数包含在哪个头文件下时或者头文件包含较多时，可以使用这个万能头文件来代替。但这个头文件也有缺点，最明显的是使用后<strong>编译时间太长</strong>。另外，由于 <code>include＜bits/stdc++.h＞</code>不是C++的标准头文件，所以会<strong>有少部分编译器不支持</strong>。因此建议使用<strong>标准头文件</strong>！</li>\n</ul>\n<h3 id=\"主函数\"><a class=\"markdownIt-Anchor\" href=\"#主函数\"></a> 主函数</h3>\n<ul>\n<li>主函数是一个程序的入口位置，整个程序从主函数开始执行，而且一个程序最多只能有一个主函数。</li>\n</ul>\n<h3 id=\"基本数据类型\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型\"></a> 基本数据类型</h3>\n<h4 id=\"变量的定义\"><a class=\"markdownIt-Anchor\" href=\"#变量的定义\"></a> 变量的定义</h4>\n<ul>\n<li>变量是在程序运行过程中<strong>其值可以改变的量</strong>，需要在<strong>定义</strong>之后才可以使用。</li>\n</ul>\n<h4 id=\"变量的类型\"><a class=\"markdownIt-Anchor\" href=\"#变量的类型\"></a> 变量的类型</h4>\n<h5 id=\"基本数据类型-2\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型-2\"></a> 基本数据类型</h5>\n<ul>\n<li>基本数据类型分为<strong>整型、浮点型、字符型和布尔型</strong>。</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310102009603.png\" alt=\"\" /></p>\n<ul>\n<li>注意在计算机系统中不管正数与负数的表示和存储都是以<strong>补码</strong>的形式。</li>\n<li><strong>原码</strong>的表示为：第一位表示符号（0为正，1为负），其余位表示数值。</li>\n<li><strong>反码</strong>的表示方法分为正数和负数两种：\n<ul>\n<li>正数的反码等于原码本身。</li>\n<li>负数的反码是在其原码的基础上，符号位不变（即首位不变），其余各位按位取反。</li>\n</ul>\n</li>\n<li><strong>补码</strong>的表示方法同样分为正数和负数两种：\n<ul>\n<li>正数的补码是其原码本身。</li>\n<li>负数的补码是在其原码的基础上，符号位不变，其余各位按位取反后加1（即在反码的基础上加1）。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"整型int\"><a class=\"markdownIt-Anchor\" href=\"#整型int\"></a> 整型(int)</h5>\n<ul>\n<li>对于整型<code>int</code>而言，一个整数占<strong>32bit</strong>，即<strong>4个Byte</strong>，一般绝对值在$$10^9$$范围以内的整数都可以定义为<strong>int型</strong>。</li>\n</ul>\n<h5 id=\"长整型long-long\"><a class=\"markdownIt-Anchor\" href=\"#长整型long-long\"></a> 长整型(long long)</h5>\n<ul>\n<li>对于长整型<code>long long</code>而言，一个整数占<strong>64bit</strong>，即<strong>8个Byte</strong>，如果需要的整数取值范围超过<strong>2147483647</strong>(超过$$10^{10}$$)就需要使用<strong>长整型</strong>。</li>\n</ul>\n<h5 id=\"浮点型\"><a class=\"markdownIt-Anchor\" href=\"#浮点型\"></a> 浮点型</h5>\n<ul>\n<li><code>%f</code>是<strong>单精度浮点型</strong>(<code>float</code>)和<strong>双精度浮点型</strong>(<code>double</code>)的输出格式</li>\n<li>对于浮点型而言，一般不需要使用<code>float</code>，碰到浮点型都应该使用<code>double</code>来进行存储。</li>\n</ul>\n<h5 id=\"字符型\"><a class=\"markdownIt-Anchor\" href=\"#字符型\"></a> 字符型</h5>\n<h6 id=\"字符变量和字符常量\"><a class=\"markdownIt-Anchor\" href=\"#字符变量和字符常量\"></a> 字符变量和字符常量</h6>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">char</span> c;<br><span class=\"hljs-type\">char</span> c = <span class=\"hljs-string\">&#x27;e&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>从上面的程序中可以看出来，第一段的<code>c</code>被成为<strong>字符变量</strong>，对于带单引号的<code>‘e’</code>则被称为<strong>字符常量</strong>，而且必须是<strong>单个字符</strong>。</li>\n<li><strong>小写字母</strong>比<strong>大写字母</strong>的<strong>ASCII码值</strong>大<strong>32</strong>。</li>\n<li><code>%c</code>是<code>char</code>型的输出格式。</li>\n</ul>\n<h6 id=\"转义字符\"><a class=\"markdownIt-Anchor\" href=\"#转义字符\"></a> 转义字符</h6>\n<ul>\n<li><strong>ASCII码</strong>中有一部分是<strong>控制字符</strong>，是<strong>不可显示</strong>的。</li>\n</ul>\n<ul>\n<li>比较常用的转义字符：</li>\n</ul>\n<blockquote>\n<p>\\n 表示换行</p>\n<p>\\0 表示空字符NULL，其ASCII码为0，要注意 \\0 不是空格</p>\n</blockquote>\n<h6 id=\"字符串常量\"><a class=\"markdownIt-Anchor\" href=\"#字符串常量\"></a> 字符串常量</h6>\n<p>字符串常量可以作为初值赋给字符串数组，并且使用<code>%s</code>的格式输出。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">25</span>] = <span class=\"hljs-string\">&quot;this is the char test&quot;</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">this</span> <span class=\"hljs-keyword\">is</span> the <span class=\"hljs-built_in\">char</span> test<br></code></pre></td></tr></table></figure>\n<h5 id=\"布尔型\"><a class=\"markdownIt-Anchor\" href=\"#布尔型\"></a> 布尔型</h5>\n<p>布尔型变量只能是<strong>true(真、非零)<strong>和</strong>false(假、零)</strong>。</p>\n<h4 id=\"强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#强制类型转换\"></a> 强制类型转换</h4>\n<p>强制类型转换的格式如下：</p>\n<blockquote>\n<p>(新类型名)变量名</p>\n</blockquote>\n<h4 id=\"符号常量和const常量\"><a class=\"markdownIt-Anchor\" href=\"#符号常量和const常量\"></a> 符号常量和const常量</h4>\n<ul>\n<li>符号常量通俗而言就是替换，也称为“宏定义”。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> 标识符 常量</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pi 3.14</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>另一种定义常量的办法是const常量。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">const</span> 数据类型 变量名 = 常量;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> pi = <span class=\"hljs-number\">3.14</span>;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>这两种写法都被称为常量，一旦确定其值后将无法改变。</p>\n</blockquote>\n<h4 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\"></a> 运算符</h4>\n<h5 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\"></a> 算术运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122043030.png\" alt=\"\" /></p>\n<h5 id=\"关系运算符\"><a class=\"markdownIt-Anchor\" href=\"#关系运算符\"></a> 关系运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122044294.png\" alt=\"\" /></p>\n<h5 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\"></a> 逻辑运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122045903.png\" alt=\"\" /></p>\n<h5 id=\"条件运算符\"><a class=\"markdownIt-Anchor\" href=\"#条件运算符\"></a> 条件运算符</h5>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">A : B ? C<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果A为真，执行并返回B的结果；如果A为假，那么执行并返回C的结果。</li>\n</ul>\n<h5 id=\"位运算符\"><a class=\"markdownIt-Anchor\" href=\"#位运算符\"></a> 位运算符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310122048285.png\" alt=\"\" /></p>\n<h3 id=\"顺序结构\"><a class=\"markdownIt-Anchor\" href=\"#顺序结构\"></a> 顺序结构</h3>\n<h4 id=\"使用scanf和printf输入输出\"><a class=\"markdownIt-Anchor\" href=\"#使用scanf和printf输入输出\"></a> 使用scanf和printf输入/输出</h4>\n<h5 id=\"scanf格式符\"><a class=\"markdownIt-Anchor\" href=\"#scanf格式符\"></a> scanf格式符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131437646.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>注意上表中最后一行，数组名称本身就代表了这个数组第一个元素的地址，所以不需要加取地址运算符。因此在<code>scanf</code>中，除了<code>char</code>数组整个输入的情况不加<code>&amp;</code>之外，其他变量类型都需要加<code>&amp;</code>。</p>\n</li>\n<li>\n<p>注意字符数组使用<code>%s</code>读入的时候以<strong>空格</strong>和<strong>换行</strong>为读入结束的标志。</p>\n</li>\n</ul>\n<h5 id=\"printf格式符\"><a class=\"markdownIt-Anchor\" href=\"#printf格式符\"></a> printf格式符</h5>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310131513505.png\" alt=\"\" /></p>\n<ul>\n<li>对于<code>double</code>类型的变量，其在<code>printf</code>中的输出格式变成了<code>%f</code>，而在<code>scanf</code>中却是<code>%lf</code>。</li>\n</ul>\n<h5 id=\"三种实用的输出格式\"><a class=\"markdownIt-Anchor\" href=\"#三种实用的输出格式\"></a> 三种实用的输出格式</h5>\n<h6 id=\"md\"><a class=\"markdownIt-Anchor\" href=\"#md\"></a> %md</h6>\n<ul>\n<li><code>%md</code>可以使不足<strong>m</strong>位的<code>int</code>型变量以<strong>m</strong>位进行右对齐输出，其中高位用<strong>空格</strong>补齐，如果变量本身超过<strong>m</strong>位，则保持原样。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">123</span>;<br>    <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">12345678</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%5d\\n&quot;</span>,a);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%5d\\n&quot;</span>,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">  <span class=\"hljs-number\">123</span><br><span class=\"hljs-number\">12345678</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"0md\"><a class=\"markdownIt-Anchor\" href=\"#0md\"></a> %0md</h6>\n<ul>\n<li><code>%0md</code>只是在<code>%md</code>中间多加了<strong>0</strong>。和<code>%md</code>的唯一不同在于当变量不足<strong>m</strong>位时，将在前面补足够数量的<strong>0</strong>而不是空格。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a = <span class=\"hljs-number\">123</span>;<br>    <span class=\"hljs-type\">int</span> b = <span class=\"hljs-number\">12345678</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d\\n&quot;</span>,a);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%05d\\n&quot;</span>,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">00123</span><br><span class=\"hljs-number\">12345678</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"mf\"><a class=\"markdownIt-Anchor\" href=\"#mf\"></a> %.mf</h6>\n<ul>\n<li>%.mf可以让浮点数保留m位小数输出，精度是“四舍六入五成双”，具体而言为：\n<ul>\n<li>5前为奇数，舍5入1；</li>\n<li>5前为偶数，舍5不进（0是偶数）。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"使用getchar和putchar输入输出字符\"><a class=\"markdownIt-Anchor\" href=\"#使用getchar和putchar输入输出字符\"></a> 使用getchar()和putchar()输入/输出字符</h4>\n<ul>\n<li><code>getchar()</code>用来输入单个字符，<code>putchar()</code>用来输出单个字符。</li>\n<li><code>getchar()</code>可以识别并读入换行符。</li>\n</ul>\n<h4 id=\"typedef\"><a class=\"markdownIt-Anchor\" href=\"#typedef\"></a> typedef</h4>\n<ul>\n<li><code>typedef</code>能够给复杂的数据类型起一个别名，这样在使用过程中就可以使用别名来替换原来的写法。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-type\">long</span> LL;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    LL a = <span class=\"hljs-number\">123456789123454321</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lld\\n&quot;</span>,a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123456789123454321<br></code></pre></td></tr></table></figure>\n<h3 id=\"选择结构\"><a class=\"markdownIt-Anchor\" href=\"#选择结构\"></a> 选择结构</h3>\n<h4 id=\"if语句\"><a class=\"markdownIt-Anchor\" href=\"#if语句\"></a> if语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171623893.png\" alt=\"\" /></p>\n<h4 id=\"if语句的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#if语句的嵌套\"></a> if语句的嵌套</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624875.png\" alt=\"\" /></p>\n<h4 id=\"switch语句\"><a class=\"markdownIt-Anchor\" href=\"#switch语句\"></a> switch语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171624551.png\" alt=\"\" /></p>\n<h3 id=\"循环结构\"><a class=\"markdownIt-Anchor\" href=\"#循环结构\"></a> 循环结构</h3>\n<h4 id=\"while语句\"><a class=\"markdownIt-Anchor\" href=\"#while语句\"></a> while语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171628441.png\" alt=\"\" /></p>\n<ul>\n<li>在while语句中，只要条件A成立就一直执行省略号里面的内容。</li>\n</ul>\n<h4 id=\"dowhile语句\"><a class=\"markdownIt-Anchor\" href=\"#dowhile语句\"></a> do…while语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171630802.png\" alt=\"\" /></p>\n<ul>\n<li>do…while语句会先执行省略号中的内容一次，然后才判断<strong>条件A</strong>是否<strong>成立</strong>，如果<strong>条件A</strong>成立，就继续反复执行省略号中的内容，直到某一次条件A<strong>不再成立</strong>，则退出循环。</li>\n</ul>\n<h4 id=\"for语句\"><a class=\"markdownIt-Anchor\" href=\"#for语句\"></a> for语句</h4>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634133.png\" alt=\"\" /></p>\n<ul>\n<li>for语句的具体格式如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310171634463.png\" alt=\"\" /></p>\n<h4 id=\"break和continue语句\"><a class=\"markdownIt-Anchor\" href=\"#break和continue语句\"></a> break和continue语句</h4>\n<ul>\n<li><code>break</code>语句不仅可以强制退出<code>switch</code>语句，而且break同样可以退出循环语句，即可以在需要的条件下直接退出循环。</li>\n<li><code>continue</code>语句的作用和<code>break</code>语句的作用有点相似，它可以在需要的地方临时结束循环的<strong>当前轮回</strong>，然后进入<strong>下一轮回</strong>。</li>\n</ul>\n<h3 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\"></a> 数组</h3>\n<h4 id=\"一维数组\"><a class=\"markdownIt-Anchor\" href=\"#一维数组\"></a> 一维数组</h4>\n<ul>\n<li><strong>数组</strong>就是把<strong>相同数据类型</strong>的变量组合在一起而产生的<strong>数据集合</strong>，<strong>数组</strong>就是从某个地址开始<strong>连续若干个位置</strong>形成的元素集合。（<em>数组的地址是连续存放的</em>）</li>\n<li>一维数组的定义格式如下：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">数据类型 数组名<span class=\"hljs-selector-attr\">[数组大小]</span>；<br></code></pre></td></tr></table></figure>\n<ul>\n<li>数组大小必须是<strong>整数常量</strong>，不可以是变量。</li>\n</ul>\n<h4 id=\"冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序\"></a> 冒泡排序</h4>\n<ul>\n<li>冒泡的本质是在于<strong>交换</strong>，即每次通过交换的方式把<strong>当前剩余元素</strong>的<strong>最大值</strong>移动到一端，而<strong>当剩余元素</strong>减少为<strong>0</strong>时，排序结束。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">7</span>] = &#123;<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">7</span>&#125;;<span class=\"hljs-comment\">//n=7</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=<span class=\"hljs-number\">6</span>;i++)<span class=\"hljs-comment\">//整个过程执行n-1趟</span><br>    &#123;<br>        <span class=\"hljs-comment\">//每一趟中将左边元素与右边相邻元素依次对比，若大的数在左边，则交换这两个数</span><br>        <span class=\"hljs-comment\">//当该趟结束的时候，该趟的最大数被移到了该趟剩余数的最右边</span><br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;<span class=\"hljs-number\">7</span>-i;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(a[j]&gt;a[j+<span class=\"hljs-number\">1</span>])<br>            &#123;<br>                temp = a[j];<br>                a[j] = a[j+<span class=\"hljs-number\">1</span>];<br>                a[j+<span class=\"hljs-number\">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">6</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"二维数组\"><a class=\"markdownIt-Anchor\" href=\"#二维数组\"></a> 二维数组</h4>\n<ul>\n<li>二维数组是一位数组的扩展：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">数据类型 数组名[第一维大小][第二维大小];<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>int a[5][6]</code>数组的直观理解：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310182107408.png\" alt=\"\" /></p>\n<ul>\n<li><strong>特别提醒：<strong>如果数组的大小较大，大概在$$10^6$$的级别，则</strong>需要定义在主函数外面</strong>，否则会使得程序异常退出，原因是函数内部申请的局部变量来自<strong>系统栈</strong>，所允许申请的<strong>空间较小</strong>；而函数外部申请的全局变量来自<strong>静态存储区</strong>，允许申请的<strong>空间较大</strong>。</li>\n</ul>\n<h4 id=\"memset对数组中每个元素赋相同的初值\"><a class=\"markdownIt-Anchor\" href=\"#memset对数组中每个元素赋相同的初值\"></a> memset——对数组中每个元素赋相同的初值</h4>\n<ul>\n<li>\n<p><strong>需要注意的是</strong>：<code>memset</code>使用的是按<strong>字节</strong>赋值，即对<strong>每个字节</strong>赋相同的值，这样的话，在<code>int</code>型数组中每个数据的<strong>四个字节</strong>都会被分配为<strong>相同的值</strong>，因此为了避免出错，只建议对非<code>char</code>型的数组赋值为<strong>0</strong>和**-1**；</p>\n</li>\n<li>\n<p>使用<code>memset</code>对数组赋值时需要用<code>#include&lt;string.h&gt;</code>头文件；</p>\n</li>\n<li>\n<p><code>memset</code>函数的格式为：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">memset</span>(数组名，赋的数值，<span class=\"hljs-built_in\">sizeof</span>(数组名));<br></code></pre></td></tr></table></figure>\n<h4 id=\"字符数组\"><a class=\"markdownIt-Anchor\" href=\"#字符数组\"></a> 字符数组</h4>\n<h5 id=\"字符数组的初始化\"><a class=\"markdownIt-Anchor\" href=\"#字符数组的初始化\"></a> 字符数组的初始化</h5>\n<ul>\n<li>和普通数组一样，字符数组也可以采用循环的方法初始化；</li>\n<li>除此之外，字符数组也可以通过<strong>直接赋值字符串</strong>来进行初始化（<strong>仅限于初始化</strong>，程序的其他位置不允许这样直接赋值整个字符串）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">10</span>] = <span class=\"hljs-string\">&quot;YUGIN!&quot;</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">6</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,str[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs erlang-repl\">YUGIN!<br></code></pre></td></tr></table></figure>\n<h5 id=\"字符数组的输入输出\"><a class=\"markdownIt-Anchor\" href=\"#字符数组的输入输出\"></a> 字符数组的输入输出</h5>\n<h6 id=\"scanf输入printf输出\"><a class=\"markdownIt-Anchor\" href=\"#scanf输入printf输出\"></a> scanf输入，printf输出</h6>\n<ul>\n<li>\n<p><code>scanf</code>和<code>printf</code>对字符类型有<code>%c</code>和<code>%s</code>两种格式，其中<code>%c</code>用来输入<strong>单个字符</strong>，<code>%s</code>用来输入<strong>一个字符串</strong>并存在<strong>字符数组</strong>中。</p>\n</li>\n<li>\n<p><code>%c</code>格式能够识别<strong>空格</strong>和<strong>换行符</strong>并将其输入，<code>%s</code>通过<strong>空格</strong>或<strong>换行符</strong>来识别<strong>一个字符串的结束</strong>。</p>\n</li>\n<li>\n<p><code>scanf</code>在使用<code>%s</code>时，后面对应的数组名是不需要加<code>&amp;</code><strong>取地址运算符</strong>的。</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">10</span>];<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输入输出：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">输入：<span class=\"hljs-built_in\">test</span> <span class=\"hljs-built_in\">test</span> <span class=\"hljs-built_in\">test</span><br>输出：<span class=\"hljs-built_in\">test</span><br></code></pre></td></tr></table></figure>\n<h6 id=\"getchar输入putchar输出\"><a class=\"markdownIt-Anchor\" href=\"#getchar输入putchar输出\"></a> getchar输入，putchar输出</h6>\n<ul>\n<li><code>getchar</code>和<code>putchar</code>分别用来输入和输出<strong>单个字符</strong>；</li>\n<li>输入和输出示例：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a;<br>    a=<span class=\"hljs-built_in\">getchar</span>();<br>    <span class=\"hljs-built_in\">getchar</span>();<span class=\"hljs-comment\">//可以用作吸收某些字符</span><br>    <span class=\"hljs-built_in\">putchar</span>(a);<br>    <span class=\"hljs-built_in\">putchar</span>(<span class=\"hljs-string\">&#x27;\\n&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h6 id=\"gets输入puts输出\"><a class=\"markdownIt-Anchor\" href=\"#gets输入puts输出\"></a> gets输入，puts输出</h6>\n<ul>\n<li><code>gets</code>用来输入<strong>一行字符串</strong>（即<strong>一个一维数组</strong>，只有遇到<code>\\n</code>时结束）</li>\n<li><code>puts</code>用来输出一行字符串（即一个一维数组，只有遇到<code>\\n</code>时结束）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">char</span> b[<span class=\"hljs-number\">4</span>][<span class=\"hljs-number\">10</span>];<br>    <span class=\"hljs-built_in\">gets</span>(a);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">gets</span>(b[i]);<br>    &#125;<br>    <span class=\"hljs-built_in\">puts</span>(a);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">puts</span>(b[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输入输出示例：</li>\n</ul>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">输入：<br>this <span class=\"hljs-keyword\">is</span> <br>yugin<span class=\"hljs-symbol\">&#x27;s</span><br>blog<br>输出：<br>this <span class=\"hljs-keyword\">is</span> <br>yugin<span class=\"hljs-symbol\">&#x27;s</span><br>blog<br></code></pre></td></tr></table></figure>\n<h5 id=\"字符数组的存放方式\"><a class=\"markdownIt-Anchor\" href=\"#字符数组的存放方式\"></a> 字符数组的存放方式</h5>\n<ul>\n<li>由于<strong>字符数组</strong>是由若干个<code>char</code>类型的元素组成，因此<strong>字符数组</strong>的每一位都是一个<code>char</code>字符。</li>\n<li>在<strong>一维数组</strong>（或是<strong>二维数组的第二维</strong>）的末尾都有一个<strong>空字符</strong><code>\\0</code>，用于表示存放的<strong>字符串的结尾</strong>。</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221521845.png\" alt=\"\" /></p>\n<ul>\n<li>特别注意：<strong>空字符</strong><code>\\0</code>的<strong>ASCII</strong>码为<strong>0</strong>，即空字符<code>NULL</code>，会占用一个<strong>字符位</strong>，因此在初始化的时候<strong>数组长度</strong>至少比<strong>字符串长度</strong>多一个长度。</li>\n<li>如果不是使用<code>scanf</code>函数的<code>%s</code>格式或<code>gets</code>函数输入字符串（例如使用<code>getchar</code>），则需要手动在字符数组最后加入<code>\\0</code>，否则输出字符串会因为无法识别字符串末尾而输出<strong>乱码</strong>。</li>\n</ul>\n<h4 id=\"stringh头文件\"><a class=\"markdownIt-Anchor\" href=\"#stringh头文件\"></a> string.h头文件</h4>\n<ul>\n<li><code>string.h</code>头文件包含了许多用于字符数组的函数。</li>\n</ul>\n<h5 id=\"strlen函数\"><a class=\"markdownIt-Anchor\" href=\"#strlen函数\"></a> strlen()函数</h5>\n<ul>\n<li><code>strlen()</code>函数可以得到字符数组中第一个<code>\\0</code>前的字符的个数并返回，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">len = <span class=\"hljs-built_in\">strlen</span>(字符数组)；<br></code></pre></td></tr></table></figure>\n<h5 id=\"strcmp函数\"><a class=\"markdownIt-Anchor\" href=\"#strcmp函数\"></a> strcmp()函数</h5>\n<ul>\n<li>strcmp函数返回两个字符串大小的比较结果，比较原则是字典序，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cmp = <span class=\"hljs-built_in\">strcmp</span>(字符数组<span class=\"hljs-number\">1</span>，字符数组<span class=\"hljs-number\">2</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>字典序的解释：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221535589.png\" alt=\"\" /></p>\n<h5 id=\"strcpy函数\"><a class=\"markdownIt-Anchor\" href=\"#strcpy函数\"></a> strcpy()函数</h5>\n<ul>\n<li><code>strcpy()</code>函数可以把一个字符串复制给另一个字符串，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">strcpy</span>(字符数组<span class=\"hljs-number\">1</span>,字符数组<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">puts</span>(字符数组<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：是把<strong>字符数组2</strong>复制给<strong>字符数组1</strong>，包括<strong>结束符</strong><code>\\0</code>；</li>\n</ul>\n<h5 id=\"strcat函数\"><a class=\"markdownIt-Anchor\" href=\"#strcat函数\"></a> strcat()函数</h5>\n<ul>\n<li><code>strcat()</code>可以把一个字符串接到另一个字符串后面，其格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">strcpy</span>(字符数组<span class=\"hljs-number\">1</span>,字符数组<span class=\"hljs-number\">2</span>);<br><span class=\"hljs-built_in\">puts</span>(字符数组<span class=\"hljs-number\">1</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：是把<strong>字符数组2</strong>接到<strong>字符数组1</strong>后面；</li>\n</ul>\n<h5 id=\"sscanf和sprintf\"><a class=\"markdownIt-Anchor\" href=\"#sscanf和sprintf\"></a> sscanf()和sprintf()</h5>\n<ul>\n<li>\n<p><code>sscanf()</code>和<code>sprintf()</code>是处理字符串问题的利器！</p>\n</li>\n<li>\n<p><code>sscanf()</code>和<code>sprintf()</code>的使用格式如下：</p>\n</li>\n</ul>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">sscanf(<span class=\"hljs-name\">str</span>,<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-symbol\">&amp;n</span>)<span class=\"hljs-comment\">;</span><br>sprintf(<span class=\"hljs-name\">str</span>,<span class=\"hljs-string\">&quot;%d&quot;</span>,n)<span class=\"hljs-comment\">;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>上面<code>sscanf()</code>写法的作用是把字符数组<code>str</code>的中的内容以<code>&quot;%d&quot;</code>的格式写到<code>n</code>中（<strong>从左到右</strong>）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">20</span>] = <span class=\"hljs-string\">&quot;123&quot;</span>;<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">sscanf</span>(a,<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,n);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123<br></code></pre></td></tr></table></figure>\n<ul>\n<li>上面<code>sprintf()</code>写法的作用是把<code>n</code>以<code>&quot;%d&quot;</code>的格式写到<code>str</code>字符数组中（<strong>从右到左</strong>）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> a[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">123433</span>;<br>    <span class=\"hljs-built_in\">sprintf</span>(a,<span class=\"hljs-string\">&quot;%d&quot;</span>,n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,a);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123433<br></code></pre></td></tr></table></figure>\n<ul>\n<li>上面的仅仅是简单的应用，实际上<code>sscanf()</code>和<code>sprintf()</code>可以进行更加复杂的字符串处理：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">520</span>;<br>    <span class=\"hljs-type\">double</span> db=<span class=\"hljs-number\">2002.080512121</span>;<br>    <span class=\"hljs-type\">char</span> str2[<span class=\"hljs-number\">20</span>]=<span class=\"hljs-string\">&quot;yugin!&quot;</span>;<br>    <span class=\"hljs-type\">char</span> str3[<span class=\"hljs-number\">20</span>]=<span class=\"hljs-string\">&quot;I&quot;</span>;<br>    <span class=\"hljs-built_in\">sprintf</span>(str,<span class=\"hljs-string\">&quot;%s%d%s,%.4f&quot;</span>,str3,n,str2,db);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">I520yugin</span>!,<span class=\"hljs-number\">2002</span>.<span class=\"hljs-number\">0805</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>最后指出，<code>sscanf()</code>和<code>sprintf()</code>也可以支持正则表达式，则许多字符串问题将迎刃而解。</li>\n</ul>\n<h3 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\"></a> 函数</h3>\n<ul>\n<li>函数是一个实现一定功能的语句的集合，并在需要时可以反复调用而不必每次都重新写一遍。</li>\n<li>函数的基本语法格式：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221718986.png\" alt=\"\" /></p>\n<h4 id=\"全局变量\"><a class=\"markdownIt-Anchor\" href=\"#全局变量\"></a> 全局变量</h4>\n<ul>\n<li>全局变量是指在定义之后的所有程序段内都有效的变量（即定义在所有函数之前）</li>\n</ul>\n<h4 id=\"局部变量\"><a class=\"markdownIt-Anchor\" href=\"#局部变量\"></a> 局部变量</h4>\n<ul>\n<li>与全局变量相对，局部变量定义在函数内部，且只在函数内部生效，函数结束时局部变量便销毁。</li>\n</ul>\n<h4 id=\"再谈main函数\"><a class=\"markdownIt-Anchor\" href=\"#再谈main函数\"></a> 再谈main()函数</h4>\n<ul>\n<li>主函数对一个程序而言只有一个，且无论主函数写在哪个位置，整个程序一定是从主函数的第一个语句开始执行，然后在需要时再调用其他函数。</li>\n<li><code>main()</code>函数的结构：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310221723044.png\" alt=\"\" /></p>\n<h4 id=\"以数组作为函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#以数组作为函数的参数\"></a> 以数组作为函数的参数</h4>\n<ul>\n<li>函数的参数可以是数组，且数组作为参数时，参数中数组的第一维不需要填写长度（如果是二维数组，则<strong>第二维需要填写长度</strong>）</li>\n<li>数组作为参数时，在函数中对数组元素的修改就<strong>等同于对原素组进行修改</strong>（与普通的局部变量不同）</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">changStr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a[],<span class=\"hljs-type\">int</span> b[][<span class=\"hljs-number\">3</span>])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    a[<span class=\"hljs-number\">0</span>]=<span class=\"hljs-number\">1</span>;<br>    a[<span class=\"hljs-number\">1</span>]=<span class=\"hljs-number\">3</span>;<br>    b[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]=<span class=\"hljs-number\">5</span>;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> inter[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-type\">int</span> in[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">changStr</span>(inter,in);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,inter[<span class=\"hljs-number\">0</span>]);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,inter[<span class=\"hljs-number\">1</span>]);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,in[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>]);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">1<br>3<br>5<br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意：虽然数组可以作为参数，但是却不允许作为返回类型出现。</li>\n</ul>\n<h4 id=\"函数的嵌套调用\"><a class=\"markdownIt-Anchor\" href=\"#函数的嵌套调用\"></a> 函数的嵌套调用</h4>\n<ul>\n<li>函数的嵌套调用是指在一个函数中调用另一个函数，调用方式和<code>main()</code>函数调用其他函数一样。</li>\n</ul>\n<h4 id=\"函数递归调用\"><a class=\"markdownIt-Anchor\" href=\"#函数递归调用\"></a> 函数递归调用</h4>\n<ul>\n<li>\n<p>函数递归调用是指一个函数调用该函数本身；</p>\n</li>\n<li>\n<p>类似下面计算n的阶乘的代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)*n;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(a));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">6<br></code></pre></td></tr></table></figure>\n<h3 id=\"指针\"><a class=\"markdownIt-Anchor\" href=\"#指针\"></a> 指针</h3>\n<h4 id=\"什么是指针\"><a class=\"markdownIt-Anchor\" href=\"#什么是指针\"></a> 什么是指针</h4>\n<ul>\n<li>在C语言中，<strong>指针</strong>就是<strong>内存地址</strong>，<strong>指针变量</strong>是指用来<strong>存放内存地址的变量</strong>。</li>\n<li>在C/C++语言中，<strong>指针</strong>一般被认为是<strong>指针变量</strong>，指针变量的内容存储的是<strong>其指向的对象的首地址</strong>，指向的对象可以是<strong>变量</strong>（指针变量也是变量），<strong>数组</strong>，<strong>函数</strong>等<strong>占据存储空间的实体</strong>。</li>\n<li>只要在变量前面加上<code>&amp;</code>，就表示变量的地址。</li>\n<li>指针是一个<code>unsigned</code>类型的函数。</li>\n</ul>\n<h4 id=\"指针变量\"><a class=\"markdownIt-Anchor\" href=\"#指针变量\"></a> 指针变量</h4>\n<ul>\n<li>指针变量是用来存放指针（或者可以理解为地址）。</li>\n<li>在某种数据类型后加<code>*</code>来表示这是一个指针变量，定义如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> *p;<br><span class=\"hljs-type\">double</span> *p;<br><span class=\"hljs-type\">char</span> *p;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>给指针变量赋值的方式一般是把变量的地址取出来，然后赋给对应类型的指针变量：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">int</span> a;<br><span class=\"hljs-type\">int</span> *p = &amp;a;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果<code>p</code>是指针（即<code>p</code>保存的是某个数据类型的地址），则<code>*p</code>就是这个地址所存放的元素：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-type\">int</span> *p = &amp;a;<br>    a=<span class=\"hljs-number\">233</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,*p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">233<br></code></pre></td></tr></table></figure>\n<ul>\n<li>指针变量也可以进行加减法，其中<strong>减法</strong>的结果是两个地址偏移的距离。</li>\n<li>例如，对于<code>int*</code>类型的指针变量<code>p</code>而言，<code>p+1</code>是指<code>p</code>所指的int型变量的下一个<code>int</code>型变量地址，这个所谓的“下一个”是跨越了一整个<code>int</code>型（即<strong>4Byte</strong>）。</li>\n<li>指针变量也支持自增和自减的操作，示例如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-type\">int</span> *p = &amp;a;<br>    a=<span class=\"hljs-number\">233</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,p);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,p+<span class=\"hljs-number\">1</span>);<br>    p++;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">113245364</span><br><span class=\"hljs-number\">113245368</span><br><span class=\"hljs-number\">113245368</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"指针与数组\"><a class=\"markdownIt-Anchor\" href=\"#指针与数组\"></a> 指针与数组</h4>\n<ul>\n<li><strong>数组名称</strong>作为<strong>首地址</strong>使用，因此<code>a == &amp;a[0]</code>和<code>a+i == &amp;a[i]</code>成立。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">10</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>&#125;;<br>    <span class=\"hljs-type\">int</span> *p = a;<br>    <span class=\"hljs-type\">int</span> *q;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,p);<br>    q=&amp;a[<span class=\"hljs-number\">5</span>];<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,q);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,q-p);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-number\">1241512688</span><br><span class=\"hljs-number\">1241512708</span><br><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>&amp;a[0]</code>和<code>&amp;a[5]</code>之间相差5个<code>int</code>（<strong>4个Byte</strong>），因此输出5。</li>\n</ul>\n<h4 id=\"使用指针变量作为函数参数\"><a class=\"markdownIt-Anchor\" href=\"#使用指针变量作为函数参数\"></a> 使用指针变量作为函数参数</h4>\n<ul>\n<li>指针类型也可以作为<strong>函数参数</strong>的类型，这时视为把<strong>变量的地址</strong>传入函数。如果在函数中对这个地址中的元素进行改变，原先的数据就会确实地被改变。</li>\n<li>使用指针编写交换数据地函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//交换函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">my_swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> *b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp;<br>    temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-built_in\">my_swap</span>(&amp;a,&amp;b);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;a=%d b=%d&quot;</span>,a,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-attribute\">a</span>=2 <span class=\"hljs-attribute\">b</span>=1<br></code></pre></td></tr></table></figure>\n<h4 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\"></a> 引用</h4>\n<h5 id=\"引用的含义\"><a class=\"markdownIt-Anchor\" href=\"#引用的含义\"></a> 引用的含义</h5>\n<ul>\n<li>引用是<strong>C++<strong>中一个强有力的语法，引用不产生</strong>副本</strong>，而是给原变量起了个<strong>别名</strong>。</li>\n<li>因此<strong>对引用变量操作就是对原变量操作</strong>。</li>\n<li>引用使用方法只需要在参数类型后面变量名前面加<code>&amp;</code>就行，例子如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//引用示例函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">change</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> &amp;x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    x=<span class=\"hljs-number\">5</span>;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">88</span>;<br>    <span class=\"hljs-built_in\">change</span>(b);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;b=%d&quot;</span>,b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\"><span class=\"hljs-attribute\">b</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>注意要把<strong>引用</strong>的<code>&amp;</code>和取<strong>地址运算符</strong><code>&amp;</code>区分开来，引用并不是取地址的意思。</li>\n</ul>\n<h5 id=\"指针的引用\"><a class=\"markdownIt-Anchor\" href=\"#指针的引用\"></a> 指针的引用</h5>\n<ul>\n<li>通过引用和函数来更改变量指针的地址：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//交换函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">my_swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>* &amp;p1,<span class=\"hljs-type\">int</span>* &amp;p2)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span>* temp = p1;<br>    p1 = p2;<br>    p2 = temp;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> b=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-type\">int</span>* p_a = &amp;a;<br>    <span class=\"hljs-type\">int</span>* p_b = &amp;b;<br>    <span class=\"hljs-built_in\">my_swap</span>(p_a,p_b);<span class=\"hljs-comment\">//必须用指针变量传入，引用不可以使用常量。</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;a=%d b=%d&quot;</span>,*p_a,*p_b);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-attribute\">a</span>=2 <span class=\"hljs-attribute\">b</span>=1<br></code></pre></td></tr></table></figure>\n<ul>\n<li>需要强调的是，<strong>引用</strong>是产生<strong>变量的别名</strong>，因此<strong>常量不可使用引用</strong>，上述代码不可写成<code>my_swap(&amp;a,&amp;b);</code>，必须用<strong>指针变量</strong>进行传入。</li>\n</ul>\n<h3 id=\"结构体struct的使用\"><a class=\"markdownIt-Anchor\" href=\"#结构体struct的使用\"></a> 结构体(struct)的使用</h3>\n<h4 id=\"结构体的定义\"><a class=\"markdownIt-Anchor\" href=\"#结构体的定义\"></a> 结构体的定义</h4>\n<ul>\n<li>定义一个结构体的基本格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Name</span>&#123;<br>  <span class=\"hljs-comment\">//一些基本的数据结构或者自定义的数据类型</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>结构体可以这样定义：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\t<span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>\t<span class=\"hljs-type\">char</span> major[<span class=\"hljs-number\">20</span>];<br>&#125;Alice,Bob,stu[<span class=\"hljs-number\">1000</span>];<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>其中<code>studentInfo</code>是这个结构体的名字，内部定义了相关的数据。<strong>大括号外</strong>定义了<strong>结构体变量</strong>和<strong>结构体数组</strong>。</p>\n</li>\n<li>\n<p>结构体同样能够像基本数据类型那样定义：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">studentInfo Alice;<br>studentInfo stu[<span class=\"hljs-number\">1000</span>];<br></code></pre></td></tr></table></figure>\n<ul>\n<li>值得注意的是，结构体里面能够定义除了自己本身之外的任何数据类型。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">node</span>&#123;<br>\tnode n;<span class=\"hljs-comment\">//不能定义node型变量，因为和本身一致</span><br>\tnode* next;<span class=\"hljs-comment\">//可以定义node*型指针变量</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>虽然不能定义自己本身，但是可以定义自身类型的指针变量。</li>\n</ul>\n<h4 id=\"访问结构体内的元素\"><a class=\"markdownIt-Anchor\" href=\"#访问结构体内的元素\"></a> 访问结构体内的元素</h4>\n<ul>\n<li>访问结构体内的元素有两种方法：<code>&quot;.&quot;</code>和<code>&quot;-&gt;&quot;</code>操作。</li>\n<li>如果把<code>studentInfo</code>定义成如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\tstudentInfo* next;<br>&#125;stu,*p;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>这样<code>studentInfo</code>中多了一个指针<code>next</code>用来指向下一个学生的地址，且结构体变量中定义了<strong>普通变量</strong><code>stu</code>和<strong>指针变量</strong><code>p</code>。</p>\n</li>\n<li>\n<p>因此访问<code>stu</code>中的变量的写法如下：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">stu.id<br>stu.gender<br>stu.next<br></code></pre></td></tr></table></figure>\n<ul>\n<li>访问指针变量<code>p</code>中的元素的写法如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">(*p).<span class=\"hljs-built_in\">id</span><br>(*p).<span class=\"hljs-built_in\">gender</span><br>(*p).next<br></code></pre></td></tr></table></figure>\n<ul>\n<li>还有一种访问结构体指针变量内元素更加简洁的写法：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">p-&gt;id<br>p-&gt;gender<br>p-&gt;next<br></code></pre></td></tr></table></figure>\n<h4 id=\"结构体的初始化\"><a class=\"markdownIt-Anchor\" href=\"#结构体的初始化\"></a> 结构体的初始化</h4>\n<ul>\n<li>结构体的初始化推荐使用<strong>构造函数</strong>的方法。</li>\n<li>构造函数的特点是<strong>函数名与结构体名一致</strong>而且<strong>不需要写返回函数</strong>。</li>\n<li>其中自己定义构造函数的格式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\t<span class=\"hljs-comment\">//以下构造函数的参数用于对结构体内部变量进行赋值</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-type\">int</span> _id,<span class=\"hljs-type\">char</span> _gender)<br>\t&#123;<br>\t\tid = _id;<br>\t\tgender = _gender;<br>\t&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>根据上述代码，即可直接对结构体的变量进行赋值：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">studentInfo stu = <span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-number\">20020805</span>,<span class=\"hljs-string\">&#x27;M&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>需要注意，如果<strong>自己重新定义了构造函数</strong>，则不能不经初始化就定义结构体变量，如下定义能够适应更多不同的场合：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">studentInfo</span>&#123;<br>\t<span class=\"hljs-type\">int</span> id;<br>\t<span class=\"hljs-type\">char</span> gender;<span class=\"hljs-comment\">//&#x27;F&#x27;or&#x27;M&#x27;</span><br>\t<span class=\"hljs-comment\">//原始构造函数，用以不初始化就定义结构体变量</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>()&#123;&#125;<br>\t<span class=\"hljs-comment\">//只初始化gender的构造函数</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-type\">char</span> _gender)<br>\t&#123;<br>\t\tgender = _gender;<br>\t&#125;<br>\t<span class=\"hljs-comment\">//以下构造函数的参数用于对结构体内部两个变量进行赋值</span><br>\t<span class=\"hljs-built_in\">studentInfo</span>(<span class=\"hljs-type\">int</span> _id,<span class=\"hljs-type\">char</span> _gender)<br>\t&#123;<br>\t\tid = _id;<br>\t\tgender = _gender;<br>\t&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n<h3 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h3>\n<h4 id=\"cin和cout\"><a class=\"markdownIt-Anchor\" href=\"#cin和cout\"></a> cin和cout</h4>\n<ul>\n<li>cin和cout是C++的输入输出函数，需要添加头文件<code>#include &lt;iostream&gt;</code>和<code>using namespace std;</code>才能使用。</li>\n</ul>\n<h5 id=\"cin\"><a class=\"markdownIt-Anchor\" href=\"#cin\"></a> cin</h5>\n<ul>\n<li><code>cin</code>采用输入运算符<code>&quot;&gt;&gt;&quot;</code>来进行输入，例如</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cin &gt;&gt; n &gt;&gt; db &gt;&gt; c &gt;&gt; str;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果想读入一整行，则需要<code>getline</code>函数：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];<br>cin.<span class=\"hljs-built_in\">getline</span>(str,<span class=\"hljs-number\">100</span>);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果是<code>string</code>容器，则需要使用以下方式输入：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">100</span>];<br><span class=\"hljs-built_in\">getline</span>(cin,str);<br></code></pre></td></tr></table></figure>\n<h5 id=\"cout\"><a class=\"markdownIt-Anchor\" href=\"#cout\"></a> cout</h5>\n<ul>\n<li><code>cout</code>采用输出运算符<code>&quot;&lt;&lt;&quot;</code>来进行输出，例如</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cout &lt;&lt; n &lt;&lt; db &lt;&lt; c &lt;&lt; <span class=\"hljs-string\">&#x27;\\n&#x27;</span> &lt;&lt; str &lt;&lt; endl;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><code>endl</code>和<code>'\\n'</code>都是表示换行的意思。</li>\n<li>由于<code>cin</code>和<code>cout</code>在输入和输出大量数据时表现糟糕，因此不建议使用。</li>\n</ul>\n<h4 id=\"浮点数的比较\"><a class=\"markdownIt-Anchor\" href=\"#浮点数的比较\"></a> 浮点数的比较</h4>\n<ul>\n<li>由于计算机中采用有限二进制编码，存储并不总是准确，因此需要需要引入极小数<code>eps</code>来对这种误差进行纠正。</li>\n<li>圆周率<code>pi</code>的表达式可以使用<code>acos(-1.0)</code>来进行表示。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> esp = <span class=\"hljs-number\">1e-8</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> pi = <span class=\"hljs-built_in\">acos</span>(<span class=\"hljs-number\">-1.0</span>);<br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> Equ(a,b) (fabs(a-b)&lt;eps)</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"黑盒测试\"><a class=\"markdownIt-Anchor\" href=\"#黑盒测试\"></a> 黑盒测试</h3>\n<h4 id=\"单点测试\"><a class=\"markdownIt-Anchor\" href=\"#单点测试\"></a> 单点测试</h4>\n<ul>\n<li>对于单点测试而言，单点测试只需要按照正常逻辑执行一遍程序即可，是“一次性”的写法，即程序只需要一组数据能够完整执行即可。</li>\n</ul>\n<h4 id=\"多点测试\"><a class=\"markdownIt-Anchor\" href=\"#多点测试\"></a> 多点测试</h4>\n<ul>\n<li>对于多点测试，要求程序能够一次运行所有数据，并要求所有输出的结果都必须正确。</li>\n</ul>\n<h5 id=\"whileeof型\"><a class=\"markdownIt-Anchor\" href=\"#whileeof型\"></a> while…EOF型</h5>\n<ul>\n<li>当题目没有说明有多少数据读入时，就可以利用<code>scanf</code>返回值是否为<code>EOF</code>来判断输入是否结束。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n) != EOF)&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果读入的是字符串，其对应写法如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str) != EOF)&#123;<br>\t...<br>&#125;<br><span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">gets</span>(str) != <span class=\"hljs-literal\">NULL</span>)&#123;<br>\t...<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"入门模拟\"><a class=\"markdownIt-Anchor\" href=\"#入门模拟\"></a> 入门模拟</h2>\n<h3 id=\"再谈字符串输入输出\"><a class=\"markdownIt-Anchor\" href=\"#再谈字符串输入输出\"></a> 再谈字符串输入输出</h3>\n<ul>\n<li>在比较早的<code>C/C++</code>版本中，经常可以看到推荐使用<code>gets</code>函数来进行整行字符串的输入，就像下面这样的简单写法即可输入一整行：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">gets</span>(str);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>但是当输入的字符串长度超过数组长度上限<code>MAX_LEN</code>时，<code>gets</code>函数会把超出的部分也一并读进来，并且会覆盖数组之外的内存空间，这就导致了一定的安全风险，因此<code>C++11</code>标准将<code>gets</code>函数废弃了，然后在<code>C++14</code>时将该函数移除，如果现在想要整行输入的话，推荐使用<code>cin.getline</code>函数（见下文）。</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cin.<span class=\"hljs-built_in\">getline</span>(str, MAX_LEN);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>例如下面一道例题：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//题目：输入一行字符串，然后直接输出这行字符串本身。</span><br><span class=\"hljs-comment\">//输入描述：一行由大小写字母或空格组成的字符串，至少一个字符，不超过50个字符。</span><br><span class=\"hljs-comment\">//输出描述：原样输出输入的字符串。</span><br><span class=\"hljs-comment\">//**************************样例**************************</span><br><span class=\"hljs-comment\">//输入：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo</span><br><span class=\"hljs-comment\">//输出：Huo Zhe Bu Jiu Shi Cang Cu Na Li You De Liao Ni Wo</span><br><span class=\"hljs-comment\">//**************************代码**************************</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN = <span class=\"hljs-number\">1000000</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAX_LEN);<span class=\"hljs-comment\">//由gets(str);函数换成了cin.getline(str,MAX_LEN);</span><br>    <span class=\"hljs-built_in\">puts</span>(str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"再谈sscanf和sprintf\"><a class=\"markdownIt-Anchor\" href=\"#再谈sscanf和sprintf\"></a> 再谈sscanf()和sprintf()</h3>\n<h4 id=\"关于sscanf\"><a class=\"markdownIt-Anchor\" href=\"#关于sscanf\"></a> 关于sscanf()</h4>\n<ul>\n<li>\n<p><code>sscanf</code>是C语言标准库中的一个函数，用于从字符串中读取格式化输入。在C<ins>中也可以使用<code>sscanf</code>函数，但更常用的是使用C</ins>标准库中的<code>stringstream</code>类来进行字符串解析。</p>\n</li>\n<li>\n<p><code>sscanf</code>函数的原型如下：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">sscanf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span>* format, ...)</span></span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>其中，<code>str</code>是要解析的字符串，<code>format</code>是格式化字符串，用于指定解析的规则，<code>...</code>是可变参数列表，用于接收解析出来的数据。</p>\n</li>\n<li>\n<p>与之相似的函数还有<code>scanf</code>和<code>fscanf</code>。其中，<code>scanf</code>从标准输入（通常是键盘）读取数据，而<code>fscanf</code>从文件中读取数据。</p>\n</li>\n</ul>\n<p>在使用<code>sscanf</code>函数时，需要注意以下几点：</p>\n<ul>\n<li><code>format</code>字符串中可以包含格式说明符，如 <code>%d</code>, <code>%f</code>, <code>%s</code>, <code>%c</code>, <code>%x</code>, <code>%o</code>, <code>%u</code>, <code>%e</code>, <code>%g</code>, <code>%p</code>, <code>%n</code>, 等等。</li>\n<li><code>format</code>字符串中可以包含空格、制表符、换行符等空白字符，用于跳过输入字符串中的空白字符。</li>\n<li><code>format</code>字符串中可以包含方括号 <code>[]</code>，用于指定一个字符集合。例如，<code>%[a-z]</code> 表示匹配小写字母。</li>\n<li><code>format</code>字符串中可以包含星号 <code>*</code>，表示跳过该项输入。</li>\n<li><code>sscanf()</code> 函数<strong>返回成功匹配并赋值的个数</strong>。如果返回值小于参数个数，则表示解析失败。</li>\n</ul>\n<p>基于最后一条性质可以实现下述例题：</p>\n<ul>\n<li>题目描述：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">给定一个字符串，它可能是以下三种格式中的一种：<br><br><span class=\"hljs-selector-tag\">A</span> is greater than <span class=\"hljs-selector-tag\">B</span><br><span class=\"hljs-selector-tag\">A</span> is equal <span class=\"hljs-selector-tag\">to</span> <span class=\"hljs-selector-tag\">B</span> plus C<br>No Information<br>其中前两种情况中的<span class=\"hljs-selector-tag\">A</span>、<span class=\"hljs-selector-tag\">B</span>、C均为正整数，而第三种情况中没有数字。请确认字符串代表的信息是否从算术上成立，如果成立，那么输出Yes；否则输出No；如果是第三种情况，那么输出三个问号（即???）。<br><br>注：<br><br><span class=\"hljs-number\">1</span>、请将字符串整行读入后使用sscanf函数进行处理<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输入描述：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">一行满足题意的字符串，其中<span class=\"hljs-selector-tag\">A</span>、<span class=\"hljs-selector-tag\">B</span>、C为不超过<span class=\"hljs-number\">100</span>的正整数。<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出描述：</li>\n</ul>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">根据题意输出<span class=\"hljs-title class_\">Yes</span>、<span class=\"hljs-title class_\">No</span>或<span class=\"hljs-string\">??</span><span class=\"hljs-string\">?。</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>样例：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\"><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*样例1*</span>**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span>**<br>输入:<br>10 is greater than 5<br>输出:<br>Yes<br><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*样例2*</span>**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span>**<br>输入:<br>6 is equal to 1 plus 3<br>输出:<br>No<br><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">**<span class=\"hljs-emphasis\">*样例3*</span>**</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span><span class=\"hljs-strong\">****</span>**<br>输入:<br>No Information<br>输出:<br>???<br></code></pre></td></tr></table></figure>\n<ul>\n<li>实现代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN = <span class=\"hljs-number\">1000</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> A = <span class=\"hljs-number\">0</span>,B = <span class=\"hljs-number\">0</span>,C = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAX_LEN);<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">sscanf</span>(str,<span class=\"hljs-string\">&quot;%d is greater than %d&quot;</span>,&amp;A,&amp;B) == <span class=\"hljs-number\">2</span>)<span class=\"hljs-comment\">//利用sscanf() 函数返回成功匹配并赋值的个数。</span><br>    &#123;<br>       <span class=\"hljs-keyword\">if</span>(A&gt;B)<br>       &#123;<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>       &#125;<br>       <span class=\"hljs-keyword\">else</span><br>       &#123;<br>           <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>       &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">sscanf</span>(str,<span class=\"hljs-string\">&quot;%d is equal to %d plus %d&quot;</span>,&amp;A,&amp;B,&amp;C) == <span class=\"hljs-number\">3</span>)<span class=\"hljs-comment\">//利用sscanf() 函数返回成功匹配并赋值的个数。</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(A==B+C)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Yes&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;No&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;???&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：利用<code>sscanf()</code> 函数返回成功匹配并赋值的个数，从而能够很好地解决问题。</li>\n</ul>\n<h4 id=\"关于sprintf\"><a class=\"markdownIt-Anchor\" href=\"#关于sprintf\"></a> 关于sprintf()</h4>\n<ul>\n<li>\n<p><code>sprintf</code>是C语言标准库中的一个函数，用于将格式化的数据写入字符串中。在C<ins>中也可以使用<code>sprintf</code>函数，但更常用的是使用C</ins>标准库中的<code>ostringstream</code>类来进行字符串解析。</p>\n</li>\n<li>\n<p><code>sprintf</code>函数的原型如下：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sprintf</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> *str, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *format, ...)</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>其中，<code>str</code>是要写入的字符串，<code>format</code>是格式化字符串，用于指定写入的规则，<code>...</code>是可变参数列表，用于接收要写入的数据。</p>\n</li>\n<li>\n<p>与之相似的函数还有<code>printf</code>和<code>fprintf</code>。其中，<code>printf</code>将输出写入标准输出（通常是屏幕），而<code>fprintf</code>将输出写入文件。</p>\n</li>\n</ul>\n<p>在使用<code>sprintf</code>函数时，需要注意以下几点：</p>\n<ul>\n<li><code>format</code>字符串中可以包含格式说明符，如 <code>%d</code>, <code>%f</code>, <code>%s</code>, <code>%c</code>, <code>%x</code>, <code>%o</code>, <code>%u</code>, <code>%e</code>, <code>%g</code>, <code>%p</code>, <code>%n</code>, 等等。</li>\n<li><code>format</code>字符串中可以包含空格、制表符、换行符等空白字符，用于控制输出格式。</li>\n<li><code>format</code>字符串中可以包含方括号 <code>[]</code>，用于指定一个字符集合。例如，<code>%[a-z]</code> 表示匹配小写字母。</li>\n<li><code>sprintf()</code> **函数返回成功写入的字符数。**如果返回值小于0，则表示写入失败。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/2/5/37\">sprintf函数</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN = <span class=\"hljs-number\">1000</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    <span class=\"hljs-type\">int</span> year,month,day,hour,minute,second;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d %d %d %d %d&quot;</span>,&amp;year,&amp;month,&amp;day,&amp;hour,&amp;minute,&amp;second);<br>    <span class=\"hljs-built_in\">sprintf</span>(str,<span class=\"hljs-string\">&quot;%04d-%02d-%02d %02d:%02d:%02d&quot;</span>,year,month,day,hour,minute,second);<span class=\"hljs-comment\">//注意此处的ssprintf()函数注释将需要的字符串写入到字符串数组中</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<span class=\"hljs-comment\">//注意此处字符串数组需要采用printf()函数进行输出</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>总结：</p>\n</li>\n<li>\n<p>注意代码中的<code>ssprintf()</code>函数注释<strong>将需要的字符串写入到字符串数组</strong>中；</p>\n</li>\n<li>\n<p>注意代码最后的输出字符串数组需要采用<code>printf()</code>函数进行输出。</p>\n</li>\n</ul>\n<h3 id=\"再谈结构体与函数数组传参\"><a class=\"markdownIt-Anchor\" href=\"#再谈结构体与函数数组传参\"></a> 再谈结构体与函数数组传参</h3>\n<ul>\n<li>例题：<a href=\"https://sunnywhy.com/sfbj/2/8/43\">结构体与构造函数II</a></li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">Student</span> &#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">15</span>];<br>    <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-built_in\">Student</span>()&#123;&#125;<br>    <span class=\"hljs-built_in\">Student</span>(<span class=\"hljs-type\">int</span> _id,<span class=\"hljs-type\">char</span> _name[])&#123;<span class=\"hljs-comment\">//函数中的数组传参</span><br>        id = _id;<br>        <span class=\"hljs-built_in\">strcpy</span>(name,_name);<span class=\"hljs-comment\">//复制字符串数组</span><br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>&#123;<br>    Student student;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">15</span>];<br>    <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;id);<br>    <span class=\"hljs-built_in\">getchar</span>();<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,name);<span class=\"hljs-comment\">//读入字符串。</span><br>    student = <span class=\"hljs-built_in\">Student</span>(id,name);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n%s&quot;</span>,student.id,student.name);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：注意上述代码中的函数数组传参，以及字符串数组赋值；</li>\n<li>注意如何利用<code>scanf()</code>函数读入字符串。</li>\n</ul>\n<h3 id=\"再谈cin和cout\"><a class=\"markdownIt-Anchor\" href=\"#再谈cin和cout\"></a> 再谈cin和cout</h3>\n<ul>\n<li>例题：<a href=\"https://sunnywhy.com/sfbj/2/9/45\">cin与cout</a></li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iomanip&gt;</span><span class=\"hljs-comment\">//数据格式控制函数的头文件</span></span><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAX_LEN  = <span class=\"hljs-number\">200</span>;<br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a;<br>    <span class=\"hljs-type\">double</span> b;<br>    <span class=\"hljs-type\">char</span> str[MAX_LEN];<br>    cin &gt;&gt; a &gt;&gt; b;<br>    <span class=\"hljs-built_in\">getchar</span>();<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAX_LEN);<br>    <span class=\"hljs-comment\">//fixed()函数与setprecision(int n)并用，可以控制小数点后面有n位。注意：setprecision()函数是控制有效数字的位数，而fixed()函数与setprecision(int n )函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！</span><br>    cout &lt;&lt; a &lt;&lt; endl &lt;&lt; fixed &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">2</span>) &lt;&lt; b &lt;&lt; endl &lt;&lt; str;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：</li>\n<li><code>#include &lt;iomanip&gt;</code>是数据格式控制函数的头文件；</li>\n<li>在使用<code>cout</code>函数输出的时候<code>fixed()</code>函数与<code>setprecision(int n)</code>并用，可以控制小数点后面有<strong>n位</strong>。注意：<code>setprecision()</code>函数是控制有效数字的位数，而<code>fixed()</code>函数与<code>setprecision(int n )</code>函数结合使用是保留小数点后的位数，小数点的保留采用四舍五入！</li>\n<li>如果只使用<code>setprecision(int n)</code> 函数效果如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cout &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">0.12345</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">1.23456</span> &lt;&lt; endl;<br><br>输出：<br><span class=\"hljs-number\">0.123</span><br><span class=\"hljs-number\">1.23</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>当要保留对应位数的小数(<strong>四舍五入</strong>)的时候，就需要采用<code>fixed()</code>函数，效果如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">cout &lt;&lt; fixed &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">0.12345</span> &lt;&lt; endl;<br>cout &lt;&lt; fixed &lt;&lt; <span class=\"hljs-built_in\">setprecision</span>(<span class=\"hljs-number\">3</span>) &lt;&lt; <span class=\"hljs-number\">1.23456</span> &lt;&lt; endl;<br><br>输出：<br><span class=\"hljs-number\">0.123</span><br><span class=\"hljs-number\">1.235</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"再谈浮点精度比较\"><a class=\"markdownIt-Anchor\" href=\"#再谈浮点精度比较\"></a> 再谈浮点精度比较</h3>\n<ul>\n<li>例题：<a href=\"https://sunnywhy.com/sfbj/2/9/46\">浮点精度比较</a></li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> eps = <span class=\"hljs-number\">1e-8</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a,b,c,d;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d);<br>    <span class=\"hljs-type\">double</span> res1 = a* <span class=\"hljs-built_in\">asin</span>(<span class=\"hljs-built_in\">sqrt</span>(b) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-type\">double</span> res2 = c* <span class=\"hljs-built_in\">asin</span>(<span class=\"hljs-built_in\">sqrt</span>(d) / <span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">if</span>(res1 - res2 &gt; eps)<span class=\"hljs-comment\">//公式1&gt;公式2</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(res2 - res1 &gt; eps)<span class=\"hljs-comment\">//公式2&gt;公式1</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;0&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：一般为了避免计算机精度误差造成浮点数大小比较不准，采用浮点数常量大小为<code>const double eps = 1e-8;</code>的数据来进行区分。</li>\n</ul>\n<h3 id=\"再谈if语句\"><a class=\"markdownIt-Anchor\" href=\"#再谈if语句\"></a> 再谈if语句</h3>\n<ul>\n<li><code>if(a==b==0)</code>和i<code>f(a==0&amp;&amp;b==0)</code>的区别：</li>\n<li>这两个表达式的区别在于它们的运算顺序不同。\n<ul>\n<li><code>if(a==b==0)</code>的运算顺序是先比较a和b是否相等(<code>a==b</code>)，然后再将<strong>结果</strong>与0比较。如果a和b都为0，但是<code>true</code>不等于0，所以表达式<code>a==b==0</code>为<code>false</code>。而当a和b<strong>不相等</strong>时，表达式<code>a==b==0</code>为<code>true</code>。</li>\n<li><code>if(a==0&amp;&amp;b==0)</code>的运算顺序是先判断a是否等于0，然后再判断b是否等于0。只有当a和b都等于0时，这个表达式的结果才为<code>true</code>；否则，结果为<code>false</code>。</li>\n<li>因此，这两个表达式的含义是不同的。需要特别注意！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"简单模拟\"><a class=\"markdownIt-Anchor\" href=\"#简单模拟\"></a> 简单模拟</h3>\n<ul>\n<li>简单模拟的题目不涉及算法，一般完全根据题目描述来进行代码编写，考察的是<strong>代码能力</strong>！</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/1/61\">2的幂</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> m = <span class=\"hljs-number\">1007</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> num;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num);<br>    <span class=\"hljs-type\">int</span> res=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=num;i++)<br>    &#123;<br>        res = ((res%m)*(<span class=\"hljs-number\">2</span>%m))%m;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,res);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：该题的<strong>数据大小</strong>远大于<strong>C++<strong>中的<code>long long</code>类型，因此不能直接进行计算，需要根据题目提示的公式</strong>进行简化</strong>，从而正确计算得到结果！</li>\n</ul>\n<p>例题：<a href=\"https://pintia.cn/problem-sets/994805260223102976/exam/problems/994805289432236032?type=7&amp;page=0\">B1032 挖掘机技术哪家强</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-type\">int</span> list_chengji[<span class=\"hljs-number\">100010</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> num;<br>    <span class=\"hljs-type\">int</span> max_chengji=<span class=\"hljs-number\">-1</span>;<span class=\"hljs-comment\">//注意此处最大成绩设置为-1，否则无法通过最大成绩就是为0的测试点。</span><br>    <span class=\"hljs-type\">int</span> xuhao,chengji,res_xuhao;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)&#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;xuhao,&amp;chengji);<br>        list_chengji[xuhao]+=chengji;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;<span class=\"hljs-number\">100010</span>;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(list_chengji[k]&gt;max_chengji)<br>        &#123;<br>            max_chengji = list_chengji[k];<br>            res_xuhao = k;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>,res_xuhao,max_chengji);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这道题目要<strong>细心</strong>，注意在代码中计算最大成绩的时候<strong>初始值</strong>要设置为<code>-1</code>，否则无法通过最大成绩就是为<strong>0</strong>的测试点。</li>\n</ul>\n<h3 id=\"查找元素\"><a class=\"markdownIt-Anchor\" href=\"#查找元素\"></a> 查找元素</h3>\n<ul>\n<li>查找元素类题目：给定一些元素，然后查找某个满足某条件的元素。</li>\n<li>一般而言，如果需要在一个比较小范围的数据集中查找，那么直接遍历每一个数据即可。</li>\n<li>如果需要查找的范围比较大，可以采用<strong>二分查找</strong>等算法来进行更快速的查找。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/2/64\">寻找元素对</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-type\">int</span> list[<span class=\"hljs-number\">1010</span>];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;list[i]);<br>    &#125;<br>    <span class=\"hljs-type\">int</span> x,flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;x);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n<span class=\"hljs-number\">-1</span>;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=k+<span class=\"hljs-number\">1</span>;j&lt;n;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(x==list[k]+list[j])<br>            &#123;<br>                flag++;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,flag);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"图形输出\"><a class=\"markdownIt-Anchor\" href=\"#图形输出\"></a> 图形输出</h3>\n<ul>\n<li>所谓图形，其实是由若干字符组成，因此只需要弄清楚规则就能编写代码，有以下两种方法：\n<ul>\n<li>通过规律直接进行输出；</li>\n<li>定义一个二维字符数组，通过规律填充字符数组，最后再输出整个二维数组。</li>\n</ul>\n</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/3/67\">画X</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-type\">char</span> list[<span class=\"hljs-number\">101</span>][<span class=\"hljs-number\">101</span>];<br>    <span class=\"hljs-built_in\">memset</span>(list,<span class=\"hljs-string\">&#x27; &#x27;</span>,<span class=\"hljs-built_in\">sizeof</span>(list));<span class=\"hljs-comment\">//初始化数组</span><br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n;k++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(i&lt;n/<span class=\"hljs-number\">2</span>||i&gt;n/<span class=\"hljs-number\">2</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(k==i||k==n<span class=\"hljs-number\">-1</span>-i)<br>                &#123;<br>                    list[i][k]=<span class=\"hljs-string\">&#x27;*&#x27;</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(i==n/<span class=\"hljs-number\">2</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(k==i)<br>                &#123;<br>                    list[i][k]=<span class=\"hljs-string\">&#x27;*&#x27;</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&lt;=n/<span class=\"hljs-number\">2</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n-i;k++)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,list[i][k]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;=i;k++)<br>            &#123;<br>                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,list[i][k]);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这类型题目主要在于找到图案的规律，若图案比较复杂可以放在二维字符数组中进行输出，注意一下二维字符数组的初始化可以采用<code>memset(list,' ',sizeof(list));</code>函数！</li>\n</ul>\n<h3 id=\"日期处理\"><a class=\"markdownIt-Anchor\" href=\"#日期处理\"></a> 日期处理</h3>\n<ul>\n<li>日期处理问题主要考虑平年和闰年的关系(由此产生的二月天数之间的差别)、大月和小月的问题，细节比较繁杂！</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/4/73\">周几</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//初始化平年闰年的数组</span><br><span class=\"hljs-comment\">//0是平年，1是闰年</span><br><span class=\"hljs-type\">int</span> year_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;<br>&#125;;<br><span class=\"hljs-comment\">//是否闰年判断函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">leap_year</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>||(year%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span>&amp;&amp;year%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>))<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//判断日期前后,如果day在day1之前就是true，否则为false</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">before_afer</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year,<span class=\"hljs-type\">int</span> month,<span class=\"hljs-type\">int</span> day,<span class=\"hljs-type\">int</span> year1,<span class=\"hljs-type\">int</span> month1,<span class=\"hljs-type\">int</span> day1)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year1-year&gt;<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(year1-year&lt;<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(year1-year==<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(month1-month&gt;<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(month1-month&lt;<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(month1==month)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(day1-day&gt;<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(day1-day&lt;=<span class=\"hljs-number\">0</span>)<br>            &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//计算两个日期之间的天数差值,day在day1之前，采用日期减法</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">count_days</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year,<span class=\"hljs-type\">int</span> month,<span class=\"hljs-type\">int</span> day,<span class=\"hljs-type\">int</span> year1,<span class=\"hljs-type\">int</span> month1,<span class=\"hljs-type\">int</span> day1)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">if</span>(year1==year&amp;&amp;month1==month&amp;&amp;day1==day)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>)<br>        &#123;<br>            day1--;<br>            <span class=\"hljs-keyword\">if</span>(day1&lt;<span class=\"hljs-number\">1</span>)<br>            &#123;<br>                month1--;<br>                <span class=\"hljs-keyword\">if</span>(month1&lt;<span class=\"hljs-number\">1</span>)<br>                &#123;<br>                    year1--;<br>                    month1=<span class=\"hljs-number\">12</span>;<br>                &#125;<br>                day1=year_list[<span class=\"hljs-built_in\">leap_year</span>(year1)][month1];<br>            &#125;<br>            num++;<br>            <span class=\"hljs-keyword\">if</span>(year1==year&amp;&amp;month1==month&amp;&amp;day1==day)<br>            &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> num;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> year,month,day;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d-%d-%d&quot;</span>,&amp;year,&amp;month,&amp;day);<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>,shengyu=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//2021-05-02是周日，用0表示（用这个日期作为基准）</span><br>    <span class=\"hljs-type\">bool</span> b_a = <span class=\"hljs-built_in\">before_afer</span>(<span class=\"hljs-number\">2021</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,year,month,day);<br>    <span class=\"hljs-keyword\">if</span>(b_a)<br>    &#123;<br>        num=<span class=\"hljs-built_in\">count_days</span>(<span class=\"hljs-number\">2021</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>,year,month,day);<br>        shengyu=num%<span class=\"hljs-number\">7</span>;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,shengyu);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        num=<span class=\"hljs-built_in\">count_days</span>(year,month,day,<span class=\"hljs-number\">2021</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">2</span>);<br>        shengyu=num%<span class=\"hljs-number\">7</span>;<br>        <span class=\"hljs-keyword\">if</span>(shengyu==<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-number\">0</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-number\">7</span>-shengyu);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>总结：虽然本题我采用了日期减法作为函数进行运算，但是和日期减法的想法相似，主要思想如下：</p>\n<ul>\n<li>直接给日期加上指定的天数并不是很容易的事情，所以我们可以换个思路，<strong>每次只加1天</strong>，<strong>一直加到指定的天数为止</strong>。这样我们就把问题转换为计算加1天之后的新日期，而这个问题就相对简单许多。</li>\n<li>假设当前日期的年、月、日分别是year、month、day，那么加一天之后 day 就变成了 day+1，之后我们需要判断这个新的day是否超过了当前月份month 所拥有的总天数，如果没超过，那么相安无事，算法结束；如果超过了，那么就需要令月份month 加 1、同时让day重置为 1（即把日期变为下一个月的 1 号）。接下来，如果加了 1 之后的月份 month 变为了 13 月，那么就需要令年份year加 1、同时置月份 month重置为 1（即把日期变为下一年的 1 月）。</li>\n<li>这个过程需要知道每个月有多少天，为了方便直接取出每个月的天数，不妨设置一个二维数组<code>int year_list[2][13]</code>，用来存放每个月的天数，其中第一维为 0 时表示平年，为 1 时表示闰年。至于平年和闰年的判断方式也很简单：年份是 400 的倍数时是闰年，年份是 4 的倍数但不是 100 的倍数时也是闰年，其他情况都是平年。</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//初始化平年闰年的数组</span><br><span class=\"hljs-comment\">//0是平年，1是闰年</span><br><span class=\"hljs-type\">int</span> year_list[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">13</span>]=&#123;<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">28</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;,<br>        &#123;<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">29</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-number\">31</span>&#125;<br>&#125;;<br><span class=\"hljs-comment\">//是否闰年判断函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">leap_year</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> year)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(year%<span class=\"hljs-number\">400</span>==<span class=\"hljs-number\">0</span>||(year%<span class=\"hljs-number\">4</span>==<span class=\"hljs-number\">0</span>&amp;&amp;year%<span class=\"hljs-number\">100</span>!=<span class=\"hljs-number\">0</span>))<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> year,month,day;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d-%d-%d&quot;</span>,&amp;year,&amp;month,&amp;day);<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>    &#123;<br>        day++;<br>        <span class=\"hljs-keyword\">if</span>(day&gt;year_list[<span class=\"hljs-built_in\">leap_year</span>(year)][month])<br>        &#123;<br>            month++;<br>            day=<span class=\"hljs-number\">1</span>;<br>            <span class=\"hljs-keyword\">if</span>(month&gt;<span class=\"hljs-number\">12</span>)<br>            &#123;<br>                year++;<br>                month=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%04d-%02d-%02d&quot;</span>, year, month, day);   <span class=\"hljs-comment\">// 按格式输出年月日</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>最后，这道例题的思考方式如下：<strong>首先确认一个基准日期</strong>-&gt;<strong>(2021-05-02是周日，用0表示)</strong>-&gt;<strong>计算输入的日期在基准日期之前或者之后</strong>-&gt;<strong>计算相差多少天</strong>-&gt;<strong>最后计算输入的日期是周几</strong>！</li>\n<li>通过上述步骤，该题迎刃而解！</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"进制转换\"><a class=\"markdownIt-Anchor\" href=\"#进制转换\"></a> 进制转换</h3>\n<p>对于一个p进制数需要转换为q进制数，一般需要分为以下两步：</p>\n<ul>\n<li>\n<p>p进制数x转十进制数y：<br />\n<img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311125587.png\" alt=\"\" /></p>\n<ul>\n<li>实现代码：</li>\n</ul>\n</li>\n</ul>\n <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//p进制数x转10进制数y的函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">p_ten</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">0</span>,product=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        y=y+(x%<span class=\"hljs-number\">10</span>)*product;<br>        x=x/<span class=\"hljs-number\">10</span>;<br>        product=product*p;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> y;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>十进制数y转q进制数z的函数(除基取余法)：</p>\n<ul>\n<li>\n<p>采用&quot;除基取余法&quot;，意思是每次将带转换的数除q，将得到的余数作为低位存储，而商继续除q并进行上面的操作，最后当商为0时，将所有位从高到低输出就可以得到z！</p>\n</li>\n<li>\n<p>例如十进制数<strong>11</strong>转换为<strong>二进制</strong>：</p>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202310311132044.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>实现代码：</p>\n</li>\n<li>\n<p>代码中采用<code>do...while</code>而不是<code>while</code>的原因是如果十进制恰好是<strong>0</strong>会造成直接跳出循环导致结果出错，因此采用<code>do...while</code>语句。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//十进制数y转q进制数z的函数(除基取余法)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">ten_q</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> y,<span class=\"hljs-type\">int</span> q,<span class=\"hljs-type\">int</span> z_list[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>,z=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        z_list[num]=y%q;<br>        num++;<br>        y=y/q;<br>    &#125;<span class=\"hljs-keyword\">while</span>(y!=<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/5/77\">K进制转十进制</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//p进制数x转10进制数y的函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">p_ten</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> p)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> y=<span class=\"hljs-number\">0</span>,product=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span>(x!=<span class=\"hljs-number\">0</span>)<br>    &#123;<br>        y=y+(x%<span class=\"hljs-number\">10</span>)*product;<br>        x=x/<span class=\"hljs-number\">10</span>;<br>        product=product*p;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> y;<br>&#125;<br><span class=\"hljs-comment\">//十进制数y转q进制数z的函数(除基取余法)</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">ten_q</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> y,<span class=\"hljs-type\">int</span> q,<span class=\"hljs-type\">int</span> z_list[])</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> num=<span class=\"hljs-number\">0</span>,z=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">do</span> &#123;<br>        z_list[num]=y%q;<br>        num++;<br>        y=y/q;<br>    &#125;<span class=\"hljs-keyword\">while</span>(y!=<span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">return</span> num;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[<span class=\"hljs-number\">10</span>];<span class=\"hljs-comment\">//用于存储k进制串</span><br>    <span class=\"hljs-type\">int</span> k,str_len;<br>    <span class=\"hljs-type\">int</span> sum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s %d&quot;</span>,str,&amp;k);<br>    str_len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;str_len;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(str[i]&gt;=<span class=\"hljs-string\">&#x27;A&#x27;</span>&amp;&amp;str[i]&lt;=<span class=\"hljs-string\">&#x27;F&#x27;</span>)<br>        &#123;<br>            sum+=(str[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>+<span class=\"hljs-number\">10</span>)*<span class=\"hljs-built_in\">pow</span>(k,str_len<span class=\"hljs-number\">-1</span>-i);<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            sum+=(str[i]-<span class=\"hljs-string\">&#x27;0&#x27;</span>)*<span class=\"hljs-built_in\">pow</span>(k,str_len<span class=\"hljs-number\">-1</span>-i);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,sum);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这道例题无法直接使用上述两个函数，因此需要根据题意重新构造，但是难度不大，需要处理十进制以上的数据。</li>\n</ul>\n<h3 id=\"字符串处理\"><a class=\"markdownIt-Anchor\" href=\"#字符串处理\"></a> 字符串处理</h3>\n<ul>\n<li>字符串处理类题目可能实现逻辑比较麻烦，而且需要考虑许多细节和边界情况，因此是一种很好体现代码能力的题型。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/6/79\">单词倒序</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1010</span>;<br><span class=\"hljs-comment\">//主函数   </span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAXN],str2[MAXN];<br>    cin.<span class=\"hljs-built_in\">getline</span>(str,MAXN);<br>    <span class=\"hljs-type\">int</span> str_len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    <span class=\"hljs-type\">int</span> flag=<span class=\"hljs-number\">0</span>,m=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=str_len<span class=\"hljs-number\">-1</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--)<br>    &#123;<br>        flag++;<br>        <span class=\"hljs-keyword\">if</span>(str[i]==<span class=\"hljs-string\">&#x27; &#x27;</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i+<span class=\"hljs-number\">1</span>;j&lt;=i+flag<span class=\"hljs-number\">-1</span>;j++)<br>            &#123;<br>                str2[m]=str[j];<br>                m++;<br>            &#125;<br>            str2[m]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>            m++;<br>            flag=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i;j&lt;=i+flag<span class=\"hljs-number\">-1</span>;j++)<br>            &#123;<br>                str2[m]=str[j];<br>                m++;<br>            &#125;<br>            str2[m]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>            m++;<br>            flag=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>    &#125;<br>    str2[str_len]=<span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;str_len;k++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,str2[k]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：细心分析，按照逻辑编写代码，问题即可迎刃而解。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/3/6/83\">公共前缀</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">55</span>;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">char</span> str[MAXN][MAXN];<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-type\">int</span> min_strlen=<span class=\"hljs-number\">100</span>,num=<span class=\"hljs-number\">0</span>,flag=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">getchar</span>();<span class=\"hljs-comment\">//吸收换行符</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;<span class=\"hljs-built_in\">i</span>&lt;n;i++)<br>    &#123;<br>        cin.<span class=\"hljs-built_in\">getline</span>(str[i],MAXN);<br>        <span class=\"hljs-keyword\">if</span>(min_strlen&gt;(<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">strlen</span>(str[i]))<br>        &#123;<br>            min_strlen=(<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">strlen</span>(str[i]);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;min_strlen;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">0</span>;k&lt;n<span class=\"hljs-number\">-1</span>;k++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(str[k][i]!=str[k+<span class=\"hljs-number\">1</span>][i])<br>            &#123;<br>                flag++;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag)<br>        &#123;<br>            num=i<span class=\"hljs-number\">-1</span>;<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        num=i;<br>    &#125;<br>    <span class=\"hljs-comment\">//printf(&quot;%d&quot;,min_strlen);</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=num;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,str[<span class=\"hljs-number\">0</span>][i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：注意一下本题中在需要使用循环输入的时候要采用<code>getchar();</code>函数吸收一下换行符，否则换行符会输入至字符数组中！</li>\n</ul>\n<h2 id=\"c标准模板库stl介绍\"><a class=\"markdownIt-Anchor\" href=\"#c标准模板库stl介绍\"></a> C++标准模板库(STL)介绍</h2>\n<h3 id=\"vector的常见用法详解\"><a class=\"markdownIt-Anchor\" href=\"#vector的常见用法详解\"></a> vector的常见用法详解</h3>\n<ul>\n<li><code>&quot;vector&quot;</code>-&gt;变长数组，即&quot;长度根据需要而自动改变的数组&quot;;</li>\n<li>要使用<code>vector</code>，需要添加<code>vector</code>头文件，即<code>#include &lt;vector&gt;</code>;</li>\n</ul>\n<h2 id=\"算法初步\"><a class=\"markdownIt-Anchor\" href=\"#算法初步\"></a> 算法初步</h2>\n<h3 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\"></a> 排序</h3>\n<ul>\n<li>本章先介绍<strong>两种</strong>基础的排序算法：<strong>选择排序</strong>与<strong>插入排序</strong>。</li>\n</ul>\n<h4 id=\"选择排序\"><a class=\"markdownIt-Anchor\" href=\"#选择排序\"></a> 选择排序</h4>\n<ul>\n<li><strong>简单选择排序</strong>：对于一个序列<code>A</code>中的元素<code>A[1]-A[n]</code>，令<code>i</code>从<code>1</code>到<code>n</code>枚举，进行<code>n</code>趟操作，每趟从待排序部分<code>[i,n]</code>中选择最小元素，令其与待排序部分的第一个元素<code>A[i]</code>进行交换，这样元素<code>A[i]</code>就会与当前有序区间<code>[1,i-1]</code>形成新的有序区间<code>[1,i]</code>。</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011059055.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>总共需要进行n趟操作(1&lt;=i&lt;=n)，每趟操作选出待排序部分[i,n]中的最小元素，令其与A[i]交换。总复杂度为$$O(n^2)$$</p>\n</li>\n<li>\n<p>实现代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//选择排序函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">select_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> list[],<span class=\"hljs-type\">int</span> num)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> min_num,k,temp;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;num;i++)<br>    &#123;<br>        min_num=list[i];<br>        k=i;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i;j&lt;num;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(list[j]&lt;min_num)<br>            &#123;<br>                min_num = list[j];<br>                k=j;<br>            &#125;<br>        &#125;<br>        temp=list[i];<br>        list[i]=min_num;<br>        list[k]=temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"插入排序\"><a class=\"markdownIt-Anchor\" href=\"#插入排序\"></a> 插入排序</h4>\n<ul>\n<li><strong>直接插入排序</strong>：对于一个序列<code>A</code>中的元素<code>A[1]-A[n]</code>，令<code>i</code>从<code>1</code>到<code>n-1</code>枚举，进行<code>n-1</code>趟操作。假设某一趟时，序列<code>A</code>的前<code>i-1</code>个元素<code>A[1]-A[i-1]</code>已经有序，而范围<code>[i,n]</code>还未有序，那么该趟从范围<code>[1,i-1]</code>中寻找某个位置<code>j</code>，使得将<code>A[i]</code>插入位置<code>j</code>后(此时<code>A[j]-A[i-1]</code>会后移一位至<code>A[j+1]-A[i]</code>)，范围<code>[1,i]</code>有序。</li>\n<li>思想如下图所示：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319809.png\" alt=\"\" /></p>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311011319528.png\" alt=\"\" /></p>\n<ul>\n<li>实现代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//插入排序函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> list[],<span class=\"hljs-type\">int</span> num)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp,j;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;num;i++)<span class=\"hljs-comment\">//进行n-1趟</span><br>    &#123;<br>        temp=list[i];<br>        j=i;<br>        <span class=\"hljs-keyword\">while</span>(j&gt;<span class=\"hljs-number\">0</span>&amp;&amp;temp&lt;list[j<span class=\"hljs-number\">-1</span>])<span class=\"hljs-comment\">//只要temp小于前一个元素list[j-1]</span><br>        &#123;<br>            list[j]=list[j<span class=\"hljs-number\">-1</span>];<span class=\"hljs-comment\">//把list[j-1]移到list[j]</span><br>            j--;<br>        &#125;<br>        list[j]=temp;<span class=\"hljs-comment\">//插入位置为j</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"排序题与sort函数的应用\"><a class=\"markdownIt-Anchor\" href=\"#排序题与sort函数的应用\"></a> 排序题与sort函数的应用</h4>\n<ul>\n<li>由于排序题中大部分只需要得到排序的最终结果，而不需要去写完整的排序过程，因此推荐采用<code>C++</code>中的<code>sort()</code>函数进行处理。</li>\n</ul>\n<h5 id=\"如何使用sort函数排序\"><a class=\"markdownIt-Anchor\" href=\"#如何使用sort函数排序\"></a> 如何使用sort()函数排序</h5>\n<ul>\n<li><code>sort()</code>函数的使用必须加上头文件<code>\\#include &lt;algorithm&gt;</code>和<code>using namespace std;</code>，其使用方式如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-built_in\">sort</span>(首元素地址(必填),尾元素地址的下一个地址(必填),比较函数(非必填));<br></code></pre></td></tr></table></figure>\n<h5 id=\"如何实现比较函数cmp\"><a class=\"markdownIt-Anchor\" href=\"#如何实现比较函数cmp\"></a> 如何实现比较函数cmp</h5>\n<h6 id=\"基本数据类型数组的排序\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型数组的排序\"></a> 基本数据类型数组的排序</h6>\n<ul>\n<li>若比较函数不填，则默认按照从小到大的顺序排序。</li>\n<li>例如：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br>    <span class=\"hljs-built_in\">sort</span>(a,a+<span class=\"hljs-number\">5</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">1 </span><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">5</span> <br></code></pre></td></tr></table></figure>\n<ul>\n<li>如果想要实现从大到小来排序，则需要编写cmp(比较函数)：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a,<span class=\"hljs-type\">int</span> b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a&gt;b;<span class=\"hljs-comment\">//可以理解为当a&gt;b时，把a放在b前面</span><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a[<span class=\"hljs-number\">5</span>]=&#123;<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>&#125;;<br>    <span class=\"hljs-built_in\">sort</span>(a,a+<span class=\"hljs-number\">5</span>,cmp);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d &quot;</span>,a[i]);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-symbol\">5 </span><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <br></code></pre></td></tr></table></figure>\n<ul>\n<li><strong>记忆方法</strong>：\n<ul>\n<li>数据“从小到大”就用<code>“&lt;”</code>，因为<code>a&lt;b</code>是<strong>左小右大</strong></li>\n<li>数据“从大到小”就用<code>“&gt;”</code>，因为<code>a&gt;b</code>是<strong>左大右小</strong></li>\n</ul>\n</li>\n</ul>\n<h6 id=\"结构体数组排序\"><a class=\"markdownIt-Anchor\" href=\"#结构体数组排序\"></a> 结构体数组排序</h6>\n<ul>\n<li>一级排序</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(node a,node b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">return</span> a.x&gt;b.x;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>二级排序</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp</span><span class=\"hljs-params\">(node a,node b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-keyword\">if</span>(a.x!=b.x)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a.x&gt;b.x;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">else</span><br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">return</span> a.y&lt;b.y;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/1/97\">考场排名</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1100</span>;<br><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">stu</span>&#123;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> score;<br>    <span class=\"hljs-type\">int</span> kaochang;<br>    <span class=\"hljs-type\">int</span> paiming;<br>&#125;;<br><br><span class=\"hljs-comment\">//比较函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp1</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a.score&gt;b.score;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp2</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">strcmp</span>(a.name,b.name)&lt;<span class=\"hljs-number\">0</span>;<br><br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num_kaochang,sum=<span class=\"hljs-number\">0</span>,num[<span class=\"hljs-number\">15</span>];<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    stu stu[MAXN];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num_kaochang);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=sum;k&lt;num_kaochang+sum;k++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,stu[k].name);<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;stu[k].score);<br>            stu[k].kaochang=i;<br>        &#125;<br>        num[i]=num_kaochang;<br>        <span class=\"hljs-built_in\">sort</span>(stu+sum,stu+sum+num_kaochang, cmp1);<br>        stu[sum].paiming=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=sum;m&lt;sum+num_kaochang;m++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(stu[m].score==stu[m<span class=\"hljs-number\">-1</span>].score)<br>            &#123;<br>                stu[m].paiming=stu[m<span class=\"hljs-number\">-1</span>].paiming;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                stu[m].paiming=m+<span class=\"hljs-number\">1</span>-sum;<span class=\"hljs-comment\">//局部排名数值要减去sum</span><br>            &#125;<br>        &#125;<br>        sum+=num_kaochang;<br>    &#125;<br>    <span class=\"hljs-built_in\">sort</span>(stu,stu+sum, cmp2);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;sum;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s %d %d\\n&quot;</span>,stu[i].name,stu[i].score,stu[i].paiming);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：注意一下<strong>字符串数组的比较函数</strong>的写法，以及这道题目局部（考场）排名的大小需要减去<code>sum</code>值。</li>\n</ul>\n<p>例题：<a href=\"https://pintia.cn/problem-sets/994805342720868352/exam/problems/994805474338127872?type=7&amp;page=0\">A1025 PAT Ranking</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">51000</span>;<br><span class=\"hljs-comment\">//结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">stu</span>&#123;<br>    <span class=\"hljs-type\">char</span> name[<span class=\"hljs-number\">20</span>];<br>    <span class=\"hljs-type\">int</span> score;<br>    <span class=\"hljs-type\">int</span> kaochang;<br>    <span class=\"hljs-type\">int</span> paiming;<br>    <span class=\"hljs-type\">int</span> final_rank;<br>&#125;;<br><br><span class=\"hljs-comment\">//比较函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp1</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">return</span> a.score&gt;b.score;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">cmp2</span><span class=\"hljs-params\">(stu a,stu b)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(a.final_rank==b.final_rank)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">strcmp</span>(a.name,b.name)&lt;<span class=\"hljs-number\">0</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> a.final_rank&lt;b.final_rank;<br>    &#125;<br><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num_kaochang,sum=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    stu stu[MAXN];<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num_kaochang);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=sum;k&lt;num_kaochang+sum;k++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,stu[k].name);<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;stu[k].score);<br>            stu[k].kaochang=i+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-comment\">//排local_rank</span><br>        <span class=\"hljs-built_in\">sort</span>(stu+sum,stu+sum+num_kaochang, cmp1);<br>        stu[sum].paiming=<span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=sum;m&lt;sum+num_kaochang;m++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(stu[m].score==stu[m<span class=\"hljs-number\">-1</span>].score)<br>            &#123;<br>                stu[m].paiming=stu[m<span class=\"hljs-number\">-1</span>].paiming;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>            &#123;<br>                stu[m].paiming=m+<span class=\"hljs-number\">1</span>-sum;<span class=\"hljs-comment\">//局部排名数值要减去sum</span><br>            &#125;<br>        &#125;<br>        sum+=num_kaochang;<br>    &#125;<br>    <span class=\"hljs-comment\">//按照成绩重新进行排名，不区分考场</span><br>    <span class=\"hljs-built_in\">sort</span>(stu,stu+sum, cmp1);<br>    stu[<span class=\"hljs-number\">0</span>].final_rank=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=<span class=\"hljs-number\">1</span>;m&lt;sum;m++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(stu[m].score==stu[m<span class=\"hljs-number\">-1</span>].score)<br>        &#123;<br>            stu[m].final_rank=stu[m<span class=\"hljs-number\">-1</span>].final_rank;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span><br>        &#123;<br>            stu[m].final_rank=m+<span class=\"hljs-number\">1</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\">//按照字典序排输出</span><br>    <span class=\"hljs-built_in\">sort</span>(stu,stu+sum, cmp2);<br>    <span class=\"hljs-comment\">//输出</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,sum);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;sum;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s %d %d %d\\n&quot;</span>,stu[i].name,stu[i].final_rank,stu[i].kaochang,stu[i].paiming);<br>    &#125;<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：可以在<strong>结构体数组</strong>中把对应要输出的内容提前定义，这样在运算赋值之后就可以直接输出。</li>\n</ul>\n<h3 id=\"散列\"><a class=\"markdownIt-Anchor\" href=\"#散列\"></a> 散列</h3>\n<h4 id=\"散列的定义和整数散列\"><a class=\"markdownIt-Anchor\" href=\"#散列的定义和整数散列\"></a> 散列的定义和整数散列</h4>\n<ul>\n<li>\n<p>散列(Hash)，简单而言，就是将<strong>元素</strong>通过一个<strong>函数</strong>转换为<strong>整数</strong>，使得该整数可以尽量<strong>唯一地</strong>代表这个元素。</p>\n</li>\n<li>\n<p>其中把这个转换函数称为<strong>散列函数H</strong>，也就是说，如果元素在转换前为<code>Key</code>，那么转换后为一个整数<code>H(Key)</code>。</p>\n</li>\n<li>\n<p>常用的散列函数：<strong>直接定址法</strong>、<strong>平方取中法</strong>、<strong>除留余数法</strong>等…</p>\n</li>\n<li>\n<p>如果两个不同的元素<code>Key1</code>和<code>Key2</code>，它们的Hash值<code>H(Key1)</code>和<code>H(Key2)</code>是相同的话，就称为<strong>冲突</strong>。</p>\n</li>\n<li>\n<p>解决冲突的主要办法有：<strong>线性探查法</strong>、<strong>平方探查法</strong>、<strong>链地址法(拉链法)</strong></p>\n</li>\n<li>\n<p>其中第一种和第二种都计算了新的<strong>Hash值</strong>，称为<strong>开放定址法</strong></p>\n</li>\n<li>\n<p>散列表的特点是能够使用空间来换取时间</p>\n</li>\n</ul>\n<h4 id=\"字符串hash初步\"><a class=\"markdownIt-Anchor\" href=\"#字符串hash初步\"></a> 字符串Hash初步</h4>\n<ul>\n<li><strong>字符串Hash</strong>是指将一个字符串<code>Str</code>映射成一个整数，使得该整数可以尽可能唯一地代表字符串<code>Str</code>。</li>\n<li>为了讨论问题方便，先假设字符串均有大写字母<code>'A'-'Z'</code>组成，在此基础上，不妨把大写字母<code>'A'-'Z'</code>看成<code>0-25</code>。</li>\n<li>由此便可以将字符串映射为整数(注意：转换成整数最大为$$26^{1en}-1$$其中<code>len</code>为字符串长度)</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">HashFunc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> Str[],<span class=\"hljs-type\">int</span> len)</span><span class=\"hljs-comment\">//Hash函数，将字符串Str转换为整数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> id=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)<br>\t&#123;<br>\t\tid=id*<span class=\"hljs-number\">26</span>+(Str[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>);<span class=\"hljs-comment\">//转换为整数</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>如果字符串中出现了小写字母，那么可以把大写字母<code>'A'-'Z'</code>看成<code>0-25</code>，把小写字母<code>'a'-'z'</code>看成<code>26-51</code>，其余相同。</p>\n</li>\n<li>\n<p>代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">HashFunc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> Str[],<span class=\"hljs-type\">int</span> len)</span><span class=\"hljs-comment\">//Hash函数，将字符串Str转换为整数</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">int</span> id=<span class=\"hljs-number\">0</span>;<br>\t<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)<br>\t&#123;<br>\t\t<span class=\"hljs-keyword\">if</span>(Str[i]&gt;=<span class=\"hljs-string\">&#x27;A&#x27;</span>&amp;&amp;Str[i]&lt;=<span class=\"hljs-string\">&#x27;Z&#x27;</span>)<br>\t\t&#123;<br>\t\t\tid=id*<span class=\"hljs-number\">52</span>+(Str[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>);<span class=\"hljs-comment\">//转换为整数</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(Str[i]&gt;=<span class=\"hljs-string\">&#x27;a&#x27;</span>&amp;&amp;Str[i]&lt;=<span class=\"hljs-string\">&#x27;z&#x27;</span>)<br>\t\t&#123;<br>\t\t\tid=id*<span class=\"hljs-number\">52</span>+(Str[i]-<span class=\"hljs-string\">&#x27;a&#x27;</span>)+<span class=\"hljs-number\">26</span>;<span class=\"hljs-comment\">//转换为整数</span><br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>再增加不同的字符代码编写方式<strong>同理</strong>；</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/2/105\">字符串出现次数</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1010</span>;<br><span class=\"hljs-type\">char</span> str[MAXN][<span class=\"hljs-number\">5</span>];<br><span class=\"hljs-type\">int</span> hashTable[<span class=\"hljs-number\">26</span>*<span class=\"hljs-number\">26</span>*<span class=\"hljs-number\">26</span>+<span class=\"hljs-number\">10</span>]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-comment\">//字符串转Hash函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">HashFunc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span> s[],<span class=\"hljs-type\">int</span> len)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> id=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;len;i++)<br>    &#123;<br>        id=id*<span class=\"hljs-number\">26</span>+(s[i]-<span class=\"hljs-string\">&#x27;A&#x27;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> id;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,m;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str[i]);<br>        hashTable[<span class=\"hljs-built_in\">HashFunc</span>(str[i],<span class=\"hljs-number\">3</span>)]++;<br>    &#125;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;m);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;m;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str[i]);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,hashTable[<span class=\"hljs-built_in\">HashFunc</span>(str[i],<span class=\"hljs-number\">3</span>)]);<br>        <span class=\"hljs-keyword\">if</span>(i!=m<span class=\"hljs-number\">-1</span>)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：该题直接给出字符串散列的处理方法！重点掌握字符串转整数函数的编写和应用。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/2/104\">2-SUM-hash</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">1000001</span>;<br><span class=\"hljs-type\">int</span> num[MAXN]=&#123;<span class=\"hljs-number\">0</span>&#125;,hashTable[MAXN]=&#123;<span class=\"hljs-number\">0</span>&#125;;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,k;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d %d&quot;</span>,&amp;n,&amp;k);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;num[i]);<br>        hashTable[num[i]]++;<br>    &#125;<br>    <span class=\"hljs-type\">int</span> ans=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(k-num[i]&gt;=<span class=\"hljs-number\">0</span>&amp;&amp;hashTable[k-num[i]])<br>        &#123;<br>            ans++;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,ans/<span class=\"hljs-number\">2</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这道题目的巧妙之处在于通过用求和值<code>k</code>减去<code>a</code>后的值<code>b</code>是否还在<strong>哈希表</strong>中来判断是否满足条件。这样巧妙利用了<strong>空间换时间</strong>的思想，只用一次循环即可完成！最后注意最终结果需要再<code>÷2</code>！</li>\n</ul>\n<h3 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\"></a> 递归</h3>\n<p>分治</p>\n<ul>\n<li>分治-&gt;“分而治之”</li>\n<li>分治法将原问题划分成若干个<strong>规模较小</strong>而<strong>结构</strong>与原问题<strong>相同</strong>或者<strong>相似</strong>的子问题，然后分别解决这些子问题，最后<strong>合并</strong>子问题的解，即可得到原问题的解。\n<ul>\n<li>分解：将原问题划分成若干个<strong>规模较小</strong>而<strong>结构</strong>与原问题<strong>相同</strong>或者<strong>相似</strong>的子问题；</li>\n<li>解决：递归求解所有子问题。如果存在子问题的规模足够小就可以直接解决；</li>\n<li>合并：将子问题的解合并为原问题的解。</li>\n</ul>\n</li>\n<li>分治法分解成的子问题应该是相互独立的、没有交叉的。</li>\n<li>分治法作为一种算法思想，既可以使用<strong>递归</strong>的手段去实现，也可以通过<strong>非递归</strong>的手段去实现。</li>\n</ul>\n<p>递归</p>\n<ul>\n<li>递归在于<strong>反复调用自身函数</strong>，但是每次把<strong>问题范围缩小</strong>，直到范围缩小到可以直接得到边界数据的结果，然后再在返回的路上求出对应的解。</li>\n<li>递归很适合用来实现分治思想；</li>\n<li>递归的逻辑中一般有两个重要概念：\n<ul>\n<li>递归边界</li>\n<li>递归式（或称递归调用）</li>\n</ul>\n</li>\n<li>递归式是将原问题分解为若干个子问题的手段；</li>\n<li>递归边界是分解的尽头。</li>\n<li>例题-&gt;递归求解n的阶乘：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)*n;<span class=\"hljs-comment\">//递归式</span><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> a=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(a));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">6<br></code></pre></td></tr></table></figure>\n<ul>\n<li>其实现过程如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041745796.png\" alt=\"\" /></p>\n<ul>\n<li>例题-&gt;递归求解斐波那契数列的第n项：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//斐波那契数列递归函数（输出第n项的值）</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">0</span>||n==<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)+<span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-2</span>);<span class=\"hljs-comment\">//递归式</span><br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n=<span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(n));<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">5<br></code></pre></td></tr></table></figure>\n<ul>\n<li>其实现过程如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041755805.png\" alt=\"\" /></p>\n<ul>\n<li>例题-&gt;<strong>全排列问题</strong>：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311041758963.png\" alt=\"\" /></p>\n<ul>\n<li><strong>思路</strong>：</li>\n<li>从递归的角度考虑，把问题描述成：“输出<strong>1 - n</strong>这<strong>n</strong>个整数的全排列”，那么它就可以分解成若干个子问题：\n<ul>\n<li>输出以1开头的全排列：<code>(1,2,3)</code>、<code>(1,3,2)</code>;</li>\n<li>输出以2开头的全排列：<code>(2,1,3)</code>、<code>(2,3,1)</code>;</li>\n<li>输出以3开头的全排列：<code>(3,1,2)</code>、<code>(3,2,1)</code>;</li>\n<li>以此类推…直到第n个。</li>\n</ul>\n</li>\n<li>由此，不妨设定一个数组<code>p[MAXN]</code>用于存放当前的排列;</li>\n<li>再设定一个散列数组<code>bool HashTable[MAXN]=&#123;false&#125;;</code>用于指示当前元素k是否在数组<code>p</code>中，\n<ul>\n<li>如果已经存在于<code>p</code>中时<code>HashTable[k]=true;</code></li>\n<li>如果不存在于<code>p</code>中时<code>HashTable[k]=false;</code></li>\n</ul>\n</li>\n<li>因为要按照<strong>字典序</strong>对全排列进行输出，我们需要按顺序往数组<code>p</code>中第1位到n位中填入数字。</li>\n<li>不妨假设我们当前已经填好了<code>p[1]-p[index]</code>部分的数字，下一步需要填<code>P[index+1]</code>这个位置的数字。</li>\n<li>显然需要从1-n中枚举有哪些数字还没有在<code>p[1]-p[index]</code>部分，即满足<code>HashTable[k]==false</code>这个条件，那么就将该数字填入<code>p[index]</code>中。</li>\n<li>然后将<code>HashTable[k]=true</code>，表示<code>k</code>这个数据已经填入了数组<code>p</code>中。</li>\n<li>然后可以像上述步骤一样处理<code>index+2</code>的数据，即<code>p[1]-p[index+1]</code>已经填好，即进行递归-&gt;重复执行<code>Full_permutation(index+1);</code>直到后续<strong>递归完成</strong>。</li>\n<li>当递归完成后，需要再将<code>HashTable[k]=false</code>，以便后续能够继续使用这个数据。</li>\n<li>最后<strong>递归边界</strong>显然是当<code>index</code>到达<code>n+1</code>时，说明数组<code>p</code>中的第<strong>1 - n</strong>位都已经填好了，只需要按顺序进行输出即可。</li>\n<li>下面是当<code>n=3</code>时候的代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//全排列递归函数变量定义</span><br><span class=\"hljs-type\">const</span>  <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-type\">int</span> n;<span class=\"hljs-comment\">//输出index-n的全排列</span><br><span class=\"hljs-type\">int</span> p[MAXN];<br><span class=\"hljs-type\">bool</span> HashTable[MAXN]=&#123;<span class=\"hljs-literal\">false</span>&#125;;<br><span class=\"hljs-comment\">//全排列递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">Full_permutation</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">if</span>(index==n+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;=n;i++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,p[i]);<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-comment\">//递归式</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(!HashTable[k])<span class=\"hljs-comment\">//HashTable[k]==false-&gt;说明该元素还没有被用上</span><br>        &#123;<br>            p[index]=k;<span class=\"hljs-comment\">//处理这一种情况</span><br>            HashTable[k] = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//到这里说明假设1到index已经排好</span><br>            <span class=\"hljs-comment\">//递归进入函数再排index+1之后的部分</span><br>            <span class=\"hljs-built_in\">Full_permutation</span>(index+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//递归返回结束后循环还没有结束，继续处理下一循环的问题</span><br>            HashTable[k] = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//已经处理完p[index]=k;这一种情况，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    n=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-built_in\">Full_permutation</span>(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//index从1开始</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">123<br>132<br>213<br>231<br>312<br>321<br></code></pre></td></tr></table></figure>\n<ul>\n<li>例题-&gt;<strong>n皇后问题</strong>：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051551338.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>思路：</p>\n</li>\n<li>\n<p>根据题意很容易想到<strong>每行</strong>和<strong>每列</strong>只能放置一个皇后，只需要将<strong>n列</strong>或者<strong>n行</strong>皇后的位置写出即可代表一种情况。</p>\n</li>\n<li>\n<p>例如将皇后的行号写出，图4-4a的序号为<code>24135</code>，图4-4b的序号为<code>35142</code>。</p>\n</li>\n<li>\n<p>按照这个思路只需要枚举<strong>1 - n</strong>的所有排列，并且查看每个排列对应的放置方案是否合法，统计合法的方案即可，总共只有<code>n!</code>个排列。</p>\n</li>\n<li>\n<p>可以参考全排列的方法，生成一段排列序号后，在递归边界判断序号是否合法，代码如下：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//n皇后函数变量定义</span><br><span class=\"hljs-type\">const</span>  <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-type\">int</span> n;<span class=\"hljs-comment\">//输出index-n的全排列</span><br><span class=\"hljs-type\">int</span> p[MAXN];<br><span class=\"hljs-type\">bool</span> HashTable[MAXN]=&#123;<span class=\"hljs-literal\">false</span>&#125;;<br><span class=\"hljs-type\">int</span> my_count = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//记录合法的皇后排列个数</span><br><br><span class=\"hljs-comment\">//n皇后问题递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">n_queens</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//递归边界</span><br>    <span class=\"hljs-keyword\">if</span>(index==n+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;i&lt;n;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=i+<span class=\"hljs-number\">1</span>;j&lt;=n;j++)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(i-j)==<span class=\"hljs-built_in\">abs</span>(p[i]-p[j]))<br>                &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag)<br>        &#123;<br>            my_count++;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-comment\">//递归式</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(!HashTable[k])<span class=\"hljs-comment\">//HashTable[k]==false-&gt;说明该元素还没有被用上</span><br>        &#123;<br>            p[index]=k;<span class=\"hljs-comment\">//处理这一种情况</span><br>            HashTable[k] = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//到这里说明假设1到index已经排好</span><br>            <span class=\"hljs-comment\">//递归进入函数再排index+1之后的部分</span><br>            <span class=\"hljs-built_in\">n_queens</span>(index+<span class=\"hljs-number\">1</span>);<br>            <span class=\"hljs-comment\">//递归返回结束后循环还没有结束，继续处理下一循环的问题</span><br>            HashTable[k] = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//已经处理完p[index]=k;这一种情况，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    n=<span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-built_in\">n_queens</span>(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//index从1开始</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,my_count);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">92<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：</li>\n<li>上述方法在序列完成时再判断该序列是否合法，未使用任何优化方法，称为<strong>暴力法</strong>。</li>\n<li>事实上，可以发现当已经放置了一部分皇后以后（对应生成了排列的一部分），如果后续皇后无论怎么放置都冲突的话，即可中止递归了。</li>\n<li>一般而言，如果在到达<strong>递归边界</strong>前的某层，由于一些事实导致已经不需要再往任何一个子问题递归了，就可以直接返回上一层，一般这种做法称为<strong>回溯法</strong>。</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-comment\">//n皇后函数变量定义</span><br><span class=\"hljs-type\">const</span>  <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-type\">int</span> n;<span class=\"hljs-comment\">//输出index-n的全排列</span><br><span class=\"hljs-type\">int</span> p[MAXN];<br><span class=\"hljs-type\">bool</span> HashTable[MAXN]=&#123;<span class=\"hljs-literal\">false</span>&#125;;<br><span class=\"hljs-type\">int</span> my_count = <span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">//记录合法的皇后排列个数</span><br><br><span class=\"hljs-comment\">//n皇后问题递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">n_queens</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> index)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-comment\">//递归边界,到达递归边界都是合法序列</span><br>    <span class=\"hljs-keyword\">if</span>(index==n+<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        my_count++;<br>        <span class=\"hljs-keyword\">return</span> ;<br>    &#125;<br>    <span class=\"hljs-comment\">//递归式</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(!HashTable[k])<span class=\"hljs-comment\">//HashTable[k]==false-&gt;说明该元素还没有被用上</span><br>        &#123;<br>            p[index]=k;<span class=\"hljs-comment\">//处理这一种情况</span><br>            HashTable[k] = <span class=\"hljs-literal\">true</span>;<span class=\"hljs-comment\">//到这里说明假设1到index已经排好</span><br>            <span class=\"hljs-type\">bool</span> flag = <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> pre=<span class=\"hljs-number\">1</span>;pre&lt;index;pre++)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">abs</span>(index-pre)==<span class=\"hljs-built_in\">abs</span>(p[index]-p[pre]))<br>                &#123;<br>                    flag = <span class=\"hljs-literal\">false</span>;<br>                    <span class=\"hljs-keyword\">break</span>;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span>(flag)<br>            &#123;<br>                <span class=\"hljs-comment\">//递归进入函数再排index+1之后的部分</span><br>                <span class=\"hljs-built_in\">n_queens</span>(index+<span class=\"hljs-number\">1</span>);<br>            &#125;<br>            <span class=\"hljs-comment\">//递归返回结束后循环还没有结束，继续处理下一循环的问题</span><br>            HashTable[k] = <span class=\"hljs-literal\">false</span>;<span class=\"hljs-comment\">//已经处理完p[index]=k;这一种情况，还原状态</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    n=<span class=\"hljs-number\">8</span>;<br>    <span class=\"hljs-built_in\">n_queens</span>(<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">//index从1开始</span><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,my_count);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>输出：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">92<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/113\">反转字符串</a></p>\n<ul>\n<li>方法一：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051954513.png\" alt=\"\" /></p>\n<ul>\n<li>方法一代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//递归求字符串逆函数1</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    <span class=\"hljs-type\">int</span> len;<br>    temp = *str;<br>    len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    *str = *(str+len<span class=\"hljs-number\">-1</span>);<br>    *(str+len<span class=\"hljs-number\">-1</span>)=<span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str+<span class=\"hljs-number\">1</span>)&gt;=<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_1</span>(str+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    *(str+len<span class=\"hljs-number\">-1</span>)=temp;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>方法二：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311051958349.png\" alt=\"\" /></p>\n<ul>\n<li>方法二代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">//递归求字符串逆函数2</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str,<span class=\"hljs-type\">int</span> left,<span class=\"hljs-type\">int</span> right)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    temp = str[left];<br>    str[left] = str[right];<br>    str[right] = temp;<br>    <span class=\"hljs-keyword\">if</span>(left+<span class=\"hljs-number\">1</span>&lt;right<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_2</span>(str,left+<span class=\"hljs-number\">1</span>,right<span class=\"hljs-number\">-1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">110</span>;<br><span class=\"hljs-type\">char</span> str[MAXN],rev_str[MAXN];<br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-comment\">//递归求字符串逆函数1</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    <span class=\"hljs-type\">int</span> len;<br>    temp = *str;<br>    len = <span class=\"hljs-built_in\">strlen</span>(str);<br>    *str = *(str+len<span class=\"hljs-number\">-1</span>);<br>    *(str+len<span class=\"hljs-number\">-1</span>)=<span class=\"hljs-string\">&#x27;\\0&#x27;</span>;<br>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(str+<span class=\"hljs-number\">1</span>)&gt;=<span class=\"hljs-number\">2</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_1</span>(str+<span class=\"hljs-number\">1</span>);<br>    &#125;<br>    *(str+len<span class=\"hljs-number\">-1</span>)=temp;<br>&#125;<br><br><span class=\"hljs-comment\">//递归求字符串逆函数2</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">rev_2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">char</span>* str,<span class=\"hljs-type\">int</span> left,<span class=\"hljs-type\">int</span> right)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">char</span> temp;<br>    temp = str[left];<br>    str[left] = str[right];<br>    str[right] = temp;<br>    <span class=\"hljs-keyword\">if</span>(left+<span class=\"hljs-number\">1</span>&lt;right<span class=\"hljs-number\">-1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">rev_2</span>(str,left+<span class=\"hljs-number\">1</span>,right<span class=\"hljs-number\">-1</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>,str);<br>    <span class=\"hljs-comment\">//rev_1(str);</span><br>    <span class=\"hljs-built_in\">rev_2</span>(str,<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">strlen</span>(str)<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%s&quot;</span>, str);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：上述介绍的两种方法可以多深入体会。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/118\">上楼</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//递归判断上楼梯方式数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">F</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n&lt;=<span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">else</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-1</span>)+<span class=\"hljs-built_in\">F</span>(n<span class=\"hljs-number\">-2</span>);<span class=\"hljs-comment\">//最后只有加一级或者两级，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可</span><br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,<span class=\"hljs-built_in\">F</span>(n));<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：最后要到达最高级只有加<strong>一级</strong>或者<strong>两级</strong>，方案是固定的，所以只需要求出还需要一级到达的总方式数和还需要两级到达的总方式数即可。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/119\">汉诺塔</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">int</span> my_count=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">//汉诺塔问题</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">hanoi</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">char</span> from,<span class=\"hljs-type\">char</span> to,<span class=\"hljs-type\">char</span> mid)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c-&gt;%c\\n&quot;</span>,from,to);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">hanoi</span>(n<span class=\"hljs-number\">-1</span>,from,mid,to);<span class=\"hljs-comment\">//要想移动n级汉诺塔需要先移动n-1级汉诺塔到另一边</span><br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c-&gt;%c\\n&quot;</span>,from,to);<span class=\"hljs-comment\">//把最后最大的一块移动到目的位置</span><br>        <span class=\"hljs-built_in\">hanoi</span>(n<span class=\"hljs-number\">-1</span>,mid,to,from);<span class=\"hljs-comment\">//最后把剩下n-1级的汉诺塔移动到目标位置</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d\\n&quot;</span>,(<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,n)<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-built_in\">hanoi</span>(n,<span class=\"hljs-string\">&#x27;A&#x27;</span>,<span class=\"hljs-string\">&#x27;C&#x27;</span>,<span class=\"hljs-string\">&#x27;B&#x27;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：要想移动<code>n</code>级汉诺塔需要先移动<code>n-1</code>级汉诺塔到另一边，然后把最后最大的一块移动到目的位置，最后把剩下<code>n-1</code>级的汉诺塔移动到目标位置，从而形成递归。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/120\">棋盘覆盖问题</a></p>\n<ul>\n<li>说明：这道题目是一道典型的二维<strong>分治问题</strong>。</li>\n<li>思路：要想采用<strong>分治</strong>的方法并且使用<strong>递归</strong>来进行求解，就需要划分成相同方案的子问题，划分的思路如下：</li>\n</ul>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311071535777.png\" alt=\"\" /></p>\n<ul>\n<li>以此类推，在划分到只剩下2×2大小的方块后就很容易地采用骨牌进行填充。</li>\n<li>代码如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">256</span>*<span class=\"hljs-number\">256</span>;<br><span class=\"hljs-type\">int</span> my_index = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-comment\">//建立坐标结构体</span><br><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title class_\">point</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> x , y;<br>    <span class=\"hljs-comment\">//原始构造函数，不需要初始化变量</span><br>    <span class=\"hljs-built_in\">point</span>()&#123;&#125;<br>    <span class=\"hljs-comment\">//传参构造函数</span><br>    <span class=\"hljs-built_in\">point</span>(<span class=\"hljs-type\">int</span> _x,<span class=\"hljs-type\">int</span> _y)<br>    &#123;<br>        x=_x;<br>        y=_y;<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">//定义存储的点数组</span><br>point arr[MAXN];<br><br><span class=\"hljs-comment\">//递归获取棋盘覆盖函数</span><br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">x,y是左下角方格坐标，代表原点</span><br><span class=\"hljs-comment\">cx,cy是黑点坐标</span><br><span class=\"hljs-comment\">size是传入此函数时整体方格的大小</span><br><span class=\"hljs-comment\">*/</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">chees_cover</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> y,<span class=\"hljs-type\">int</span> cx,<span class=\"hljs-type\">int</span> cy,<span class=\"hljs-type\">int</span> size)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> h;<br>    <span class=\"hljs-keyword\">if</span>(size == <span class=\"hljs-number\">1</span>)<br>        <span class=\"hljs-keyword\">return</span>;<br>    h = size/<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-comment\">//黑色方格在左上角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&gt;=y+h&amp;&amp;cx&lt;x+h)<span class=\"hljs-comment\">//假如黑色方块在左上角</span><br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h,y+h<span class=\"hljs-number\">-1</span>);<span class=\"hljs-comment\">//从黑色方块在左上角</span><br>        <span class=\"hljs-comment\">//确认骨牌的原点在右下角</span><br>        <span class=\"hljs-comment\">//以下的三个if语句同理</span><br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y+h,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y+h, x+h<span class=\"hljs-number\">-1</span>,y+h,h);<span class=\"hljs-comment\">//</span><br>    &#125;<br>    <span class=\"hljs-comment\">//黑色方格在右上角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&gt;=y+h&amp;&amp;cx&gt;=x+h)<br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h<span class=\"hljs-number\">-1</span>,y+h<span class=\"hljs-number\">-1</span>);<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y+h,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y+h,x+h,y+h,h);<br>    &#125;<br>    <span class=\"hljs-comment\">//黑色方格在左下角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&lt;y+h&amp;&amp;cx&lt;x+h)<br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h,y+h);<br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x,y,x+h<span class=\"hljs-number\">-1</span>,y+h<span class=\"hljs-number\">-1</span>,h);<br>    &#125;<br>    <span class=\"hljs-comment\">//黑色方格在右下角</span><br>    <span class=\"hljs-keyword\">if</span>(cy&lt;y+h&amp;&amp;cx&gt;=x+h)<br>    &#123;<br>        arr[my_index++]=<span class=\"hljs-built_in\">point</span>(x+h<span class=\"hljs-number\">-1</span>,y+h);<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y,cx,cy,h);<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">chees_cover</span>(x+h,y,x+h,y+h<span class=\"hljs-number\">-1</span>,h);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//定义排序比较函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">cmd</span><span class=\"hljs-params\">(point px,point py)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(px.x==py.x)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> px.y &lt; py.y;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> px.x &lt; py.x;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> k,cx,cy,size;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d%d%d&quot;</span>,&amp;k,&amp;cx,&amp;cy);<br>    size = (<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">2</span>,k);<br>    <span class=\"hljs-built_in\">chees_cover</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,cx,cy,size);<br>    <span class=\"hljs-built_in\">sort</span>(arr,arr+my_index,cmd);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;my_index;i++)<br>    &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d %d\\n&quot;</span>,arr[i].x,arr[i].y);<br>    &#125;<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/123\">谢尔宾斯基地毯</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">3</span>;<br><span class=\"hljs-type\">char</span> arr[MAXN][MAXN];<br><br><span class=\"hljs-comment\">//定义谢尔宾斯基地毯递归函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">cover</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> x,<span class=\"hljs-type\">int</span> y)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> unit = (<span class=\"hljs-type\">int</span>)<span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">3.0</span>,n<span class=\"hljs-number\">-2</span>);<br>    <span class=\"hljs-keyword\">if</span>(n==<span class=\"hljs-number\">1</span>)<br>    &#123;<br>        arr[x][y]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x,y);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x,y+unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x,y+<span class=\"hljs-number\">2</span>*unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+unit,y);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=x+unit;i&lt;x+<span class=\"hljs-number\">2</span>*unit;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=y+unit;j&lt;y+<span class=\"hljs-number\">2</span>*unit;j++)<br>            &#123;<br>                arr[i][j]=<span class=\"hljs-string\">&#x27;X&#x27;</span>;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+unit,y+<span class=\"hljs-number\">2</span>*unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+<span class=\"hljs-number\">2</span>*unit,y);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+<span class=\"hljs-number\">2</span>*unit,y+unit);<br>        <span class=\"hljs-built_in\">cover</span>(n<span class=\"hljs-number\">-1</span>,x+<span class=\"hljs-number\">2</span>*unit,y+<span class=\"hljs-number\">2</span>*unit);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,my_unit;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    my_unit = <span class=\"hljs-built_in\">pow</span>(<span class=\"hljs-number\">3.0</span>,n<span class=\"hljs-number\">-1</span>);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;my_unit+<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;my_unit+<span class=\"hljs-number\">2</span>;j++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(i==<span class=\"hljs-number\">0</span>||i==my_unit+<span class=\"hljs-number\">1</span>||j==<span class=\"hljs-number\">0</span>||j==my_unit+<span class=\"hljs-number\">1</span>)<br>            &#123;<br>                arr[i][j]=<span class=\"hljs-string\">&#x27;+&#x27;</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span><br>                arr[i][j]=<span class=\"hljs-string\">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">cover</span>(n,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">//printf(&quot;%d %d&quot;,n,my_unit);</span><br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;my_unit+<span class=\"hljs-number\">2</span>;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j=<span class=\"hljs-number\">0</span>;j&lt;my_unit+<span class=\"hljs-number\">2</span>;j++)<br>        &#123;<br>            <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%c&quot;</span>,arr[i][j]);<br>        &#125;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-built_in\">system</span>(<span class=\"hljs-string\">&quot;pause&quot;</span>);<span class=\"hljs-comment\">// 防止运行后自动退出，需头文件stdlib.h</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这种题目主要找准递归的<strong>起始位置</strong>，根据<strong>起始位置</strong>即可输出完整图形。</li>\n</ul>\n<h4 id=\"一种递归式的非零自然数全分解方法\"><a class=\"markdownIt-Anchor\" href=\"#一种递归式的非零自然数全分解方法\"></a> 一种递归式的非零自然数全分解方法</h4>\n<ul>\n<li>在开始讲之前，首先介绍一下这个方法针对的问题背景：一个非零自然数(1,2,3,……)既不重复也不遗漏地任意分解为非零自然数(如：3=1+1+1=1+2)，在本篇暂且称为非零自然数的全分解。</li>\n<li>在非零自然数的全分解中，总共有多少种分解方法，并列出所有分解方法，在本篇暂且称为非零自然数的全分解问题。</li>\n</ul>\n<h5 id=\"基本概念\"><a class=\"markdownIt-Anchor\" href=\"#基本概念\"></a> 基本概念</h5>\n<ol>\n<li><strong>分解末项</strong><br />\n   + 一个分解中的最后一项称为分解末项。如“3=1+2”中分解末项为“2”，再如“3=1+1+1”中分解末项为“1”。</li>\n<li><strong>分解基数B</strong><br />\n  + 分解基数，在数值上定义为分解末项的前一项，举个例子：“5=1+4”称为分解基数B=1的一个分解，“5=1+2+2”称为分解基数B=2的一个分解。<br />\n  + 我们也可以把“5=1+4”到“5=1+2+2”的过程理解为一个将分解末项“4”按分解基数B=2的分解。实际上这种理解更为重要，因为在本方法中，我们本质上也是针对分解末项的分解。</li>\n</ol>\n<h5 id=\"分解规则\"><a class=\"markdownIt-Anchor\" href=\"#分解规则\"></a> 分解规则</h5>\n<ol>\n<li>关于分解基数\n<ul>\n<li><strong>分解基数单调不减</strong>。如：“7=2+5=2+1+4”为一个错误的分解过程，因为第一级分解基数为2，第二级分解基数为1，违反分解基数单调不减原则。所以，“7=2+5=2+2+3”才是一个正确的分解过程。</li>\n</ul>\n</li>\n<li>关于分解末项\n<ul>\n<li><strong>分解末项应不小于分解基数</strong>。如：“5=1+1+3”为一个正确的分解，“5=1+3+1”为一个错误的分解。</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://yugin-blog-1313489805.cos.ap-guangzhou.myqcloud.com/202311102020016.jpeg\" alt=\"\" /></p>\n<ul>\n<li>根据前述的两条分解规则，对7的全分解过程如上图所示，可以看到总共有14种分解方法。实际上，7的全分解就是这14种分解方法。</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/125\">自然数分解之方案数</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//递归求解自然数分解方案数量函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> pre,<span class=\"hljs-type\">int</span> now)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> temp=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;<span class=\"hljs-number\">2</span>*i&lt;=now;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&gt;=pre)<br>        &#123;<br>            temp+=<span class=\"hljs-built_in\">func</span>(i,now-i);<br>            temp++;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> temp;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    num = <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">0</span>,n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,num);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：\n<ul>\n<li><strong>递归边界</strong>是：当我们需要拆分的数为1时，表示无法拆分，因此返回0。</li>\n<li>总而言之，<code>func(pre,now)</code>所返回的整数表示该组合后续能够拆分的总数。</li>\n</ul>\n</li>\n</ul>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/124\">自然数分解之最大积</a></p>\n<ul>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><br><span class=\"hljs-comment\">//递归求解自然数分解之最大积</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">func</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> pre,<span class=\"hljs-type\">int</span> now)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> my_max=<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">1</span>;<span class=\"hljs-number\">2</span>*i&lt;=now;i++)<br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(i&gt;=pre)<br>        &#123;<br>            my_max=<span class=\"hljs-built_in\">max</span>(my_max,<span class=\"hljs-built_in\">max</span>(i*(now-i),<span class=\"hljs-built_in\">func</span>(i,now-i)));<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">max</span>(my_max,pre*my_max);<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-type\">int</span> n,num;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    num = <span class=\"hljs-built_in\">func</span>(<span class=\"hljs-number\">0</span>,n);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,num);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>总结：这题与<strong>自然数分解之方案数</strong>较为相似，只需要把递归函数<code>temp</code>的计数改为计算乘积最大值即可。</li>\n</ul>\n<h4 id=\"动态规划\"><a class=\"markdownIt-Anchor\" href=\"#动态规划\"></a> 动态规划</h4>\n<p>例题：<a href=\"https://sunnywhy.com/sfbj/4/3/116\">数塔</a></p>\n<ul>\n<li>\n<p>思路：数塔问题是经典的动态规划问题，通过归纳可以得到一个信息：</p>\n<ul>\n<li>如果要求出<code>dp[i][j]</code>,那么一定要求出其两个子问题：</li>\n<li>从位置<code>(i+1,j)</code>到达最底层的最大和<code>dp[i+1][j]</code>;</li>\n<li>从位置<code>(i+1,j+1)</code>到达最底层的最大和<code>dp[i+1][j+1]</code>;</li>\n<li>即进行了一次决策，走位置<code>(i,j)</code>的左下还是右下：</li>\n<li>式子如下：</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\">dp[i][j]=<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">dp</span>(i+<span class=\"hljs-number\">1</span>,j),<span class=\"hljs-built_in\">dp</span>(i+<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>))+f[i][j];<br></code></pre></td></tr></table></figure>\n<ul>\n<li>把<code>dp[i][j]</code>称为问题的<strong>状态</strong>，而把上面的式子称为<strong>状态转移方程</strong>。</li>\n</ul>\n</li>\n<li>\n<p>例题代码：</p>\n</li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cstdio&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;algorithm&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;cmath&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">int</span> MAXN = <span class=\"hljs-number\">25</span>;<br><span class=\"hljs-type\">int</span> f[MAXN][MAXN],dp[MAXN][MAXN];<br><span class=\"hljs-type\">int</span> n;<br><span class=\"hljs-comment\">//数塔递归函数（动态规划）</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">getMax</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i,<span class=\"hljs-type\">int</span> j)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(i==n)<br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> f[n][j];<br>    &#125;<br>    <span class=\"hljs-keyword\">else</span><br>    &#123;<br>        dp[i][j]=<span class=\"hljs-built_in\">max</span>(<span class=\"hljs-built_in\">getMax</span>(i+<span class=\"hljs-number\">1</span>,j),<span class=\"hljs-built_in\">getMax</span>(i+<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>))+f[i][j];<br>        <span class=\"hljs-keyword\">return</span> dp[i][j];<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>&#123;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> k=<span class=\"hljs-number\">1</span>;k&lt;=n;k++)<br>    &#123;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> m=<span class=\"hljs-number\">1</span>;m&lt;=k;m++)<br>        &#123;<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;f[k][m]);<br>        &#125;<br>    &#125;<br>    dp[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]= <span class=\"hljs-built_in\">getMax</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,dp[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>]);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"贪心\"><a class=\"markdownIt-Anchor\" href=\"#贪心\"></a> 贪心</h3>\n<h4 id=\"简单贪心\"><a class=\"markdownIt-Anchor\" href=\"#简单贪心\"></a> 简单贪心</h4>\n"},{"title":"JAVA程序设计实验练习一","date":"2022-09-29T06:00:00.000Z","excerpt":"JAVA、程序设计","_content":"\n# 实验题目\n\n## 题目一\n\n### 题目：\n\n定义一个数组类，编写成员函数实现以下功能：\n\n1. 随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；\n\n2. 判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；\n\n3. 数组和函数Sum（）：计算数组和。\n\n4. 判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；\n\n5. 编写main函数，调用测试以上功能；\n\n### 运行结果：\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java1.png)\n\n### 源代码：\n\n* 定义数组类\n\n```java\npackage com.company;\nimport java.util.Random;\n\npublic class Array {\n\n    private int n;\n    private int max;\n    private int[] arr;\n\n    public Array(){\n    }\n\n    public Array(int n,int max){\n        this.n=n;\n        this.max=max;\n        //arr = new int[n];\n    }\n\n    //生成随机数\n    private static int getRandomNumberInRange(int min, int max) {\n        if (min >= max) {\n            throw new IllegalArgumentException(\"max must be greater than min\");\n        }\n        Random r = new Random();\n        return r.nextInt((max - min) + 1) + min;\n    }\n\n    //随机数组\n    public void RandomArray(int n,int max){\n        arr = new int[n];\n        for(int i=0;i<arr.length;i++)\n        {\n            //public int[] arr = new int[n];\n            arr[i]=getRandomNumberInRange(0,max);\n        }\n        System.out.println(\"元素值不超过 \"+max);\n        System.out.println(\"数组长度是 \"+arr.length);\n    }\n\n    //判断升序\n    public int CheckOrder(){\n        int right1 = 1;\n        for(int i=0;i<arr.length-1;i++)\n        {\n            if(arr[i]>arr[i+1])\n            {\n              right1=0;\n            }\n            else right1=1;\n        }\n        return right1;\n    }\n\n    //计算和\n    public int sum(){\n        int sum1=0;\n        for(int i=0;i<arr.length;i++)\n        {\n            sum1+=arr[i];\n        }\n        return sum1;\n    }\n\n    //判断函数\n    public int CheckKey(int key){\n        int right1=0;\n        for(int i=0;i<arr.length;i++)\n        {\n            if(arr[i]==key)\n            {\n                right1=1;\n            }\n            else right1=0;\n        }\n        return right1;\n    }\n\n}\n```\n\n* 主函数\n\n```java\npackage com.company;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t// write your code here\n        Array array = new Array(10,10);\n        array.RandomArray(5,50);\n        System.out.println(\"判断数组是否有值 \"+array.CheckKey(1));\n        System.out.println(\"判断数组是否升序 \"+array.CheckOrder());\n        System.out.println(\"数组元素的和 \"+array.sum());\n    }\n}\n```\n\n## 题目二\n\n### 题目：\n\n编写程序，求圆柱体的体积CylinderVolume:\n\n1. 设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；\n\n2. 设计一个圆柱体类Cylinder实现接口area，包含\n\n* 包含成员变量：高度，半径；\n\n* 实现构造方法，对成员变量进行赋值；\n\n* 实现圆柱体底面积成员方法area；\n\n* 实现计算圆柱体体积的成员方法volume；\n\n3. 编写测试类计算圆柱体体积。\n\n### 运行结果：\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java2.png)\n\n### 源代码：\n\n* 计算圆面积的接口area  \n\n```java\npackage com.company;\n\npublic interface area {\n    public double bottomArea();\n}\n```\n\n* 圆柱体类Cylinder\n\n```java\npackage com.company;\n\npublic class Cylinder implements area{\n\n    //成员属性\n    private int h;//高度\n    private int r;//半径\n\n    //构造函数\n    public Cylinder(){\n    }\n    //构造函数\n    public Cylinder(int h,int r){\n        this.r=r;\n        this.h=h;\n    }\n\n    public double area()\n    {\n        return Math.PI*r*r;\n    }\n\n    public double volume()\n    {\n        return Math.PI*r*r*h;\n    }\n\n    @Override\n    public double bottomArea() {\n        return Math.PI*r*r;\n    }\n}\n```\n\n* 主函数\n\n```java\npackage com.company;\n\npublic class Main {\n    public static void main(String[] args) {\n\t// write your code here\n        int h=2;\n        int r=2;\n        Cylinder cylinder = new Cylinder(2,2);\n        System.out.println(\"高度\"+h+\" 半径\"+r);//接口方法\n        System.out.println(\"接口方法面积\"+cylinder.bottomArea());//接口方法\n        System.out.println(\"成员方法面积\"+cylinder.area());//成员方法\n        System.out.println(\"成员方法体积\"+cylinder.volume());//成员方法\n    }\n}\n```\n\n## 题目三\n\n### 题目：\n\n1. 定义一个父类Animal类\n\n属性：kind(种类)\n\n方法：创建带参（kind为参数）构造方法\n\n创建cry():void方法\n\n2. 编写三个具体的子类Cat类、Dog类、Sheep类\n\n分别重写父类中的 cry() 方法，输出信息分别为\n\nCat类：小猫的叫声：喵喵喵~~~\n\nDog类：小狗的叫声：汪汪汪~~~\n\nSheep类：小羊的叫声：咩咩咩~~~\n\n3. 编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：\n\na) 每次随机产生一个0~2的正整数\n\nb) 若数值为 0，则生成一个 Cat 类的对象，存入数组\n\nc) 若数值为 1，则生成一个 Dog 类的对象，存入数组\n\nd) 若数值为 2，则生成一个 Sheep 类的对象，存入数组\n\n最后循环输出数组成员，并分别调用 cry() 方法。\n\n### 运行结果:\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java3.png)\n\n### 源代码：\n\n* 父类（动物）\n\n```java\npackage com.company;\n\npublic class Animal {\n\n    protected String kind;\n\n    public Animal(){\n\n    }\n    \n    public Animal(String kind){\n          this.kind=kind;\n    }\n\n    public void cry(){\n\n    }\n\n}\n```\n\n* 子类（猫）\n\n```java\npackage com.company;\n\npublic class Cat extends Animal{\n   public Cat(String kind){\n       super(kind);\n   }\n\n    public void cry(){\n       System.out.println(this.kind+\"的叫声：喵喵喵~~~\");\n    }\n}\n```\n\n* 子类（狗）\n\n```java\npackage com.company;\n\npublic class Dog extends Animal{\n    public Dog(String kind){\n        super(kind);\n    }\n\n    public void cry(){\n        System.out.println(this.kind+\"的叫声：汪汪汪~~~\");\n    }\n}\n```\n\n* 子类（羊）\n\n```java\npackage com.company;\n\npublic class Sheep extends Animal{\n    public Sheep(String kind){\n        super(kind);\n    }\n\n    public void cry(){\n        System.out.println(this.kind+\"的叫声：咩咩咩~~~\");\n    }\n}\n```\n\n* 主函数\n\n```java\npackage com.company;\nimport java.util.Random;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t// write your code here\n         Animal[] animal = new Animal[5];//生成5个数组\n        //System.out.println(animal.length);\n       for(int i=0;i<animal.length;i++)\n       {\n           int num = new Random().nextInt(3);\n           if(num==0)\n           {\n             animal[i] = new Cat(\"cat\"+i);\n           }\n           else if(num==1)\n           {\n               animal[i] =new Dog(\"dog\"+i);\n           }\n           else if(num==2)\n           {\n               animal[i] =new Sheep(\"sheep\"+i);\n           }\n       }\n        for(Animal j:animal)\n        {\n            j.cry();\n        }\n    }\n}\n```\n\n","source":"_posts/exercise1.md","raw":"---\ntitle: JAVA程序设计实验练习一\ntags: [JAVA,程序设计]\ncategories: [JAVA]\ndate: 2022-9-29 14:00:00\nexcerpt: JAVA、程序设计\n---\n\n# 实验题目\n\n## 题目一\n\n### 题目：\n\n定义一个数组类，编写成员函数实现以下功能：\n\n1. 随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；\n\n2. 判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；\n\n3. 数组和函数Sum（）：计算数组和。\n\n4. 判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；\n\n5. 编写main函数，调用测试以上功能；\n\n### 运行结果：\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java1.png)\n\n### 源代码：\n\n* 定义数组类\n\n```java\npackage com.company;\nimport java.util.Random;\n\npublic class Array {\n\n    private int n;\n    private int max;\n    private int[] arr;\n\n    public Array(){\n    }\n\n    public Array(int n,int max){\n        this.n=n;\n        this.max=max;\n        //arr = new int[n];\n    }\n\n    //生成随机数\n    private static int getRandomNumberInRange(int min, int max) {\n        if (min >= max) {\n            throw new IllegalArgumentException(\"max must be greater than min\");\n        }\n        Random r = new Random();\n        return r.nextInt((max - min) + 1) + min;\n    }\n\n    //随机数组\n    public void RandomArray(int n,int max){\n        arr = new int[n];\n        for(int i=0;i<arr.length;i++)\n        {\n            //public int[] arr = new int[n];\n            arr[i]=getRandomNumberInRange(0,max);\n        }\n        System.out.println(\"元素值不超过 \"+max);\n        System.out.println(\"数组长度是 \"+arr.length);\n    }\n\n    //判断升序\n    public int CheckOrder(){\n        int right1 = 1;\n        for(int i=0;i<arr.length-1;i++)\n        {\n            if(arr[i]>arr[i+1])\n            {\n              right1=0;\n            }\n            else right1=1;\n        }\n        return right1;\n    }\n\n    //计算和\n    public int sum(){\n        int sum1=0;\n        for(int i=0;i<arr.length;i++)\n        {\n            sum1+=arr[i];\n        }\n        return sum1;\n    }\n\n    //判断函数\n    public int CheckKey(int key){\n        int right1=0;\n        for(int i=0;i<arr.length;i++)\n        {\n            if(arr[i]==key)\n            {\n                right1=1;\n            }\n            else right1=0;\n        }\n        return right1;\n    }\n\n}\n```\n\n* 主函数\n\n```java\npackage com.company;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t// write your code here\n        Array array = new Array(10,10);\n        array.RandomArray(5,50);\n        System.out.println(\"判断数组是否有值 \"+array.CheckKey(1));\n        System.out.println(\"判断数组是否升序 \"+array.CheckOrder());\n        System.out.println(\"数组元素的和 \"+array.sum());\n    }\n}\n```\n\n## 题目二\n\n### 题目：\n\n编写程序，求圆柱体的体积CylinderVolume:\n\n1. 设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；\n\n2. 设计一个圆柱体类Cylinder实现接口area，包含\n\n* 包含成员变量：高度，半径；\n\n* 实现构造方法，对成员变量进行赋值；\n\n* 实现圆柱体底面积成员方法area；\n\n* 实现计算圆柱体体积的成员方法volume；\n\n3. 编写测试类计算圆柱体体积。\n\n### 运行结果：\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java2.png)\n\n### 源代码：\n\n* 计算圆面积的接口area  \n\n```java\npackage com.company;\n\npublic interface area {\n    public double bottomArea();\n}\n```\n\n* 圆柱体类Cylinder\n\n```java\npackage com.company;\n\npublic class Cylinder implements area{\n\n    //成员属性\n    private int h;//高度\n    private int r;//半径\n\n    //构造函数\n    public Cylinder(){\n    }\n    //构造函数\n    public Cylinder(int h,int r){\n        this.r=r;\n        this.h=h;\n    }\n\n    public double area()\n    {\n        return Math.PI*r*r;\n    }\n\n    public double volume()\n    {\n        return Math.PI*r*r*h;\n    }\n\n    @Override\n    public double bottomArea() {\n        return Math.PI*r*r;\n    }\n}\n```\n\n* 主函数\n\n```java\npackage com.company;\n\npublic class Main {\n    public static void main(String[] args) {\n\t// write your code here\n        int h=2;\n        int r=2;\n        Cylinder cylinder = new Cylinder(2,2);\n        System.out.println(\"高度\"+h+\" 半径\"+r);//接口方法\n        System.out.println(\"接口方法面积\"+cylinder.bottomArea());//接口方法\n        System.out.println(\"成员方法面积\"+cylinder.area());//成员方法\n        System.out.println(\"成员方法体积\"+cylinder.volume());//成员方法\n    }\n}\n```\n\n## 题目三\n\n### 题目：\n\n1. 定义一个父类Animal类\n\n属性：kind(种类)\n\n方法：创建带参（kind为参数）构造方法\n\n创建cry():void方法\n\n2. 编写三个具体的子类Cat类、Dog类、Sheep类\n\n分别重写父类中的 cry() 方法，输出信息分别为\n\nCat类：小猫的叫声：喵喵喵~~~\n\nDog类：小狗的叫声：汪汪汪~~~\n\nSheep类：小羊的叫声：咩咩咩~~~\n\n3. 编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：\n\na) 每次随机产生一个0~2的正整数\n\nb) 若数值为 0，则生成一个 Cat 类的对象，存入数组\n\nc) 若数值为 1，则生成一个 Dog 类的对象，存入数组\n\nd) 若数值为 2，则生成一个 Sheep 类的对象，存入数组\n\n最后循环输出数组成员，并分别调用 cry() 方法。\n\n### 运行结果:\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java3.png)\n\n### 源代码：\n\n* 父类（动物）\n\n```java\npackage com.company;\n\npublic class Animal {\n\n    protected String kind;\n\n    public Animal(){\n\n    }\n    \n    public Animal(String kind){\n          this.kind=kind;\n    }\n\n    public void cry(){\n\n    }\n\n}\n```\n\n* 子类（猫）\n\n```java\npackage com.company;\n\npublic class Cat extends Animal{\n   public Cat(String kind){\n       super(kind);\n   }\n\n    public void cry(){\n       System.out.println(this.kind+\"的叫声：喵喵喵~~~\");\n    }\n}\n```\n\n* 子类（狗）\n\n```java\npackage com.company;\n\npublic class Dog extends Animal{\n    public Dog(String kind){\n        super(kind);\n    }\n\n    public void cry(){\n        System.out.println(this.kind+\"的叫声：汪汪汪~~~\");\n    }\n}\n```\n\n* 子类（羊）\n\n```java\npackage com.company;\n\npublic class Sheep extends Animal{\n    public Sheep(String kind){\n        super(kind);\n    }\n\n    public void cry(){\n        System.out.println(this.kind+\"的叫声：咩咩咩~~~\");\n    }\n}\n```\n\n* 主函数\n\n```java\npackage com.company;\nimport java.util.Random;\n\npublic class Main {\n\n    public static void main(String[] args) {\n\t// write your code here\n         Animal[] animal = new Animal[5];//生成5个数组\n        //System.out.println(animal.length);\n       for(int i=0;i<animal.length;i++)\n       {\n           int num = new Random().nextInt(3);\n           if(num==0)\n           {\n             animal[i] = new Cat(\"cat\"+i);\n           }\n           else if(num==1)\n           {\n               animal[i] =new Dog(\"dog\"+i);\n           }\n           else if(num==2)\n           {\n               animal[i] =new Sheep(\"sheep\"+i);\n           }\n       }\n        for(Animal j:animal)\n        {\n            j.cry();\n        }\n    }\n}\n```\n\n","slug":"exercise1","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7un000nlsvshqs8ezx5","content":"<h1 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\"></a> 实验题目</h1>\n<h2 id=\"题目一\"><a class=\"markdownIt-Anchor\" href=\"#题目一\"></a> 题目一</h2>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目：</h3>\n<p>定义一个数组类，编写成员函数实现以下功能：</p>\n<ol>\n<li>\n<p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p>\n</li>\n<li>\n<p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p>\n</li>\n<li>\n<p>数组和函数Sum（）：计算数组和。</p>\n</li>\n<li>\n<p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p>\n</li>\n<li>\n<p>编写main函数，调用测试以上功能；</p>\n</li>\n</ol>\n<h3 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\"></a> 运行结果：</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java1.png\" alt=\" \" /></p>\n<h3 id=\"源代码\"><a class=\"markdownIt-Anchor\" href=\"#源代码\"></a> 源代码：</h3>\n<ul>\n<li>定义数组类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Array</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> max;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] arr;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Array</span><span class=\"hljs-params\">()</span>&#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Array</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> max)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.n=n;<br>        <span class=\"hljs-built_in\">this</span>.max=max;<br>        <span class=\"hljs-comment\">//arr = new int[n];</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//生成随机数</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getRandomNumberInRange</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> min, <span class=\"hljs-type\">int</span> max)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (min &gt;= max) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;max must be greater than min&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>        <span class=\"hljs-keyword\">return</span> r.nextInt((max - min) + <span class=\"hljs-number\">1</span>) + min;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//随机数组</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">RandomArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> max)</span>&#123;<br>        arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            <span class=\"hljs-comment\">//public int[] arr = new int[n];</span><br>            arr[i]=getRandomNumberInRange(<span class=\"hljs-number\">0</span>,max);<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;元素值不超过 &quot;</span>+max);<br>        System.out.println(<span class=\"hljs-string\">&quot;数组长度是 &quot;</span>+arr.length);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//判断升序</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckOrder</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length-<span class=\"hljs-number\">1</span>;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(arr[i]&gt;arr[i+<span class=\"hljs-number\">1</span>])<br>            &#123;<br>              right1=<span class=\"hljs-number\">0</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> right1=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> right1;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//计算和</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sum</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">int</span> sum1=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            sum1+=arr[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum1;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//判断函数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span>&#123;<br>        <span class=\"hljs-type\">int</span> right1=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(arr[i]==key)<br>            &#123;<br>                right1=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> right1=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> right1;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>主函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>        <span class=\"hljs-type\">Array</span> <span class=\"hljs-variable\">array</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>);<br>        array.RandomArray(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">50</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组是否有值 &quot;</span>+array.CheckKey(<span class=\"hljs-number\">1</span>));<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组是否升序 &quot;</span>+array.CheckOrder());<br>        System.out.println(<span class=\"hljs-string\">&quot;数组元素的和 &quot;</span>+array.sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a class=\"markdownIt-Anchor\" href=\"#题目二\"></a> 题目二</h2>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\"></a> 题目：</h3>\n<p>编写程序，求圆柱体的体积CylinderVolume:</p>\n<ol>\n<li>\n<p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p>\n</li>\n<li>\n<p>设计一个圆柱体类Cylinder实现接口area，包含</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>包含成员变量：高度，半径；</p>\n</li>\n<li>\n<p>实现构造方法，对成员变量进行赋值；</p>\n</li>\n<li>\n<p>实现圆柱体底面积成员方法area；</p>\n</li>\n<li>\n<p>实现计算圆柱体体积的成员方法volume；</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>编写测试类计算圆柱体体积。</li>\n</ol>\n<h3 id=\"运行结果-2\"><a class=\"markdownIt-Anchor\" href=\"#运行结果-2\"></a> 运行结果：</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java2.png\" alt=\" \" /></p>\n<h3 id=\"源代码-2\"><a class=\"markdownIt-Anchor\" href=\"#源代码-2\"></a> 源代码：</h3>\n<ul>\n<li>计算圆面积的接口area</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">area</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>圆柱体类Cylinder</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cylinder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">area</span>&#123;<br><br>    <span class=\"hljs-comment\">//成员属性</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> h;<span class=\"hljs-comment\">//高度</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> r;<span class=\"hljs-comment\">//半径</span><br><br>    <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cylinder</span><span class=\"hljs-params\">()</span>&#123;<br>    &#125;<br>    <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> h,<span class=\"hljs-type\">int</span> r)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.r=r;<br>        <span class=\"hljs-built_in\">this</span>.h=h;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">area</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*r*r;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volume</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*r*r*h;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*r*r;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>主函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>        <span class=\"hljs-type\">int</span> h=<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-type\">int</span> r=<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-type\">Cylinder</span> <span class=\"hljs-variable\">cylinder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cylinder</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;高度&quot;</span>+h+<span class=\"hljs-string\">&quot; 半径&quot;</span>+r);<span class=\"hljs-comment\">//接口方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;接口方法面积&quot;</span>+cylinder.bottomArea());<span class=\"hljs-comment\">//接口方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;成员方法面积&quot;</span>+cylinder.area());<span class=\"hljs-comment\">//成员方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;成员方法体积&quot;</span>+cylinder.volume());<span class=\"hljs-comment\">//成员方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"题目三\"><a class=\"markdownIt-Anchor\" href=\"#题目三\"></a> 题目三</h2>\n<h3 id=\"题目-3\"><a class=\"markdownIt-Anchor\" href=\"#题目-3\"></a> 题目：</h3>\n<ol>\n<li>定义一个父类Animal类</li>\n</ol>\n<p>属性：kind(种类)</p>\n<p>方法：创建带参（kind为参数）构造方法</p>\n<p>创建cry():void方法</p>\n<ol start=\"2\">\n<li>编写三个具体的子类Cat类、Dog类、Sheep类</li>\n</ol>\n<p>分别重写父类中的 cry() 方法，输出信息分别为</p>\n<p>Cat类：小猫的叫声：喵喵喵~~~</p>\n<p>Dog类：小狗的叫声：汪汪汪~~~</p>\n<p>Sheep类：小羊的叫声：咩咩咩~~~</p>\n<ol start=\"3\">\n<li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li>\n</ol>\n<p>a) 每次随机产生一个0~2的正整数</p>\n<p>b) 若数值为 0，则生成一个 Cat 类的对象，存入数组</p>\n<p>c) 若数值为 1，则生成一个 Dog 类的对象，存入数组</p>\n<p>d) 若数值为 2，则生成一个 Sheep 类的对象，存入数组</p>\n<p>最后循环输出数组成员，并分别调用 cry() 方法。</p>\n<h3 id=\"运行结果-3\"><a class=\"markdownIt-Anchor\" href=\"#运行结果-3\"></a> 运行结果:</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java3.png\" alt=\" \" /></p>\n<h3 id=\"源代码-3\"><a class=\"markdownIt-Anchor\" href=\"#源代码-3\"></a> 源代码：</h3>\n<ul>\n<li>父类（动物）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br><br>    <span class=\"hljs-keyword\">protected</span> String kind;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">()</span>&#123;<br><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>          <span class=\"hljs-built_in\">this</span>.kind=kind;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>子类（猫）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cat</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>       <span class=\"hljs-built_in\">super</span>(kind);<br>   &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br>       System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>子类（狗）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Dog</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>子类（羊）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sheep</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Sheep</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>主函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>         Animal[] animal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Animal</span>[<span class=\"hljs-number\">5</span>];<span class=\"hljs-comment\">//生成5个数组</span><br>        <span class=\"hljs-comment\">//System.out.println(animal.length);</span><br>       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;animal.length;i++)<br>       &#123;<br>           <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(<span class=\"hljs-number\">3</span>);<br>           <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">0</span>)<br>           &#123;<br>             animal[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-string\">&quot;cat&quot;</span>+i);<br>           &#125;<br>           <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">1</span>)<br>           &#123;<br>               animal[i] =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">&quot;dog&quot;</span>+i);<br>           &#125;<br>           <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">2</span>)<br>           &#123;<br>               animal[i] =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sheep</span>(<span class=\"hljs-string\">&quot;sheep&quot;</span>+i);<br>           &#125;<br>       &#125;<br>        <span class=\"hljs-keyword\">for</span>(Animal j:animal)<br>        &#123;<br>            j.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h1 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\"></a> 实验题目</h1>\n<h2 id=\"题目一\"><a class=\"markdownIt-Anchor\" href=\"#题目一\"></a> 题目一</h2>\n<h3 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目：</h3>\n<p>定义一个数组类，编写成员函数实现以下功能：</p>\n<ol>\n<li>\n<p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p>\n</li>\n<li>\n<p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p>\n</li>\n<li>\n<p>数组和函数Sum（）：计算数组和。</p>\n</li>\n<li>\n<p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p>\n</li>\n<li>\n<p>编写main函数，调用测试以上功能；</p>\n</li>\n</ol>\n<h3 id=\"运行结果\"><a class=\"markdownIt-Anchor\" href=\"#运行结果\"></a> 运行结果：</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java1.png\" alt=\" \" /></p>\n<h3 id=\"源代码\"><a class=\"markdownIt-Anchor\" href=\"#源代码\"></a> 源代码：</h3>\n<ul>\n<li>定义数组类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Array</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> max;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span>[] arr;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Array</span><span class=\"hljs-params\">()</span>&#123;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Array</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> max)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.n=n;<br>        <span class=\"hljs-built_in\">this</span>.max=max;<br>        <span class=\"hljs-comment\">//arr = new int[n];</span><br>    &#125;<br><br>    <span class=\"hljs-comment\">//生成随机数</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getRandomNumberInRange</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> min, <span class=\"hljs-type\">int</span> max)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (min &gt;= max) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;max must be greater than min&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">r</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>        <span class=\"hljs-keyword\">return</span> r.nextInt((max - min) + <span class=\"hljs-number\">1</span>) + min;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//随机数组</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">RandomArray</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> n,<span class=\"hljs-type\">int</span> max)</span>&#123;<br>        arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[n];<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            <span class=\"hljs-comment\">//public int[] arr = new int[n];</span><br>            arr[i]=getRandomNumberInRange(<span class=\"hljs-number\">0</span>,max);<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;元素值不超过 &quot;</span>+max);<br>        System.out.println(<span class=\"hljs-string\">&quot;数组长度是 &quot;</span>+arr.length);<br>    &#125;<br><br>    <span class=\"hljs-comment\">//判断升序</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckOrder</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">right1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length-<span class=\"hljs-number\">1</span>;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(arr[i]&gt;arr[i+<span class=\"hljs-number\">1</span>])<br>            &#123;<br>              right1=<span class=\"hljs-number\">0</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> right1=<span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> right1;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//计算和</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">sum</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">int</span> sum1=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            sum1+=arr[i];<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sum1;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//判断函数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">CheckKey</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> key)</span>&#123;<br>        <span class=\"hljs-type\">int</span> right1=<span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span>(arr[i]==key)<br>            &#123;<br>                right1=<span class=\"hljs-number\">1</span>;<br>            &#125;<br>            <span class=\"hljs-keyword\">else</span> right1=<span class=\"hljs-number\">0</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> right1;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>主函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>        <span class=\"hljs-type\">Array</span> <span class=\"hljs-variable\">array</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">10</span>);<br>        array.RandomArray(<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">50</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组是否有值 &quot;</span>+array.CheckKey(<span class=\"hljs-number\">1</span>));<br>        System.out.println(<span class=\"hljs-string\">&quot;判断数组是否升序 &quot;</span>+array.CheckOrder());<br>        System.out.println(<span class=\"hljs-string\">&quot;数组元素的和 &quot;</span>+array.sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"题目二\"><a class=\"markdownIt-Anchor\" href=\"#题目二\"></a> 题目二</h2>\n<h3 id=\"题目-2\"><a class=\"markdownIt-Anchor\" href=\"#题目-2\"></a> 题目：</h3>\n<p>编写程序，求圆柱体的体积CylinderVolume:</p>\n<ol>\n<li>\n<p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p>\n</li>\n<li>\n<p>设计一个圆柱体类Cylinder实现接口area，包含</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>包含成员变量：高度，半径；</p>\n</li>\n<li>\n<p>实现构造方法，对成员变量进行赋值；</p>\n</li>\n<li>\n<p>实现圆柱体底面积成员方法area；</p>\n</li>\n<li>\n<p>实现计算圆柱体体积的成员方法volume；</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>编写测试类计算圆柱体体积。</li>\n</ol>\n<h3 id=\"运行结果-2\"><a class=\"markdownIt-Anchor\" href=\"#运行结果-2\"></a> 运行结果：</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java2.png\" alt=\" \" /></p>\n<h3 id=\"源代码-2\"><a class=\"markdownIt-Anchor\" href=\"#源代码-2\"></a> 源代码：</h3>\n<ul>\n<li>计算圆面积的接口area</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">area</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>圆柱体类Cylinder</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cylinder</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">area</span>&#123;<br><br>    <span class=\"hljs-comment\">//成员属性</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> h;<span class=\"hljs-comment\">//高度</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> r;<span class=\"hljs-comment\">//半径</span><br><br>    <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cylinder</span><span class=\"hljs-params\">()</span>&#123;<br>    &#125;<br>    <span class=\"hljs-comment\">//构造函数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cylinder</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> h,<span class=\"hljs-type\">int</span> r)</span>&#123;<br>        <span class=\"hljs-built_in\">this</span>.r=r;<br>        <span class=\"hljs-built_in\">this</span>.h=h;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">area</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*r*r;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">volume</span><span class=\"hljs-params\">()</span><br>    &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*r*r*h;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">bottomArea</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Math.PI*r*r;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>主函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>        <span class=\"hljs-type\">int</span> h=<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-type\">int</span> r=<span class=\"hljs-number\">2</span>;<br>        <span class=\"hljs-type\">Cylinder</span> <span class=\"hljs-variable\">cylinder</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cylinder</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;高度&quot;</span>+h+<span class=\"hljs-string\">&quot; 半径&quot;</span>+r);<span class=\"hljs-comment\">//接口方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;接口方法面积&quot;</span>+cylinder.bottomArea());<span class=\"hljs-comment\">//接口方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;成员方法面积&quot;</span>+cylinder.area());<span class=\"hljs-comment\">//成员方法</span><br>        System.out.println(<span class=\"hljs-string\">&quot;成员方法体积&quot;</span>+cylinder.volume());<span class=\"hljs-comment\">//成员方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"题目三\"><a class=\"markdownIt-Anchor\" href=\"#题目三\"></a> 题目三</h2>\n<h3 id=\"题目-3\"><a class=\"markdownIt-Anchor\" href=\"#题目-3\"></a> 题目：</h3>\n<ol>\n<li>定义一个父类Animal类</li>\n</ol>\n<p>属性：kind(种类)</p>\n<p>方法：创建带参（kind为参数）构造方法</p>\n<p>创建cry():void方法</p>\n<ol start=\"2\">\n<li>编写三个具体的子类Cat类、Dog类、Sheep类</li>\n</ol>\n<p>分别重写父类中的 cry() 方法，输出信息分别为</p>\n<p>Cat类：小猫的叫声：喵喵喵~~~</p>\n<p>Dog类：小狗的叫声：汪汪汪~~~</p>\n<p>Sheep类：小羊的叫声：咩咩咩~~~</p>\n<ol start=\"3\">\n<li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li>\n</ol>\n<p>a) 每次随机产生一个0~2的正整数</p>\n<p>b) 若数值为 0，则生成一个 Cat 类的对象，存入数组</p>\n<p>c) 若数值为 1，则生成一个 Dog 类的对象，存入数组</p>\n<p>d) 若数值为 2，则生成一个 Sheep 类的对象，存入数组</p>\n<p>最后循环输出数组成员，并分别调用 cry() 方法。</p>\n<h3 id=\"运行结果-3\"><a class=\"markdownIt-Anchor\" href=\"#运行结果-3\"></a> 运行结果:</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java3.png\" alt=\" \" /></p>\n<h3 id=\"源代码-3\"><a class=\"markdownIt-Anchor\" href=\"#源代码-3\"></a> 源代码：</h3>\n<ul>\n<li>父类（动物）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span> &#123;<br><br>    <span class=\"hljs-keyword\">protected</span> String kind;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">()</span>&#123;<br><br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Animal</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>          <span class=\"hljs-built_in\">this</span>.kind=kind;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>子类（猫）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Cat</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Cat</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>       <span class=\"hljs-built_in\">super</span>(kind);<br>   &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br>       System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>子类（狗）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Dog</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>子类（羊）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Sheep</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Animal</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Sheep</span><span class=\"hljs-params\">(String kind)</span>&#123;<br>        <span class=\"hljs-built_in\">super</span>(kind);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cry</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-built_in\">this</span>.kind+<span class=\"hljs-string\">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>主函数</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.company;<br><span class=\"hljs-keyword\">import</span> java.util.Random;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Main</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t<span class=\"hljs-comment\">// write your code here</span><br>         Animal[] animal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Animal</span>[<span class=\"hljs-number\">5</span>];<span class=\"hljs-comment\">//生成5个数组</span><br>        <span class=\"hljs-comment\">//System.out.println(animal.length);</span><br>       <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;animal.length;i++)<br>       &#123;<br>           <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt(<span class=\"hljs-number\">3</span>);<br>           <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">0</span>)<br>           &#123;<br>             animal[i] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cat</span>(<span class=\"hljs-string\">&quot;cat&quot;</span>+i);<br>           &#125;<br>           <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">1</span>)<br>           &#123;<br>               animal[i] =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-string\">&quot;dog&quot;</span>+i);<br>           &#125;<br>           <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">2</span>)<br>           &#123;<br>               animal[i] =<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Sheep</span>(<span class=\"hljs-string\">&quot;sheep&quot;</span>+i);<br>           &#125;<br>       &#125;<br>        <span class=\"hljs-keyword\">for</span>(Animal j:animal)<br>        &#123;<br>            j.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"JAVA程序设计实验练习二","date":"2022-10-28T13:48:00.000Z","excerpt":"JAVA、程序设计、GUI","_content":"\n# 实验题目\n\n## 题目：\n\n模拟实现以下商品管理业务系统，商品管理系统的整体功能有：\n\n>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL\n\n1、用户可以通过输入商品信息来向库中添加商品，如：\n\n **idname,price,库存数量  p01,透明胶带,8.8,1000**\n\n2、用户可以查看数据库中所有的商品\n\n3、用户可以通过输入一个id来查看一个商品\n\n4、用户可以通过输入一个name来查看一个商品\n\n5、用户可以通过输入一个价格范围（比如： 100->200）来查看符合条件的商品\n\n6、用户可以通过输入一个id来从数据库中删除一个商品\n\n 额外添加的需求:\n\n7、用户可以通过指定一个id来修改一个商品的名称\n\n8、用户可以通过制定一个id来修改一个商品的价格\n\n9、用户可以通过制定一个id来修改一个商品的库存数量\n\n要求：\n\na、整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层\n\nb、交互层和service层之间要用“面向接口编程”的模式来写\n\nc、业务逻辑层和dao层之间要用“面向接口编程”的模式来写\n\n> 注：交互层打印菜单的过程很麻烦，可以不写交互层，只要完成service层的接口及实现类， dao层的接口及实现类即可。\n\n### 准备工作\n\n* 需要完成这个项目，不仅需要有一定的Java基础知识，还需要掌握一定的数据库的操作和Java GUI的设计，对于这方面内容，推荐读者阅读《MySql必知必会》这本书入门数据库的基本操作。在构建项目的时候还需要勤查百度和相关文档。为了让没有相关基础的读者快速掌握关于该项目中的一些简单操作，在此推荐B站中的三个视频供大家参考：\n* Java图像界面编程：[Java图形界面编程](https://www.bilibili.com/video/BV1wh411d7it/?p=51)\n* MySQL数据库SQL语言入门：[MySQL数据库SQL语言入门](https://www.bilibili.com/video/BV1YY411s7Nk/?vd_source=ef77f99dbf6da2761d373027f1ca87d7)\n* Java语言连接操作MySQL数据库，JDBC技术：[Java语言连接操作MySQL数据库，JDBC技术](https://www.bilibili.com/video/BV13F411z7Ls/?vd_source=ef77f99dbf6da2761d373027f1ca87d7)\n* 当然，视频的作用只是辅助快速入门，关键还是需要多查询文档和百度。\n\n### 程序设计\n\n* 首先建立与数据库的连接并获取数据\n\n```java\npackage service;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class getData {\n    /*\n        通过id和name搜索\n    */\n    public static  List<Object> search(String My_id) {\n\n        //创建列表\n        List<Object> list = new ArrayList<Object>();\n\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        //System.out.println(\"输入要搜索商品的id或者name：\");\n        //Scanner sc1 = new Scanner(System.in);\n        //String search = sc1.nextLine();\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n                statement = connection.createStatement();\n                String sql = \"select * from goods where id =? or name = ?\";\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1, My_id);\n                ps.setString(2, My_id);\n                resultset = ps.executeQuery();\n\n                int i = 0;\n                while(resultset.next()){\n                    String id = resultset.getString(\"id\");\n                    list.add(i,id);\n                    i++;\n                    String name = resultset.getString(\"name\");\n                    list.add(i,name);\n                    i++;\n                    int price = resultset.getInt(\"price\");\n                    list.add(i,price);\n                    i++;\n                    int num = resultset.getInt(\"num\");\n                    list.add(i,num);\n                    i++;\n                    //System.out.println(\"id:\"+id+\"   \"+\"name:\"+name+\"   \"+\"price:\"+price+\"   \"+\"num:\"+num);\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n        return list;\n    }\n\n    /*\n            关闭连接\n            */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 向数据库中添加数据\n\n\n```java\npackage service;\n\nimport java.sql.*;\n\n\npublic class addData {\n\n    /*\n    添加数据\n     */\n    public static void addData(String id,String name,int price,int num) {\n\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n                resultset =  statement.executeQuery(\"select * from goods\");\n                String sql;\n                sql=\"INSERT INTO goods VALUES(?,?,?,?)\";//向goods表里添加数据\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1, id);\n                ps.setString(2, name);\n                ps.setInt(3, price);\n                ps.setInt(4, num);\n                ps.executeUpdate();//执行添加数据\n                System.out.println(\"添加\"+id+\"数据成功！\");\n                // 完成后关闭\n                ps.close();\n                statement.close();\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n    }\n\n    /*\n            关闭连接\n            */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 更改数据\n\n```java\npackage gui.service;\n\nimport java.sql.*;\nimport java.util.Objects;\nimport java.util.Scanner;\n\npublic class changeData {\n    /*\n            修改\n        */\n    public static void change(String My_id,String My_name ,int My_price,int My_num) {\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n\n                //拼接字符串，直接使用？会自动加上单引号。\n                String sql1 = \"UPDATE goods SET \";\n                String sql2 = \"name = ? \";\n                String sql3 = \",price = ? ,\";\n                String sql4 = \"num = ?\";\n                String sql5 = \" WHERE id=?\";\n                String sql6 = sql1+sql2+sql3+sql4+sql5;\n\n                ps=connection.prepareStatement(sql6);//添加数据预处理\n                ps.setString(1, My_name);\n                    ps.setInt(2, My_price);\n                    ps.setInt(3, My_num);\n                    ps.setString(4, My_id);\n                    ps.executeUpdate();//执行修改数据\n\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n            close(ps);\n        }\n    }\n\n    /*\n               关闭连接\n               */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 删除数据\n\n```java\npackage gui.service;\n\nimport java.sql.*;\n\npublic class delData {\n\n    /*\n      删除数据\n       */\n    public static void del_data(String My_id) {\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n                resultset =  statement.executeQuery(\"select * from goods\");\n                String sql;\n                sql=\"DELETE FROM goods WHERE id=?\";//向goods表里删除数据\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1,My_id);//第1个问号的值\n                ps.executeUpdate();//执行添加数据\n                System.out.println(\"删除\"+My_id+\"数据成功！\");\n                // 完成后关闭\n                ps.close();\n                statement.close();\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n    }\n\n    /*\n     关闭连接\n     */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 筛选数据\n\n```java\npackage gui.service;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class chooseData {\n    /*\n        通过id和name搜索\n    */\n    public static List<Object> search(String My_data) {\n\n        //创建列表\n        List<Object> list = new ArrayList<Object>();\n\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n                String sql = \"select * from goods where id =? or name = ?\";\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1, My_data);\n                ps.setString(2, My_data);\n                resultset = ps.executeQuery();\n\n                int i = 0;\n                while(resultset.next()){\n                    String id = resultset.getString(\"id\");\n                    list.add(i,id);\n                    i++;\n                    String name = resultset.getString(\"name\");\n                    list.add(i,name);\n                    i++;\n                    int price = resultset.getInt(\"price\");\n                    list.add(i,price);\n                    i++;\n                    int num = resultset.getInt(\"num\");\n                    list.add(i,num);\n                    i++;\n                    //System.out.println(\"id:\"+id+\"   \"+\"name:\"+name+\"   \"+\"price:\"+price+\"   \"+\"num:\"+num);\n                }\n\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n        return list;\n    }\n\n    /*\n               关闭连接\n               */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n### Swing组件GUI设计\n\n* 该层主要采用**Swing类**的各种组件和方法实现图形用户界面,并且下载了相应的主题优化了组件的外观，使其达到精美的效果！\n\n* 使用**JFrame**作为面板组件的载体。\n* 使用**JPanel**组件作为基础组件的载体，并且设置面板的大小，位置以及布局方式。\n* 使用**JBox**打包对应组件为一个完整的整体，并确定竖直和横向的排布。\n* 使用**JLabel、JTextField、JButton、JPassword、JSplit**等基本组件并且设置其**格式**，包括**颜色**、**大小**、**位置**等。\n* 因为需要为交互的组件添加**监视器**来实现**动态响应**，最终组合**JFrame**的内容为总体系统。\n\n### 项目展示\n\n* 登录界面                   用户名:root                    密码:1234\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui1.png)\n\n* 数据管理界面，基本功能模块和数据表格显示\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui2.png)\n\n* 添加数据功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui3.png)\n\n* 修改数据功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui4.png)\n\n* 数据筛选功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui5.png)\n\n* 页眉部分拓展功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui.png)\n\n* 关于作者界面\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui6.png)\n\n### 项目下载\n\n* 由于本项目代码量巨大，详细工程就不展示在本博客中，同时为了促进大家相互学习和共同进步，在此提供公开版项目供大家使用，一起进步！\n\n* 公开版项目是精简了一些冗余的外观，尽量保留原汁原味JavaGUI，更加关注后台数据处理和交互的过程！读者可以根据初始GUI进行深度定制，随时随地制作出合你心意的作品。鉴于本人水平有限，本项目依然有很多不足之处，欢迎大家在下方评论区留言指正！\n\n* 本公开版项目能够直接运行Main.java即可，若连接数据库，读者需要首先自行在本机安装MySql并将相关内容在service文件夹即业务逻辑层修改部分代码才可完美运行。\n\n* 本项目所有功能已经测试通过，如仍然有Bug欢迎指正！\n\n* 下载连接：[公开版项目点此下载](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/9220f08e-f2ed-484f-b9b1-60f13b8ea3ba.zip)\n\n  \n\n  ","source":"_posts/exercise2.md","raw":"---\ntitle: JAVA程序设计实验练习二\ntags: [JAVA,程序设计]\ncategories: [JAVA]\ndate: 2022-10-28 21:48:00\nexcerpt: JAVA、程序设计、GUI\n---\n\n# 实验题目\n\n## 题目：\n\n模拟实现以下商品管理业务系统，商品管理系统的整体功能有：\n\n>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL\n\n1、用户可以通过输入商品信息来向库中添加商品，如：\n\n **idname,price,库存数量  p01,透明胶带,8.8,1000**\n\n2、用户可以查看数据库中所有的商品\n\n3、用户可以通过输入一个id来查看一个商品\n\n4、用户可以通过输入一个name来查看一个商品\n\n5、用户可以通过输入一个价格范围（比如： 100->200）来查看符合条件的商品\n\n6、用户可以通过输入一个id来从数据库中删除一个商品\n\n 额外添加的需求:\n\n7、用户可以通过指定一个id来修改一个商品的名称\n\n8、用户可以通过制定一个id来修改一个商品的价格\n\n9、用户可以通过制定一个id来修改一个商品的库存数量\n\n要求：\n\na、整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层\n\nb、交互层和service层之间要用“面向接口编程”的模式来写\n\nc、业务逻辑层和dao层之间要用“面向接口编程”的模式来写\n\n> 注：交互层打印菜单的过程很麻烦，可以不写交互层，只要完成service层的接口及实现类， dao层的接口及实现类即可。\n\n### 准备工作\n\n* 需要完成这个项目，不仅需要有一定的Java基础知识，还需要掌握一定的数据库的操作和Java GUI的设计，对于这方面内容，推荐读者阅读《MySql必知必会》这本书入门数据库的基本操作。在构建项目的时候还需要勤查百度和相关文档。为了让没有相关基础的读者快速掌握关于该项目中的一些简单操作，在此推荐B站中的三个视频供大家参考：\n* Java图像界面编程：[Java图形界面编程](https://www.bilibili.com/video/BV1wh411d7it/?p=51)\n* MySQL数据库SQL语言入门：[MySQL数据库SQL语言入门](https://www.bilibili.com/video/BV1YY411s7Nk/?vd_source=ef77f99dbf6da2761d373027f1ca87d7)\n* Java语言连接操作MySQL数据库，JDBC技术：[Java语言连接操作MySQL数据库，JDBC技术](https://www.bilibili.com/video/BV13F411z7Ls/?vd_source=ef77f99dbf6da2761d373027f1ca87d7)\n* 当然，视频的作用只是辅助快速入门，关键还是需要多查询文档和百度。\n\n### 程序设计\n\n* 首先建立与数据库的连接并获取数据\n\n```java\npackage service;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class getData {\n    /*\n        通过id和name搜索\n    */\n    public static  List<Object> search(String My_id) {\n\n        //创建列表\n        List<Object> list = new ArrayList<Object>();\n\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        //System.out.println(\"输入要搜索商品的id或者name：\");\n        //Scanner sc1 = new Scanner(System.in);\n        //String search = sc1.nextLine();\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n                statement = connection.createStatement();\n                String sql = \"select * from goods where id =? or name = ?\";\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1, My_id);\n                ps.setString(2, My_id);\n                resultset = ps.executeQuery();\n\n                int i = 0;\n                while(resultset.next()){\n                    String id = resultset.getString(\"id\");\n                    list.add(i,id);\n                    i++;\n                    String name = resultset.getString(\"name\");\n                    list.add(i,name);\n                    i++;\n                    int price = resultset.getInt(\"price\");\n                    list.add(i,price);\n                    i++;\n                    int num = resultset.getInt(\"num\");\n                    list.add(i,num);\n                    i++;\n                    //System.out.println(\"id:\"+id+\"   \"+\"name:\"+name+\"   \"+\"price:\"+price+\"   \"+\"num:\"+num);\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n        return list;\n    }\n\n    /*\n            关闭连接\n            */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 向数据库中添加数据\n\n\n```java\npackage service;\n\nimport java.sql.*;\n\n\npublic class addData {\n\n    /*\n    添加数据\n     */\n    public static void addData(String id,String name,int price,int num) {\n\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n                resultset =  statement.executeQuery(\"select * from goods\");\n                String sql;\n                sql=\"INSERT INTO goods VALUES(?,?,?,?)\";//向goods表里添加数据\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1, id);\n                ps.setString(2, name);\n                ps.setInt(3, price);\n                ps.setInt(4, num);\n                ps.executeUpdate();//执行添加数据\n                System.out.println(\"添加\"+id+\"数据成功！\");\n                // 完成后关闭\n                ps.close();\n                statement.close();\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n    }\n\n    /*\n            关闭连接\n            */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 更改数据\n\n```java\npackage gui.service;\n\nimport java.sql.*;\nimport java.util.Objects;\nimport java.util.Scanner;\n\npublic class changeData {\n    /*\n            修改\n        */\n    public static void change(String My_id,String My_name ,int My_price,int My_num) {\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n\n                //拼接字符串，直接使用？会自动加上单引号。\n                String sql1 = \"UPDATE goods SET \";\n                String sql2 = \"name = ? \";\n                String sql3 = \",price = ? ,\";\n                String sql4 = \"num = ?\";\n                String sql5 = \" WHERE id=?\";\n                String sql6 = sql1+sql2+sql3+sql4+sql5;\n\n                ps=connection.prepareStatement(sql6);//添加数据预处理\n                ps.setString(1, My_name);\n                    ps.setInt(2, My_price);\n                    ps.setInt(3, My_num);\n                    ps.setString(4, My_id);\n                    ps.executeUpdate();//执行修改数据\n\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n            close(ps);\n        }\n    }\n\n    /*\n               关闭连接\n               */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 删除数据\n\n```java\npackage gui.service;\n\nimport java.sql.*;\n\npublic class delData {\n\n    /*\n      删除数据\n       */\n    public static void del_data(String My_id) {\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n                resultset =  statement.executeQuery(\"select * from goods\");\n                String sql;\n                sql=\"DELETE FROM goods WHERE id=?\";//向goods表里删除数据\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1,My_id);//第1个问号的值\n                ps.executeUpdate();//执行添加数据\n                System.out.println(\"删除\"+My_id+\"数据成功！\");\n                // 完成后关闭\n                ps.close();\n                statement.close();\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n    }\n\n    /*\n     关闭连接\n     */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n* 筛选数据\n\n```java\npackage gui.service;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class chooseData {\n    /*\n        通过id和name搜索\n    */\n    public static List<Object> search(String My_data) {\n\n        //创建列表\n        List<Object> list = new ArrayList<Object>();\n\n        Connection connection = null;\n        Statement statement = null;\n        ResultSet resultset = null;\n        PreparedStatement ps = null;\n\n\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n            try {\n\n                connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/goods\",\"root\",\"1234\");\n\n//                if(connection != null){\n//                    System.out.println(\"连接成功\"+connection);\n//                    connection.close();\n//                }\n                statement = connection.createStatement();\n                String sql = \"select * from goods where id =? or name = ?\";\n                ps=connection.prepareStatement(sql);//添加数据预处理\n                ps.setString(1, My_data);\n                ps.setString(2, My_data);\n                resultset = ps.executeQuery();\n\n                int i = 0;\n                while(resultset.next()){\n                    String id = resultset.getString(\"id\");\n                    list.add(i,id);\n                    i++;\n                    String name = resultset.getString(\"name\");\n                    list.add(i,name);\n                    i++;\n                    int price = resultset.getInt(\"price\");\n                    list.add(i,price);\n                    i++;\n                    int num = resultset.getInt(\"num\");\n                    list.add(i,num);\n                    i++;\n                    //System.out.println(\"id:\"+id+\"   \"+\"name:\"+name+\"   \"+\"price:\"+price+\"   \"+\"num:\"+num);\n                }\n\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }finally{\n            close(connection);\n            close(statement);\n            close(resultset);\n        }\n        return list;\n    }\n\n    /*\n               关闭连接\n               */\n    public static void close(AutoCloseable autoCloseable){\n        if(autoCloseable != null){\n            try\n            {\n                autoCloseable.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n### Swing组件GUI设计\n\n* 该层主要采用**Swing类**的各种组件和方法实现图形用户界面,并且下载了相应的主题优化了组件的外观，使其达到精美的效果！\n\n* 使用**JFrame**作为面板组件的载体。\n* 使用**JPanel**组件作为基础组件的载体，并且设置面板的大小，位置以及布局方式。\n* 使用**JBox**打包对应组件为一个完整的整体，并确定竖直和横向的排布。\n* 使用**JLabel、JTextField、JButton、JPassword、JSplit**等基本组件并且设置其**格式**，包括**颜色**、**大小**、**位置**等。\n* 因为需要为交互的组件添加**监视器**来实现**动态响应**，最终组合**JFrame**的内容为总体系统。\n\n### 项目展示\n\n* 登录界面                   用户名:root                    密码:1234\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui1.png)\n\n* 数据管理界面，基本功能模块和数据表格显示\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui2.png)\n\n* 添加数据功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui3.png)\n\n* 修改数据功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui4.png)\n\n* 数据筛选功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui5.png)\n\n* 页眉部分拓展功能\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui.png)\n\n* 关于作者界面\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui6.png)\n\n### 项目下载\n\n* 由于本项目代码量巨大，详细工程就不展示在本博客中，同时为了促进大家相互学习和共同进步，在此提供公开版项目供大家使用，一起进步！\n\n* 公开版项目是精简了一些冗余的外观，尽量保留原汁原味JavaGUI，更加关注后台数据处理和交互的过程！读者可以根据初始GUI进行深度定制，随时随地制作出合你心意的作品。鉴于本人水平有限，本项目依然有很多不足之处，欢迎大家在下方评论区留言指正！\n\n* 本公开版项目能够直接运行Main.java即可，若连接数据库，读者需要首先自行在本机安装MySql并将相关内容在service文件夹即业务逻辑层修改部分代码才可完美运行。\n\n* 本项目所有功能已经测试通过，如仍然有Bug欢迎指正！\n\n* 下载连接：[公开版项目点此下载](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/9220f08e-f2ed-484f-b9b1-60f13b8ea3ba.zip)\n\n  \n\n  ","slug":"exercise2","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7un000plsvs10ydf94q","content":"<h1 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\"></a> 实验题目</h1>\n<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目：</h2>\n<p>模拟实现以下商品管理业务系统，商品管理系统的整体功能有：</p>\n<blockquote>\n<p>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL</p>\n</blockquote>\n<p>1、用户可以通过输入商品信息来向库中添加商品，如：</p>\n<p><strong>idname,price,库存数量  p01,透明胶带,8.8,1000</strong></p>\n<p>2、用户可以查看数据库中所有的商品</p>\n<p>3、用户可以通过输入一个id来查看一个商品</p>\n<p>4、用户可以通过输入一个name来查看一个商品</p>\n<p>5、用户可以通过输入一个价格范围（比如： 100-&gt;200）来查看符合条件的商品</p>\n<p>6、用户可以通过输入一个id来从数据库中删除一个商品</p>\n<p>额外添加的需求:</p>\n<p>7、用户可以通过指定一个id来修改一个商品的名称</p>\n<p>8、用户可以通过制定一个id来修改一个商品的价格</p>\n<p>9、用户可以通过制定一个id来修改一个商品的库存数量</p>\n<p>要求：</p>\n<p>a、整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层</p>\n<p>b、交互层和service层之间要用“面向接口编程”的模式来写</p>\n<p>c、业务逻辑层和dao层之间要用“面向接口编程”的模式来写</p>\n<blockquote>\n<p>注：交互层打印菜单的过程很麻烦，可以不写交互层，只要完成service层的接口及实现类， dao层的接口及实现类即可。</p>\n</blockquote>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<ul>\n<li>需要完成这个项目，不仅需要有一定的Java基础知识，还需要掌握一定的数据库的操作和Java GUI的设计，对于这方面内容，推荐读者阅读《MySql必知必会》这本书入门数据库的基本操作。在构建项目的时候还需要勤查百度和相关文档。为了让没有相关基础的读者快速掌握关于该项目中的一些简单操作，在此推荐B站中的三个视频供大家参考：</li>\n<li>Java图像界面编程：<a href=\"https://www.bilibili.com/video/BV1wh411d7it/?p=51\">Java图形界面编程</a></li>\n<li>MySQL数据库SQL语言入门：<a href=\"https://www.bilibili.com/video/BV1YY411s7Nk/?vd_source=ef77f99dbf6da2761d373027f1ca87d7\">MySQL数据库SQL语言入门</a></li>\n<li>Java语言连接操作MySQL数据库，JDBC技术：<a href=\"https://www.bilibili.com/video/BV13F411z7Ls/?vd_source=ef77f99dbf6da2761d373027f1ca87d7\">Java语言连接操作MySQL数据库，JDBC技术</a></li>\n<li>当然，视频的作用只是辅助快速入门，关键还是需要多查询文档和百度。</li>\n</ul>\n<h3 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h3>\n<ul>\n<li>首先建立与数据库的连接并获取数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">getData</span> &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        通过id和name搜索</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  List&lt;Object&gt; <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(String My_id)</span> &#123;<br><br>        <span class=\"hljs-comment\">//创建列表</span><br>        List&lt;Object&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Object&gt;();<br><br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-comment\">//System.out.println(&quot;输入要搜索商品的id或者name：&quot;);</span><br>        <span class=\"hljs-comment\">//Scanner sc1 = new Scanner(System.in);</span><br>        <span class=\"hljs-comment\">//String search = sc1.nextLine();</span><br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br>                statement = connection.createStatement();<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;select * from goods where id =? or name = ?&quot;</span>;<br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, My_id);<br>                ps.setString(<span class=\"hljs-number\">2</span>, My_id);<br>                resultset = ps.executeQuery();<br><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">while</span>(resultset.next())&#123;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;id&quot;</span>);<br>                    list.add(i,id);<br>                    i++;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>                    list.add(i,name);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;price&quot;</span>);<br>                    list.add(i,price);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;num&quot;</span>);<br>                    list.add(i,num);<br>                    i++;<br>                    <span class=\"hljs-comment\">//System.out.println(&quot;id:&quot;+id+&quot;   &quot;+&quot;name:&quot;+name+&quot;   &quot;+&quot;price:&quot;+price+&quot;   &quot;+&quot;num:&quot;+num);</span><br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            关闭连接</span><br><span class=\"hljs-comment\">            */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>向数据库中添加数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">addData</span> &#123;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    添加数据</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addData</span><span class=\"hljs-params\">(String id,String name,<span class=\"hljs-type\">int</span> price,<span class=\"hljs-type\">int</span> num)</span> &#123;<br><br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br>                resultset =  statement.executeQuery(<span class=\"hljs-string\">&quot;select * from goods&quot;</span>);<br>                String sql;<br>                sql=<span class=\"hljs-string\">&quot;INSERT INTO goods VALUES(?,?,?,?)&quot;</span>;<span class=\"hljs-comment\">//向goods表里添加数据</span><br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, id);<br>                ps.setString(<span class=\"hljs-number\">2</span>, name);<br>                ps.setInt(<span class=\"hljs-number\">3</span>, price);<br>                ps.setInt(<span class=\"hljs-number\">4</span>, num);<br>                ps.executeUpdate();<span class=\"hljs-comment\">//执行添加数据</span><br>                System.out.println(<span class=\"hljs-string\">&quot;添加&quot;</span>+id+<span class=\"hljs-string\">&quot;数据成功！&quot;</span>);<br>                <span class=\"hljs-comment\">// 完成后关闭</span><br>                ps.close();<br>                statement.close();<br>                connection.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            关闭连接</span><br><span class=\"hljs-comment\">            */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>更改数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> gui.service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><span class=\"hljs-keyword\">import</span> java.util.Objects;<br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">changeData</span> &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            修改</span><br><span class=\"hljs-comment\">        */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">change</span><span class=\"hljs-params\">(String My_id,String My_name ,<span class=\"hljs-type\">int</span> My_price,<span class=\"hljs-type\">int</span> My_num)</span> &#123;<br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br><br>                <span class=\"hljs-comment\">//拼接字符串，直接使用？会自动加上单引号。</span><br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE goods SET &quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;name = ? &quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;,price = ? ,&quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;num = ?&quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot; WHERE id=?&quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql6</span> <span class=\"hljs-operator\">=</span> sql1+sql2+sql3+sql4+sql5;<br><br>                ps=connection.prepareStatement(sql6);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, My_name);<br>                    ps.setInt(<span class=\"hljs-number\">2</span>, My_price);<br>                    ps.setInt(<span class=\"hljs-number\">3</span>, My_num);<br>                    ps.setString(<span class=\"hljs-number\">4</span>, My_id);<br>                    ps.executeUpdate();<span class=\"hljs-comment\">//执行修改数据</span><br><br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>            close(ps);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">               关闭连接</span><br><span class=\"hljs-comment\">               */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>删除数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> gui.service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">delData</span> &#123;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">      删除数据</span><br><span class=\"hljs-comment\">       */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">del_data</span><span class=\"hljs-params\">(String My_id)</span> &#123;<br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br>                resultset =  statement.executeQuery(<span class=\"hljs-string\">&quot;select * from goods&quot;</span>);<br>                String sql;<br>                sql=<span class=\"hljs-string\">&quot;DELETE FROM goods WHERE id=?&quot;</span>;<span class=\"hljs-comment\">//向goods表里删除数据</span><br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>,My_id);<span class=\"hljs-comment\">//第1个问号的值</span><br>                ps.executeUpdate();<span class=\"hljs-comment\">//执行添加数据</span><br>                System.out.println(<span class=\"hljs-string\">&quot;删除&quot;</span>+My_id+<span class=\"hljs-string\">&quot;数据成功！&quot;</span>);<br>                <span class=\"hljs-comment\">// 完成后关闭</span><br>                ps.close();<br>                statement.close();<br>                connection.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">     关闭连接</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>筛选数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> gui.service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">chooseData</span> &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        通过id和name搜索</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Object&gt; <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(String My_data)</span> &#123;<br><br>        <span class=\"hljs-comment\">//创建列表</span><br>        List&lt;Object&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Object&gt;();<br><br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;select * from goods where id =? or name = ?&quot;</span>;<br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, My_data);<br>                ps.setString(<span class=\"hljs-number\">2</span>, My_data);<br>                resultset = ps.executeQuery();<br><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">while</span>(resultset.next())&#123;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;id&quot;</span>);<br>                    list.add(i,id);<br>                    i++;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>                    list.add(i,name);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;price&quot;</span>);<br>                    list.add(i,price);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;num&quot;</span>);<br>                    list.add(i,num);<br>                    i++;<br>                    <span class=\"hljs-comment\">//System.out.println(&quot;id:&quot;+id+&quot;   &quot;+&quot;name:&quot;+name+&quot;   &quot;+&quot;price:&quot;+price+&quot;   &quot;+&quot;num:&quot;+num);</span><br>                &#125;<br><br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">               关闭连接</span><br><span class=\"hljs-comment\">               */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"swing组件gui设计\"><a class=\"markdownIt-Anchor\" href=\"#swing组件gui设计\"></a> Swing组件GUI设计</h3>\n<ul>\n<li>\n<p>该层主要采用<strong>Swing类</strong>的各种组件和方法实现图形用户界面,并且下载了相应的主题优化了组件的外观，使其达到精美的效果！</p>\n</li>\n<li>\n<p>使用<strong>JFrame</strong>作为面板组件的载体。</p>\n</li>\n<li>\n<p>使用<strong>JPanel</strong>组件作为基础组件的载体，并且设置面板的大小，位置以及布局方式。</p>\n</li>\n<li>\n<p>使用<strong>JBox</strong>打包对应组件为一个完整的整体，并确定竖直和横向的排布。</p>\n</li>\n<li>\n<p>使用<strong>JLabel、JTextField、JButton、JPassword、JSplit</strong>等基本组件并且设置其<strong>格式</strong>，包括<strong>颜色</strong>、<strong>大小</strong>、<strong>位置</strong>等。</p>\n</li>\n<li>\n<p>因为需要为交互的组件添加<strong>监视器</strong>来实现<strong>动态响应</strong>，最终组合<strong>JFrame</strong>的内容为总体系统。</p>\n</li>\n</ul>\n<h3 id=\"项目展示\"><a class=\"markdownIt-Anchor\" href=\"#项目展示\"></a> 项目展示</h3>\n<ul>\n<li>登录界面                   用户名:root                    密码:1234</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui1.png\" alt=\" \" /></p>\n<ul>\n<li>数据管理界面，基本功能模块和数据表格显示</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui2.png\" alt=\" \" /></p>\n<ul>\n<li>添加数据功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui3.png\" alt=\" \" /></p>\n<ul>\n<li>修改数据功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui4.png\" alt=\" \" /></p>\n<ul>\n<li>数据筛选功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui5.png\" alt=\" \" /></p>\n<ul>\n<li>页眉部分拓展功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui.png\" alt=\" \" /></p>\n<ul>\n<li>关于作者界面</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui6.png\" alt=\" \" /></p>\n<h3 id=\"项目下载\"><a class=\"markdownIt-Anchor\" href=\"#项目下载\"></a> 项目下载</h3>\n<ul>\n<li>\n<p>由于本项目代码量巨大，详细工程就不展示在本博客中，同时为了促进大家相互学习和共同进步，在此提供公开版项目供大家使用，一起进步！</p>\n</li>\n<li>\n<p>公开版项目是精简了一些冗余的外观，尽量保留原汁原味JavaGUI，更加关注后台数据处理和交互的过程！读者可以根据初始GUI进行深度定制，随时随地制作出合你心意的作品。鉴于本人水平有限，本项目依然有很多不足之处，欢迎大家在下方评论区留言指正！</p>\n</li>\n<li>\n<p>本公开版项目能够直接运行Main.java即可，若连接数据库，读者需要首先自行在本机安装MySql并将相关内容在service文件夹即业务逻辑层修改部分代码才可完美运行。</p>\n</li>\n<li>\n<p>本项目所有功能已经测试通过，如仍然有Bug欢迎指正！</p>\n</li>\n<li>\n<p>下载连接：<a href=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/9220f08e-f2ed-484f-b9b1-60f13b8ea3ba.zip\">公开版项目点此下载</a></p>\n</li>\n</ul>\n","site":{"data":{}},"more":"<h1 id=\"实验题目\"><a class=\"markdownIt-Anchor\" href=\"#实验题目\"></a> 实验题目</h1>\n<h2 id=\"题目\"><a class=\"markdownIt-Anchor\" href=\"#题目\"></a> 题目：</h2>\n<p>模拟实现以下商品管理业务系统，商品管理系统的整体功能有：</p>\n<blockquote>\n<p>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL</p>\n</blockquote>\n<p>1、用户可以通过输入商品信息来向库中添加商品，如：</p>\n<p><strong>idname,price,库存数量  p01,透明胶带,8.8,1000</strong></p>\n<p>2、用户可以查看数据库中所有的商品</p>\n<p>3、用户可以通过输入一个id来查看一个商品</p>\n<p>4、用户可以通过输入一个name来查看一个商品</p>\n<p>5、用户可以通过输入一个价格范围（比如： 100-&gt;200）来查看符合条件的商品</p>\n<p>6、用户可以通过输入一个id来从数据库中删除一个商品</p>\n<p>额外添加的需求:</p>\n<p>7、用户可以通过指定一个id来修改一个商品的名称</p>\n<p>8、用户可以通过制定一个id来修改一个商品的价格</p>\n<p>9、用户可以通过制定一个id来修改一个商品的库存数量</p>\n<p>要求：</p>\n<p>a、整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层</p>\n<p>b、交互层和service层之间要用“面向接口编程”的模式来写</p>\n<p>c、业务逻辑层和dao层之间要用“面向接口编程”的模式来写</p>\n<blockquote>\n<p>注：交互层打印菜单的过程很麻烦，可以不写交互层，只要完成service层的接口及实现类， dao层的接口及实现类即可。</p>\n</blockquote>\n<h3 id=\"准备工作\"><a class=\"markdownIt-Anchor\" href=\"#准备工作\"></a> 准备工作</h3>\n<ul>\n<li>需要完成这个项目，不仅需要有一定的Java基础知识，还需要掌握一定的数据库的操作和Java GUI的设计，对于这方面内容，推荐读者阅读《MySql必知必会》这本书入门数据库的基本操作。在构建项目的时候还需要勤查百度和相关文档。为了让没有相关基础的读者快速掌握关于该项目中的一些简单操作，在此推荐B站中的三个视频供大家参考：</li>\n<li>Java图像界面编程：<a href=\"https://www.bilibili.com/video/BV1wh411d7it/?p=51\">Java图形界面编程</a></li>\n<li>MySQL数据库SQL语言入门：<a href=\"https://www.bilibili.com/video/BV1YY411s7Nk/?vd_source=ef77f99dbf6da2761d373027f1ca87d7\">MySQL数据库SQL语言入门</a></li>\n<li>Java语言连接操作MySQL数据库，JDBC技术：<a href=\"https://www.bilibili.com/video/BV13F411z7Ls/?vd_source=ef77f99dbf6da2761d373027f1ca87d7\">Java语言连接操作MySQL数据库，JDBC技术</a></li>\n<li>当然，视频的作用只是辅助快速入门，关键还是需要多查询文档和百度。</li>\n</ul>\n<h3 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h3>\n<ul>\n<li>首先建立与数据库的连接并获取数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">getData</span> &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        通过id和name搜索</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>  List&lt;Object&gt; <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(String My_id)</span> &#123;<br><br>        <span class=\"hljs-comment\">//创建列表</span><br>        List&lt;Object&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Object&gt;();<br><br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-comment\">//System.out.println(&quot;输入要搜索商品的id或者name：&quot;);</span><br>        <span class=\"hljs-comment\">//Scanner sc1 = new Scanner(System.in);</span><br>        <span class=\"hljs-comment\">//String search = sc1.nextLine();</span><br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br>                statement = connection.createStatement();<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;select * from goods where id =? or name = ?&quot;</span>;<br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, My_id);<br>                ps.setString(<span class=\"hljs-number\">2</span>, My_id);<br>                resultset = ps.executeQuery();<br><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">while</span>(resultset.next())&#123;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;id&quot;</span>);<br>                    list.add(i,id);<br>                    i++;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>                    list.add(i,name);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;price&quot;</span>);<br>                    list.add(i,price);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;num&quot;</span>);<br>                    list.add(i,num);<br>                    i++;<br>                    <span class=\"hljs-comment\">//System.out.println(&quot;id:&quot;+id+&quot;   &quot;+&quot;name:&quot;+name+&quot;   &quot;+&quot;price:&quot;+price+&quot;   &quot;+&quot;num:&quot;+num);</span><br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            关闭连接</span><br><span class=\"hljs-comment\">            */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>向数据库中添加数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">addData</span> &#123;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">    添加数据</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addData</span><span class=\"hljs-params\">(String id,String name,<span class=\"hljs-type\">int</span> price,<span class=\"hljs-type\">int</span> num)</span> &#123;<br><br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br>                resultset =  statement.executeQuery(<span class=\"hljs-string\">&quot;select * from goods&quot;</span>);<br>                String sql;<br>                sql=<span class=\"hljs-string\">&quot;INSERT INTO goods VALUES(?,?,?,?)&quot;</span>;<span class=\"hljs-comment\">//向goods表里添加数据</span><br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, id);<br>                ps.setString(<span class=\"hljs-number\">2</span>, name);<br>                ps.setInt(<span class=\"hljs-number\">3</span>, price);<br>                ps.setInt(<span class=\"hljs-number\">4</span>, num);<br>                ps.executeUpdate();<span class=\"hljs-comment\">//执行添加数据</span><br>                System.out.println(<span class=\"hljs-string\">&quot;添加&quot;</span>+id+<span class=\"hljs-string\">&quot;数据成功！&quot;</span>);<br>                <span class=\"hljs-comment\">// 完成后关闭</span><br>                ps.close();<br>                statement.close();<br>                connection.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            关闭连接</span><br><span class=\"hljs-comment\">            */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>更改数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> gui.service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><span class=\"hljs-keyword\">import</span> java.util.Objects;<br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">changeData</span> &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">            修改</span><br><span class=\"hljs-comment\">        */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">change</span><span class=\"hljs-params\">(String My_id,String My_name ,<span class=\"hljs-type\">int</span> My_price,<span class=\"hljs-type\">int</span> My_num)</span> &#123;<br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br><br>                <span class=\"hljs-comment\">//拼接字符串，直接使用？会自动加上单引号。</span><br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;UPDATE goods SET &quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;name = ? &quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;,price = ? ,&quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql4</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;num = ?&quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot; WHERE id=?&quot;</span>;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql6</span> <span class=\"hljs-operator\">=</span> sql1+sql2+sql3+sql4+sql5;<br><br>                ps=connection.prepareStatement(sql6);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, My_name);<br>                    ps.setInt(<span class=\"hljs-number\">2</span>, My_price);<br>                    ps.setInt(<span class=\"hljs-number\">3</span>, My_num);<br>                    ps.setString(<span class=\"hljs-number\">4</span>, My_id);<br>                    ps.executeUpdate();<span class=\"hljs-comment\">//执行修改数据</span><br><br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>            close(ps);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">               关闭连接</span><br><span class=\"hljs-comment\">               */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>删除数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> gui.service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">delData</span> &#123;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">      删除数据</span><br><span class=\"hljs-comment\">       */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">del_data</span><span class=\"hljs-params\">(String My_id)</span> &#123;<br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br>                resultset =  statement.executeQuery(<span class=\"hljs-string\">&quot;select * from goods&quot;</span>);<br>                String sql;<br>                sql=<span class=\"hljs-string\">&quot;DELETE FROM goods WHERE id=?&quot;</span>;<span class=\"hljs-comment\">//向goods表里删除数据</span><br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>,My_id);<span class=\"hljs-comment\">//第1个问号的值</span><br>                ps.executeUpdate();<span class=\"hljs-comment\">//执行添加数据</span><br>                System.out.println(<span class=\"hljs-string\">&quot;删除&quot;</span>+My_id+<span class=\"hljs-string\">&quot;数据成功！&quot;</span>);<br>                <span class=\"hljs-comment\">// 完成后关闭</span><br>                ps.close();<br>                statement.close();<br>                connection.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">     关闭连接</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>筛选数据</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> gui.service;<br><br><span class=\"hljs-keyword\">import</span> java.sql.*;<br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Scanner;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">chooseData</span> &#123;<br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">        通过id和name搜索</span><br><span class=\"hljs-comment\">    */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Object&gt; <span class=\"hljs-title function_\">search</span><span class=\"hljs-params\">(String My_data)</span> &#123;<br><br>        <span class=\"hljs-comment\">//创建列表</span><br>        List&lt;Object&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Object&gt;();<br><br>        <span class=\"hljs-type\">Connection</span> <span class=\"hljs-variable\">connection</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Statement</span> <span class=\"hljs-variable\">statement</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">ResultSet</span> <span class=\"hljs-variable\">resultset</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">PreparedStatement</span> <span class=\"hljs-variable\">ps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            Class.forName(<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class=\"hljs-keyword\">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class=\"hljs-string\">&quot;root&quot;</span>,<span class=\"hljs-string\">&quot;1234&quot;</span>);<br><br><span class=\"hljs-comment\">//                if(connection != null)&#123;</span><br><span class=\"hljs-comment\">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class=\"hljs-comment\">//                    connection.close();</span><br><span class=\"hljs-comment\">//                &#125;</span><br>                statement = connection.createStatement();<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;select * from goods where id =? or name = ?&quot;</span>;<br>                ps=connection.prepareStatement(sql);<span class=\"hljs-comment\">//添加数据预处理</span><br>                ps.setString(<span class=\"hljs-number\">1</span>, My_data);<br>                ps.setString(<span class=\"hljs-number\">2</span>, My_data);<br>                resultset = ps.executeQuery();<br><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>                <span class=\"hljs-keyword\">while</span>(resultset.next())&#123;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;id&quot;</span>);<br>                    list.add(i,id);<br>                    i++;<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> resultset.getString(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>                    list.add(i,name);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">price</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;price&quot;</span>);<br>                    list.add(i,price);<br>                    i++;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> resultset.getInt(<span class=\"hljs-string\">&quot;num&quot;</span>);<br>                    list.add(i,num);<br>                    i++;<br>                    <span class=\"hljs-comment\">//System.out.println(&quot;id:&quot;+id+&quot;   &quot;+&quot;name:&quot;+name+&quot;   &quot;+&quot;price:&quot;+price+&quot;   &quot;+&quot;num:&quot;+num);</span><br>                &#125;<br><br>            &#125; <span class=\"hljs-keyword\">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">               关闭连接</span><br><span class=\"hljs-comment\">               */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">close</span><span class=\"hljs-params\">(AutoCloseable autoCloseable)</span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(autoCloseable != <span class=\"hljs-literal\">null</span>)&#123;<br>            <span class=\"hljs-keyword\">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"swing组件gui设计\"><a class=\"markdownIt-Anchor\" href=\"#swing组件gui设计\"></a> Swing组件GUI设计</h3>\n<ul>\n<li>\n<p>该层主要采用<strong>Swing类</strong>的各种组件和方法实现图形用户界面,并且下载了相应的主题优化了组件的外观，使其达到精美的效果！</p>\n</li>\n<li>\n<p>使用<strong>JFrame</strong>作为面板组件的载体。</p>\n</li>\n<li>\n<p>使用<strong>JPanel</strong>组件作为基础组件的载体，并且设置面板的大小，位置以及布局方式。</p>\n</li>\n<li>\n<p>使用<strong>JBox</strong>打包对应组件为一个完整的整体，并确定竖直和横向的排布。</p>\n</li>\n<li>\n<p>使用<strong>JLabel、JTextField、JButton、JPassword、JSplit</strong>等基本组件并且设置其<strong>格式</strong>，包括<strong>颜色</strong>、<strong>大小</strong>、<strong>位置</strong>等。</p>\n</li>\n<li>\n<p>因为需要为交互的组件添加<strong>监视器</strong>来实现<strong>动态响应</strong>，最终组合<strong>JFrame</strong>的内容为总体系统。</p>\n</li>\n</ul>\n<h3 id=\"项目展示\"><a class=\"markdownIt-Anchor\" href=\"#项目展示\"></a> 项目展示</h3>\n<ul>\n<li>登录界面                   用户名:root                    密码:1234</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui1.png\" alt=\" \" /></p>\n<ul>\n<li>数据管理界面，基本功能模块和数据表格显示</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui2.png\" alt=\" \" /></p>\n<ul>\n<li>添加数据功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui3.png\" alt=\" \" /></p>\n<ul>\n<li>修改数据功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui4.png\" alt=\" \" /></p>\n<ul>\n<li>数据筛选功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui5.png\" alt=\" \" /></p>\n<ul>\n<li>页眉部分拓展功能</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui.png\" alt=\" \" /></p>\n<ul>\n<li>关于作者界面</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui6.png\" alt=\" \" /></p>\n<h3 id=\"项目下载\"><a class=\"markdownIt-Anchor\" href=\"#项目下载\"></a> 项目下载</h3>\n<ul>\n<li>\n<p>由于本项目代码量巨大，详细工程就不展示在本博客中，同时为了促进大家相互学习和共同进步，在此提供公开版项目供大家使用，一起进步！</p>\n</li>\n<li>\n<p>公开版项目是精简了一些冗余的外观，尽量保留原汁原味JavaGUI，更加关注后台数据处理和交互的过程！读者可以根据初始GUI进行深度定制，随时随地制作出合你心意的作品。鉴于本人水平有限，本项目依然有很多不足之处，欢迎大家在下方评论区留言指正！</p>\n</li>\n<li>\n<p>本公开版项目能够直接运行Main.java即可，若连接数据库，读者需要首先自行在本机安装MySql并将相关内容在service文件夹即业务逻辑层修改部分代码才可完美运行。</p>\n</li>\n<li>\n<p>本项目所有功能已经测试通过，如仍然有Bug欢迎指正！</p>\n</li>\n<li>\n<p>下载连接：<a href=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/9220f08e-f2ed-484f-b9b1-60f13b8ea3ba.zip\">公开版项目点此下载</a></p>\n</li>\n</ul>\n"},{"title":"Graph Counts","date":"2021-12-12T13:40:00.000Z","excerpt":"图、算法","_content":"\n### 题目描述\n\n ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/4.png)  \n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/5.png)\n\n### Hints\n\n•Each edge has weight of 1.\n\n•Find shortest path for every two nodes using **Floyd** algorithm. Use length[][] to know shortest path length.\n\n### 示例邻接表\n\n0;1;2;4\n1;0\n2;0;4\n3;4;6\n4;0;2;3;5\n5;4;6\n6;3;5\n\n### 实现原理        \n\n​     导入邻接表放入一个二维数组中，根据该邻接表建立邻接矩阵，然后根据Floyd算法（从i号顶点到j号顶点只经过前k号点的最短路程）得到最短路径矩阵，最后根据DFS寻找连通子图。  \n\n### 输出结果展示\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/3.png)  \n\n### 完整代码实现\n\n```c\n/*\n ============================================================================\n Name        : GraphMatrix.c\n Author      : YUGIN CHUI（Xu yujian）\n Version     :\n Copyright   :\n Description : read a graph from file, which descibe the formation of the\n \t \t \t   graph by vertices at the beginning of each line, followed\n \t \t \t   by connected vertices.\n ============================================================================\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define MAX 999\n\nint sub_graphs = 0;\n\n//打印矩阵函数\nvoid PrintMatrix(int **m, int size) {\n    int i, j;\n    for (i = 0; i < size; i++) {\n        for (j = 0; j < size; j++)\n            m[i][j] == MAX ? printf(\"%3c \", 'x') : printf(\"%3d \", m[i][j]);\n        printf(\"\\n\");\n    }\n\n}\n\n//Flyod函数\nvoid Floyd(int **A, int size) {\n//TO-DO: implement Floyd algorithm\nint i,j,k;\nfor(k=0;k<size;k++){\n    for(i=0;i<size;i++){\n        for(j=0;j<size;j++) {\n         if(A[i][k] + A[k][j] < A[i][j]){\n             A[i][j] =  A[i][k] + A[k][j];\n         }\n        }\n    }\n}\n}\n\n//DFS函数\nvoid DFS(int **A,int i,int *visit,int num_nodes){\n    visit[i] = 1;\n    for(int j = 0;j<num_nodes;j++){\n        if(A[i][j] == 1 && visit[j] == 0)\n            DFS( A, j, visit, num_nodes);\n    }\n}\n\n//DFSTravel函数\nvoid DFSTravel(int **A,int *visit,int num_nodes,int e){\n    DFS(A, e, visit, num_nodes);\n    sub_graphs++;\n}\n\n//主函数\nint  main() {\n    int i, j, k, num_nodes;\n    int **word;\n    int **M;\n    int *count;\n\n    word = malloc(sizeof(int *) * 255);\n    for (i = 0; i < 255; i++) {\n        word[i] = (int *) malloc(sizeof(int) * 255);\n        for (j = 0; j < 255; j++)\n            word[i][j] = -1;\n    }\n\n    //read graph from file.txt, store data in word[][]\n    FILE *fp;\n    fp = fopen(\"file.txt\", \"r\");\n    if (fp == NULL) {\n        printf(\"can not open data file\\n\");\n        exit(0);\n    };\n\n    if (fp != NULL) {\n        i = 0;\n        while (!feof(fp)) {\n            char *buff = malloc(255);\n            char *c = malloc(sizeof(char));\n            j = 0;\n            int x = 0;\n            fscanf(fp, \"%s\", buff);\n\n            //the while loop get rid of symbols like , . -\n            while (buff[x] != NULL) {\n                if (isdigit(buff[x])) {\n                    c[0] = buff[x];\n                    word[i][j] = atoi(c);\n                    j++;\n                }\n                x++;\n            }\n            i++;\n        }\n        num_nodes = i;\n        printf(\"Number of nodes: %d\\n\", num_nodes);\n    }\n\n//\tPrintMatrix(word, num_nodes);\n\n// initialize M[][] with all MAX values, TYPICAL code example for initialing 2D matrix.\n    M = malloc(sizeof(int *) * num_nodes);\n    int node;\n    for (i = 0; i < num_nodes; i++) {\n        M[i] = (int *) malloc(sizeof(int) * num_nodes);\n        for (j = 0; j < num_nodes; j++) {\n            M[i][j] = MAX;\n        }\n    }\n//build M[][] with the value read from file.txt\n    for (i = 0; i < num_nodes; i++) {\n        for (j = 0; j < num_nodes; j++) {\n            if (word[i][j] != -1 && j > 0) {\n                //TO-DO: assign value=1 to correct index of M[][]\n                M[i][word[i][j]] = 1;\n            }\n        }\n    }\n    printf(\"matrix: \\n\");\n    PrintMatrix(M, num_nodes);\n\n    //利用DFS寻找连通子图代码段\n    int visit[num_nodes];\n    for(i=0;i<num_nodes;i++){\n        visit[i] = 0;\n    }\n        DFSTravel(M,visit,num_nodes,0);\n        for(int j = 0;j<num_nodes;j++) {\n            if (visit[j] == 0)\n                DFSTravel(M, visit, num_nodes, j);\n        }\n\n    //Flyod求解\n    for (k = 0; k < (num_nodes - 3); k++)\n        Floyd(M, num_nodes);\n\n    printf(\"Shortest path matrix between vertices\\n\");\n    PrintMatrix(M, num_nodes);\n\n//count is used for output number of pairs in each distance\n    count = malloc(sizeof(int *) * (num_nodes-1)); //Furthest distance is (num of nodes -1)\n    for(i=0;i<num_nodes-1;i++) count[i]=0;\n\n//count number of subgraphs in num_graphs, and number of node-pairs in count[], e.g. node pairs in distance\n//TO-DO: assign count[] values, and update sum\n    for (i = 0; i < num_nodes; i++){\n        for (j = 0; j < num_nodes; j++){\n//TO-DO: assign count[] values, and update sum\n        if(j>i) {\n            count[M[i][j]]++;\n        }\n    }\n}\n\nprintf(\"Number of connected sub-graphs: %d\\n\",sub_graphs);\nprintf(\"%8s | %8s\\n\",\"Distance\",\"Number of node-pairs\");\nfor(i=0;i<num_nodes-1;i++)\nif(count[i]>0)\nprintf(\"%8d | %8d\\n\", i, count[i]);\n\nreturn 0;\n}\n\n```\n\n","source":"_posts/graph counts.md","raw":"---\ntitle: Graph Counts\ntags: [数据结构,图]\ncategories: [数据结构]\ndate: 2021-12-12 21:40:00\nexcerpt: 图、算法\n---\n\n### 题目描述\n\n ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/4.png)  \n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/5.png)\n\n### Hints\n\n•Each edge has weight of 1.\n\n•Find shortest path for every two nodes using **Floyd** algorithm. Use length[][] to know shortest path length.\n\n### 示例邻接表\n\n0;1;2;4\n1;0\n2;0;4\n3;4;6\n4;0;2;3;5\n5;4;6\n6;3;5\n\n### 实现原理        \n\n​     导入邻接表放入一个二维数组中，根据该邻接表建立邻接矩阵，然后根据Floyd算法（从i号顶点到j号顶点只经过前k号点的最短路程）得到最短路径矩阵，最后根据DFS寻找连通子图。  \n\n### 输出结果展示\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/3.png)  \n\n### 完整代码实现\n\n```c\n/*\n ============================================================================\n Name        : GraphMatrix.c\n Author      : YUGIN CHUI（Xu yujian）\n Version     :\n Copyright   :\n Description : read a graph from file, which descibe the formation of the\n \t \t \t   graph by vertices at the beginning of each line, followed\n \t \t \t   by connected vertices.\n ============================================================================\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <ctype.h>\n\n#define MAX 999\n\nint sub_graphs = 0;\n\n//打印矩阵函数\nvoid PrintMatrix(int **m, int size) {\n    int i, j;\n    for (i = 0; i < size; i++) {\n        for (j = 0; j < size; j++)\n            m[i][j] == MAX ? printf(\"%3c \", 'x') : printf(\"%3d \", m[i][j]);\n        printf(\"\\n\");\n    }\n\n}\n\n//Flyod函数\nvoid Floyd(int **A, int size) {\n//TO-DO: implement Floyd algorithm\nint i,j,k;\nfor(k=0;k<size;k++){\n    for(i=0;i<size;i++){\n        for(j=0;j<size;j++) {\n         if(A[i][k] + A[k][j] < A[i][j]){\n             A[i][j] =  A[i][k] + A[k][j];\n         }\n        }\n    }\n}\n}\n\n//DFS函数\nvoid DFS(int **A,int i,int *visit,int num_nodes){\n    visit[i] = 1;\n    for(int j = 0;j<num_nodes;j++){\n        if(A[i][j] == 1 && visit[j] == 0)\n            DFS( A, j, visit, num_nodes);\n    }\n}\n\n//DFSTravel函数\nvoid DFSTravel(int **A,int *visit,int num_nodes,int e){\n    DFS(A, e, visit, num_nodes);\n    sub_graphs++;\n}\n\n//主函数\nint  main() {\n    int i, j, k, num_nodes;\n    int **word;\n    int **M;\n    int *count;\n\n    word = malloc(sizeof(int *) * 255);\n    for (i = 0; i < 255; i++) {\n        word[i] = (int *) malloc(sizeof(int) * 255);\n        for (j = 0; j < 255; j++)\n            word[i][j] = -1;\n    }\n\n    //read graph from file.txt, store data in word[][]\n    FILE *fp;\n    fp = fopen(\"file.txt\", \"r\");\n    if (fp == NULL) {\n        printf(\"can not open data file\\n\");\n        exit(0);\n    };\n\n    if (fp != NULL) {\n        i = 0;\n        while (!feof(fp)) {\n            char *buff = malloc(255);\n            char *c = malloc(sizeof(char));\n            j = 0;\n            int x = 0;\n            fscanf(fp, \"%s\", buff);\n\n            //the while loop get rid of symbols like , . -\n            while (buff[x] != NULL) {\n                if (isdigit(buff[x])) {\n                    c[0] = buff[x];\n                    word[i][j] = atoi(c);\n                    j++;\n                }\n                x++;\n            }\n            i++;\n        }\n        num_nodes = i;\n        printf(\"Number of nodes: %d\\n\", num_nodes);\n    }\n\n//\tPrintMatrix(word, num_nodes);\n\n// initialize M[][] with all MAX values, TYPICAL code example for initialing 2D matrix.\n    M = malloc(sizeof(int *) * num_nodes);\n    int node;\n    for (i = 0; i < num_nodes; i++) {\n        M[i] = (int *) malloc(sizeof(int) * num_nodes);\n        for (j = 0; j < num_nodes; j++) {\n            M[i][j] = MAX;\n        }\n    }\n//build M[][] with the value read from file.txt\n    for (i = 0; i < num_nodes; i++) {\n        for (j = 0; j < num_nodes; j++) {\n            if (word[i][j] != -1 && j > 0) {\n                //TO-DO: assign value=1 to correct index of M[][]\n                M[i][word[i][j]] = 1;\n            }\n        }\n    }\n    printf(\"matrix: \\n\");\n    PrintMatrix(M, num_nodes);\n\n    //利用DFS寻找连通子图代码段\n    int visit[num_nodes];\n    for(i=0;i<num_nodes;i++){\n        visit[i] = 0;\n    }\n        DFSTravel(M,visit,num_nodes,0);\n        for(int j = 0;j<num_nodes;j++) {\n            if (visit[j] == 0)\n                DFSTravel(M, visit, num_nodes, j);\n        }\n\n    //Flyod求解\n    for (k = 0; k < (num_nodes - 3); k++)\n        Floyd(M, num_nodes);\n\n    printf(\"Shortest path matrix between vertices\\n\");\n    PrintMatrix(M, num_nodes);\n\n//count is used for output number of pairs in each distance\n    count = malloc(sizeof(int *) * (num_nodes-1)); //Furthest distance is (num of nodes -1)\n    for(i=0;i<num_nodes-1;i++) count[i]=0;\n\n//count number of subgraphs in num_graphs, and number of node-pairs in count[], e.g. node pairs in distance\n//TO-DO: assign count[] values, and update sum\n    for (i = 0; i < num_nodes; i++){\n        for (j = 0; j < num_nodes; j++){\n//TO-DO: assign count[] values, and update sum\n        if(j>i) {\n            count[M[i][j]]++;\n        }\n    }\n}\n\nprintf(\"Number of connected sub-graphs: %d\\n\",sub_graphs);\nprintf(\"%8s | %8s\\n\",\"Distance\",\"Number of node-pairs\");\nfor(i=0;i<num_nodes-1;i++)\nif(count[i]>0)\nprintf(\"%8d | %8d\\n\", i, count[i]);\n\nreturn 0;\n}\n\n```\n\n","slug":"graph counts","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7uo000tlsvs9svv9jst","content":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/4.png\" alt=\" \" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/5.png\" alt=\" \" /></p>\n<h3 id=\"hints\"><a class=\"markdownIt-Anchor\" href=\"#hints\"></a> Hints</h3>\n<p>•Each edge has weight of 1.</p>\n<p>•Find shortest path for every two nodes using <strong>Floyd</strong> algorithm. Use length[][] to know shortest path length.</p>\n<h3 id=\"示例邻接表\"><a class=\"markdownIt-Anchor\" href=\"#示例邻接表\"></a> 示例邻接表</h3>\n<p>0;1;2;4<br />\n1;0<br />\n2;0;4<br />\n3;4;6<br />\n4;0;2;3;5<br />\n5;4;6<br />\n6;3;5</p>\n<h3 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\"></a> 实现原理</h3>\n<p>​     导入邻接表放入一个二维数组中，根据该邻接表建立邻接矩阵，然后根据Floyd算法（从i号顶点到j号顶点只经过前k号点的最短路程）得到最短路径矩阵，最后根据DFS寻找连通子图。</p>\n<h3 id=\"输出结果展示\"><a class=\"markdownIt-Anchor\" href=\"#输出结果展示\"></a> 输出结果展示</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/3.png\" alt=\" \" /></p>\n<h3 id=\"完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现\"></a> 完整代码实现</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\"> ============================================================================</span><br><span class=\"hljs-comment\"> Name        : GraphMatrix.c</span><br><span class=\"hljs-comment\"> Author      : YUGIN CHUI（Xu yujian）</span><br><span class=\"hljs-comment\"> Version     :</span><br><span class=\"hljs-comment\"> Copyright   :</span><br><span class=\"hljs-comment\"> Description : read a graph from file, which descibe the formation of the</span><br><span class=\"hljs-comment\"> \t \t \t   graph by vertices at the beginning of each line, followed</span><br><span class=\"hljs-comment\"> \t \t \t   by connected vertices.</span><br><span class=\"hljs-comment\"> ============================================================================</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctype.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 999</span><br><br><span class=\"hljs-type\">int</span> sub_graphs = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-comment\">//打印矩阵函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintMatrix</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **m, <span class=\"hljs-type\">int</span> size)</span> &#123;<br>    <span class=\"hljs-type\">int</span> i, j;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) &#123;<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; size; j++)<br>            m[i][j] == MAX ? <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3c &quot;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>) : <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d &quot;</span>, m[i][j]);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-comment\">//Flyod函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Floyd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **A, <span class=\"hljs-type\">int</span> size)</span> &#123;<br><span class=\"hljs-comment\">//TO-DO: implement Floyd algorithm</span><br><span class=\"hljs-type\">int</span> i,j,k;<br><span class=\"hljs-keyword\">for</span>(k=<span class=\"hljs-number\">0</span>;k&lt;size;k++)&#123;<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;size;i++)&#123;<br>        <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">0</span>;j&lt;size;j++) &#123;<br>         <span class=\"hljs-keyword\">if</span>(A[i][k] + A[k][j] &lt; A[i][j])&#123;<br>             A[i][j] =  A[i][k] + A[k][j];<br>         &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br><br><span class=\"hljs-comment\">//DFS函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">DFS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **A,<span class=\"hljs-type\">int</span> i,<span class=\"hljs-type\">int</span> *visit,<span class=\"hljs-type\">int</span> num_nodes)</span>&#123;<br>    visit[i] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;j&lt;num_nodes;j++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(A[i][j] == <span class=\"hljs-number\">1</span> &amp;&amp; visit[j] == <span class=\"hljs-number\">0</span>)<br>            DFS( A, j, visit, num_nodes);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//DFSTravel函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">DFSTravel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **A,<span class=\"hljs-type\">int</span> *visit,<span class=\"hljs-type\">int</span> num_nodes,<span class=\"hljs-type\">int</span> e)</span>&#123;<br>    DFS(A, e, visit, num_nodes);<br>    sub_graphs++;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-type\">int</span>  <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span> i, j, k, num_nodes;<br>    <span class=\"hljs-type\">int</span> **word;<br>    <span class=\"hljs-type\">int</span> **M;<br>    <span class=\"hljs-type\">int</span> *count;<br><br>    word = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *) * <span class=\"hljs-number\">255</span>);<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">255</span>; i++) &#123;<br>        word[i] = (<span class=\"hljs-type\">int</span> *) <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * <span class=\"hljs-number\">255</span>);<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">255</span>; j++)<br>            word[i][j] = <span class=\"hljs-number\">-1</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//read graph from file.txt, store data in word[][]</span><br>    FILE *fp;<br>    fp = fopen(<span class=\"hljs-string\">&quot;file.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-literal\">NULL</span>) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;can not open data file\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;;<br><br>    <span class=\"hljs-keyword\">if</span> (fp != <span class=\"hljs-literal\">NULL</span>) &#123;<br>        i = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (!feof(fp)) &#123;<br>            <span class=\"hljs-type\">char</span> *buff = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">255</span>);<br>            <span class=\"hljs-type\">char</span> *c = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br>            j = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-built_in\">fscanf</span>(fp, <span class=\"hljs-string\">&quot;%s&quot;</span>, buff);<br><br>            <span class=\"hljs-comment\">//the while loop get rid of symbols like , . -</span><br>            <span class=\"hljs-keyword\">while</span> (buff[x] != <span class=\"hljs-literal\">NULL</span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isdigit</span>(buff[x])) &#123;<br>                    c[<span class=\"hljs-number\">0</span>] = buff[x];<br>                    word[i][j] = atoi(c);<br>                    j++;<br>                &#125;<br>                x++;<br>            &#125;<br>            i++;<br>        &#125;<br>        num_nodes = i;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of nodes: %d\\n&quot;</span>, num_nodes);<br>    &#125;<br><br><span class=\"hljs-comment\">//\tPrintMatrix(word, num_nodes);</span><br><br><span class=\"hljs-comment\">// initialize M[][] with all MAX values, TYPICAL code example for initialing 2D matrix.</span><br>    M = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *) * num_nodes);<br>    <span class=\"hljs-type\">int</span> node;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num_nodes; i++) &#123;<br>        M[i] = (<span class=\"hljs-type\">int</span> *) <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * num_nodes);<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; num_nodes; j++) &#123;<br>            M[i][j] = MAX;<br>        &#125;<br>    &#125;<br><span class=\"hljs-comment\">//build M[][] with the value read from file.txt</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num_nodes; i++) &#123;<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; num_nodes; j++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (word[i][j] != <span class=\"hljs-number\">-1</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) &#123;<br>                <span class=\"hljs-comment\">//TO-DO: assign value=1 to correct index of M[][]</span><br>                M[i][word[i][j]] = <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;matrix: \\n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br>    <span class=\"hljs-comment\">//利用DFS寻找连通子图代码段</span><br>    <span class=\"hljs-type\">int</span> visit[num_nodes];<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;num_nodes;i++)&#123;<br>        visit[i] = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>        DFSTravel(M,visit,num_nodes,<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;j&lt;num_nodes;j++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (visit[j] == <span class=\"hljs-number\">0</span>)<br>                DFSTravel(M, visit, num_nodes, j);<br>        &#125;<br><br>    <span class=\"hljs-comment\">//Flyod求解</span><br>    <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">0</span>; k &lt; (num_nodes - <span class=\"hljs-number\">3</span>); k++)<br>        Floyd(M, num_nodes);<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Shortest path matrix between vertices\\n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br><span class=\"hljs-comment\">//count is used for output number of pairs in each distance</span><br>    count = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *) * (num_nodes<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">//Furthest distance is (num of nodes -1)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;num_nodes<span class=\"hljs-number\">-1</span>;i++) count[i]=<span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-comment\">//count number of subgraphs in num_graphs, and number of node-pairs in count[], e.g. node pairs in distance</span><br><span class=\"hljs-comment\">//TO-DO: assign count[] values, and update sum</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num_nodes; i++)&#123;<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; num_nodes; j++)&#123;<br><span class=\"hljs-comment\">//TO-DO: assign count[] values, and update sum</span><br>        <span class=\"hljs-keyword\">if</span>(j&gt;i) &#123;<br>            count[M[i][j]]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of connected sub-graphs: %d\\n&quot;</span>,sub_graphs);<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%8s | %8s\\n&quot;</span>,<span class=\"hljs-string\">&quot;Distance&quot;</span>,<span class=\"hljs-string\">&quot;Number of node-pairs&quot;</span>);<br><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;num_nodes<span class=\"hljs-number\">-1</span>;i++)<br><span class=\"hljs-keyword\">if</span>(count[i]&gt;<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%8d | %8d\\n&quot;</span>, i, count[i]);<br><br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/4.png\" alt=\" \" /></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/5.png\" alt=\" \" /></p>\n<h3 id=\"hints\"><a class=\"markdownIt-Anchor\" href=\"#hints\"></a> Hints</h3>\n<p>•Each edge has weight of 1.</p>\n<p>•Find shortest path for every two nodes using <strong>Floyd</strong> algorithm. Use length[][] to know shortest path length.</p>\n<h3 id=\"示例邻接表\"><a class=\"markdownIt-Anchor\" href=\"#示例邻接表\"></a> 示例邻接表</h3>\n<p>0;1;2;4<br />\n1;0<br />\n2;0;4<br />\n3;4;6<br />\n4;0;2;3;5<br />\n5;4;6<br />\n6;3;5</p>\n<h3 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\"></a> 实现原理</h3>\n<p>​     导入邻接表放入一个二维数组中，根据该邻接表建立邻接矩阵，然后根据Floyd算法（从i号顶点到j号顶点只经过前k号点的最短路程）得到最短路径矩阵，最后根据DFS寻找连通子图。</p>\n<h3 id=\"输出结果展示\"><a class=\"markdownIt-Anchor\" href=\"#输出结果展示\"></a> 输出结果展示</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/3.png\" alt=\" \" /></p>\n<h3 id=\"完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现\"></a> 完整代码实现</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\"> ============================================================================</span><br><span class=\"hljs-comment\"> Name        : GraphMatrix.c</span><br><span class=\"hljs-comment\"> Author      : YUGIN CHUI（Xu yujian）</span><br><span class=\"hljs-comment\"> Version     :</span><br><span class=\"hljs-comment\"> Copyright   :</span><br><span class=\"hljs-comment\"> Description : read a graph from file, which descibe the formation of the</span><br><span class=\"hljs-comment\"> \t \t \t   graph by vertices at the beginning of each line, followed</span><br><span class=\"hljs-comment\"> \t \t \t   by connected vertices.</span><br><span class=\"hljs-comment\"> ============================================================================</span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ctype.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> MAX 999</span><br><br><span class=\"hljs-type\">int</span> sub_graphs = <span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-comment\">//打印矩阵函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">PrintMatrix</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **m, <span class=\"hljs-type\">int</span> size)</span> &#123;<br>    <span class=\"hljs-type\">int</span> i, j;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; size; i++) &#123;<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; size; j++)<br>            m[i][j] == MAX ? <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3c &quot;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>) : <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%3d &quot;</span>, m[i][j]);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;\\n&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class=\"hljs-comment\">//Flyod函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Floyd</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **A, <span class=\"hljs-type\">int</span> size)</span> &#123;<br><span class=\"hljs-comment\">//TO-DO: implement Floyd algorithm</span><br><span class=\"hljs-type\">int</span> i,j,k;<br><span class=\"hljs-keyword\">for</span>(k=<span class=\"hljs-number\">0</span>;k&lt;size;k++)&#123;<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;size;i++)&#123;<br>        <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">0</span>;j&lt;size;j++) &#123;<br>         <span class=\"hljs-keyword\">if</span>(A[i][k] + A[k][j] &lt; A[i][j])&#123;<br>             A[i][j] =  A[i][k] + A[k][j];<br>         &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br><br><span class=\"hljs-comment\">//DFS函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">DFS</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **A,<span class=\"hljs-type\">int</span> i,<span class=\"hljs-type\">int</span> *visit,<span class=\"hljs-type\">int</span> num_nodes)</span>&#123;<br>    visit[i] = <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;j&lt;num_nodes;j++)&#123;<br>        <span class=\"hljs-keyword\">if</span>(A[i][j] == <span class=\"hljs-number\">1</span> &amp;&amp; visit[j] == <span class=\"hljs-number\">0</span>)<br>            DFS( A, j, visit, num_nodes);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//DFSTravel函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">DFSTravel</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> **A,<span class=\"hljs-type\">int</span> *visit,<span class=\"hljs-type\">int</span> num_nodes,<span class=\"hljs-type\">int</span> e)</span>&#123;<br>    DFS(A, e, visit, num_nodes);<br>    sub_graphs++;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-type\">int</span>  <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span> i, j, k, num_nodes;<br>    <span class=\"hljs-type\">int</span> **word;<br>    <span class=\"hljs-type\">int</span> **M;<br>    <span class=\"hljs-type\">int</span> *count;<br><br>    word = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *) * <span class=\"hljs-number\">255</span>);<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">255</span>; i++) &#123;<br>        word[i] = (<span class=\"hljs-type\">int</span> *) <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * <span class=\"hljs-number\">255</span>);<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">255</span>; j++)<br>            word[i][j] = <span class=\"hljs-number\">-1</span>;<br>    &#125;<br><br>    <span class=\"hljs-comment\">//read graph from file.txt, store data in word[][]</span><br>    FILE *fp;<br>    fp = fopen(<span class=\"hljs-string\">&quot;file.txt&quot;</span>, <span class=\"hljs-string\">&quot;r&quot;</span>);<br>    <span class=\"hljs-keyword\">if</span> (fp == <span class=\"hljs-literal\">NULL</span>) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;can not open data file\\n&quot;</span>);<br>        <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);<br>    &#125;;<br><br>    <span class=\"hljs-keyword\">if</span> (fp != <span class=\"hljs-literal\">NULL</span>) &#123;<br>        i = <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (!feof(fp)) &#123;<br>            <span class=\"hljs-type\">char</span> *buff = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">255</span>);<br>            <span class=\"hljs-type\">char</span> *c = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">char</span>));<br>            j = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-type\">int</span> x = <span class=\"hljs-number\">0</span>;<br>            <span class=\"hljs-built_in\">fscanf</span>(fp, <span class=\"hljs-string\">&quot;%s&quot;</span>, buff);<br><br>            <span class=\"hljs-comment\">//the while loop get rid of symbols like , . -</span><br>            <span class=\"hljs-keyword\">while</span> (buff[x] != <span class=\"hljs-literal\">NULL</span>) &#123;<br>                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">isdigit</span>(buff[x])) &#123;<br>                    c[<span class=\"hljs-number\">0</span>] = buff[x];<br>                    word[i][j] = atoi(c);<br>                    j++;<br>                &#125;<br>                x++;<br>            &#125;<br>            i++;<br>        &#125;<br>        num_nodes = i;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of nodes: %d\\n&quot;</span>, num_nodes);<br>    &#125;<br><br><span class=\"hljs-comment\">//\tPrintMatrix(word, num_nodes);</span><br><br><span class=\"hljs-comment\">// initialize M[][] with all MAX values, TYPICAL code example for initialing 2D matrix.</span><br>    M = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *) * num_nodes);<br>    <span class=\"hljs-type\">int</span> node;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num_nodes; i++) &#123;<br>        M[i] = (<span class=\"hljs-type\">int</span> *) <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span>) * num_nodes);<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; num_nodes; j++) &#123;<br>            M[i][j] = MAX;<br>        &#125;<br>    &#125;<br><span class=\"hljs-comment\">//build M[][] with the value read from file.txt</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num_nodes; i++) &#123;<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; num_nodes; j++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (word[i][j] != <span class=\"hljs-number\">-1</span> &amp;&amp; j &gt; <span class=\"hljs-number\">0</span>) &#123;<br>                <span class=\"hljs-comment\">//TO-DO: assign value=1 to correct index of M[][]</span><br>                M[i][word[i][j]] = <span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;matrix: \\n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br>    <span class=\"hljs-comment\">//利用DFS寻找连通子图代码段</span><br>    <span class=\"hljs-type\">int</span> visit[num_nodes];<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;num_nodes;i++)&#123;<br>        visit[i] = <span class=\"hljs-number\">0</span>;<br>    &#125;<br>        DFSTravel(M,visit,num_nodes,<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">0</span>;j&lt;num_nodes;j++) &#123;<br>            <span class=\"hljs-keyword\">if</span> (visit[j] == <span class=\"hljs-number\">0</span>)<br>                DFSTravel(M, visit, num_nodes, j);<br>        &#125;<br><br>    <span class=\"hljs-comment\">//Flyod求解</span><br>    <span class=\"hljs-keyword\">for</span> (k = <span class=\"hljs-number\">0</span>; k &lt; (num_nodes - <span class=\"hljs-number\">3</span>); k++)<br>        Floyd(M, num_nodes);<br><br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Shortest path matrix between vertices\\n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br><span class=\"hljs-comment\">//count is used for output number of pairs in each distance</span><br>    count = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">int</span> *) * (num_nodes<span class=\"hljs-number\">-1</span>)); <span class=\"hljs-comment\">//Furthest distance is (num of nodes -1)</span><br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;num_nodes<span class=\"hljs-number\">-1</span>;i++) count[i]=<span class=\"hljs-number\">0</span>;<br><br><span class=\"hljs-comment\">//count number of subgraphs in num_graphs, and number of node-pairs in count[], e.g. node pairs in distance</span><br><span class=\"hljs-comment\">//TO-DO: assign count[] values, and update sum</span><br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; num_nodes; i++)&#123;<br>        <span class=\"hljs-keyword\">for</span> (j = <span class=\"hljs-number\">0</span>; j &lt; num_nodes; j++)&#123;<br><span class=\"hljs-comment\">//TO-DO: assign count[] values, and update sum</span><br>        <span class=\"hljs-keyword\">if</span>(j&gt;i) &#123;<br>            count[M[i][j]]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Number of connected sub-graphs: %d\\n&quot;</span>,sub_graphs);<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%8s | %8s\\n&quot;</span>,<span class=\"hljs-string\">&quot;Distance&quot;</span>,<span class=\"hljs-string\">&quot;Number of node-pairs&quot;</span>);<br><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;num_nodes<span class=\"hljs-number\">-1</span>;i++)<br><span class=\"hljs-keyword\">if</span>(count[i]&gt;<span class=\"hljs-number\">0</span>)<br><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%8d | %8d\\n&quot;</span>, i, count[i]);<br><br><span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"Hello World","date":"2021-11-20T13:40:00.000Z","excerpt":"Some useful hexo code!","_content":"Welcome to [Hexo](https://hexo.io/)! \n\n### Some useful code\n\n```bash\ngit config --global user.name \"chuiyugin\"\ngit config --global user.email 1726123207@qq.com\nhexo cl && hexo g && hexo d\n```\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: [Hexo,部署]\ncategories: [HEXO部署]\ndate: 2021-11-20 21:40:00\nexcerpt: Some useful hexo code!\n---\nWelcome to [Hexo](https://hexo.io/)! \n\n### Some useful code\n\n```bash\ngit config --global user.name \"chuiyugin\"\ngit config --global user.email 1726123207@qq.com\nhexo cl && hexo g && hexo d\n```\n\n","slug":"hello-world","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7up000vlsvs2wlv7xdf","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<h3 id=\"some-useful-code\"><a class=\"markdownIt-Anchor\" href=\"#some-useful-code\"></a> Some useful code</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config --global user.name <span class=\"hljs-string\">&quot;chuiyugin&quot;</span><br>git config --global user.email 1726123207@qq.com<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>!</p>\n<h3 id=\"some-useful-code\"><a class=\"markdownIt-Anchor\" href=\"#some-useful-code\"></a> Some useful code</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git config --global user.name <span class=\"hljs-string\">&quot;chuiyugin&quot;</span><br>git config --global user.email 1726123207@qq.com<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>\n"},{"title":"Points","date":"2021-12-12T13:40:00.000Z","excerpt":"分治法、算法","_content":"\n### 题目描述\n\n ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/7.png)  \n\n### 示例输入\n\n```\n//第一个输入为有几个点，其下输入为点的坐标\n3\n\n1 1\n\n3 4\n\n2 1\n```\n\n### 实现原理\n\n​        本次示例程序使用10000个点来测试分治法的效率，利用分治法求10000个点中的最小点对，首先将一万个点按照x的大小从小到大排序，若x相同，则按照y的大小排序，得到有序排列的一万个点，再取数组中间值的元素将一万个点分为s1和s2两部分，先分别求出s1和s2两部分的最小点对取其最小值，再与跨越s1和s2的点对距离进行对比，这里有筛选条件为当奋力在s1和s2两边的点如果x轴或者y轴到中间点的距离必须小于或等于s1与s2两部分点的最小值，即形成一个矩形内取点，通过不断递归得到最小点对。设置全局变量记录最小点对的坐标即可，经测试可以在1s内得到最小点对。  \n\n### 示例结果\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/6.png)\n\n### 完整代码实现\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n#include <sys/time.h>\n\n#define INF 99999\n#define N 10000\n\nint m,t;\nint temp[N];//储存宽度为d的点\n\nstruct node {\n    double x;\n    double y;\n}point[N];\n\nint compar(const void* a, const void* b)//用来比较两个元素的函数，即函数指针（回调函数）\n{\n    struct node A = *(struct node*)a;\n    struct node B = *(struct node*)b;\n    if (A.x != B.x)\n        return A.x - B.x;//按照x从小到大的顺序排序\n    else return A.y - B.y;//当x相等的时候，按照y的从大到小的顺序排序\n}\n\ndouble Min_distance(double left, double right)//返回距离的大小关系\n{\n    return left < right ? left : right;\n}\n\ndouble distance(int left, int right)//计算两点距离的函数\n{\n    return sqrt((point[left].x - point[right].x) * (point[left].x - point[right].x) + ((point[left].y - point[right].y) * (point[left].y - point[right].y)));\n}\n\ndouble Closest_Pair(int left, int right)\n{\n    double End_dis = INF;//距离的初始值,无穷大\n    int i = 0, j = 0, k = 0;\n\n    if (left == right)//只有一个点的时候，返回无穷大\n        return End_dis;\n\n    if (right - left == 1)// 刚好两个点的时候，返回两点的距离\n        return distance(left, right);\n\n    int mid = (left + right) / 2;//大于或等于三个点的时候\n\n    double distance_left = Closest_Pair(left, mid);//左边递归\n    double distancer_ight = Closest_Pair(mid + 1, right);//右边递归\n\n    End_dis = Min_distance(distance_left, distancer_ight);//比较左右两边点对距离，找出其中的最小值\n\n\n    for (i = left; i <= right; i++)//找出符合要求的距离mid横坐标小于等于d的点\n    {\n        if (fabs(point[mid].x - point[i].x) <= End_dis)\n            temp[k++] = i;//temp用于储存符合要求的点的序号\n    }\n    for (i = 0; i <= k - 1; i++)//通过纵坐标寻找最短距离\n        for (j = i + 1; j <= k - 1 && j < i + 7; j++)\n            if (fabs(point[temp[j]].y - point[temp[i]].y) < End_dis)\n            {\n                if(End_dis>=distance(temp[i], temp[j]))\n                {\n                    m=temp[i];\n                    t=temp[j];\n                }\n                else m = left,t = right;\n                End_dis = Min_distance(End_dis, distance(temp[i], temp[j]));\n            }\n    return End_dis;\n}\n\nint main()\n{\n    struct timeval start, end;\n    int n;\n    scanf(\"%d\",&n);\n    double a;\n    for (int i = 0; i < n; i++)\n            scanf(\"%lf %lf\", &point[i].x, &point[i].y);\n        gettimeofday(&start, NULL);\n        qsort(point, n, sizeof(point[0]), compar);\n        a = Closest_Pair(0, n - 1);\n        gettimeofday(&end, NULL);\n        printf(\"the shortest distance is:%.10lf\\n\", a);\n        printf(\"the co-ordinates of the pair of points is:\\n%.10lf %.10lf\\n\",point[m].x,point[m].y);\n        printf(\"%.10lf %.10lf\\n\",point[t].x,point[t].y);\n        long elapsed = (end.tv_sec - start.tv_sec)*1000000.0 + end.tv_usec - start.tv_usec;\n        printf(\"%.ld ms elapsed\\n\", elapsed);\n    return 0;\n}\n\n```\n\n","source":"_posts/points.md","raw":"---\ntitle: Points\ntags: [数据结构,分治法]\ncategories: [数据结构]\ndate: 2021-12-12 21:40:00\nexcerpt: 分治法、算法\n---\n\n### 题目描述\n\n ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/7.png)  \n\n### 示例输入\n\n```\n//第一个输入为有几个点，其下输入为点的坐标\n3\n\n1 1\n\n3 4\n\n2 1\n```\n\n### 实现原理\n\n​        本次示例程序使用10000个点来测试分治法的效率，利用分治法求10000个点中的最小点对，首先将一万个点按照x的大小从小到大排序，若x相同，则按照y的大小排序，得到有序排列的一万个点，再取数组中间值的元素将一万个点分为s1和s2两部分，先分别求出s1和s2两部分的最小点对取其最小值，再与跨越s1和s2的点对距离进行对比，这里有筛选条件为当奋力在s1和s2两边的点如果x轴或者y轴到中间点的距离必须小于或等于s1与s2两部分点的最小值，即形成一个矩形内取点，通过不断递归得到最小点对。设置全局变量记录最小点对的坐标即可，经测试可以在1s内得到最小点对。  \n\n### 示例结果\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/6.png)\n\n### 完整代码实现\n\n```c\n#include<stdio.h>\n#include<stdlib.h>\n#include<math.h>\n#include <sys/time.h>\n\n#define INF 99999\n#define N 10000\n\nint m,t;\nint temp[N];//储存宽度为d的点\n\nstruct node {\n    double x;\n    double y;\n}point[N];\n\nint compar(const void* a, const void* b)//用来比较两个元素的函数，即函数指针（回调函数）\n{\n    struct node A = *(struct node*)a;\n    struct node B = *(struct node*)b;\n    if (A.x != B.x)\n        return A.x - B.x;//按照x从小到大的顺序排序\n    else return A.y - B.y;//当x相等的时候，按照y的从大到小的顺序排序\n}\n\ndouble Min_distance(double left, double right)//返回距离的大小关系\n{\n    return left < right ? left : right;\n}\n\ndouble distance(int left, int right)//计算两点距离的函数\n{\n    return sqrt((point[left].x - point[right].x) * (point[left].x - point[right].x) + ((point[left].y - point[right].y) * (point[left].y - point[right].y)));\n}\n\ndouble Closest_Pair(int left, int right)\n{\n    double End_dis = INF;//距离的初始值,无穷大\n    int i = 0, j = 0, k = 0;\n\n    if (left == right)//只有一个点的时候，返回无穷大\n        return End_dis;\n\n    if (right - left == 1)// 刚好两个点的时候，返回两点的距离\n        return distance(left, right);\n\n    int mid = (left + right) / 2;//大于或等于三个点的时候\n\n    double distance_left = Closest_Pair(left, mid);//左边递归\n    double distancer_ight = Closest_Pair(mid + 1, right);//右边递归\n\n    End_dis = Min_distance(distance_left, distancer_ight);//比较左右两边点对距离，找出其中的最小值\n\n\n    for (i = left; i <= right; i++)//找出符合要求的距离mid横坐标小于等于d的点\n    {\n        if (fabs(point[mid].x - point[i].x) <= End_dis)\n            temp[k++] = i;//temp用于储存符合要求的点的序号\n    }\n    for (i = 0; i <= k - 1; i++)//通过纵坐标寻找最短距离\n        for (j = i + 1; j <= k - 1 && j < i + 7; j++)\n            if (fabs(point[temp[j]].y - point[temp[i]].y) < End_dis)\n            {\n                if(End_dis>=distance(temp[i], temp[j]))\n                {\n                    m=temp[i];\n                    t=temp[j];\n                }\n                else m = left,t = right;\n                End_dis = Min_distance(End_dis, distance(temp[i], temp[j]));\n            }\n    return End_dis;\n}\n\nint main()\n{\n    struct timeval start, end;\n    int n;\n    scanf(\"%d\",&n);\n    double a;\n    for (int i = 0; i < n; i++)\n            scanf(\"%lf %lf\", &point[i].x, &point[i].y);\n        gettimeofday(&start, NULL);\n        qsort(point, n, sizeof(point[0]), compar);\n        a = Closest_Pair(0, n - 1);\n        gettimeofday(&end, NULL);\n        printf(\"the shortest distance is:%.10lf\\n\", a);\n        printf(\"the co-ordinates of the pair of points is:\\n%.10lf %.10lf\\n\",point[m].x,point[m].y);\n        printf(\"%.10lf %.10lf\\n\",point[t].x,point[t].y);\n        long elapsed = (end.tv_sec - start.tv_sec)*1000000.0 + end.tv_usec - start.tv_usec;\n        printf(\"%.ld ms elapsed\\n\", elapsed);\n    return 0;\n}\n\n```\n\n","slug":"points","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7up000xlsvsbiwgf2if","content":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/7.png\" alt=\" \" /></p>\n<h3 id=\"示例输入\"><a class=\"markdownIt-Anchor\" href=\"#示例输入\"></a> 示例输入</h3>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>第一个输入为有几个点，其下输入为点的坐标<br><span class=\"hljs-number\">3</span><br><br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span><br><br><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\"></a> 实现原理</h3>\n<p>​        本次示例程序使用10000个点来测试分治法的效率，利用分治法求10000个点中的最小点对，首先将一万个点按照x的大小从小到大排序，若x相同，则按照y的大小排序，得到有序排列的一万个点，再取数组中间值的元素将一万个点分为s1和s2两部分，先分别求出s1和s2两部分的最小点对取其最小值，再与跨越s1和s2的点对距离进行对比，这里有筛选条件为当奋力在s1和s2两边的点如果x轴或者y轴到中间点的距离必须小于或等于s1与s2两部分点的最小值，即形成一个矩形内取点，通过不断递归得到最小点对。设置全局变量记录最小点对的坐标即可，经测试可以在1s内得到最小点对。</p>\n<h3 id=\"示例结果\"><a class=\"markdownIt-Anchor\" href=\"#示例结果\"></a> 示例结果</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/6.png\" alt=\" \" /></p>\n<h3 id=\"完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现\"></a> 完整代码实现</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/time.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INF 99999</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> N 10000</span><br><br><span class=\"hljs-type\">int</span> m,t;<br><span class=\"hljs-type\">int</span> temp[N];<span class=\"hljs-comment\">//储存宽度为d的点</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> &#123;</span><br>    <span class=\"hljs-type\">double</span> x;<br>    <span class=\"hljs-type\">double</span> y;<br>&#125;point[N];<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>* a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>* b)</span><span class=\"hljs-comment\">//用来比较两个元素的函数，即函数指针（回调函数）</span><br>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> <span class=\"hljs-title\">A</span> =</span> *(<span class=\"hljs-keyword\">struct</span> node*)a;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> <span class=\"hljs-title\">B</span> =</span> *(<span class=\"hljs-keyword\">struct</span> node*)b;<br>    <span class=\"hljs-keyword\">if</span> (A.x != B.x)<br>        <span class=\"hljs-keyword\">return</span> A.x - B.x;<span class=\"hljs-comment\">//按照x从小到大的顺序排序</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> A.y - B.y;<span class=\"hljs-comment\">//当x相等的时候，按照y的从大到小的顺序排序</span><br>&#125;<br><br><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">Min_distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> left, <span class=\"hljs-type\">double</span> right)</span><span class=\"hljs-comment\">//返回距离的大小关系</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> left &lt; right ? left : right;<br>&#125;<br><br><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span><span class=\"hljs-comment\">//计算两点距离的函数</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sqrt</span>((point[left].x - point[right].x) * (point[left].x - point[right].x) + ((point[left].y - point[right].y) * (point[left].y - point[right].y)));<br>&#125;<br><br><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">Closest_Pair</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span><br>&#123;<br>    <span class=\"hljs-type\">double</span> End_dis = INF;<span class=\"hljs-comment\">//距离的初始值,无穷大</span><br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">if</span> (left == right)<span class=\"hljs-comment\">//只有一个点的时候，返回无穷大</span><br>        <span class=\"hljs-keyword\">return</span> End_dis;<br><br>    <span class=\"hljs-keyword\">if</span> (right - left == <span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">// 刚好两个点的时候，返回两点的距离</span><br>        <span class=\"hljs-keyword\">return</span> distance(left, right);<br><br>    <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//大于或等于三个点的时候</span><br><br>    <span class=\"hljs-type\">double</span> distance_left = Closest_Pair(left, mid);<span class=\"hljs-comment\">//左边递归</span><br>    <span class=\"hljs-type\">double</span> distancer_ight = Closest_Pair(mid + <span class=\"hljs-number\">1</span>, right);<span class=\"hljs-comment\">//右边递归</span><br><br>    End_dis = Min_distance(distance_left, distancer_ight);<span class=\"hljs-comment\">//比较左右两边点对距离，找出其中的最小值</span><br><br><br>    <span class=\"hljs-keyword\">for</span> (i = left; i &lt;= right; i++)<span class=\"hljs-comment\">//找出符合要求的距离mid横坐标小于等于d的点</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span>(point[mid].x - point[i].x) &lt;= End_dis)<br>            temp[k++] = i;<span class=\"hljs-comment\">//temp用于储存符合要求的点的序号</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= k - <span class=\"hljs-number\">1</span>; i++)<span class=\"hljs-comment\">//通过纵坐标寻找最短距离</span><br>        <span class=\"hljs-keyword\">for</span> (j = i + <span class=\"hljs-number\">1</span>; j &lt;= k - <span class=\"hljs-number\">1</span> &amp;&amp; j &lt; i + <span class=\"hljs-number\">7</span>; j++)<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span>(point[temp[j]].y - point[temp[i]].y) &lt; End_dis)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(End_dis&gt;=distance(temp[i], temp[j]))<br>                &#123;<br>                    m=temp[i];<br>                    t=temp[j];<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> m = left,t = right;<br>                End_dis = Min_distance(End_dis, distance(temp[i], temp[j]));<br>            &#125;<br>    <span class=\"hljs-keyword\">return</span> End_dis;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">start</span>, <span class=\"hljs-title\">end</span>;</span><br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-type\">double</span> a;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lf %lf&quot;</span>, &amp;point[i].x, &amp;point[i].y);<br>        gettimeofday(&amp;start, <span class=\"hljs-literal\">NULL</span>);<br>        qsort(point, n, <span class=\"hljs-keyword\">sizeof</span>(point[<span class=\"hljs-number\">0</span>]), compar);<br>        a = Closest_Pair(<span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);<br>        gettimeofday(&amp;end, <span class=\"hljs-literal\">NULL</span>);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the shortest distance is:%.10lf\\n&quot;</span>, a);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the co-ordinates of the pair of points is:\\n%.10lf %.10lf\\n&quot;</span>,point[m].x,point[m].y);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.10lf %.10lf\\n&quot;</span>,point[t].x,point[t].y);<br>        <span class=\"hljs-type\">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class=\"hljs-number\">1000000.0</span> + end.tv_usec - start.tv_usec;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.ld ms elapsed\\n&quot;</span>, elapsed);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h3 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/7.png\" alt=\" \" /></p>\n<h3 id=\"示例输入\"><a class=\"markdownIt-Anchor\" href=\"#示例输入\"></a> 示例输入</h3>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-regexp\">//</span>第一个输入为有几个点，其下输入为点的坐标<br><span class=\"hljs-number\">3</span><br><br><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">1</span><br><br><span class=\"hljs-number\">3</span> <span class=\"hljs-number\">4</span><br><br><span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"实现原理\"><a class=\"markdownIt-Anchor\" href=\"#实现原理\"></a> 实现原理</h3>\n<p>​        本次示例程序使用10000个点来测试分治法的效率，利用分治法求10000个点中的最小点对，首先将一万个点按照x的大小从小到大排序，若x相同，则按照y的大小排序，得到有序排列的一万个点，再取数组中间值的元素将一万个点分为s1和s2两部分，先分别求出s1和s2两部分的最小点对取其最小值，再与跨越s1和s2的点对距离进行对比，这里有筛选条件为当奋力在s1和s2两边的点如果x轴或者y轴到中间点的距离必须小于或等于s1与s2两部分点的最小值，即形成一个矩形内取点，通过不断递归得到最小点对。设置全局变量记录最小点对的坐标即可，经测试可以在1s内得到最小点对。</p>\n<h3 id=\"示例结果\"><a class=\"markdownIt-Anchor\" href=\"#示例结果\"></a> 示例结果</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/6.png\" alt=\" \" /></p>\n<h3 id=\"完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现\"></a> 完整代码实现</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span><span class=\"hljs-string\">&lt;math.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/time.h&gt;</span></span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> INF 99999</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> N 10000</span><br><br><span class=\"hljs-type\">int</span> m,t;<br><span class=\"hljs-type\">int</span> temp[N];<span class=\"hljs-comment\">//储存宽度为d的点</span><br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> &#123;</span><br>    <span class=\"hljs-type\">double</span> x;<br>    <span class=\"hljs-type\">double</span> y;<br>&#125;point[N];<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compar</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>* a, <span class=\"hljs-type\">const</span> <span class=\"hljs-type\">void</span>* b)</span><span class=\"hljs-comment\">//用来比较两个元素的函数，即函数指针（回调函数）</span><br>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> <span class=\"hljs-title\">A</span> =</span> *(<span class=\"hljs-keyword\">struct</span> node*)a;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">node</span> <span class=\"hljs-title\">B</span> =</span> *(<span class=\"hljs-keyword\">struct</span> node*)b;<br>    <span class=\"hljs-keyword\">if</span> (A.x != B.x)<br>        <span class=\"hljs-keyword\">return</span> A.x - B.x;<span class=\"hljs-comment\">//按照x从小到大的顺序排序</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> A.y - B.y;<span class=\"hljs-comment\">//当x相等的时候，按照y的从大到小的顺序排序</span><br>&#125;<br><br><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">Min_distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> left, <span class=\"hljs-type\">double</span> right)</span><span class=\"hljs-comment\">//返回距离的大小关系</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> left &lt; right ? left : right;<br>&#125;<br><br><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">distance</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span><span class=\"hljs-comment\">//计算两点距离的函数</span><br>&#123;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">sqrt</span>((point[left].x - point[right].x) * (point[left].x - point[right].x) + ((point[left].y - point[right].y) * (point[left].y - point[right].y)));<br>&#125;<br><br><span class=\"hljs-type\">double</span> <span class=\"hljs-title function_\">Closest_Pair</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> left, <span class=\"hljs-type\">int</span> right)</span><br>&#123;<br>    <span class=\"hljs-type\">double</span> End_dis = INF;<span class=\"hljs-comment\">//距离的初始值,无穷大</span><br>    <span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>, k = <span class=\"hljs-number\">0</span>;<br><br>    <span class=\"hljs-keyword\">if</span> (left == right)<span class=\"hljs-comment\">//只有一个点的时候，返回无穷大</span><br>        <span class=\"hljs-keyword\">return</span> End_dis;<br><br>    <span class=\"hljs-keyword\">if</span> (right - left == <span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">// 刚好两个点的时候，返回两点的距离</span><br>        <span class=\"hljs-keyword\">return</span> distance(left, right);<br><br>    <span class=\"hljs-type\">int</span> mid = (left + right) / <span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">//大于或等于三个点的时候</span><br><br>    <span class=\"hljs-type\">double</span> distance_left = Closest_Pair(left, mid);<span class=\"hljs-comment\">//左边递归</span><br>    <span class=\"hljs-type\">double</span> distancer_ight = Closest_Pair(mid + <span class=\"hljs-number\">1</span>, right);<span class=\"hljs-comment\">//右边递归</span><br><br>    End_dis = Min_distance(distance_left, distancer_ight);<span class=\"hljs-comment\">//比较左右两边点对距离，找出其中的最小值</span><br><br><br>    <span class=\"hljs-keyword\">for</span> (i = left; i &lt;= right; i++)<span class=\"hljs-comment\">//找出符合要求的距离mid横坐标小于等于d的点</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span>(point[mid].x - point[i].x) &lt;= End_dis)<br>            temp[k++] = i;<span class=\"hljs-comment\">//temp用于储存符合要求的点的序号</span><br>    &#125;<br>    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt;= k - <span class=\"hljs-number\">1</span>; i++)<span class=\"hljs-comment\">//通过纵坐标寻找最短距离</span><br>        <span class=\"hljs-keyword\">for</span> (j = i + <span class=\"hljs-number\">1</span>; j &lt;= k - <span class=\"hljs-number\">1</span> &amp;&amp; j &lt; i + <span class=\"hljs-number\">7</span>; j++)<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">fabs</span>(point[temp[j]].y - point[temp[i]].y) &lt; End_dis)<br>            &#123;<br>                <span class=\"hljs-keyword\">if</span>(End_dis&gt;=distance(temp[i], temp[j]))<br>                &#123;<br>                    m=temp[i];<br>                    t=temp[j];<br>                &#125;<br>                <span class=\"hljs-keyword\">else</span> m = left,t = right;<br>                End_dis = Min_distance(End_dis, distance(temp[i], temp[j]));<br>            &#125;<br>    <span class=\"hljs-keyword\">return</span> End_dis;<br>&#125;<br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">start</span>, <span class=\"hljs-title\">end</span>;</span><br>    <span class=\"hljs-type\">int</span> n;<br>    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%d&quot;</span>,&amp;n);<br>    <span class=\"hljs-type\">double</span> a;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)<br>            <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">&quot;%lf %lf&quot;</span>, &amp;point[i].x, &amp;point[i].y);<br>        gettimeofday(&amp;start, <span class=\"hljs-literal\">NULL</span>);<br>        qsort(point, n, <span class=\"hljs-keyword\">sizeof</span>(point[<span class=\"hljs-number\">0</span>]), compar);<br>        a = Closest_Pair(<span class=\"hljs-number\">0</span>, n - <span class=\"hljs-number\">1</span>);<br>        gettimeofday(&amp;end, <span class=\"hljs-literal\">NULL</span>);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the shortest distance is:%.10lf\\n&quot;</span>, a);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the co-ordinates of the pair of points is:\\n%.10lf %.10lf\\n&quot;</span>,point[m].x,point[m].y);<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.10lf %.10lf\\n&quot;</span>,point[t].x,point[t].y);<br>        <span class=\"hljs-type\">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class=\"hljs-number\">1000000.0</span> + end.tv_usec - start.tv_usec;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.ld ms elapsed\\n&quot;</span>, elapsed);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n"},{"title":"信号的采样与重建","date":"2022-09-21T16:20:00.000Z","excerpt":"数字信号处理、算法","_content":"#  **信号的采样与重建** \n\n## 第一问   \n\n### 要求\n\n ①固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；        \n\n### 程序设计\n\n```matlab\nclear\n%参数设定\nf1 = 100000;%信号频率\nfs = 500000;%采样频率\ndt = 1/fs; % 采样间隔，采样间隔可以理解为采样信号的周期，周期 = 1/频率\nTf = 1/f1; %  一个信号周期的时间\n\n%可得参数\nt = linspace(0,20*Tf,1000*20); % 原信号每个周期内的点数为1000个点\nf_ori = cos(2 * pi * f1 * t) ;\n%figure(1);\nsubplot(221);\nplot(t, f_ori);title(strcat(num2str(f1/1000),'kHz原始信号'));xlabel('t/s');\n\n%采样\nt2  = 0:dt:t(end); % 整个信号时间范围内采样\nf_sam =  cos(2 * pi * f1 * t2) ;\n%figure(2);\nsubplot(222);\nstem(t2, f_sam,'.');title('采样信号(500kHz采样率)');xlabel('t/s');\n\n%fft变换\nf_true=t2*fs/length(t2);\nk=fft(f_sam,length(t2));\n%figure(3);\nsubplot(223);\nstem(f_true*fs/1e3,abs(k),'.');title('采样信号傅里叶变换');xlabel('kHz');\n\n%恢复\ny = [];\nfor i = 1 : length(t)\n    x = t(i);\n    h = sinc((x - t2).*fs);\n    g = dot(f_sam, h);%向量相乘\n    y = [y,g];\nend\nsubplot(224);\n%figure(4);\nplot(t, y);title('恢复信号');xlabel('t/s');\n```\n\n### 实验结果\n\n* 100kHz原始信号\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/100k_1.png)\n\n* 250kHz原始信号\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/250k_1.png)\n\n* 400kHz原始信号\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/400k_1.png)\n\n### 分析总结\n\n* 从上述图像中可以看出，当固定采样频率500kHz时，对于100kHz的信号采样并进行傅里叶变换后可以看出幅频特性较为准确，因为满足奈奎斯特采样定律，采样频率大于原始信号频率的两倍以上，处于过采样状态。当使用上述采样率采集250kHz的信号时出现了幅值一定的失真，此时处于临界采样状态。当使用上述采样率采集400kHz的信号时出现了幅值和频率的失真，此时处于欠采样状态。\n* 上述程序设计中使用`dot`函数，具有一定创新性。\n\n## 第二问   \n\n### 要求\n\n ②采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。 \n\n### 程序设计\n\n```matlab\nclear\n%声音信号的采样\n[x,Fs] = audioread('oba.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx = resample(x,13000,Fs) ; %重新采样\nx=x.';\nFs=13000;\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\n%figure(1);\nsubplot(321);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\n%figure(2);\nsubplot(322);\nplot(f_true*Fs/1e3,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%对原始信号进行采样\nfs=Fs/2; %新的采样率\ny = resample(x,fs,Fs) ; %从x中第一个元素开始采样(奇采样)\nn_sam=length(y);%获取y的采样点数\ndt_sam=1/fs;%求采样间隔\ntime_sam=(0:n_sam-1)*dt_sam;%新的采样时间点\n%figure(3);\nsubplot(323);\nplot(time_sam,y);\ntitle('过采样信号时域波形')\nxlabel('时间/s');\n\n%采样信号fft变换\nf_true_sam=time_sam*Fs/length(time_sam);\nk=fft(y,length(time_sam));\n%figure(4);\nsubplot(324);\nplot(f_true_sam*fs/1e3,abs(k));title('过采样信号傅里叶变换');xlabel('kHz');\n\n%重建信号\nz = [];\nfor i = 1 : length(x)\n    m = time(i);\n    h = sinc((m - time_sam).*fs);\n    g=0;\n    for j = 1:1:length(y)\n        s=y(j)*h(j);\n        g=g+s;\n    end\n    %g = dot(y, h);%向量相乘\n    z = [z,g];\nend\n%figure(5);\nsubplot(325);\nplot(time, z);title('重建声音信号');xlabel('t/s');\n\n%重建信号fft变换\nf_true=time*Fs/length(time);\nk=fft(z,length(time));\n%figure(6);\nsubplot(326);\nplot(f_true*Fs/1e3,abs(k));title('重建声音信号傅里叶变换');xlabel('kHz');\n\n%试听和写入信号\n sound(z,Fs);\n audiowrite('over_sampling.wav',z,Fs);\n```\n\n### 实验结果\n\n* 临界采样\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/critical_sampling.png)\n\n* 欠采样\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/under_sampling.png)\n\n* 过采样\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/over_sampling.png)\n\n### 分析总结\n\n* 首先对音频信号进行快速傅里叶变换和查阅人类发出声音的频率范围确定最高频率，此处取6.5kHz采样率作为临界采样率，由此可以得知低于6.5kHz采样率为欠采样，高于6.5kHz采样率为过采样。\n* 按照上述分析理论进行设计并测试，对比其傅里叶变换频谱图看出符合上述理论，对比试听恢复的声音信号（见附件），可以听到临界采样恢复的声音信号和过采样恢复的声音信号与原信号差别不大，而欠采样的信号与原信号相比有较大失真，与奈奎斯特采样定理的理论相符合。","source":"_posts/signal_1.md","raw":"---\ntitle: 信号的采样与重建\ntags: [数字信号处理,算法]\ncategories: [数字信号处理]\ndate: 2022-9-22 0:20:00\nexcerpt: 数字信号处理、算法\n---\n#  **信号的采样与重建** \n\n## 第一问   \n\n### 要求\n\n ①固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；        \n\n### 程序设计\n\n```matlab\nclear\n%参数设定\nf1 = 100000;%信号频率\nfs = 500000;%采样频率\ndt = 1/fs; % 采样间隔，采样间隔可以理解为采样信号的周期，周期 = 1/频率\nTf = 1/f1; %  一个信号周期的时间\n\n%可得参数\nt = linspace(0,20*Tf,1000*20); % 原信号每个周期内的点数为1000个点\nf_ori = cos(2 * pi * f1 * t) ;\n%figure(1);\nsubplot(221);\nplot(t, f_ori);title(strcat(num2str(f1/1000),'kHz原始信号'));xlabel('t/s');\n\n%采样\nt2  = 0:dt:t(end); % 整个信号时间范围内采样\nf_sam =  cos(2 * pi * f1 * t2) ;\n%figure(2);\nsubplot(222);\nstem(t2, f_sam,'.');title('采样信号(500kHz采样率)');xlabel('t/s');\n\n%fft变换\nf_true=t2*fs/length(t2);\nk=fft(f_sam,length(t2));\n%figure(3);\nsubplot(223);\nstem(f_true*fs/1e3,abs(k),'.');title('采样信号傅里叶变换');xlabel('kHz');\n\n%恢复\ny = [];\nfor i = 1 : length(t)\n    x = t(i);\n    h = sinc((x - t2).*fs);\n    g = dot(f_sam, h);%向量相乘\n    y = [y,g];\nend\nsubplot(224);\n%figure(4);\nplot(t, y);title('恢复信号');xlabel('t/s');\n```\n\n### 实验结果\n\n* 100kHz原始信号\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/100k_1.png)\n\n* 250kHz原始信号\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/250k_1.png)\n\n* 400kHz原始信号\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/400k_1.png)\n\n### 分析总结\n\n* 从上述图像中可以看出，当固定采样频率500kHz时，对于100kHz的信号采样并进行傅里叶变换后可以看出幅频特性较为准确，因为满足奈奎斯特采样定律，采样频率大于原始信号频率的两倍以上，处于过采样状态。当使用上述采样率采集250kHz的信号时出现了幅值一定的失真，此时处于临界采样状态。当使用上述采样率采集400kHz的信号时出现了幅值和频率的失真，此时处于欠采样状态。\n* 上述程序设计中使用`dot`函数，具有一定创新性。\n\n## 第二问   \n\n### 要求\n\n ②采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。 \n\n### 程序设计\n\n```matlab\nclear\n%声音信号的采样\n[x,Fs] = audioread('oba.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx = resample(x,13000,Fs) ; %重新采样\nx=x.';\nFs=13000;\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\n%figure(1);\nsubplot(321);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\n%figure(2);\nsubplot(322);\nplot(f_true*Fs/1e3,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%对原始信号进行采样\nfs=Fs/2; %新的采样率\ny = resample(x,fs,Fs) ; %从x中第一个元素开始采样(奇采样)\nn_sam=length(y);%获取y的采样点数\ndt_sam=1/fs;%求采样间隔\ntime_sam=(0:n_sam-1)*dt_sam;%新的采样时间点\n%figure(3);\nsubplot(323);\nplot(time_sam,y);\ntitle('过采样信号时域波形')\nxlabel('时间/s');\n\n%采样信号fft变换\nf_true_sam=time_sam*Fs/length(time_sam);\nk=fft(y,length(time_sam));\n%figure(4);\nsubplot(324);\nplot(f_true_sam*fs/1e3,abs(k));title('过采样信号傅里叶变换');xlabel('kHz');\n\n%重建信号\nz = [];\nfor i = 1 : length(x)\n    m = time(i);\n    h = sinc((m - time_sam).*fs);\n    g=0;\n    for j = 1:1:length(y)\n        s=y(j)*h(j);\n        g=g+s;\n    end\n    %g = dot(y, h);%向量相乘\n    z = [z,g];\nend\n%figure(5);\nsubplot(325);\nplot(time, z);title('重建声音信号');xlabel('t/s');\n\n%重建信号fft变换\nf_true=time*Fs/length(time);\nk=fft(z,length(time));\n%figure(6);\nsubplot(326);\nplot(f_true*Fs/1e3,abs(k));title('重建声音信号傅里叶变换');xlabel('kHz');\n\n%试听和写入信号\n sound(z,Fs);\n audiowrite('over_sampling.wav',z,Fs);\n```\n\n### 实验结果\n\n* 临界采样\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/critical_sampling.png)\n\n* 欠采样\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/under_sampling.png)\n\n* 过采样\n\n  ![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/over_sampling.png)\n\n### 分析总结\n\n* 首先对音频信号进行快速傅里叶变换和查阅人类发出声音的频率范围确定最高频率，此处取6.5kHz采样率作为临界采样率，由此可以得知低于6.5kHz采样率为欠采样，高于6.5kHz采样率为过采样。\n* 按照上述分析理论进行设计并测试，对比其傅里叶变换频谱图看出符合上述理论，对比试听恢复的声音信号（见附件），可以听到临界采样恢复的声音信号和过采样恢复的声音信号与原信号差别不大，而欠采样的信号与原信号相比有较大失真，与奈奎斯特采样定理的理论相符合。","slug":"signal_1","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7uq0010lsvs0lvg967q","content":"<h1 id=\"信号的采样与重建\"><a class=\"markdownIt-Anchor\" href=\"#信号的采样与重建\"></a> <strong>信号的采样与重建</strong></h1>\n<h2 id=\"第一问\"><a class=\"markdownIt-Anchor\" href=\"#第一问\"></a> 第一问</h2>\n<h3 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h3>\n<p>①固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p>\n<h3 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h3>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear<br><span class=\"hljs-comment\">%参数设定</span><br>f1 = <span class=\"hljs-number\">100000</span>;<span class=\"hljs-comment\">%信号频率</span><br>fs = <span class=\"hljs-number\">500000</span>;<span class=\"hljs-comment\">%采样频率</span><br>dt = <span class=\"hljs-number\">1</span>/fs; <span class=\"hljs-comment\">% 采样间隔，采样间隔可以理解为采样信号的周期，周期 = 1/频率</span><br>Tf = <span class=\"hljs-number\">1</span>/f1; <span class=\"hljs-comment\">%  一个信号周期的时间</span><br><br><span class=\"hljs-comment\">%可得参数</span><br>t = <span class=\"hljs-built_in\">linspace</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">20</span>*Tf,<span class=\"hljs-number\">1000</span>*<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">% 原信号每个周期内的点数为1000个点</span><br>f_ori = <span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">pi</span> * f1 * t) ;<br><span class=\"hljs-comment\">%figure(1);</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(t, f_ori);title(strcat(num2str(f1/<span class=\"hljs-number\">1000</span>),<span class=\"hljs-string\">&#x27;kHz原始信号&#x27;</span>));xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%采样</span><br>t2  = <span class=\"hljs-number\">0</span>:dt:t(<span class=\"hljs-keyword\">end</span>); <span class=\"hljs-comment\">% 整个信号时间范围内采样</span><br>f_sam =  <span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">pi</span> * f1 * t2) ;<br><span class=\"hljs-comment\">%figure(2);</span><br>subplot(<span class=\"hljs-number\">222</span>);<br>stem(t2, f_sam,<span class=\"hljs-string\">&#x27;.&#x27;</span>);title(<span class=\"hljs-string\">&#x27;采样信号(500kHz采样率)&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=t2*fs/<span class=\"hljs-built_in\">length</span>(t2);<br>k=fft(f_sam,<span class=\"hljs-built_in\">length</span>(t2));<br><span class=\"hljs-comment\">%figure(3);</span><br>subplot(<span class=\"hljs-number\">223</span>);<br>stem(f_<span class=\"hljs-built_in\">true</span>*fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k),<span class=\"hljs-string\">&#x27;.&#x27;</span>);title(<span class=\"hljs-string\">&#x27;采样信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%恢复</span><br>y = [];<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>    x = t(<span class=\"hljs-built_in\">i</span>);<br>    h = sinc((x - t2).*fs);<br>    g = <span class=\"hljs-built_in\">dot</span>(f_sam, h);<span class=\"hljs-comment\">%向量相乘</span><br>    y = [y,g];<br><span class=\"hljs-keyword\">end</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-comment\">%figure(4);</span><br><span class=\"hljs-built_in\">plot</span>(t, y);title(<span class=\"hljs-string\">&#x27;恢复信号&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h3 id=\"实验结果\"><a class=\"markdownIt-Anchor\" href=\"#实验结果\"></a> 实验结果</h3>\n<ul>\n<li>\n<p>100kHz原始信号</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/100k_1.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>250kHz原始信号</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/250k_1.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>400kHz原始信号</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/400k_1.png\" alt=\" \" /></p>\n</li>\n</ul>\n<h3 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h3>\n<ul>\n<li>从上述图像中可以看出，当固定采样频率500kHz时，对于100kHz的信号采样并进行傅里叶变换后可以看出幅频特性较为准确，因为满足奈奎斯特采样定律，采样频率大于原始信号频率的两倍以上，处于过采样状态。当使用上述采样率采集250kHz的信号时出现了幅值一定的失真，此时处于临界采样状态。当使用上述采样率采集400kHz的信号时出现了幅值和频率的失真，此时处于欠采样状态。</li>\n<li>上述程序设计中使用<code>dot</code>函数，具有一定创新性。</li>\n</ul>\n<h2 id=\"第二问\"><a class=\"markdownIt-Anchor\" href=\"#第二问\"></a> 第二问</h2>\n<h3 id=\"要求-2\"><a class=\"markdownIt-Anchor\" href=\"#要求-2\"></a> 要求</h3>\n<p>②采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p>\n<h3 id=\"程序设计-2\"><a class=\"markdownIt-Anchor\" href=\"#程序设计-2\"></a> 程序设计</h3>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear<br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;oba.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x = resample(x,<span class=\"hljs-number\">13000</span>,Fs) ; <span class=\"hljs-comment\">%重新采样</span><br>x=x.&#x27;;<br>Fs=<span class=\"hljs-number\">13000</span>;<br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br><span class=\"hljs-comment\">%figure(1);</span><br>subplot(<span class=\"hljs-number\">321</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br><span class=\"hljs-comment\">%figure(2);</span><br>subplot(<span class=\"hljs-number\">322</span>);<br><span class=\"hljs-built_in\">plot</span>(f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%对原始信号进行采样</span><br>fs=Fs/<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">%新的采样率</span><br>y = resample(x,fs,Fs) ; <span class=\"hljs-comment\">%从x中第一个元素开始采样(奇采样)</span><br>n_sam=<span class=\"hljs-built_in\">length</span>(y);<span class=\"hljs-comment\">%获取y的采样点数</span><br>dt_sam=<span class=\"hljs-number\">1</span>/fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time_sam=(<span class=\"hljs-number\">0</span>:n_sam<span class=\"hljs-number\">-1</span>)*dt_sam;<span class=\"hljs-comment\">%新的采样时间点</span><br><span class=\"hljs-comment\">%figure(3);</span><br>subplot(<span class=\"hljs-number\">323</span>);<br><span class=\"hljs-built_in\">plot</span>(time_sam,y);<br>title(<span class=\"hljs-string\">&#x27;过采样信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%采样信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>_sam=time_sam*Fs/<span class=\"hljs-built_in\">length</span>(time_sam);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time_sam));<br><span class=\"hljs-comment\">%figure(4);</span><br>subplot(<span class=\"hljs-number\">324</span>);<br><span class=\"hljs-built_in\">plot</span>(f_<span class=\"hljs-built_in\">true</span>_sam*fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;过采样信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%重建信号</span><br>z = [];<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(x)<br>    m = time(<span class=\"hljs-built_in\">i</span>);<br>    h = sinc((m - time_sam).*fs);<br>    g=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)<br>        s=y(<span class=\"hljs-built_in\">j</span>)*h(<span class=\"hljs-built_in\">j</span>);<br>        g=g+s;<br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-comment\">%g = dot(y, h);%向量相乘</span><br>    z = [z,g];<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%figure(5);</span><br>subplot(<span class=\"hljs-number\">325</span>);<br><span class=\"hljs-built_in\">plot</span>(time, z);title(<span class=\"hljs-string\">&#x27;重建声音信号&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%重建信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(z,<span class=\"hljs-built_in\">length</span>(time));<br><span class=\"hljs-comment\">%figure(6);</span><br>subplot(<span class=\"hljs-number\">326</span>);<br><span class=\"hljs-built_in\">plot</span>(f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;重建声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%试听和写入信号</span><br> sound(z,Fs);<br> audiowrite(<span class=\"hljs-string\">&#x27;over_sampling.wav&#x27;</span>,z,Fs);<br></code></pre></td></tr></table></figure>\n<h3 id=\"实验结果-2\"><a class=\"markdownIt-Anchor\" href=\"#实验结果-2\"></a> 实验结果</h3>\n<ul>\n<li>\n<p>临界采样</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/critical_sampling.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>欠采样</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/under_sampling.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>过采样</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/over_sampling.png\" alt=\" \" /></p>\n</li>\n</ul>\n<h3 id=\"分析总结-2\"><a class=\"markdownIt-Anchor\" href=\"#分析总结-2\"></a> 分析总结</h3>\n<ul>\n<li>首先对音频信号进行快速傅里叶变换和查阅人类发出声音的频率范围确定最高频率，此处取6.5kHz采样率作为临界采样率，由此可以得知低于6.5kHz采样率为欠采样，高于6.5kHz采样率为过采样。</li>\n<li>按照上述分析理论进行设计并测试，对比其傅里叶变换频谱图看出符合上述理论，对比试听恢复的声音信号（见附件），可以听到临界采样恢复的声音信号和过采样恢复的声音信号与原信号差别不大，而欠采样的信号与原信号相比有较大失真，与奈奎斯特采样定理的理论相符合。</li>\n</ul>\n","site":{"data":{}},"more":"<h1 id=\"信号的采样与重建\"><a class=\"markdownIt-Anchor\" href=\"#信号的采样与重建\"></a> <strong>信号的采样与重建</strong></h1>\n<h2 id=\"第一问\"><a class=\"markdownIt-Anchor\" href=\"#第一问\"></a> 第一问</h2>\n<h3 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h3>\n<p>①固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p>\n<h3 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h3>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear<br><span class=\"hljs-comment\">%参数设定</span><br>f1 = <span class=\"hljs-number\">100000</span>;<span class=\"hljs-comment\">%信号频率</span><br>fs = <span class=\"hljs-number\">500000</span>;<span class=\"hljs-comment\">%采样频率</span><br>dt = <span class=\"hljs-number\">1</span>/fs; <span class=\"hljs-comment\">% 采样间隔，采样间隔可以理解为采样信号的周期，周期 = 1/频率</span><br>Tf = <span class=\"hljs-number\">1</span>/f1; <span class=\"hljs-comment\">%  一个信号周期的时间</span><br><br><span class=\"hljs-comment\">%可得参数</span><br>t = <span class=\"hljs-built_in\">linspace</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">20</span>*Tf,<span class=\"hljs-number\">1000</span>*<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">% 原信号每个周期内的点数为1000个点</span><br>f_ori = <span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">pi</span> * f1 * t) ;<br><span class=\"hljs-comment\">%figure(1);</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(t, f_ori);title(strcat(num2str(f1/<span class=\"hljs-number\">1000</span>),<span class=\"hljs-string\">&#x27;kHz原始信号&#x27;</span>));xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%采样</span><br>t2  = <span class=\"hljs-number\">0</span>:dt:t(<span class=\"hljs-keyword\">end</span>); <span class=\"hljs-comment\">% 整个信号时间范围内采样</span><br>f_sam =  <span class=\"hljs-built_in\">cos</span>(<span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">pi</span> * f1 * t2) ;<br><span class=\"hljs-comment\">%figure(2);</span><br>subplot(<span class=\"hljs-number\">222</span>);<br>stem(t2, f_sam,<span class=\"hljs-string\">&#x27;.&#x27;</span>);title(<span class=\"hljs-string\">&#x27;采样信号(500kHz采样率)&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=t2*fs/<span class=\"hljs-built_in\">length</span>(t2);<br>k=fft(f_sam,<span class=\"hljs-built_in\">length</span>(t2));<br><span class=\"hljs-comment\">%figure(3);</span><br>subplot(<span class=\"hljs-number\">223</span>);<br>stem(f_<span class=\"hljs-built_in\">true</span>*fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k),<span class=\"hljs-string\">&#x27;.&#x27;</span>);title(<span class=\"hljs-string\">&#x27;采样信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%恢复</span><br>y = [];<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(t)<br>    x = t(<span class=\"hljs-built_in\">i</span>);<br>    h = sinc((x - t2).*fs);<br>    g = <span class=\"hljs-built_in\">dot</span>(f_sam, h);<span class=\"hljs-comment\">%向量相乘</span><br>    y = [y,g];<br><span class=\"hljs-keyword\">end</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-comment\">%figure(4);</span><br><span class=\"hljs-built_in\">plot</span>(t, y);title(<span class=\"hljs-string\">&#x27;恢复信号&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h3 id=\"实验结果\"><a class=\"markdownIt-Anchor\" href=\"#实验结果\"></a> 实验结果</h3>\n<ul>\n<li>\n<p>100kHz原始信号</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/100k_1.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>250kHz原始信号</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/250k_1.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>400kHz原始信号</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/400k_1.png\" alt=\" \" /></p>\n</li>\n</ul>\n<h3 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h3>\n<ul>\n<li>从上述图像中可以看出，当固定采样频率500kHz时，对于100kHz的信号采样并进行傅里叶变换后可以看出幅频特性较为准确，因为满足奈奎斯特采样定律，采样频率大于原始信号频率的两倍以上，处于过采样状态。当使用上述采样率采集250kHz的信号时出现了幅值一定的失真，此时处于临界采样状态。当使用上述采样率采集400kHz的信号时出现了幅值和频率的失真，此时处于欠采样状态。</li>\n<li>上述程序设计中使用<code>dot</code>函数，具有一定创新性。</li>\n</ul>\n<h2 id=\"第二问\"><a class=\"markdownIt-Anchor\" href=\"#第二问\"></a> 第二问</h2>\n<h3 id=\"要求-2\"><a class=\"markdownIt-Anchor\" href=\"#要求-2\"></a> 要求</h3>\n<p>②采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p>\n<h3 id=\"程序设计-2\"><a class=\"markdownIt-Anchor\" href=\"#程序设计-2\"></a> 程序设计</h3>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear<br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;oba.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x = resample(x,<span class=\"hljs-number\">13000</span>,Fs) ; <span class=\"hljs-comment\">%重新采样</span><br>x=x.&#x27;;<br>Fs=<span class=\"hljs-number\">13000</span>;<br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br><span class=\"hljs-comment\">%figure(1);</span><br>subplot(<span class=\"hljs-number\">321</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br><span class=\"hljs-comment\">%figure(2);</span><br>subplot(<span class=\"hljs-number\">322</span>);<br><span class=\"hljs-built_in\">plot</span>(f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%对原始信号进行采样</span><br>fs=Fs/<span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">%新的采样率</span><br>y = resample(x,fs,Fs) ; <span class=\"hljs-comment\">%从x中第一个元素开始采样(奇采样)</span><br>n_sam=<span class=\"hljs-built_in\">length</span>(y);<span class=\"hljs-comment\">%获取y的采样点数</span><br>dt_sam=<span class=\"hljs-number\">1</span>/fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time_sam=(<span class=\"hljs-number\">0</span>:n_sam<span class=\"hljs-number\">-1</span>)*dt_sam;<span class=\"hljs-comment\">%新的采样时间点</span><br><span class=\"hljs-comment\">%figure(3);</span><br>subplot(<span class=\"hljs-number\">323</span>);<br><span class=\"hljs-built_in\">plot</span>(time_sam,y);<br>title(<span class=\"hljs-string\">&#x27;过采样信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%采样信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>_sam=time_sam*Fs/<span class=\"hljs-built_in\">length</span>(time_sam);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time_sam));<br><span class=\"hljs-comment\">%figure(4);</span><br>subplot(<span class=\"hljs-number\">324</span>);<br><span class=\"hljs-built_in\">plot</span>(f_<span class=\"hljs-built_in\">true</span>_sam*fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;过采样信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%重建信号</span><br>z = [];<br><span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">1</span> : <span class=\"hljs-built_in\">length</span>(x)<br>    m = time(<span class=\"hljs-built_in\">i</span>);<br>    h = sinc((m - time_sam).*fs);<br>    g=<span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">j</span> = <span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)<br>        s=y(<span class=\"hljs-built_in\">j</span>)*h(<span class=\"hljs-built_in\">j</span>);<br>        g=g+s;<br>    <span class=\"hljs-keyword\">end</span><br>    <span class=\"hljs-comment\">%g = dot(y, h);%向量相乘</span><br>    z = [z,g];<br><span class=\"hljs-keyword\">end</span><br><span class=\"hljs-comment\">%figure(5);</span><br>subplot(<span class=\"hljs-number\">325</span>);<br><span class=\"hljs-built_in\">plot</span>(time, z);title(<span class=\"hljs-string\">&#x27;重建声音信号&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;t/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%重建信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(z,<span class=\"hljs-built_in\">length</span>(time));<br><span class=\"hljs-comment\">%figure(6);</span><br>subplot(<span class=\"hljs-number\">326</span>);<br><span class=\"hljs-built_in\">plot</span>(f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;重建声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%试听和写入信号</span><br> sound(z,Fs);<br> audiowrite(<span class=\"hljs-string\">&#x27;over_sampling.wav&#x27;</span>,z,Fs);<br></code></pre></td></tr></table></figure>\n<h3 id=\"实验结果-2\"><a class=\"markdownIt-Anchor\" href=\"#实验结果-2\"></a> 实验结果</h3>\n<ul>\n<li>\n<p>临界采样</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/critical_sampling.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>欠采样</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/under_sampling.png\" alt=\" \" /></p>\n</li>\n<li>\n<p>过采样</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/over_sampling.png\" alt=\" \" /></p>\n</li>\n</ul>\n<h3 id=\"分析总结-2\"><a class=\"markdownIt-Anchor\" href=\"#分析总结-2\"></a> 分析总结</h3>\n<ul>\n<li>首先对音频信号进行快速傅里叶变换和查阅人类发出声音的频率范围确定最高频率，此处取6.5kHz采样率作为临界采样率，由此可以得知低于6.5kHz采样率为欠采样，高于6.5kHz采样率为过采样。</li>\n<li>按照上述分析理论进行设计并测试，对比其傅里叶变换频谱图看出符合上述理论，对比试听恢复的声音信号（见附件），可以听到临界采样恢复的声音信号和过采样恢复的声音信号与原信号差别不大，而欠采样的信号与原信号相比有较大失真，与奈奎斯特采样定理的理论相符合。</li>\n</ul>\n"},{"title":"信号的时域处理","math":true,"date":"2022-10-13T14:55:00.000Z","excerpt":"数字信号处理、算法","_content":"#   **信号的时域处理** \n\n## 第一问\n\n## 要求\n\n ① 选择子作业１中的音频信号，自行给定滤波器的**系统函数**，采用**差分方程方法**对音频信号进行滤波处理，**比较滤波前后信号的波形**和回放的效果。\n\n## 实验原理\n\n* 对于直接I型的**IIR滤波器**(**无限长单位冲激响应滤波器**)的系统函数为：\n\n$$\nH(z)=\\frac{Y(z)}{X(z)}=\\frac{\\sum _{k=0}^{M}b_{k}z^{-k}}{1-\\sum _{k=1}^{N}a_{k}z^{-k}}\n$$\n\n* 其对应的**差分方程**为：\n\n$$\ny(n)=\\sum _{k=1}^{N}a_{k}y(n-k)+\\sum _{k=0}^{M}b_{k}x(n-k)\n$$\n\n* 由此，我们只需要求出对应的**差分方程系数**就能够确定一个IIR滤波器。\n\n### 巴特沃斯滤波器的设计\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/butterworth.png)\n\n* 比较经典的**IIR滤波器**有**巴特沃斯滤波器**，我们可以根据我们所需要设计的需求来确定**通带截止频率**和**阻带截止频率**以及**通带最大衰减分贝**和**阻带最小衰减分贝**，运用**Matlab**完善的函数运算功能就能够确定出巴特沃斯滤波器的对应的**差分方程系数**。\n\n## 程序设计\n\n```matlab\nclear;\n\n%声音信号的采样\n[x,Fs] = audioread('Carmen_overture_noisy_8k_9.5k.wav');\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%巴特沃斯滤波器设计\nwp=2*7760/Fs;%通带截止频率（数字滤波器作归一化变换）\nws=2*8000/Fs;%阻带截止频率（数字滤波器作归一化变换）\nRp=2;%通带最大衰减2dB\nAs=30;%阻带最小衰减30dB\n[N,wc]=buttord(wp,ws,Rp,As);%求滤波器的阶数N与3dB截止频率wc\n[b,a]=butter(N,wc);%得到差分方程系数\ny=filter(b,a,x);%滤波\nsubplot(223);\nplot(time,y);\ntitle('直接法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('直接法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%绘制归一化滤波器参数\nfigure(2);\nfreqz(b,a);\n\n%写入和试听音频\naudiowrite('direct.wav',y,Fs);\n```\n\n## 实验结果\n\n* **巴特沃斯滤波器**归一化频率**幅频响应**和**相频响应**\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR幅频响应.png)\n\n* **巴特沃斯滤波器**滤波效果\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR对比图.png)\n\n## 分析总结\n\n* 首先对原始音频信号进行**快速傅里叶变换**观察其频谱，发现在**8kHz-9.5kHz**有**高频噪声信号**。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于**差分方程法**，我们选择**IIR型**中的**巴特沃斯滤波器**。经过多次测试，发现设置**通带截止频率**为7.76kHz，**阻带截止频率**为8kHz，**通带最大衰减**2dB，**阻带最小衰减**30dB。通过运算后得到滤波器系统函数的**分子、分母多项式系数**向量b和向量a，即为**差分方程的系数**。根据系统函数直接运算得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。\n\n## 第二问\n\n## 要求\n\n  ②  选择子作业１中的音频信号，自行给定滤波器的**系统函数**，采用**时域线性卷积**对音频信号进行滤波处理，**比较滤波前后信号的波形**和回放的效果。\n\n## 实验原理\n\n* 对于FIR数字滤波器（有限长单位冲激响应滤波器），由于\n\n$$\nH(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n$$\n\n* 因此设计FIR数字滤波器时，我们只需要求出 $h[k]$，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。\n\n\n\n## 程序设计\n\n```matlab\nclear;\n\n%声音信号的采样\n[x,Fs] = audioread('Carmen_overture_noisy_8k_9.5k.wav');\nx=x.';\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半;\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%fir（默认汉宁窗）滤波器设计\nh=fir1(3000,7.99e3*2/22.05e3);\ny = conv(x,h);%卷积运算\ny(:,length(x)+1:length(y)) = [];%将卷积后信号的长度变换为原信号长度\nsubplot(223);\nplot(time,y);\ntitle('卷积法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('卷积法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%试听和写入信号\n audiowrite('fir_conv.wav',y,Fs);\n \nfigure(2);\nstem(h,'.');\ntitle('FIR单位冲激响应')\naxis([1460 1540 -0.3 0.8]);\n```\n\n## 实验结果\n\n* **Hamming窗函数**(单位冲激响应)\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR单位冲激响应.png)\n\n* **Hamming窗函数**滤波效果\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR对比图.png)\n\n## 分析总结\n\n* 首先对原始音频信号进行**快速傅里叶变换**观察其频谱，发现在**8kHz-9.5kHz**有**高频噪声信号**。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于**时域卷积法**，我们选择**FIR型**中的**Hamming窗**。经过多次测试，发现设置**3000阶**的**幅值3dB衰减对应频率在7.99kHz**时效果较好。通过运算后得到滤波器的部分单位冲激响应如上图所示。根据**单位冲激响应**直接和**时域波形**进行**卷积运算**得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。\n\n","source":"_posts/signal_2.md","raw":"---\ntitle: 信号的时域处理\ntags: [数字信号处理,算法]\ncategories: [数字信号处理]\nmath: true\ndate: 2022-10-13 22:55:00\nexcerpt: 数字信号处理、算法\n---\n#   **信号的时域处理** \n\n## 第一问\n\n## 要求\n\n ① 选择子作业１中的音频信号，自行给定滤波器的**系统函数**，采用**差分方程方法**对音频信号进行滤波处理，**比较滤波前后信号的波形**和回放的效果。\n\n## 实验原理\n\n* 对于直接I型的**IIR滤波器**(**无限长单位冲激响应滤波器**)的系统函数为：\n\n$$\nH(z)=\\frac{Y(z)}{X(z)}=\\frac{\\sum _{k=0}^{M}b_{k}z^{-k}}{1-\\sum _{k=1}^{N}a_{k}z^{-k}}\n$$\n\n* 其对应的**差分方程**为：\n\n$$\ny(n)=\\sum _{k=1}^{N}a_{k}y(n-k)+\\sum _{k=0}^{M}b_{k}x(n-k)\n$$\n\n* 由此，我们只需要求出对应的**差分方程系数**就能够确定一个IIR滤波器。\n\n### 巴特沃斯滤波器的设计\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/butterworth.png)\n\n* 比较经典的**IIR滤波器**有**巴特沃斯滤波器**，我们可以根据我们所需要设计的需求来确定**通带截止频率**和**阻带截止频率**以及**通带最大衰减分贝**和**阻带最小衰减分贝**，运用**Matlab**完善的函数运算功能就能够确定出巴特沃斯滤波器的对应的**差分方程系数**。\n\n## 程序设计\n\n```matlab\nclear;\n\n%声音信号的采样\n[x,Fs] = audioread('Carmen_overture_noisy_8k_9.5k.wav');\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%巴特沃斯滤波器设计\nwp=2*7760/Fs;%通带截止频率（数字滤波器作归一化变换）\nws=2*8000/Fs;%阻带截止频率（数字滤波器作归一化变换）\nRp=2;%通带最大衰减2dB\nAs=30;%阻带最小衰减30dB\n[N,wc]=buttord(wp,ws,Rp,As);%求滤波器的阶数N与3dB截止频率wc\n[b,a]=butter(N,wc);%得到差分方程系数\ny=filter(b,a,x);%滤波\nsubplot(223);\nplot(time,y);\ntitle('直接法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('直接法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%绘制归一化滤波器参数\nfigure(2);\nfreqz(b,a);\n\n%写入和试听音频\naudiowrite('direct.wav',y,Fs);\n```\n\n## 实验结果\n\n* **巴特沃斯滤波器**归一化频率**幅频响应**和**相频响应**\n\n![ ](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR幅频响应.png)\n\n* **巴特沃斯滤波器**滤波效果\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR对比图.png)\n\n## 分析总结\n\n* 首先对原始音频信号进行**快速傅里叶变换**观察其频谱，发现在**8kHz-9.5kHz**有**高频噪声信号**。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于**差分方程法**，我们选择**IIR型**中的**巴特沃斯滤波器**。经过多次测试，发现设置**通带截止频率**为7.76kHz，**阻带截止频率**为8kHz，**通带最大衰减**2dB，**阻带最小衰减**30dB。通过运算后得到滤波器系统函数的**分子、分母多项式系数**向量b和向量a，即为**差分方程的系数**。根据系统函数直接运算得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。\n\n## 第二问\n\n## 要求\n\n  ②  选择子作业１中的音频信号，自行给定滤波器的**系统函数**，采用**时域线性卷积**对音频信号进行滤波处理，**比较滤波前后信号的波形**和回放的效果。\n\n## 实验原理\n\n* 对于FIR数字滤波器（有限长单位冲激响应滤波器），由于\n\n$$\nH(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n$$\n\n* 因此设计FIR数字滤波器时，我们只需要求出 $h[k]$，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。\n\n\n\n## 程序设计\n\n```matlab\nclear;\n\n%声音信号的采样\n[x,Fs] = audioread('Carmen_overture_noisy_8k_9.5k.wav');\nx=x.';\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半;\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%fir（默认汉宁窗）滤波器设计\nh=fir1(3000,7.99e3*2/22.05e3);\ny = conv(x,h);%卷积运算\ny(:,length(x)+1:length(y)) = [];%将卷积后信号的长度变换为原信号长度\nsubplot(223);\nplot(time,y);\ntitle('卷积法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('卷积法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%试听和写入信号\n audiowrite('fir_conv.wav',y,Fs);\n \nfigure(2);\nstem(h,'.');\ntitle('FIR单位冲激响应')\naxis([1460 1540 -0.3 0.8]);\n```\n\n## 实验结果\n\n* **Hamming窗函数**(单位冲激响应)\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR单位冲激响应.png)\n\n* **Hamming窗函数**滤波效果\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR对比图.png)\n\n## 分析总结\n\n* 首先对原始音频信号进行**快速傅里叶变换**观察其频谱，发现在**8kHz-9.5kHz**有**高频噪声信号**。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于**时域卷积法**，我们选择**FIR型**中的**Hamming窗**。经过多次测试，发现设置**3000阶**的**幅值3dB衰减对应频率在7.99kHz**时效果较好。通过运算后得到滤波器的部分单位冲激响应如上图所示。根据**单位冲激响应**直接和**时域波形**进行**卷积运算**得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。\n\n","slug":"signal_2","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7uq0011lsvs8w5v68fp","content":"<h1 id=\"信号的时域处理\"><a class=\"markdownIt-Anchor\" href=\"#信号的时域处理\"></a> <strong>信号的时域处理</strong></h1>\n<h2 id=\"第一问\"><a class=\"markdownIt-Anchor\" href=\"#第一问\"></a> 第一问</h2>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>① 选择子作业１中的音频信号，自行给定滤波器的<strong>系统函数</strong>，采用<strong>差分方程方法</strong>对音频信号进行滤波处理，<strong>比较滤波前后信号的波形</strong>和回放的效果。</p>\n<h2 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\"></a> 实验原理</h2>\n<ul>\n<li>对于直接I型的<strong>IIR滤波器</strong>(<strong>无限长单位冲激响应滤波器</strong>)的系统函数为：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">H(z)=\\frac{Y(z)}{X(z)}=\\frac{\\sum _{k=0}^{M}b_{k}z^{-k}}{1-\\sum _{k=1}^{N}a_{k}z^{-k}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.841882em;vertical-align:-1.170941em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.670941em;\"><span style=\"top:-2.128769em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751079999999999em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.6897100000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.170941em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<ul>\n<li>其对应的<strong>差分方程</strong>为：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mi>k</mi></msub><mi>y</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y(n)=\\sum _{k=1}^{N}a_{k}y(n-k)+\\sum _{k=0}^{M}b_{k}x(n-k)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>由此，我们只需要求出对应的<strong>差分方程系数</strong>就能够确定一个IIR滤波器。</li>\n</ul>\n<h3 id=\"巴特沃斯滤波器的设计\"><a class=\"markdownIt-Anchor\" href=\"#巴特沃斯滤波器的设计\"></a> 巴特沃斯滤波器的设计</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/butterworth.png\" alt=\" \" /></p>\n<ul>\n<li>比较经典的<strong>IIR滤波器</strong>有<strong>巴特沃斯滤波器</strong>，我们可以根据我们所需要设计的需求来确定<strong>通带截止频率</strong>和<strong>阻带截止频率</strong>以及<strong>通带最大衰减分贝</strong>和<strong>阻带最小衰减分贝</strong>，运用<strong>Matlab</strong>完善的函数运算功能就能够确定出巴特沃斯滤波器的对应的<strong>差分方程系数</strong>。</li>\n</ul>\n<h2 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%巴特沃斯滤波器设计</span><br>wp=<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">7760</span>/Fs;<span class=\"hljs-comment\">%通带截止频率（数字滤波器作归一化变换）</span><br>ws=<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">8000</span>/Fs;<span class=\"hljs-comment\">%阻带截止频率（数字滤波器作归一化变换）</span><br>Rp=<span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">%通带最大衰减2dB</span><br>As=<span class=\"hljs-number\">30</span>;<span class=\"hljs-comment\">%阻带最小衰减30dB</span><br>[N,wc]=buttord(wp,ws,Rp,As);<span class=\"hljs-comment\">%求滤波器的阶数N与3dB截止频率wc</span><br>[b,a]=butter(N,wc);<span class=\"hljs-comment\">%得到差分方程系数</span><br>y=filter(b,a,x);<span class=\"hljs-comment\">%滤波</span><br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;直接法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;直接法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%绘制归一化滤波器参数</span><br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>freqz(b,a);<br><br><span class=\"hljs-comment\">%写入和试听音频</span><br>audiowrite(<span class=\"hljs-string\">&#x27;direct.wav&#x27;</span>,y,Fs);<br></code></pre></td></tr></table></figure>\n<h2 id=\"实验结果\"><a class=\"markdownIt-Anchor\" href=\"#实验结果\"></a> 实验结果</h2>\n<ul>\n<li><strong>巴特沃斯滤波器</strong>归一化频率<strong>幅频响应</strong>和<strong>相频响应</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR%E5%B9%85%E9%A2%91%E5%93%8D%E5%BA%94.png\" alt=\" \" /></p>\n<ul>\n<li><strong>巴特沃斯滤波器</strong>滤波效果</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR%E5%AF%B9%E6%AF%94%E5%9B%BE.png\" alt=\"\" /></p>\n<h2 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h2>\n<ul>\n<li>首先对原始音频信号进行<strong>快速傅里叶变换</strong>观察其频谱，发现在<strong>8kHz-9.5kHz</strong>有<strong>高频噪声信号</strong>。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于<strong>差分方程法</strong>，我们选择<strong>IIR型</strong>中的<strong>巴特沃斯滤波器</strong>。经过多次测试，发现设置<strong>通带截止频率</strong>为7.76kHz，<strong>阻带截止频率</strong>为8kHz，<strong>通带最大衰减</strong>2dB，<strong>阻带最小衰减</strong>30dB。通过运算后得到滤波器系统函数的<strong>分子、分母多项式系数</strong>向量b和向量a，即为<strong>差分方程的系数</strong>。根据系统函数直接运算得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。</li>\n</ul>\n<h2 id=\"第二问\"><a class=\"markdownIt-Anchor\" href=\"#第二问\"></a> 第二问</h2>\n<h2 id=\"要求-2\"><a class=\"markdownIt-Anchor\" href=\"#要求-2\"></a> 要求</h2>\n<p>②  选择子作业１中的音频信号，自行给定滤波器的<strong>系统函数</strong>，采用<strong>时域线性卷积</strong>对音频信号进行滤波处理，<strong>比较滤波前后信号的波形</strong>和回放的效果。</p>\n<h2 id=\"实验原理-2\"><a class=\"markdownIt-Anchor\" href=\"#实验原理-2\"></a> 实验原理</h2>\n<ul>\n<li>对于FIR数字滤波器（有限长单位冲激响应滤波器），由于</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><mi>h</mi><mrow><mo fence=\"true\">[</mo><mi>k</mi><mo fence=\"true\">]</mo></mrow><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose delimcenter\" style=\"top:0em;\">]</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>因此设计FIR数字滤波器时，我们只需要求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">h[k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span>，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。</li>\n</ul>\n<h2 id=\"程序设计-2\"><a class=\"markdownIt-Anchor\" href=\"#程序设计-2\"></a> 程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半;</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%fir（默认汉宁窗）滤波器设计</span><br>h=fir1(<span class=\"hljs-number\">3000</span>,<span class=\"hljs-number\">7.99e3</span>*<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">22.05e3</span>);<br>y = conv(x,h);<span class=\"hljs-comment\">%卷积运算</span><br>y(:,<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)) = [];<span class=\"hljs-comment\">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%试听和写入信号</span><br> audiowrite(<span class=\"hljs-string\">&#x27;fir_conv.wav&#x27;</span>,y,Fs);<br> <br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>stem(h,<span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>title(<span class=\"hljs-string\">&#x27;FIR单位冲激响应&#x27;</span>)<br>axis([<span class=\"hljs-number\">1460</span> <span class=\"hljs-number\">1540</span> <span class=\"hljs-number\">-0.3</span> <span class=\"hljs-number\">0.8</span>]);<br></code></pre></td></tr></table></figure>\n<h2 id=\"实验结果-2\"><a class=\"markdownIt-Anchor\" href=\"#实验结果-2\"></a> 实验结果</h2>\n<ul>\n<li><strong>Hamming窗函数</strong>(单位冲激响应)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%8D%95%E4%BD%8D%E5%86%B2%E6%BF%80%E5%93%8D%E5%BA%94.png\" alt=\"\" /></p>\n<ul>\n<li><strong>Hamming窗函数</strong>滤波效果</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%AF%B9%E6%AF%94%E5%9B%BE.png\" alt=\"\" /></p>\n<h2 id=\"分析总结-2\"><a class=\"markdownIt-Anchor\" href=\"#分析总结-2\"></a> 分析总结</h2>\n<ul>\n<li>首先对原始音频信号进行<strong>快速傅里叶变换</strong>观察其频谱，发现在<strong>8kHz-9.5kHz</strong>有<strong>高频噪声信号</strong>。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于<strong>时域卷积法</strong>，我们选择<strong>FIR型</strong>中的<strong>Hamming窗</strong>。经过多次测试，发现设置<strong>3000阶</strong>的<strong>幅值3dB衰减对应频率在7.99kHz</strong>时效果较好。通过运算后得到滤波器的部分单位冲激响应如上图所示。根据<strong>单位冲激响应</strong>直接和<strong>时域波形</strong>进行<strong>卷积运算</strong>得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。</li>\n</ul>\n","site":{"data":{}},"more":"<h1 id=\"信号的时域处理\"><a class=\"markdownIt-Anchor\" href=\"#信号的时域处理\"></a> <strong>信号的时域处理</strong></h1>\n<h2 id=\"第一问\"><a class=\"markdownIt-Anchor\" href=\"#第一问\"></a> 第一问</h2>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>① 选择子作业１中的音频信号，自行给定滤波器的<strong>系统函数</strong>，采用<strong>差分方程方法</strong>对音频信号进行滤波处理，<strong>比较滤波前后信号的波形</strong>和回放的效果。</p>\n<h2 id=\"实验原理\"><a class=\"markdownIt-Anchor\" href=\"#实验原理\"></a> 实验原理</h2>\n<ul>\n<li>对于直接I型的<strong>IIR滤波器</strong>(<strong>无限长单位冲激响应滤波器</strong>)的系统函数为：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">H(z)=\\frac{Y(z)}{X(z)}=\\frac{\\sum _{k=0}^{M}b_{k}z^{-k}}{1-\\sum _{k=1}^{N}a_{k}z^{-k}}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.841882em;vertical-align:-1.170941em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.670941em;\"><span style=\"top:-2.128769em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751079999999999em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.6897100000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.981231em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.170941em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<ul>\n<li>其对应的<strong>差分方程</strong>为：</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>y</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mi>k</mi></msub><mi>y</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><mi>x</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">y(n)=\\sum _{k=1}^{N}a_{k}y(n-k)+\\sum _{k=0}^{M}b_{k}x(n-k)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<ul>\n<li>由此，我们只需要求出对应的<strong>差分方程系数</strong>就能够确定一个IIR滤波器。</li>\n</ul>\n<h3 id=\"巴特沃斯滤波器的设计\"><a class=\"markdownIt-Anchor\" href=\"#巴特沃斯滤波器的设计\"></a> 巴特沃斯滤波器的设计</h3>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/butterworth.png\" alt=\" \" /></p>\n<ul>\n<li>比较经典的<strong>IIR滤波器</strong>有<strong>巴特沃斯滤波器</strong>，我们可以根据我们所需要设计的需求来确定<strong>通带截止频率</strong>和<strong>阻带截止频率</strong>以及<strong>通带最大衰减分贝</strong>和<strong>阻带最小衰减分贝</strong>，运用<strong>Matlab</strong>完善的函数运算功能就能够确定出巴特沃斯滤波器的对应的<strong>差分方程系数</strong>。</li>\n</ul>\n<h2 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%巴特沃斯滤波器设计</span><br>wp=<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">7760</span>/Fs;<span class=\"hljs-comment\">%通带截止频率（数字滤波器作归一化变换）</span><br>ws=<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">8000</span>/Fs;<span class=\"hljs-comment\">%阻带截止频率（数字滤波器作归一化变换）</span><br>Rp=<span class=\"hljs-number\">2</span>;<span class=\"hljs-comment\">%通带最大衰减2dB</span><br>As=<span class=\"hljs-number\">30</span>;<span class=\"hljs-comment\">%阻带最小衰减30dB</span><br>[N,wc]=buttord(wp,ws,Rp,As);<span class=\"hljs-comment\">%求滤波器的阶数N与3dB截止频率wc</span><br>[b,a]=butter(N,wc);<span class=\"hljs-comment\">%得到差分方程系数</span><br>y=filter(b,a,x);<span class=\"hljs-comment\">%滤波</span><br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;直接法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;直接法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%绘制归一化滤波器参数</span><br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>freqz(b,a);<br><br><span class=\"hljs-comment\">%写入和试听音频</span><br>audiowrite(<span class=\"hljs-string\">&#x27;direct.wav&#x27;</span>,y,Fs);<br></code></pre></td></tr></table></figure>\n<h2 id=\"实验结果\"><a class=\"markdownIt-Anchor\" href=\"#实验结果\"></a> 实验结果</h2>\n<ul>\n<li><strong>巴特沃斯滤波器</strong>归一化频率<strong>幅频响应</strong>和<strong>相频响应</strong></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR%E5%B9%85%E9%A2%91%E5%93%8D%E5%BA%94.png\" alt=\" \" /></p>\n<ul>\n<li><strong>巴特沃斯滤波器</strong>滤波效果</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR%E5%AF%B9%E6%AF%94%E5%9B%BE.png\" alt=\"\" /></p>\n<h2 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h2>\n<ul>\n<li>首先对原始音频信号进行<strong>快速傅里叶变换</strong>观察其频谱，发现在<strong>8kHz-9.5kHz</strong>有<strong>高频噪声信号</strong>。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于<strong>差分方程法</strong>，我们选择<strong>IIR型</strong>中的<strong>巴特沃斯滤波器</strong>。经过多次测试，发现设置<strong>通带截止频率</strong>为7.76kHz，<strong>阻带截止频率</strong>为8kHz，<strong>通带最大衰减</strong>2dB，<strong>阻带最小衰减</strong>30dB。通过运算后得到滤波器系统函数的<strong>分子、分母多项式系数</strong>向量b和向量a，即为<strong>差分方程的系数</strong>。根据系统函数直接运算得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。</li>\n</ul>\n<h2 id=\"第二问\"><a class=\"markdownIt-Anchor\" href=\"#第二问\"></a> 第二问</h2>\n<h2 id=\"要求-2\"><a class=\"markdownIt-Anchor\" href=\"#要求-2\"></a> 要求</h2>\n<p>②  选择子作业１中的音频信号，自行给定滤波器的<strong>系统函数</strong>，采用<strong>时域线性卷积</strong>对音频信号进行滤波处理，<strong>比较滤波前后信号的波形</strong>和回放的效果。</p>\n<h2 id=\"实验原理-2\"><a class=\"markdownIt-Anchor\" href=\"#实验原理-2\"></a> 实验原理</h2>\n<ul>\n<li>对于FIR数字滤波器（有限长单位冲激响应滤波器），由于</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><mi>h</mi><mrow><mo fence=\"true\">[</mo><mi>k</mi><mo fence=\"true\">]</mo></mrow><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose delimcenter\" style=\"top:0em;\">]</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>因此设计FIR数字滤波器时，我们只需要求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">h[k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span>，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。</li>\n</ul>\n<h2 id=\"程序设计-2\"><a class=\"markdownIt-Anchor\" href=\"#程序设计-2\"></a> 程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半;</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%fir（默认汉宁窗）滤波器设计</span><br>h=fir1(<span class=\"hljs-number\">3000</span>,<span class=\"hljs-number\">7.99e3</span>*<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">22.05e3</span>);<br>y = conv(x,h);<span class=\"hljs-comment\">%卷积运算</span><br>y(:,<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)) = [];<span class=\"hljs-comment\">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%试听和写入信号</span><br> audiowrite(<span class=\"hljs-string\">&#x27;fir_conv.wav&#x27;</span>,y,Fs);<br> <br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>stem(h,<span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>title(<span class=\"hljs-string\">&#x27;FIR单位冲激响应&#x27;</span>)<br>axis([<span class=\"hljs-number\">1460</span> <span class=\"hljs-number\">1540</span> <span class=\"hljs-number\">-0.3</span> <span class=\"hljs-number\">0.8</span>]);<br></code></pre></td></tr></table></figure>\n<h2 id=\"实验结果-2\"><a class=\"markdownIt-Anchor\" href=\"#实验结果-2\"></a> 实验结果</h2>\n<ul>\n<li><strong>Hamming窗函数</strong>(单位冲激响应)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%8D%95%E4%BD%8D%E5%86%B2%E6%BF%80%E5%93%8D%E5%BA%94.png\" alt=\"\" /></p>\n<ul>\n<li><strong>Hamming窗函数</strong>滤波效果</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%AF%B9%E6%AF%94%E5%9B%BE.png\" alt=\"\" /></p>\n<h2 id=\"分析总结-2\"><a class=\"markdownIt-Anchor\" href=\"#分析总结-2\"></a> 分析总结</h2>\n<ul>\n<li>首先对原始音频信号进行<strong>快速傅里叶变换</strong>观察其频谱，发现在<strong>8kHz-9.5kHz</strong>有<strong>高频噪声信号</strong>。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于<strong>时域卷积法</strong>，我们选择<strong>FIR型</strong>中的<strong>Hamming窗</strong>。经过多次测试，发现设置<strong>3000阶</strong>的<strong>幅值3dB衰减对应频率在7.99kHz</strong>时效果较好。通过运算后得到滤波器的部分单位冲激响应如上图所示。根据<strong>单位冲激响应</strong>直接和<strong>时域波形</strong>进行<strong>卷积运算</strong>得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。</li>\n</ul>\n"},{"title":"数字滤波器性能指标分析","math":true,"date":"2022-12-21T10:30:00.000Z","excerpt":"数字信号处理、算法","_content":"# 数字滤波器设计\n\n## 要求\n\n​         为了完成对子作业1中音频信号的滤波，对子作业1中的音频信号进行频谱分析，并获取滤波器设计所需要的性能指标。 \n\n## 音频加噪处理\n\n​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/噪声.png)\n\n## 加噪程序设计\n\n```matlab\nclear ;\n\n%声音信号的采样\n[x,Fs] = audioread('puppy love.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%加入带限噪声\nnoise=0;\nfor f=8500:20:10000\nnoise=noise+0.01*sin(2*pi*f*time);\nend\nxa=x+noise;\nsubplot(223);\nplot(time,xa);\ntitle('加噪声音信号时域波形')\nxlabel('时间/s');\n\n%加噪信号傅里叶变换\nf_true=time*Fs/length(time);\nk=fft(xa,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('加噪后声音信号傅里叶变换');xlabel('kHz');\n```\n\n## 数字滤波器性能指标分析\n\n假设数字滤波器的频率响应表示为：\n$$\nH(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n$$\n根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。\n\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/滤波器.png)\n\n下图为不同滤波器的技术指标：\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/滤波器2.png)\n\n​        因此我们对加噪后的音频频谱进行分析，可以看出音频在5kHz之后的幅值已经非常小，所以可以确定出**通带截止频率**为8kHz，**阻带截止频率**为8.5kHz。**通带最大允许衰减**为1dB,**阻带最小允许衰减**为80dB。\n\n## 项目开源\n\n点击🔗即可下载完整可运行项目： [项目下载](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/dbd83ec7-d54c-48be-9672-43e5c875bbe4.zip)\n\n\n\n","source":"_posts/signal_4.md","raw":"---\ntitle: 数字滤波器性能指标分析\ntags: [数字信号处理,算法]\ncategories: [数字信号处理]\nmath: true\ndate: 2022-12-21 18:30:00\nexcerpt: 数字信号处理、算法\n---\n# 数字滤波器设计\n\n## 要求\n\n​         为了完成对子作业1中音频信号的滤波，对子作业1中的音频信号进行频谱分析，并获取滤波器设计所需要的性能指标。 \n\n## 音频加噪处理\n\n​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/噪声.png)\n\n## 加噪程序设计\n\n```matlab\nclear ;\n\n%声音信号的采样\n[x,Fs] = audioread('puppy love.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%加入带限噪声\nnoise=0;\nfor f=8500:20:10000\nnoise=noise+0.01*sin(2*pi*f*time);\nend\nxa=x+noise;\nsubplot(223);\nplot(time,xa);\ntitle('加噪声音信号时域波形')\nxlabel('时间/s');\n\n%加噪信号傅里叶变换\nf_true=time*Fs/length(time);\nk=fft(xa,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('加噪后声音信号傅里叶变换');xlabel('kHz');\n```\n\n## 数字滤波器性能指标分析\n\n假设数字滤波器的频率响应表示为：\n$$\nH(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n$$\n根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。\n\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/滤波器.png)\n\n下图为不同滤波器的技术指标：\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/滤波器2.png)\n\n​        因此我们对加噪后的音频频谱进行分析，可以看出音频在5kHz之后的幅值已经非常小，所以可以确定出**通带截止频率**为8kHz，**阻带截止频率**为8.5kHz。**通带最大允许衰减**为1dB,**阻带最小允许衰减**为80dB。\n\n## 项目开源\n\n点击🔗即可下载完整可运行项目： [项目下载](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/dbd83ec7-d54c-48be-9672-43e5c875bbe4.zip)\n\n\n\n","slug":"signal_4","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7us0015lsvs2j3dc55k","content":"<h1 id=\"数字滤波器设计\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器设计\"></a> 数字滤波器设计</h1>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>​         为了完成对子作业1中音频信号的滤波，对子作业1中的音频信号进行频谱分析，并获取滤波器设计所需要的性能指标。</p>\n<h2 id=\"音频加噪处理\"><a class=\"markdownIt-Anchor\" href=\"#音频加噪处理\"></a> 音频加噪处理</h2>\n<p>​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E5%99%AA%E5%A3%B0.png\" alt=\"\" /></p>\n<h2 id=\"加噪程序设计\"><a class=\"markdownIt-Anchor\" href=\"#加噪程序设计\"></a> 加噪程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear ;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;puppy love.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%加入带限噪声</span><br>noise=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> f=<span class=\"hljs-number\">8500</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">10000</span><br>noise=noise+<span class=\"hljs-number\">0.01</span>*<span class=\"hljs-built_in\">sin</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f*time);<br><span class=\"hljs-keyword\">end</span><br>xa=x+noise;<br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,xa);<br>title(<span class=\"hljs-string\">&#x27;加噪声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%加噪信号傅里叶变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(xa,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;加噪后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"数字滤波器性能指标分析\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器性能指标分析\"></a> 数字滤波器性能指标分析</h2>\n<p>假设数字滤波器的频率响应表示为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><msup><mi>e</mi><mrow><mi>j</mi><mi>β</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A8.png\" alt=\"\" /></p>\n<p>下图为不同滤波器的技术指标：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A82.png\" alt=\"\" /></p>\n<p>​        因此我们对加噪后的音频频谱进行分析，可以看出音频在5kHz之后的幅值已经非常小，所以可以确定出<strong>通带截止频率</strong>为8kHz，<strong>阻带截止频率</strong>为8.5kHz。<strong>通带最大允许衰减</strong>为1dB,<strong>阻带最小允许衰减</strong>为80dB。</p>\n<h2 id=\"项目开源\"><a class=\"markdownIt-Anchor\" href=\"#项目开源\"></a> 项目开源</h2>\n<p>点击🔗即可下载完整可运行项目： <a href=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/dbd83ec7-d54c-48be-9672-43e5c875bbe4.zip\">项目下载</a></p>\n","site":{"data":{}},"more":"<h1 id=\"数字滤波器设计\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器设计\"></a> 数字滤波器设计</h1>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>​         为了完成对子作业1中音频信号的滤波，对子作业1中的音频信号进行频谱分析，并获取滤波器设计所需要的性能指标。</p>\n<h2 id=\"音频加噪处理\"><a class=\"markdownIt-Anchor\" href=\"#音频加噪处理\"></a> 音频加噪处理</h2>\n<p>​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E5%99%AA%E5%A3%B0.png\" alt=\"\" /></p>\n<h2 id=\"加噪程序设计\"><a class=\"markdownIt-Anchor\" href=\"#加噪程序设计\"></a> 加噪程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear ;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;puppy love.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%加入带限噪声</span><br>noise=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> f=<span class=\"hljs-number\">8500</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">10000</span><br>noise=noise+<span class=\"hljs-number\">0.01</span>*<span class=\"hljs-built_in\">sin</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f*time);<br><span class=\"hljs-keyword\">end</span><br>xa=x+noise;<br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,xa);<br>title(<span class=\"hljs-string\">&#x27;加噪声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%加噪信号傅里叶变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(xa,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;加噪后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"数字滤波器性能指标分析\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器性能指标分析\"></a> 数字滤波器性能指标分析</h2>\n<p>假设数字滤波器的频率响应表示为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><msup><mi>e</mi><mrow><mi>j</mi><mi>β</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A8.png\" alt=\"\" /></p>\n<p>下图为不同滤波器的技术指标：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/%E6%BB%A4%E6%B3%A2%E5%99%A82.png\" alt=\"\" /></p>\n<p>​        因此我们对加噪后的音频频谱进行分析，可以看出音频在5kHz之后的幅值已经非常小，所以可以确定出<strong>通带截止频率</strong>为8kHz，<strong>阻带截止频率</strong>为8.5kHz。<strong>通带最大允许衰减</strong>为1dB,<strong>阻带最小允许衰减</strong>为80dB。</p>\n<h2 id=\"项目开源\"><a class=\"markdownIt-Anchor\" href=\"#项目开源\"></a> 项目开源</h2>\n<p>点击🔗即可下载完整可运行项目： <a href=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/dbd83ec7-d54c-48be-9672-43e5c875bbe4.zip\">项目下载</a></p>\n"},{"title":"快速卷积实现滤波","math":true,"date":"2022-11-14T12:00:00.000Z","excerpt":"数字信号处理、算法","_content":"#   快速卷积实现滤波\n\n## 要求\n\n​        选择子作业１中的音频信号，自行给定滤波器的单位取样响应，采用**快速卷积**实现对音频信号的滤波，比较滤波前后信号的波形和回放的效果。 \n\n## 滤波器设计原理\n\n* 对于FIR数字滤波器（有限长单位冲激响应滤波器），由于\n\n$$\nH(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n$$\n\n* 因此设计FIR数字滤波器时，我们只需要求出 $h[k]$，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。\n\n## 快速卷积设计原理\n\n通过数字信号处理课程的学习，我们知道对信号**在时域上卷积，再对卷积后的结果作傅里叶变换，就是在频域上乘积**。利用这个定理，我们将 h(n) 和 x(n) 通过**快速傅里叶变换**得到频域信号 $H(\\omega)$和$X(\\omega)$，然后相乘得到$Y(\\omega)$，最后将 $Y(\\omega)$通过 IFFT 从频域变换为时域即可。流程图如下：\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png)\n\n## 程序设计\n\n```matlab\nclear;\n\n%声音信号的采样\n[x,Fs] = audioread('Carmen_overture_noisy_8k_9.5k.wav');\nx=x.';\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(321);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半subplot(222);\nsubplot(322);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%fir（默认汉宁窗）滤波器设计\nh=fir1(3000,7.99e3*2/22.05e3);\n\n%快速卷积替代原matlab卷积函数\nL=pow2(nextpow2(length(x)+length(h)-1));\nxk=fft(x,L);\nhk=fft(h,L);\nyk=xk.*hk;\ny=ifft(yk,L);\n\n%y = conv(x,h);%卷积运算\ny(:,length(x)+1:length(y)) = [];%将卷积后信号的长度变换为原信号长度\nsubplot(323);\nplot(time,y);\ntitle('快速卷积法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(324);\nplot(l,abs(k));title('快速卷积法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%与matlab原程序对比\ny = conv(x,h);%卷积运算\ny(:,length(x)+1:length(y)) = [];%将卷积后信号的长度变换为原信号长度\nsubplot(325);\nplot(time,y);\ntitle('卷积法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(326);\nplot(l,abs(k));title('卷积法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%试听和写入信号\naudiowrite('fir_conv.wav',y,Fs);\n \nfigure(2);\nstem(h,'.');\ntitle('FIR单位冲激响应')\naxis([1460 1540 -0.3 0.8]);\n```\n\n## 实验结果\n\n* **Hamming窗函数**(单位冲激响应)\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR单位冲激响应.png)\n\n* **快速卷积**和**Matlab卷积函数**滤波效果对比\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv.png)\n\n## 分析总结\n\n* 根据**信号的时域处理**的实验得到的**FIR型滤波器系数**，我们只需要重新设计**快速卷积函数**替换原本在**matlab的卷积函数**即可。查阅相关资料我们可以了解到快速卷积的实现可以利用**两次快速傅里叶变换**将**原始音频的采样序列**和**滤波器系数组成的序列**变换为**频域**后相乘，得到其时域卷积下的**频域序列**，再利用**快速傅里叶逆变换转换**为**时域**即可。这个过程总共使用了**三次快速傅里叶变换**，从上述图片的结果可以看出，快速卷积和Matlab卷积函数实现的**滤波效果基本一致**。\n\n### 数字信号处理教程推荐\n{% mmedia \"bilibili\" \"bvid:BV127411M7BU\" \"danmaku:false\" %}\n\n\n","source":"_posts/signal_3.md","raw":"---\ntitle: 快速卷积实现滤波\ntags: [数字信号处理,算法]\ncategories: [数字信号处理]\nmath: true\ndate: 2022-11-14 20:00:00\nexcerpt: 数字信号处理、算法\n---\n#   快速卷积实现滤波\n\n## 要求\n\n​        选择子作业１中的音频信号，自行给定滤波器的单位取样响应，采用**快速卷积**实现对音频信号的滤波，比较滤波前后信号的波形和回放的效果。 \n\n## 滤波器设计原理\n\n* 对于FIR数字滤波器（有限长单位冲激响应滤波器），由于\n\n$$\nH(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n$$\n\n* 因此设计FIR数字滤波器时，我们只需要求出 $h[k]$，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。\n\n## 快速卷积设计原理\n\n通过数字信号处理课程的学习，我们知道对信号**在时域上卷积，再对卷积后的结果作傅里叶变换，就是在频域上乘积**。利用这个定理，我们将 h(n) 和 x(n) 通过**快速傅里叶变换**得到频域信号 $H(\\omega)$和$X(\\omega)$，然后相乘得到$Y(\\omega)$，最后将 $Y(\\omega)$通过 IFFT 从频域变换为时域即可。流程图如下：\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png)\n\n## 程序设计\n\n```matlab\nclear;\n\n%声音信号的采样\n[x,Fs] = audioread('Carmen_overture_noisy_8k_9.5k.wav');\nx=x.';\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(321);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半subplot(222);\nsubplot(322);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%fir（默认汉宁窗）滤波器设计\nh=fir1(3000,7.99e3*2/22.05e3);\n\n%快速卷积替代原matlab卷积函数\nL=pow2(nextpow2(length(x)+length(h)-1));\nxk=fft(x,L);\nhk=fft(h,L);\nyk=xk.*hk;\ny=ifft(yk,L);\n\n%y = conv(x,h);%卷积运算\ny(:,length(x)+1:length(y)) = [];%将卷积后信号的长度变换为原信号长度\nsubplot(323);\nplot(time,y);\ntitle('快速卷积法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(324);\nplot(l,abs(k));title('快速卷积法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%与matlab原程序对比\ny = conv(x,h);%卷积运算\ny(:,length(x)+1:length(y)) = [];%将卷积后信号的长度变换为原信号长度\nsubplot(325);\nplot(time,y);\ntitle('卷积法滤波后声音信号时域波形')\nxlabel('时间/s');\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(326);\nplot(l,abs(k));title('卷积法滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%试听和写入信号\naudiowrite('fir_conv.wav',y,Fs);\n \nfigure(2);\nstem(h,'.');\ntitle('FIR单位冲激响应')\naxis([1460 1540 -0.3 0.8]);\n```\n\n## 实验结果\n\n* **Hamming窗函数**(单位冲激响应)\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR单位冲激响应.png)\n\n* **快速卷积**和**Matlab卷积函数**滤波效果对比\n\n![](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv.png)\n\n## 分析总结\n\n* 根据**信号的时域处理**的实验得到的**FIR型滤波器系数**，我们只需要重新设计**快速卷积函数**替换原本在**matlab的卷积函数**即可。查阅相关资料我们可以了解到快速卷积的实现可以利用**两次快速傅里叶变换**将**原始音频的采样序列**和**滤波器系数组成的序列**变换为**频域**后相乘，得到其时域卷积下的**频域序列**，再利用**快速傅里叶逆变换转换**为**时域**即可。这个过程总共使用了**三次快速傅里叶变换**，从上述图片的结果可以看出，快速卷积和Matlab卷积函数实现的**滤波效果基本一致**。\n\n### 数字信号处理教程推荐\n{% mmedia \"bilibili\" \"bvid:BV127411M7BU\" \"danmaku:false\" %}\n\n\n","slug":"signal_3","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7us0018lsvsfgue9g77","content":"<h1 id=\"快速卷积实现滤波\"><a class=\"markdownIt-Anchor\" href=\"#快速卷积实现滤波\"></a> 快速卷积实现滤波</h1>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>​        选择子作业１中的音频信号，自行给定滤波器的单位取样响应，采用<strong>快速卷积</strong>实现对音频信号的滤波，比较滤波前后信号的波形和回放的效果。</p>\n<h2 id=\"滤波器设计原理\"><a class=\"markdownIt-Anchor\" href=\"#滤波器设计原理\"></a> 滤波器设计原理</h2>\n<ul>\n<li>对于FIR数字滤波器（有限长单位冲激响应滤波器），由于</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><mi>h</mi><mrow><mo fence=\"true\">[</mo><mi>k</mi><mo fence=\"true\">]</mo></mrow><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose delimcenter\" style=\"top:0em;\">]</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>因此设计FIR数字滤波器时，我们只需要求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">h[k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span>，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。</li>\n</ul>\n<h2 id=\"快速卷积设计原理\"><a class=\"markdownIt-Anchor\" href=\"#快速卷积设计原理\"></a> 快速卷积设计原理</h2>\n<p>通过数字信号处理课程的学习，我们知道对信号<strong>在时域上卷积，再对卷积后的结果作傅里叶变换，就是在频域上乘积</strong>。利用这个定理，我们将 h(n) 和 x(n) 通过<strong>快速傅里叶变换</strong>得到频域信号 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>，然后相乘得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Y(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>，最后将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Y(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>通过 IFFT 从频域变换为时域即可。流程图如下：<br />\n<img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png\" alt=\"\" /></p>\n<h2 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">321</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半subplot(222);</span><br>subplot(<span class=\"hljs-number\">322</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%fir（默认汉宁窗）滤波器设计</span><br>h=fir1(<span class=\"hljs-number\">3000</span>,<span class=\"hljs-number\">7.99e3</span>*<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">22.05e3</span>);<br><br><span class=\"hljs-comment\">%快速卷积替代原matlab卷积函数</span><br>L=<span class=\"hljs-built_in\">pow2</span>(<span class=\"hljs-built_in\">nextpow2</span>(<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-built_in\">length</span>(h)<span class=\"hljs-number\">-1</span>));<br>xk=fft(x,L);<br>hk=fft(h,L);<br>yk=xk.*hk;<br>y=ifft(yk,L);<br><br><span class=\"hljs-comment\">%y = conv(x,h);%卷积运算</span><br>y(:,<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)) = [];<span class=\"hljs-comment\">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class=\"hljs-number\">323</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;快速卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">324</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;快速卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%与matlab原程序对比</span><br>y = conv(x,h);<span class=\"hljs-comment\">%卷积运算</span><br>y(:,<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)) = [];<span class=\"hljs-comment\">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class=\"hljs-number\">325</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">326</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%试听和写入信号</span><br>audiowrite(<span class=\"hljs-string\">&#x27;fir_conv.wav&#x27;</span>,y,Fs);<br> <br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>stem(h,<span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>title(<span class=\"hljs-string\">&#x27;FIR单位冲激响应&#x27;</span>)<br>axis([<span class=\"hljs-number\">1460</span> <span class=\"hljs-number\">1540</span> <span class=\"hljs-number\">-0.3</span> <span class=\"hljs-number\">0.8</span>]);<br></code></pre></td></tr></table></figure>\n<h2 id=\"实验结果\"><a class=\"markdownIt-Anchor\" href=\"#实验结果\"></a> 实验结果</h2>\n<ul>\n<li><strong>Hamming窗函数</strong>(单位冲激响应)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%8D%95%E4%BD%8D%E5%86%B2%E6%BF%80%E5%93%8D%E5%BA%94.png\" alt=\"\" /></p>\n<ul>\n<li><strong>快速卷积</strong>和<strong>Matlab卷积函数</strong>滤波效果对比</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv.png\" alt=\"\" /></p>\n<h2 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h2>\n<ul>\n<li>根据<strong>信号的时域处理</strong>的实验得到的<strong>FIR型滤波器系数</strong>，我们只需要重新设计<strong>快速卷积函数</strong>替换原本在<strong>matlab的卷积函数</strong>即可。查阅相关资料我们可以了解到快速卷积的实现可以利用<strong>两次快速傅里叶变换</strong>将<strong>原始音频的采样序列</strong>和<strong>滤波器系数组成的序列</strong>变换为<strong>频域</strong>后相乘，得到其时域卷积下的<strong>频域序列</strong>，再利用<strong>快速傅里叶逆变换转换</strong>为<strong>时域</strong>即可。这个过程总共使用了<strong>三次快速傅里叶变换</strong>，从上述图片的结果可以看出，快速卷积和Matlab卷积函数实现的<strong>滤波效果基本一致</strong>。</li>\n</ul>\n<h3 id=\"数字信号处理教程推荐\"><a class=\"markdownIt-Anchor\" href=\"#数字信号处理教程推荐\"></a> 数字信号处理教程推荐</h3>\n<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class=\"bbplayer\"><iframe class=\"bbplayer\" id=\"mmedia-dQpLdGwWABXjuJzy\" src=\"https://player.bilibili.com/player.html?bvid=BV127411M7BU&page=1&high_quality=1&danmaku=false\" allowfullscreen=\"allowfullscreen\" scrolling=\"no\" border=\"0\" frameborder=\"0\" framespacing=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\"></iframe></div><script> document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").style.height=document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").scrollWidth*0.76+\"px\";\n    window.onresize = function(){\n      document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").style.height=document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").scrollWidth*0.76+\"px\";\n    }; </script>\n","site":{"data":{}},"more":"<h1 id=\"快速卷积实现滤波\"><a class=\"markdownIt-Anchor\" href=\"#快速卷积实现滤波\"></a> 快速卷积实现滤波</h1>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>​        选择子作业１中的音频信号，自行给定滤波器的单位取样响应，采用<strong>快速卷积</strong>实现对音频信号的滤波，比较滤波前后信号的波形和回放的效果。</p>\n<h2 id=\"滤波器设计原理\"><a class=\"markdownIt-Anchor\" href=\"#滤波器设计原理\"></a> 滤波器设计原理</h2>\n<ul>\n<li>对于FIR数字滤波器（有限长单位冲激响应滤波器），由于</li>\n</ul>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><mi>h</mi><mrow><mo fence=\"true\">[</mo><mi>k</mi><mo fence=\"true\">]</mo></mrow><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(z)=\\sum _{k=0}^{M}b_{k}z^{-k}=\\sum _{k=0}^{M}h\\left[ k \\right] z^{-k}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.1304490000000005em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8283360000000002em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">M</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose delimcenter\" style=\"top:0em;\">]</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<ul>\n<li>因此设计FIR数字滤波器时，我们只需要求出 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">h[k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span>，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。</li>\n</ul>\n<h2 id=\"快速卷积设计原理\"><a class=\"markdownIt-Anchor\" href=\"#快速卷积设计原理\"></a> 快速卷积设计原理</h2>\n<p>通过数字信号处理课程的学习，我们知道对信号<strong>在时域上卷积，再对卷积后的结果作傅里叶变换，就是在频域上乘积</strong>。利用这个定理，我们将 h(n) 和 x(n) 通过<strong>快速傅里叶变换</strong>得到频域信号 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">X(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>，然后相乘得到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Y(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>，最后将 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Y</mi><mo stretchy=\"false\">(</mo><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Y(\\omega)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose\">)</span></span></span></span>通过 IFFT 从频域变换为时域即可。流程图如下：<br />\n<img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv_1.png\" alt=\"\" /></p>\n<h2 id=\"程序设计\"><a class=\"markdownIt-Anchor\" href=\"#程序设计\"></a> 程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">321</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半subplot(222);</span><br>subplot(<span class=\"hljs-number\">322</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%fir（默认汉宁窗）滤波器设计</span><br>h=fir1(<span class=\"hljs-number\">3000</span>,<span class=\"hljs-number\">7.99e3</span>*<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">22.05e3</span>);<br><br><span class=\"hljs-comment\">%快速卷积替代原matlab卷积函数</span><br>L=<span class=\"hljs-built_in\">pow2</span>(<span class=\"hljs-built_in\">nextpow2</span>(<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-built_in\">length</span>(h)<span class=\"hljs-number\">-1</span>));<br>xk=fft(x,L);<br>hk=fft(h,L);<br>yk=xk.*hk;<br>y=ifft(yk,L);<br><br><span class=\"hljs-comment\">%y = conv(x,h);%卷积运算</span><br>y(:,<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)) = [];<span class=\"hljs-comment\">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class=\"hljs-number\">323</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;快速卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">324</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;快速卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%与matlab原程序对比</span><br>y = conv(x,h);<span class=\"hljs-comment\">%卷积运算</span><br>y(:,<span class=\"hljs-built_in\">length</span>(x)+<span class=\"hljs-number\">1</span>:<span class=\"hljs-built_in\">length</span>(y)) = [];<span class=\"hljs-comment\">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class=\"hljs-number\">325</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">326</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%试听和写入信号</span><br>audiowrite(<span class=\"hljs-string\">&#x27;fir_conv.wav&#x27;</span>,y,Fs);<br> <br><span class=\"hljs-built_in\">figure</span>(<span class=\"hljs-number\">2</span>);<br>stem(h,<span class=\"hljs-string\">&#x27;.&#x27;</span>);<br>title(<span class=\"hljs-string\">&#x27;FIR单位冲激响应&#x27;</span>)<br>axis([<span class=\"hljs-number\">1460</span> <span class=\"hljs-number\">1540</span> <span class=\"hljs-number\">-0.3</span> <span class=\"hljs-number\">0.8</span>]);<br></code></pre></td></tr></table></figure>\n<h2 id=\"实验结果\"><a class=\"markdownIt-Anchor\" href=\"#实验结果\"></a> 实验结果</h2>\n<ul>\n<li><strong>Hamming窗函数</strong>(单位冲激响应)</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%8D%95%E4%BD%8D%E5%86%B2%E6%BF%80%E5%93%8D%E5%BA%94.png\" alt=\"\" /></p>\n<ul>\n<li><strong>快速卷积</strong>和<strong>Matlab卷积函数</strong>滤波效果对比</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/fast_conv.png\" alt=\"\" /></p>\n<h2 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h2>\n<ul>\n<li>根据<strong>信号的时域处理</strong>的实验得到的<strong>FIR型滤波器系数</strong>，我们只需要重新设计<strong>快速卷积函数</strong>替换原本在<strong>matlab的卷积函数</strong>即可。查阅相关资料我们可以了解到快速卷积的实现可以利用<strong>两次快速傅里叶变换</strong>将<strong>原始音频的采样序列</strong>和<strong>滤波器系数组成的序列</strong>变换为<strong>频域</strong>后相乘，得到其时域卷积下的<strong>频域序列</strong>，再利用<strong>快速傅里叶逆变换转换</strong>为<strong>时域</strong>即可。这个过程总共使用了<strong>三次快速傅里叶变换</strong>，从上述图片的结果可以看出，快速卷积和Matlab卷积函数实现的<strong>滤波效果基本一致</strong>。</li>\n</ul>\n<h3 id=\"数字信号处理教程推荐\"><a class=\"markdownIt-Anchor\" href=\"#数字信号处理教程推荐\"></a> 数字信号处理教程推荐</h3>\n<style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style><div class=\"bbplayer\"><iframe class=\"bbplayer\" id=\"mmedia-dQpLdGwWABXjuJzy\" src=\"https://player.bilibili.com/player.html?bvid=BV127411M7BU&page=1&high_quality=1&danmaku=false\" allowfullscreen=\"allowfullscreen\" scrolling=\"no\" border=\"0\" frameborder=\"0\" framespacing=\"0\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups\"></iframe></div><script> document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").style.height=document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").scrollWidth*0.76+\"px\";\n    window.onresize = function(){\n      document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").style.height=document.getElementById(\"mmedia-dQpLdGwWABXjuJzy\").scrollWidth*0.76+\"px\";\n    }; </script>\n"},{"title":"数字滤波器设计","math":true,"date":"2022-12-21T11:00:00.000Z","excerpt":"数字信号处理、算法","_content":"# 数字滤波器设计\n\n## 要求\n\n​         在子作业4的基础上，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。  \n\n## 音频加噪处理\n\n​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。\n\n![](https://s2.loli.net/2022/12/21/kT9Rgsn4iAvPCjH.png)\n\n## 加噪程序设计\n\n```matlab\nclear ;\n\n%声音信号的采样\n[x,Fs] = audioread('puppy love.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%加入带限噪声\nnoise=0;\nfor f=8500:20:10000\nnoise=noise+0.01*sin(2*pi*f*time);\nend\nxa=x+noise;\nsubplot(223);\nplot(time,xa);\ntitle('加噪声音信号时域波形')\nxlabel('时间/s');\n\n%加噪信号傅里叶变换\nf_true=time*Fs/length(time);\nk=fft(xa,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('加噪后声音信号傅里叶变换');xlabel('kHz');\n```\n\n## 数字滤波器性能指标分析\n\n假设数字滤波器的频率响应表示为：\n$$\nH(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n$$\n根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。\n\n\n![](https://s2.loli.net/2022/12/21/rRg3Gf7yNHwQFXJ.png)\n\n下图为不同滤波器的技术指标：\n\n![](https://s2.loli.net/2022/12/21/AuCfvezdnyDWF6E.png)\n\n​        因此我们对加噪后的音频频谱进行分析，可以确定出**通带截止频率**为8kHz，**阻带截止频率**为8.5kHz。**通带最大允许衰减**为1dB,**阻带最小允许衰减**为80dB。\n\n## Matlab数字滤波器设计\n\n​        经过上述分析得到数字滤波器的性能指标后，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。设计过程如下图所示：\n\n* FIR滤波器设计(凯撒窗函数)\n\n![](https://s2.loli.net/2022/12/21/BWoN8tjI15MGYyZ.png)\n\n\n\n* IIR滤波器设计(切比雪夫II型)\n\n![](https://s2.loli.net/2022/12/21/hsDkcNaCMFmXOzQ.png)\n\n## 滤波程序设计\n\n```matlab\nclear ;\n\n%声音信号的采样\n[x,Fs] = audioread('puppy love.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(421);\nplot(time,x);\n%axis([0 300 -3 3]);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(422);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%加入带限噪声\nnoise=0;\nfor f=8500:20:10000\nnoise=noise+0.01*sin(2*pi*f*time);\nend\nxa=x+noise;\nsubplot(423);\nplot(time,xa);\n%axis([0 300 -3 3]);\ntitle('加噪声音信号时域波形')\nxlabel('时间/s');\n\n%加噪信号傅里叶变换\nf_true=time*Fs/length(time);\nk=fft(xa,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(424);\nplot(l,abs(k));title('加噪后声音信号傅里叶变换');xlabel('kHz');\n\n%FIR滤波器(凯撒窗)设计\ny = filter(my_fir,xa);  % 直接使用设计好的滤波器进行滤波，filter函数是滤波函数\nsubplot(425);\nplot(time,y);\ntitle('FIR滤波器(凯撒窗)滤波后声音信号时域波形')\nxlabel('时间/s');\n\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(426);\nplot(l,abs(k));title('FIR滤波器(凯撒窗)滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%IIR滤波器(切比雪夫二型)设计\ny1 = filter(my_iir,xa);  % 直接使用设计好的滤波器进行滤波，filter函数是滤波函数\nsubplot(427);\nplot(time,y1);\ntitle('IIR滤波器(切比雪夫二型)滤波后声音信号时域波形')\nxlabel('时间/s');\n\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y1,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(428);\nplot(l,abs(k));title('IIR滤波器(切比雪夫二型)滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%sound(y,Fs)\n%sound(xa,Fs)\n%sound(x,Fs)\nclear sound\n```\n\n## 分析总结\n\n​         通过上述分析实验可以看出加噪后的音频在经过采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器滤除后的频谱图中噪声信号已经完全滤除，时域波形也与原信号相似，在对滤波的音频试听后发现，噪声几乎已经完全听不见，滤波效果较好。滤波效果如下图所示：\n\n![](https://s2.loli.net/2022/12/21/ZEIgyHuPURQAlpS.png)\n\n## 项目开源\n\n点击🔗即可下载完整可运行项目： [项目下载](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/7651f145-1aed-46ad-8a08-5c827d191994.zip)\n","source":"_posts/signal_5.md","raw":"---\ntitle: 数字滤波器设计\ntags: [数字信号处理,算法]\ncategories: [数字信号处理]\nmath: true\ndate: 2022-12-21 19:00:00\nexcerpt: 数字信号处理、算法\n---\n# 数字滤波器设计\n\n## 要求\n\n​         在子作业4的基础上，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。  \n\n## 音频加噪处理\n\n​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。\n\n![](https://s2.loli.net/2022/12/21/kT9Rgsn4iAvPCjH.png)\n\n## 加噪程序设计\n\n```matlab\nclear ;\n\n%声音信号的采样\n[x,Fs] = audioread('puppy love.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(221);\nplot(time,x);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(222);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%加入带限噪声\nnoise=0;\nfor f=8500:20:10000\nnoise=noise+0.01*sin(2*pi*f*time);\nend\nxa=x+noise;\nsubplot(223);\nplot(time,xa);\ntitle('加噪声音信号时域波形')\nxlabel('时间/s');\n\n%加噪信号傅里叶变换\nf_true=time*Fs/length(time);\nk=fft(xa,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(224);\nplot(l,abs(k));title('加噪后声音信号傅里叶变换');xlabel('kHz');\n```\n\n## 数字滤波器性能指标分析\n\n假设数字滤波器的频率响应表示为：\n$$\nH(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n$$\n根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。\n\n\n![](https://s2.loli.net/2022/12/21/rRg3Gf7yNHwQFXJ.png)\n\n下图为不同滤波器的技术指标：\n\n![](https://s2.loli.net/2022/12/21/AuCfvezdnyDWF6E.png)\n\n​        因此我们对加噪后的音频频谱进行分析，可以确定出**通带截止频率**为8kHz，**阻带截止频率**为8.5kHz。**通带最大允许衰减**为1dB,**阻带最小允许衰减**为80dB。\n\n## Matlab数字滤波器设计\n\n​        经过上述分析得到数字滤波器的性能指标后，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。设计过程如下图所示：\n\n* FIR滤波器设计(凯撒窗函数)\n\n![](https://s2.loli.net/2022/12/21/BWoN8tjI15MGYyZ.png)\n\n\n\n* IIR滤波器设计(切比雪夫II型)\n\n![](https://s2.loli.net/2022/12/21/hsDkcNaCMFmXOzQ.png)\n\n## 滤波程序设计\n\n```matlab\nclear ;\n\n%声音信号的采样\n[x,Fs] = audioread('puppy love.mp3');\nx=x(:,1);%由于x是双声道，所以取它的左声道\nx=x.';%转置\nn=length(x);%获取x的采样点数\ndt=1/Fs;%求采样间隔\ntime=(0:n-1)*dt;%采样时间点\nsubplot(421);\nplot(time,x);\n%axis([0 300 -3 3]);\ntitle('原始声音信号时域波形')\nxlabel('时间/s');\n\n%原始信号fft变换\nf_true=time*Fs/length(time);\nk=fft(x,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(422);\nplot(l,abs(k));title('原始声音信号傅里叶变换');xlabel('kHz');\n\n%加入带限噪声\nnoise=0;\nfor f=8500:20:10000\nnoise=noise+0.01*sin(2*pi*f*time);\nend\nxa=x+noise;\nsubplot(423);\nplot(time,xa);\n%axis([0 300 -3 3]);\ntitle('加噪声音信号时域波形')\nxlabel('时间/s');\n\n%加噪信号傅里叶变换\nf_true=time*Fs/length(time);\nk=fft(xa,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(424);\nplot(l,abs(k));title('加噪后声音信号傅里叶变换');xlabel('kHz');\n\n%FIR滤波器(凯撒窗)设计\ny = filter(my_fir,xa);  % 直接使用设计好的滤波器进行滤波，filter函数是滤波函数\nsubplot(425);\nplot(time,y);\ntitle('FIR滤波器(凯撒窗)滤波后声音信号时域波形')\nxlabel('时间/s');\n\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(426);\nplot(l,abs(k));title('FIR滤波器(凯撒窗)滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%IIR滤波器(切比雪夫二型)设计\ny1 = filter(my_iir,xa);  % 直接使用设计好的滤波器进行滤波，filter函数是滤波函数\nsubplot(427);\nplot(time,y1);\ntitle('IIR滤波器(切比雪夫二型)滤波后声音信号时域波形')\nxlabel('时间/s');\n\n\n%滤波后信号fft变换\nf_true=time*Fs/length(time);\nk=fft(y1,length(time));\nk(:,ceil(length(k)/2):end) = [];%去掉快速傅里叶变换对称的一半\nl=f_true*Fs/1e3;\nl(:,ceil(length(l)/2):end) = [];%去掉快速傅里叶变换对称的一半\nsubplot(428);\nplot(l,abs(k));title('IIR滤波器(切比雪夫二型)滤波后声音信号傅里叶变换');xlabel('kHz');\n\n%sound(y,Fs)\n%sound(xa,Fs)\n%sound(x,Fs)\nclear sound\n```\n\n## 分析总结\n\n​         通过上述分析实验可以看出加噪后的音频在经过采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器滤除后的频谱图中噪声信号已经完全滤除，时域波形也与原信号相似，在对滤波的音频试听后发现，噪声几乎已经完全听不见，滤波效果较好。滤波效果如下图所示：\n\n![](https://s2.loli.net/2022/12/21/ZEIgyHuPURQAlpS.png)\n\n## 项目开源\n\n点击🔗即可下载完整可运行项目： [项目下载](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/7651f145-1aed-46ad-8a08-5c827d191994.zip)\n","slug":"signal_5","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7ut001dlsvsh24ehvut","content":"<h1 id=\"数字滤波器设计\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器设计\"></a> 数字滤波器设计</h1>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>​         在子作业4的基础上，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。</p>\n<h2 id=\"音频加噪处理\"><a class=\"markdownIt-Anchor\" href=\"#音频加噪处理\"></a> 音频加噪处理</h2>\n<p>​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/kT9Rgsn4iAvPCjH.png\" alt=\"\" /></p>\n<h2 id=\"加噪程序设计\"><a class=\"markdownIt-Anchor\" href=\"#加噪程序设计\"></a> 加噪程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear ;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;puppy love.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%加入带限噪声</span><br>noise=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> f=<span class=\"hljs-number\">8500</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">10000</span><br>noise=noise+<span class=\"hljs-number\">0.01</span>*<span class=\"hljs-built_in\">sin</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f*time);<br><span class=\"hljs-keyword\">end</span><br>xa=x+noise;<br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,xa);<br>title(<span class=\"hljs-string\">&#x27;加噪声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%加噪信号傅里叶变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(xa,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;加噪后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"数字滤波器性能指标分析\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器性能指标分析\"></a> 数字滤波器性能指标分析</h2>\n<p>假设数字滤波器的频率响应表示为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><msup><mi>e</mi><mrow><mi>j</mi><mi>β</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/rRg3Gf7yNHwQFXJ.png\" alt=\"\" /></p>\n<p>下图为不同滤波器的技术指标：</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/AuCfvezdnyDWF6E.png\" alt=\"\" /></p>\n<p>​        因此我们对加噪后的音频频谱进行分析，可以确定出<strong>通带截止频率</strong>为8kHz，<strong>阻带截止频率</strong>为8.5kHz。<strong>通带最大允许衰减</strong>为1dB,<strong>阻带最小允许衰减</strong>为80dB。</p>\n<h2 id=\"matlab数字滤波器设计\"><a class=\"markdownIt-Anchor\" href=\"#matlab数字滤波器设计\"></a> Matlab数字滤波器设计</h2>\n<p>​        经过上述分析得到数字滤波器的性能指标后，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。设计过程如下图所示：</p>\n<ul>\n<li>FIR滤波器设计(凯撒窗函数)</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/12/21/BWoN8tjI15MGYyZ.png\" alt=\"\" /></p>\n<ul>\n<li>IIR滤波器设计(切比雪夫II型)</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/12/21/hsDkcNaCMFmXOzQ.png\" alt=\"\" /></p>\n<h2 id=\"滤波程序设计\"><a class=\"markdownIt-Anchor\" href=\"#滤波程序设计\"></a> 滤波程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear ;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;puppy love.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">421</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br><span class=\"hljs-comment\">%axis([0 300 -3 3]);</span><br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">422</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%加入带限噪声</span><br>noise=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> f=<span class=\"hljs-number\">8500</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">10000</span><br>noise=noise+<span class=\"hljs-number\">0.01</span>*<span class=\"hljs-built_in\">sin</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f*time);<br><span class=\"hljs-keyword\">end</span><br>xa=x+noise;<br>subplot(<span class=\"hljs-number\">423</span>);<br><span class=\"hljs-built_in\">plot</span>(time,xa);<br><span class=\"hljs-comment\">%axis([0 300 -3 3]);</span><br>title(<span class=\"hljs-string\">&#x27;加噪声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%加噪信号傅里叶变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(xa,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">424</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;加噪后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%FIR滤波器(凯撒窗)设计</span><br>y = filter(my_fir,xa);  <span class=\"hljs-comment\">% 直接使用设计好的滤波器进行滤波，filter函数是滤波函数</span><br>subplot(<span class=\"hljs-number\">425</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;FIR滤波器(凯撒窗)滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">426</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;FIR滤波器(凯撒窗)滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%IIR滤波器(切比雪夫二型)设计</span><br>y1 = filter(my_iir,xa);  <span class=\"hljs-comment\">% 直接使用设计好的滤波器进行滤波，filter函数是滤波函数</span><br>subplot(<span class=\"hljs-number\">427</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y1);<br>title(<span class=\"hljs-string\">&#x27;IIR滤波器(切比雪夫二型)滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y1,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">428</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;IIR滤波器(切比雪夫二型)滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%sound(y,Fs)</span><br><span class=\"hljs-comment\">%sound(xa,Fs)</span><br><span class=\"hljs-comment\">%sound(x,Fs)</span><br>clear sound<br></code></pre></td></tr></table></figure>\n<h2 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h2>\n<p>​         通过上述分析实验可以看出加噪后的音频在经过采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器滤除后的频谱图中噪声信号已经完全滤除，时域波形也与原信号相似，在对滤波的音频试听后发现，噪声几乎已经完全听不见，滤波效果较好。滤波效果如下图所示：</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/ZEIgyHuPURQAlpS.png\" alt=\"\" /></p>\n<h2 id=\"项目开源\"><a class=\"markdownIt-Anchor\" href=\"#项目开源\"></a> 项目开源</h2>\n<p>点击🔗即可下载完整可运行项目： <a href=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/7651f145-1aed-46ad-8a08-5c827d191994.zip\">项目下载</a></p>\n","site":{"data":{}},"more":"<h1 id=\"数字滤波器设计\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器设计\"></a> 数字滤波器设计</h1>\n<h2 id=\"要求\"><a class=\"markdownIt-Anchor\" href=\"#要求\"></a> 要求</h2>\n<p>​         在子作业4的基础上，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。</p>\n<h2 id=\"音频加噪处理\"><a class=\"markdownIt-Anchor\" href=\"#音频加噪处理\"></a> 音频加噪处理</h2>\n<p>​         由于在子作业1中的音频较为纯净，没有过多噪声。为了方便数字滤波器性能指标的分析和数字滤波器的设计，需要对原有的音频进行加噪处理。本项目通过在音频的8.5kHz至10kHz中增加带限噪声，并在绘制出其时域波形和频域波形。</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/kT9Rgsn4iAvPCjH.png\" alt=\"\" /></p>\n<h2 id=\"加噪程序设计\"><a class=\"markdownIt-Anchor\" href=\"#加噪程序设计\"></a> 加噪程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear ;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;puppy love.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">221</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">222</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%加入带限噪声</span><br>noise=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> f=<span class=\"hljs-number\">8500</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">10000</span><br>noise=noise+<span class=\"hljs-number\">0.01</span>*<span class=\"hljs-built_in\">sin</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f*time);<br><span class=\"hljs-keyword\">end</span><br>xa=x+noise;<br>subplot(<span class=\"hljs-number\">223</span>);<br><span class=\"hljs-built_in\">plot</span>(time,xa);<br>title(<span class=\"hljs-string\">&#x27;加噪声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%加噪信号傅里叶变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(xa,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">224</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;加噪后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br></code></pre></td></tr></table></figure>\n<h2 id=\"数字滤波器性能指标分析\"><a class=\"markdownIt-Anchor\" href=\"#数字滤波器性能指标分析\"></a> 数字滤波器性能指标分析</h2>\n<p>假设数字滤波器的频率响应表示为：</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>H</mi><mo stretchy=\"false\">(</mo><msup><mi>e</mi><mrow><mi>j</mi><mi>ω</mi></mrow></msup><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><msup><mi>e</mi><mrow><mi>j</mi><mi>β</mi><mo stretchy=\"false\">(</mo><mi>j</mi><mi>ω</mi><mo stretchy=\"false\">)</mo></mrow></msup></mrow><annotation encoding=\"application/x-tex\">H(e^{j \\omega})=|H(e^{j \\omega})|e^{j \\beta(j \\omega)}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.124664em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.188em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.874664em;\"><span style=\"top:-3.1130000000000004em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.938em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05278em;\">β</span><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>根据下图中理想低通滤波器逼近的误差容限可以看出，频率响应有通带、过渡带、阻带三个范围。</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/rRg3Gf7yNHwQFXJ.png\" alt=\"\" /></p>\n<p>下图为不同滤波器的技术指标：</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/AuCfvezdnyDWF6E.png\" alt=\"\" /></p>\n<p>​        因此我们对加噪后的音频频谱进行分析，可以确定出<strong>通带截止频率</strong>为8kHz，<strong>阻带截止频率</strong>为8.5kHz。<strong>通带最大允许衰减</strong>为1dB,<strong>阻带最小允许衰减</strong>为80dB。</p>\n<h2 id=\"matlab数字滤波器设计\"><a class=\"markdownIt-Anchor\" href=\"#matlab数字滤波器设计\"></a> Matlab数字滤波器设计</h2>\n<p>​        经过上述分析得到数字滤波器的性能指标后，采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器。设计过程如下图所示：</p>\n<ul>\n<li>FIR滤波器设计(凯撒窗函数)</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/12/21/BWoN8tjI15MGYyZ.png\" alt=\"\" /></p>\n<ul>\n<li>IIR滤波器设计(切比雪夫II型)</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/12/21/hsDkcNaCMFmXOzQ.png\" alt=\"\" /></p>\n<h2 id=\"滤波程序设计\"><a class=\"markdownIt-Anchor\" href=\"#滤波程序设计\"></a> 滤波程序设计</h2>\n<figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs matlab\">clear ;<br><br><span class=\"hljs-comment\">%声音信号的采样</span><br>[x,Fs] = audioread(<span class=\"hljs-string\">&#x27;puppy love.mp3&#x27;</span>);<br>x=x(:,<span class=\"hljs-number\">1</span>);<span class=\"hljs-comment\">%由于x是双声道，所以取它的左声道</span><br>x=x.&#x27;;<span class=\"hljs-comment\">%转置</span><br>n=<span class=\"hljs-built_in\">length</span>(x);<span class=\"hljs-comment\">%获取x的采样点数</span><br>dt=<span class=\"hljs-number\">1</span>/Fs;<span class=\"hljs-comment\">%求采样间隔</span><br>time=(<span class=\"hljs-number\">0</span>:n<span class=\"hljs-number\">-1</span>)*dt;<span class=\"hljs-comment\">%采样时间点</span><br>subplot(<span class=\"hljs-number\">421</span>);<br><span class=\"hljs-built_in\">plot</span>(time,x);<br><span class=\"hljs-comment\">%axis([0 300 -3 3]);</span><br>title(<span class=\"hljs-string\">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%原始信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(x,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">422</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%加入带限噪声</span><br>noise=<span class=\"hljs-number\">0</span>;<br><span class=\"hljs-keyword\">for</span> f=<span class=\"hljs-number\">8500</span>:<span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">10000</span><br>noise=noise+<span class=\"hljs-number\">0.01</span>*<span class=\"hljs-built_in\">sin</span>(<span class=\"hljs-number\">2</span>*<span class=\"hljs-built_in\">pi</span>*f*time);<br><span class=\"hljs-keyword\">end</span><br>xa=x+noise;<br>subplot(<span class=\"hljs-number\">423</span>);<br><span class=\"hljs-built_in\">plot</span>(time,xa);<br><span class=\"hljs-comment\">%axis([0 300 -3 3]);</span><br>title(<span class=\"hljs-string\">&#x27;加噪声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><span class=\"hljs-comment\">%加噪信号傅里叶变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(xa,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">424</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;加噪后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%FIR滤波器(凯撒窗)设计</span><br>y = filter(my_fir,xa);  <span class=\"hljs-comment\">% 直接使用设计好的滤波器进行滤波，filter函数是滤波函数</span><br>subplot(<span class=\"hljs-number\">425</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y);<br>title(<span class=\"hljs-string\">&#x27;FIR滤波器(凯撒窗)滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">426</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;FIR滤波器(凯撒窗)滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%IIR滤波器(切比雪夫二型)设计</span><br>y1 = filter(my_iir,xa);  <span class=\"hljs-comment\">% 直接使用设计好的滤波器进行滤波，filter函数是滤波函数</span><br>subplot(<span class=\"hljs-number\">427</span>);<br><span class=\"hljs-built_in\">plot</span>(time,y1);<br>title(<span class=\"hljs-string\">&#x27;IIR滤波器(切比雪夫二型)滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class=\"hljs-string\">&#x27;时间/s&#x27;</span>);<br><br><br><span class=\"hljs-comment\">%滤波后信号fft变换</span><br>f_<span class=\"hljs-built_in\">true</span>=time*Fs/<span class=\"hljs-built_in\">length</span>(time);<br>k=fft(y1,<span class=\"hljs-built_in\">length</span>(time));<br>k(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(k)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class=\"hljs-built_in\">true</span>*Fs/<span class=\"hljs-number\">1e3</span>;<br>l(:,<span class=\"hljs-built_in\">ceil</span>(<span class=\"hljs-built_in\">length</span>(l)/<span class=\"hljs-number\">2</span>):<span class=\"hljs-keyword\">end</span>) = [];<span class=\"hljs-comment\">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class=\"hljs-number\">428</span>);<br><span class=\"hljs-built_in\">plot</span>(l,<span class=\"hljs-built_in\">abs</span>(k));title(<span class=\"hljs-string\">&#x27;IIR滤波器(切比雪夫二型)滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class=\"hljs-string\">&#x27;kHz&#x27;</span>);<br><br><span class=\"hljs-comment\">%sound(y,Fs)</span><br><span class=\"hljs-comment\">%sound(xa,Fs)</span><br><span class=\"hljs-comment\">%sound(x,Fs)</span><br>clear sound<br></code></pre></td></tr></table></figure>\n<h2 id=\"分析总结\"><a class=\"markdownIt-Anchor\" href=\"#分析总结\"></a> 分析总结</h2>\n<p>​         通过上述分析实验可以看出加噪后的音频在经过采用MATLAB的filterDesigner或fdatool工具箱，设计出相应的IIR滤波器和FIR滤波器滤除后的频谱图中噪声信号已经完全滤除，时域波形也与原信号相似，在对滤波的音频试听后发现，噪声几乎已经完全听不见，滤波效果较好。滤波效果如下图所示：</p>\n<p><img src=\"https://s2.loli.net/2022/12/21/ZEIgyHuPURQAlpS.png\" alt=\"\" /></p>\n<h2 id=\"项目开源\"><a class=\"markdownIt-Anchor\" href=\"#项目开源\"></a> 项目开源</h2>\n<p>点击🔗即可下载完整可运行项目： <a href=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/7651f145-1aed-46ad-8a08-5c827d191994.zip\">项目下载</a></p>\n"},{"title":"快速排序算法与冒泡排序算法的比较","date":"2021-11-23T13:40:00.000Z","excerpt":"排序、算法","_content":"\n#### 原理分析\n\n**1.冒泡排序：**\n\n​       \n\n------\n\n　   交换排序顾名思义就是通过元素的两两比较，判断是否符合要求，如过不符合就交换位置来达到排序的目的。冒泡排序名字的由来就是因为在交换过程中，类似水冒泡，小（大）的元素经过不断的交换由水底慢慢的浮到水的顶端。\n\n　   冒泡排序的思想就是利用的比较交换，利用循环将第 i 小或者大的元素归位，归位操作利用的是对 n 个元素中相邻的两个进行比较，如果顺序正确就不交换，如果顺序错误就进行位置的交换。通过重复的循环访问数组，直到没有可以交换的元素，那么整个排序就已经完成了。\n\n​       冒泡排序性能分析：\n\n1.空间效率：仅使用常数个辅助单元，空间复杂度为Ο(1)。\n\n2.时间效率：最坏情况与平均情况均为Ο(n²)。\n\n------\n\n**2.快速排序：**\n\n​        \n\n\n​        快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。\n\n​        快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。\n\n------\n\n实现步骤：\n\n1.从数列中挑出一个元素，称为 \"基准\"（pivot）;\n\n2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元 素比基准值大的摆在基准的                 后面（相同的数可以到任一边）。在这个 分区退出之后，该基准就处于数列的中间位置。这个称为分区操   作；\n\n3.递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n------\n\n​           快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。\n\n------\n\n\n\n#### 效率对比\n\n##### 生成了一万个随机数后利用两种排序法的时间对比\n\n######          快速排序算法:\n\n​         ![快速排序时间](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/1.png)  \n\n######          冒泡排序算法：\n\n​          ![冒泡排序时间](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/2.png)  \n\n------\n\n\n\n#### 完整代码实现\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/time.h>\n\n//数组两个元素交换函数\nvoid swap(int *a,int *b){\n    int t;\n    t=*a;\n    *a=*b;\n    *b=t;\n}\n\n//快速排序算法\nvoid Quicksort(int *a,int left,int right){\n    if(left>=right)\n        return;\n    int pivot = a[right];\n     int m=left,n=right-1;\n    while(m<n){\n        while(a[m] < pivot && m<n)\n            m++;\n        while(a[n] >= pivot && m<n)\n            n--;\n        swap(&a[m], &a[n]);\n    }\n        if(a[m]>=a[right])\n            swap(&a[m], &a[right]);\n        else\n            m++;\n        if(m)\n            Quicksort(a, left, m - 1);\n            Quicksort(a, m + 1, right);\n\n}\n\n//快速排序算法标准接口\nvoid Quick_Sort(int *a,int n){\n    Quicksort(a,0,n-1);\n}\n\n//冒泡算法\nvoid Bubble_Sort(int *a,int n){\n    int i ,p ;\n    int flag = 0;\n    for(p=n-1;p>=0;p--){\n        for(i=0;i<p;i++){\n            if(a[i] > a[i+1]){\n                swap(&a[i],&a[i+1]);\n                flag = 1;//标识发生变化\n            }\n        }\n        if(flag == 0) break;//全程无交换\n    }\n}\n\n//主函数\nint main() {\n    struct timeval start, end;\n    gettimeofday(&start, NULL);\n    int L[10000];\n    int i;\n    for(i=0;i<10000;i++){\n        L[i] = rand();\n    }\n    //Quick_Sort(L,10000);\n    //printf(\"the quick complete in \");\n    Bubble_Sort(L,10000);\n    printf(\"the bubble complete in \");\n    gettimeofday(&end, NULL);\n    long elapsed = (end.tv_sec - start.tv_sec)*1000000.0 + end.tv_usec - start.tv_usec;\n    printf(\"%.ld ms elapsed\\n\", elapsed);\n    return 0;\n}\n\n```\n\n#### 结论\n\n​         **快速排序算法在运行时间上明显少于冒泡排序算法运行时间。**  ","source":"_posts/sort.md","raw":"---\ntitle: 快速排序算法与冒泡排序算法的比较\ntags: [数据结构,排序]\ncategories: [数据结构]\ndate: 2021-11-23 21:40:00\nexcerpt: 排序、算法\n---\n\n#### 原理分析\n\n**1.冒泡排序：**\n\n​       \n\n------\n\n　   交换排序顾名思义就是通过元素的两两比较，判断是否符合要求，如过不符合就交换位置来达到排序的目的。冒泡排序名字的由来就是因为在交换过程中，类似水冒泡，小（大）的元素经过不断的交换由水底慢慢的浮到水的顶端。\n\n　   冒泡排序的思想就是利用的比较交换，利用循环将第 i 小或者大的元素归位，归位操作利用的是对 n 个元素中相邻的两个进行比较，如果顺序正确就不交换，如果顺序错误就进行位置的交换。通过重复的循环访问数组，直到没有可以交换的元素，那么整个排序就已经完成了。\n\n​       冒泡排序性能分析：\n\n1.空间效率：仅使用常数个辅助单元，空间复杂度为Ο(1)。\n\n2.时间效率：最坏情况与平均情况均为Ο(n²)。\n\n------\n\n**2.快速排序：**\n\n​        \n\n\n​        快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。\n\n​        快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。\n\n------\n\n实现步骤：\n\n1.从数列中挑出一个元素，称为 \"基准\"（pivot）;\n\n2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元 素比基准值大的摆在基准的                 后面（相同的数可以到任一边）。在这个 分区退出之后，该基准就处于数列的中间位置。这个称为分区操   作；\n\n3.递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n------\n\n​           快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。\n\n------\n\n\n\n#### 效率对比\n\n##### 生成了一万个随机数后利用两种排序法的时间对比\n\n######          快速排序算法:\n\n​         ![快速排序时间](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/1.png)  \n\n######          冒泡排序算法：\n\n​          ![冒泡排序时间](https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/2.png)  \n\n------\n\n\n\n#### 完整代码实现\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/time.h>\n\n//数组两个元素交换函数\nvoid swap(int *a,int *b){\n    int t;\n    t=*a;\n    *a=*b;\n    *b=t;\n}\n\n//快速排序算法\nvoid Quicksort(int *a,int left,int right){\n    if(left>=right)\n        return;\n    int pivot = a[right];\n     int m=left,n=right-1;\n    while(m<n){\n        while(a[m] < pivot && m<n)\n            m++;\n        while(a[n] >= pivot && m<n)\n            n--;\n        swap(&a[m], &a[n]);\n    }\n        if(a[m]>=a[right])\n            swap(&a[m], &a[right]);\n        else\n            m++;\n        if(m)\n            Quicksort(a, left, m - 1);\n            Quicksort(a, m + 1, right);\n\n}\n\n//快速排序算法标准接口\nvoid Quick_Sort(int *a,int n){\n    Quicksort(a,0,n-1);\n}\n\n//冒泡算法\nvoid Bubble_Sort(int *a,int n){\n    int i ,p ;\n    int flag = 0;\n    for(p=n-1;p>=0;p--){\n        for(i=0;i<p;i++){\n            if(a[i] > a[i+1]){\n                swap(&a[i],&a[i+1]);\n                flag = 1;//标识发生变化\n            }\n        }\n        if(flag == 0) break;//全程无交换\n    }\n}\n\n//主函数\nint main() {\n    struct timeval start, end;\n    gettimeofday(&start, NULL);\n    int L[10000];\n    int i;\n    for(i=0;i<10000;i++){\n        L[i] = rand();\n    }\n    //Quick_Sort(L,10000);\n    //printf(\"the quick complete in \");\n    Bubble_Sort(L,10000);\n    printf(\"the bubble complete in \");\n    gettimeofday(&end, NULL);\n    long elapsed = (end.tv_sec - start.tv_sec)*1000000.0 + end.tv_usec - start.tv_usec;\n    printf(\"%.ld ms elapsed\\n\", elapsed);\n    return 0;\n}\n\n```\n\n#### 结论\n\n​         **快速排序算法在运行时间上明显少于冒泡排序算法运行时间。**  ","slug":"sort","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7v3003dlsvs525b4sdj","content":"<h4 id=\"原理分析\"><a class=\"markdownIt-Anchor\" href=\"#原理分析\"></a> 原理分析</h4>\n<p><strong>1.冒泡排序：</strong></p>\n<p>​</p>\n<hr />\n<p>交换排序顾名思义就是通过元素的两两比较，判断是否符合要求，如过不符合就交换位置来达到排序的目的。冒泡排序名字的由来就是因为在交换过程中，类似水冒泡，小（大）的元素经过不断的交换由水底慢慢的浮到水的顶端。</p>\n<p>冒泡排序的思想就是利用的比较交换，利用循环将第 i 小或者大的元素归位，归位操作利用的是对 n 个元素中相邻的两个进行比较，如果顺序正确就不交换，如果顺序错误就进行位置的交换。通过重复的循环访问数组，直到没有可以交换的元素，那么整个排序就已经完成了。</p>\n<p>​       冒泡排序性能分析：</p>\n<p>1.空间效率：仅使用常数个辅助单元，空间复杂度为Ο(1)。</p>\n<p>2.时间效率：最坏情况与平均情况均为Ο(n²)。</p>\n<hr />\n<p><strong>2.快速排序：</strong></p>\n<p>​</p>\n<p>​        快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>\n<p>​        快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p>\n<hr />\n<p>实现步骤：</p>\n<p>1.从数列中挑出一个元素，称为 “基准”（pivot）;</p>\n<p>2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元 素比基准值大的摆在基准的                 后面（相同的数可以到任一边）。在这个 分区退出之后，该基准就处于数列的中间位置。这个称为分区操   作；</p>\n<p>3.递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</p>\n<hr />\n<p>​           快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p>\n<hr />\n<h4 id=\"效率对比\"><a class=\"markdownIt-Anchor\" href=\"#效率对比\"></a> 效率对比</h4>\n<h5 id=\"生成了一万个随机数后利用两种排序法的时间对比\"><a class=\"markdownIt-Anchor\" href=\"#生成了一万个随机数后利用两种排序法的时间对比\"></a> 生成了一万个随机数后利用两种排序法的时间对比</h5>\n<h6 id=\"快速排序算法\"><a class=\"markdownIt-Anchor\" href=\"#快速排序算法\"></a> 快速排序算法:</h6>\n<p>​         <img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/1.png\" alt=\"快速排序时间\" /></p>\n<h6 id=\"冒泡排序算法\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序算法\"></a> 冒泡排序算法：</h6>\n<p>​          <img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/2.png\" alt=\"冒泡排序时间\" /></p>\n<hr />\n<h4 id=\"完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现\"></a> 完整代码实现</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/time.h&gt;</span></span><br><br><span class=\"hljs-comment\">//数组两个元素交换函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> *b)</span>&#123;<br>    <span class=\"hljs-type\">int</span> t;<br>    t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125;<br><br><span class=\"hljs-comment\">//快速排序算法</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Quicksort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> left,<span class=\"hljs-type\">int</span> right)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(left&gt;=right)<br>        <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-type\">int</span> pivot = a[right];<br>     <span class=\"hljs-type\">int</span> m=left,n=right<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">while</span>(m&lt;n)&#123;<br>        <span class=\"hljs-keyword\">while</span>(a[m] &lt; pivot &amp;&amp; m&lt;n)<br>            m++;<br>        <span class=\"hljs-keyword\">while</span>(a[n] &gt;= pivot &amp;&amp; m&lt;n)<br>            n--;<br>        swap(&amp;a[m], &amp;a[n]);<br>    &#125;<br>        <span class=\"hljs-keyword\">if</span>(a[m]&gt;=a[right])<br>            swap(&amp;a[m], &amp;a[right]);<br>        <span class=\"hljs-keyword\">else</span><br>            m++;<br>        <span class=\"hljs-keyword\">if</span>(m)<br>            Quicksort(a, left, m - <span class=\"hljs-number\">1</span>);<br>            Quicksort(a, m + <span class=\"hljs-number\">1</span>, right);<br><br>&#125;<br><br><span class=\"hljs-comment\">//快速排序算法标准接口</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Quick_Sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> n)</span>&#123;<br>    Quicksort(a,<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//冒泡算法</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Bubble_Sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> n)</span>&#123;<br>    <span class=\"hljs-type\">int</span> i ,p ;<br>    <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(p=n<span class=\"hljs-number\">-1</span>;p&gt;=<span class=\"hljs-number\">0</span>;p--)&#123;<br>        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;p;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(a[i] &gt; a[i+<span class=\"hljs-number\">1</span>])&#123;<br>                swap(&amp;a[i],&amp;a[i+<span class=\"hljs-number\">1</span>]);<br>                flag = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//标识发生变化</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;<span class=\"hljs-comment\">//全程无交换</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">start</span>, <span class=\"hljs-title\">end</span>;</span><br>    gettimeofday(&amp;start, <span class=\"hljs-literal\">NULL</span>);<br>    <span class=\"hljs-type\">int</span> L[<span class=\"hljs-number\">10000</span>];<br>    <span class=\"hljs-type\">int</span> i;<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10000</span>;i++)&#123;<br>        L[i] = rand();<br>    &#125;<br>    <span class=\"hljs-comment\">//Quick_Sort(L,10000);</span><br>    <span class=\"hljs-comment\">//printf(&quot;the quick complete in &quot;);</span><br>    Bubble_Sort(L,<span class=\"hljs-number\">10000</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the bubble complete in &quot;</span>);<br>    gettimeofday(&amp;end, <span class=\"hljs-literal\">NULL</span>);<br>    <span class=\"hljs-type\">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class=\"hljs-number\">1000000.0</span> + end.tv_usec - start.tv_usec;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.ld ms elapsed\\n&quot;</span>, elapsed);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h4>\n<p>​         <strong>快速排序算法在运行时间上明显少于冒泡排序算法运行时间。</strong></p>\n","site":{"data":{}},"more":"<h4 id=\"原理分析\"><a class=\"markdownIt-Anchor\" href=\"#原理分析\"></a> 原理分析</h4>\n<p><strong>1.冒泡排序：</strong></p>\n<p>​</p>\n<hr />\n<p>交换排序顾名思义就是通过元素的两两比较，判断是否符合要求，如过不符合就交换位置来达到排序的目的。冒泡排序名字的由来就是因为在交换过程中，类似水冒泡，小（大）的元素经过不断的交换由水底慢慢的浮到水的顶端。</p>\n<p>冒泡排序的思想就是利用的比较交换，利用循环将第 i 小或者大的元素归位，归位操作利用的是对 n 个元素中相邻的两个进行比较，如果顺序正确就不交换，如果顺序错误就进行位置的交换。通过重复的循环访问数组，直到没有可以交换的元素，那么整个排序就已经完成了。</p>\n<p>​       冒泡排序性能分析：</p>\n<p>1.空间效率：仅使用常数个辅助单元，空间复杂度为Ο(1)。</p>\n<p>2.时间效率：最坏情况与平均情况均为Ο(n²)。</p>\n<hr />\n<p><strong>2.快速排序：</strong></p>\n<p>​</p>\n<p>​        快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>\n<p>​        快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p>\n<hr />\n<p>实现步骤：</p>\n<p>1.从数列中挑出一个元素，称为 “基准”（pivot）;</p>\n<p>2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元 素比基准值大的摆在基准的                 后面（相同的数可以到任一边）。在这个 分区退出之后，该基准就处于数列的中间位置。这个称为分区操   作；</p>\n<p>3.递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</p>\n<hr />\n<p>​           快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p>\n<hr />\n<h4 id=\"效率对比\"><a class=\"markdownIt-Anchor\" href=\"#效率对比\"></a> 效率对比</h4>\n<h5 id=\"生成了一万个随机数后利用两种排序法的时间对比\"><a class=\"markdownIt-Anchor\" href=\"#生成了一万个随机数后利用两种排序法的时间对比\"></a> 生成了一万个随机数后利用两种排序法的时间对比</h5>\n<h6 id=\"快速排序算法\"><a class=\"markdownIt-Anchor\" href=\"#快速排序算法\"></a> 快速排序算法:</h6>\n<p>​         <img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/1.png\" alt=\"快速排序时间\" /></p>\n<h6 id=\"冒泡排序算法\"><a class=\"markdownIt-Anchor\" href=\"#冒泡排序算法\"></a> 冒泡排序算法：</h6>\n<p>​          <img src=\"https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/2.png\" alt=\"冒泡排序时间\" /></p>\n<hr />\n<h4 id=\"完整代码实现\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现\"></a> 完整代码实现</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/time.h&gt;</span></span><br><br><span class=\"hljs-comment\">//数组两个元素交换函数</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> *b)</span>&#123;<br>    <span class=\"hljs-type\">int</span> t;<br>    t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125;<br><br><span class=\"hljs-comment\">//快速排序算法</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Quicksort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> left,<span class=\"hljs-type\">int</span> right)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(left&gt;=right)<br>        <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-type\">int</span> pivot = a[right];<br>     <span class=\"hljs-type\">int</span> m=left,n=right<span class=\"hljs-number\">-1</span>;<br>    <span class=\"hljs-keyword\">while</span>(m&lt;n)&#123;<br>        <span class=\"hljs-keyword\">while</span>(a[m] &lt; pivot &amp;&amp; m&lt;n)<br>            m++;<br>        <span class=\"hljs-keyword\">while</span>(a[n] &gt;= pivot &amp;&amp; m&lt;n)<br>            n--;<br>        swap(&amp;a[m], &amp;a[n]);<br>    &#125;<br>        <span class=\"hljs-keyword\">if</span>(a[m]&gt;=a[right])<br>            swap(&amp;a[m], &amp;a[right]);<br>        <span class=\"hljs-keyword\">else</span><br>            m++;<br>        <span class=\"hljs-keyword\">if</span>(m)<br>            Quicksort(a, left, m - <span class=\"hljs-number\">1</span>);<br>            Quicksort(a, m + <span class=\"hljs-number\">1</span>, right);<br><br>&#125;<br><br><span class=\"hljs-comment\">//快速排序算法标准接口</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Quick_Sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> n)</span>&#123;<br>    Quicksort(a,<span class=\"hljs-number\">0</span>,n<span class=\"hljs-number\">-1</span>);<br>&#125;<br><br><span class=\"hljs-comment\">//冒泡算法</span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">Bubble_Sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> *a,<span class=\"hljs-type\">int</span> n)</span>&#123;<br>    <span class=\"hljs-type\">int</span> i ,p ;<br>    <span class=\"hljs-type\">int</span> flag = <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">for</span>(p=n<span class=\"hljs-number\">-1</span>;p&gt;=<span class=\"hljs-number\">0</span>;p--)&#123;<br>        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;p;i++)&#123;<br>            <span class=\"hljs-keyword\">if</span>(a[i] &gt; a[i+<span class=\"hljs-number\">1</span>])&#123;<br>                swap(&amp;a[i],&amp;a[i+<span class=\"hljs-number\">1</span>]);<br>                flag = <span class=\"hljs-number\">1</span>;<span class=\"hljs-comment\">//标识发生变化</span><br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span>(flag == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">break</span>;<span class=\"hljs-comment\">//全程无交换</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//主函数</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">timeval</span> <span class=\"hljs-title\">start</span>, <span class=\"hljs-title\">end</span>;</span><br>    gettimeofday(&amp;start, <span class=\"hljs-literal\">NULL</span>);<br>    <span class=\"hljs-type\">int</span> L[<span class=\"hljs-number\">10000</span>];<br>    <span class=\"hljs-type\">int</span> i;<br>    <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">10000</span>;i++)&#123;<br>        L[i] = rand();<br>    &#125;<br>    <span class=\"hljs-comment\">//Quick_Sort(L,10000);</span><br>    <span class=\"hljs-comment\">//printf(&quot;the quick complete in &quot;);</span><br>    Bubble_Sort(L,<span class=\"hljs-number\">10000</span>);<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;the bubble complete in &quot;</span>);<br>    gettimeofday(&amp;end, <span class=\"hljs-literal\">NULL</span>);<br>    <span class=\"hljs-type\">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class=\"hljs-number\">1000000.0</span> + end.tv_usec - start.tv_usec;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%.ld ms elapsed\\n&quot;</span>, elapsed);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"结论\"><a class=\"markdownIt-Anchor\" href=\"#结论\"></a> 结论</h4>\n<p>​         <strong>快速排序算法在运行时间上明显少于冒泡排序算法运行时间。</strong></p>\n"},{"title":"Vue学习笔记","date":"2023-04-24T16:15:00.000Z","excerpt":"Vue学习笔记!","_content":"# Vue学习笔记\n\n## Vue数据管理：使用data函数提供数据\n\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            address:{\n                name:\"my_vue\",\n            }\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* HTML使用模板语法展示返回的数据\n\n```html\n<div id=\"app\">\n        <h1>hello!{{address.name}}</h1>\n        <h2>{{name}}</h2>\n    </div>\n```\n\n## Vue数据管理：在HTML访问data属性\n\n* 指令：是vue提供的一组可以直接在html模板中使用的特殊属性，例如：`v-bind`、`v-for`、`v-if`，用于实现数据绑定、循环、条件判断等。\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            link:\"https://chuiyugin.github.io/\",\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* 在HTML访问data属性(`v-bind`可以简写为`:`)\n\n```html\n<div id=\"app\">\n        <a v-bind:href=\"link\">链接</a>\n    </div>\n```\n\n## Vue数据管理：展示列表数据\n\n* 使用v-for语句生成列表\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            todos:[\"学习Vue\",\"热爱生活\",\"平安喜乐\"],\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* 在HTML中生成列表(不带序号)\n\n```html\n<div id=\"app\">\n        <ul>\n            <li v-for=\" todo in todos \">{{todo}}</li>\n        </ul>\n    </div>\n```\n\n* 在HTML中生成列表(带序号)\n\n```html\n<div id=\"app\">\n        <ul>\n            <li v-for=\" (todo,index) in todos \">{{index+1}} {{todo}}</li>\n        </ul>\n    </div>\n```\n\n### 复选框的使用\n\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            //todos:[\"学习Vue\",\"热爱生活\",\"平安喜乐\"],\n            todos: [\n                {\n                  content: \"把项目做完\",\n                  complete: true,\n                },\n                {\n                  content: \"去超市购物\",\n                  complete: false,\n                },\n                {\n                  content: \"看10分钟的书\",\n                  complete: false,\n                },\n              ],\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* 在HTML中展示复选框\n\n```html\n<div id=\"app\">\n        <ul>\n            <li v-for=\" (todo,index) in todos \">\n                <input type=\"checkbox\" :checked=\"todo.complete\"> todo.content\n            </li>\n        </ul>\n    </div>\n```\n\n","source":"_posts/vue_learning.md","raw":"---\ntitle: Vue学习笔记\ntags: [Vue]\ncategories: [Vue]\ndate: 2023-4-25 00:15:00\nexcerpt: Vue学习笔记!\n---\n# Vue学习笔记\n\n## Vue数据管理：使用data函数提供数据\n\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            address:{\n                name:\"my_vue\",\n            }\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* HTML使用模板语法展示返回的数据\n\n```html\n<div id=\"app\">\n        <h1>hello!{{address.name}}</h1>\n        <h2>{{name}}</h2>\n    </div>\n```\n\n## Vue数据管理：在HTML访问data属性\n\n* 指令：是vue提供的一组可以直接在html模板中使用的特殊属性，例如：`v-bind`、`v-for`、`v-if`，用于实现数据绑定、循环、条件判断等。\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            link:\"https://chuiyugin.github.io/\",\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* 在HTML访问data属性(`v-bind`可以简写为`:`)\n\n```html\n<div id=\"app\">\n        <a v-bind:href=\"link\">链接</a>\n    </div>\n```\n\n## Vue数据管理：展示列表数据\n\n* 使用v-for语句生成列表\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            todos:[\"学习Vue\",\"热爱生活\",\"平安喜乐\"],\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* 在HTML中生成列表(不带序号)\n\n```html\n<div id=\"app\">\n        <ul>\n            <li v-for=\" todo in todos \">{{todo}}</li>\n        </ul>\n    </div>\n```\n\n* 在HTML中生成列表(带序号)\n\n```html\n<div id=\"app\">\n        <ul>\n            <li v-for=\" (todo,index) in todos \">{{index+1}} {{todo}}</li>\n        </ul>\n    </div>\n```\n\n### 复选框的使用\n\n* index.js\n\n```js\nconst app = Vue.createApp({\n    data(){//data函数返回数据，可以是任何类型\n        return{\n            name:\"vue\",\n            //todos:[\"学习Vue\",\"热爱生活\",\"平安喜乐\"],\n            todos: [\n                {\n                  content: \"把项目做完\",\n                  complete: true,\n                },\n                {\n                  content: \"去超市购物\",\n                  complete: false,\n                },\n                {\n                  content: \"看10分钟的书\",\n                  complete: false,\n                },\n              ],\n        } \n    }\n});\napp.mount(\"#app\");//使得app成为模板，可以使用模板语法\n```\n\n* 在HTML中展示复选框\n\n```html\n<div id=\"app\">\n        <ul>\n            <li v-for=\" (todo,index) in todos \">\n                <input type=\"checkbox\" :checked=\"todo.complete\"> todo.content\n            </li>\n        </ul>\n    </div>\n```\n\n","slug":"vue_learning","published":1,"updated":"2023-11-13T02:02:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clowec7v3003elsvsbb2b39qx","content":"<h1 id=\"vue学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#vue学习笔记\"></a> Vue学习笔记</h1>\n<h2 id=\"vue数据管理使用data函数提供数据\"><a class=\"markdownIt-Anchor\" href=\"#vue数据管理使用data函数提供数据\"></a> Vue数据管理：使用data函数提供数据</h2>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-attr\">address</span>:&#123;<br>                <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;my_vue&quot;</span>,<br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>HTML使用模板语法展示返回的数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>hello!&#123;&#123;address.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"vue数据管理在html访问data属性\"><a class=\"markdownIt-Anchor\" href=\"#vue数据管理在html访问data属性\"></a> Vue数据管理：在HTML访问data属性</h2>\n<ul>\n<li>指令：是vue提供的一组可以直接在html模板中使用的特殊属性，例如：<code>v-bind</code>、<code>v-for</code>、<code>v-if</code>，用于实现数据绑定、循环、条件判断等。</li>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-attr\">link</span>:<span class=\"hljs-string\">&quot;https://chuiyugin.github.io/&quot;</span>,<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML访问data属性(<code>v-bind</code>可以简写为<code>:</code>)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;link&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"vue数据管理展示列表数据\"><a class=\"markdownIt-Anchor\" href=\"#vue数据管理展示列表数据\"></a> Vue数据管理：展示列表数据</h2>\n<ul>\n<li>使用v-for语句生成列表</li>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-attr\">todos</span>:[<span class=\"hljs-string\">&quot;学习Vue&quot;</span>,<span class=\"hljs-string\">&quot;热爱生活&quot;</span>,<span class=\"hljs-string\">&quot;平安喜乐&quot;</span>],<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML中生成列表(不带序号)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot; todo in todos &quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML中生成列表(带序号)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot; (todo,index) in todos &quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125; &#123;&#123;todo&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"复选框的使用\"><a class=\"markdownIt-Anchor\" href=\"#复选框的使用\"></a> 复选框的使用</h3>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-comment\">//todos:[&quot;学习Vue&quot;,&quot;热爱生活&quot;,&quot;平安喜乐&quot;],</span><br>            <span class=\"hljs-attr\">todos</span>: [<br>                &#123;<br>                  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;把项目做完&quot;</span>,<br>                  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">true</span>,<br>                &#125;,<br>                &#123;<br>                  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;去超市购物&quot;</span>,<br>                  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">false</span>,<br>                &#125;,<br>                &#123;<br>                  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;看10分钟的书&quot;</span>,<br>                  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">false</span>,<br>                &#125;,<br>              ],<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML中展示复选框</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot; (todo,index) in todos &quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">:checked</span>=<span class=\"hljs-string\">&quot;todo.complete&quot;</span>&gt;</span> todo.content<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"more":"<h1 id=\"vue学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#vue学习笔记\"></a> Vue学习笔记</h1>\n<h2 id=\"vue数据管理使用data函数提供数据\"><a class=\"markdownIt-Anchor\" href=\"#vue数据管理使用data函数提供数据\"></a> Vue数据管理：使用data函数提供数据</h2>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-attr\">address</span>:&#123;<br>                <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;my_vue&quot;</span>,<br>            &#125;<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>HTML使用模板语法展示返回的数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>hello!&#123;&#123;address.name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"vue数据管理在html访问data属性\"><a class=\"markdownIt-Anchor\" href=\"#vue数据管理在html访问data属性\"></a> Vue数据管理：在HTML访问data属性</h2>\n<ul>\n<li>指令：是vue提供的一组可以直接在html模板中使用的特殊属性，例如：<code>v-bind</code>、<code>v-for</code>、<code>v-if</code>，用于实现数据绑定、循环、条件判断等。</li>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-attr\">link</span>:<span class=\"hljs-string\">&quot;https://chuiyugin.github.io/&quot;</span>,<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML访问data属性(<code>v-bind</code>可以简写为<code>:</code>)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">v-bind:href</span>=<span class=\"hljs-string\">&quot;link&quot;</span>&gt;</span>链接<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"vue数据管理展示列表数据\"><a class=\"markdownIt-Anchor\" href=\"#vue数据管理展示列表数据\"></a> Vue数据管理：展示列表数据</h2>\n<ul>\n<li>使用v-for语句生成列表</li>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-attr\">todos</span>:[<span class=\"hljs-string\">&quot;学习Vue&quot;</span>,<span class=\"hljs-string\">&quot;热爱生活&quot;</span>,<span class=\"hljs-string\">&quot;平安喜乐&quot;</span>],<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML中生成列表(不带序号)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot; todo in todos &quot;</span>&gt;</span>&#123;&#123;todo&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML中生成列表(带序号)</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot; (todo,index) in todos &quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125; &#123;&#123;todo&#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"复选框的使用\"><a class=\"markdownIt-Anchor\" href=\"#复选框的使用\"></a> 复选框的使用</h3>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">createApp</span>(&#123;<br>    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-comment\">//data函数返回数据，可以是任何类型</span><br>        <span class=\"hljs-keyword\">return</span>&#123;<br>            <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;vue&quot;</span>,<br>            <span class=\"hljs-comment\">//todos:[&quot;学习Vue&quot;,&quot;热爱生活&quot;,&quot;平安喜乐&quot;],</span><br>            <span class=\"hljs-attr\">todos</span>: [<br>                &#123;<br>                  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;把项目做完&quot;</span>,<br>                  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">true</span>,<br>                &#125;,<br>                &#123;<br>                  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;去超市购物&quot;</span>,<br>                  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">false</span>,<br>                &#125;,<br>                &#123;<br>                  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-string\">&quot;看10分钟的书&quot;</span>,<br>                  <span class=\"hljs-attr\">complete</span>: <span class=\"hljs-literal\">false</span>,<br>                &#125;,<br>              ],<br>        &#125; <br>    &#125;<br>&#125;);<br>app.<span class=\"hljs-title function_\">mount</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>);<span class=\"hljs-comment\">//使得app成为模板，可以使用模板语法</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>在HTML中展示复选框</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">&quot; (todo,index) in todos &quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;checkbox&quot;</span> <span class=\"hljs-attr\">:checked</span>=<span class=\"hljs-string\">&quot;todo.complete&quot;</span>&gt;</span> todo.content<br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clowec7ud0001lsvs0whzb9le","category_id":"clowec7uh0004lsvs9ne4bvz1","_id":"clowec7ul000elsvschwa0soa"},{"post_id":"clowec7ug0003lsvs9b4v2e6g","category_id":"clowec7uk0009lsvs1ua2fugp","_id":"clowec7un000klsvs3jhkbjy2"},{"post_id":"clowec7ui0006lsvse1rp1fa2","category_id":"clowec7ul000flsvsfyta37rc","_id":"clowec7uo000qlsvsfj2k3s23"},{"post_id":"clowec7uj0007lsvsfasg7ydq","category_id":"clowec7un000llsvs6wshebcu","_id":"clowec7up000wlsvsf2h0am4u"},{"post_id":"clowec7uj0008lsvs7nfihtw8","category_id":"clowec7uo000rlsvs4gf44oh6","_id":"clowec7uq0012lsvseaeff0p2"},{"post_id":"clowec7up000xlsvsbiwgf2if","category_id":"clowec7uo000rlsvs4gf44oh6","_id":"clowec7us0016lsvsel7ndpg6"},{"post_id":"clowec7uk000clsvs3cvk8m9w","category_id":"clowec7up000ylsvs717gaqg0","_id":"clowec7ut001blsvs3e2358gs"},{"post_id":"clowec7ul000dlsvscteu0k9c","category_id":"clowec7uo000rlsvs4gf44oh6","_id":"clowec7uu001elsvs0flvhp6p"},{"post_id":"clowec7um000hlsvsgtbh2g9d","category_id":"clowec7ut001alsvs7oz72wzn","_id":"clowec7uv001jlsvsgnqp6v45"},{"post_id":"clowec7um000jlsvs9gtifd85","category_id":"clowec7uo000rlsvs4gf44oh6","_id":"clowec7uv001nlsvs2ky23ah2"},{"post_id":"clowec7un000nlsvshqs8ezx5","category_id":"clowec7uu001ilsvs8yl9d4fb","_id":"clowec7uw001rlsvscs5b2m9c"},{"post_id":"clowec7un000plsvs10ydf94q","category_id":"clowec7uu001ilsvs8yl9d4fb","_id":"clowec7uw001vlsvsdto6d8o6"},{"post_id":"clowec7uo000tlsvs9svv9jst","category_id":"clowec7uo000rlsvs4gf44oh6","_id":"clowec7ux001zlsvsedit2vgk"},{"post_id":"clowec7up000vlsvs2wlv7xdf","category_id":"clowec7uw001ulsvs32w0g3u0","_id":"clowec7ux0022lsvs2o0009st"},{"post_id":"clowec7uq0010lsvs0lvg967q","category_id":"clowec7ux0020lsvs9sop3rj4","_id":"clowec7uy0027lsvs86vl7q9t"},{"post_id":"clowec7uq0011lsvs8w5v68fp","category_id":"clowec7ux0020lsvs9sop3rj4","_id":"clowec7uy002blsvsd1a8gnd5"},{"post_id":"clowec7us0015lsvs2j3dc55k","category_id":"clowec7ux0020lsvs9sop3rj4","_id":"clowec7uz002flsvs735ogd89"},{"post_id":"clowec7us0018lsvsfgue9g77","category_id":"clowec7ux0020lsvs9sop3rj4","_id":"clowec7uz002ilsvsc1ahg8c0"},{"post_id":"clowec7ut001dlsvsh24ehvut","category_id":"clowec7ux0020lsvs9sop3rj4","_id":"clowec7uz002llsvsgw9v446e"},{"post_id":"clowec7v3003dlsvs525b4sdj","category_id":"clowec7uo000rlsvs4gf44oh6","_id":"clowec7v4003hlsvs8d4ef36s"},{"post_id":"clowec7v3003elsvsbb2b39qx","category_id":"clowec7v4003glsvs1wrie7ee","_id":"clowec7v4003llsvs9fd1he4g"}],"PostTag":[{"post_id":"clowec7ud0001lsvs0whzb9le","tag_id":"clowec7ui0005lsvs33z35rth","_id":"clowec7uk000blsvs96ai7gqb"},{"post_id":"clowec7ug0003lsvs9b4v2e6g","tag_id":"clowec7uk000alsvs9og7gr27","_id":"clowec7um000ilsvs9sj0dgqd"},{"post_id":"clowec7ui0006lsvse1rp1fa2","tag_id":"clowec7ul000glsvsdzivhac0","_id":"clowec7un000olsvs2u135qw5"},{"post_id":"clowec7uj0007lsvsfasg7ydq","tag_id":"clowec7un000mlsvs0eyyf8br","_id":"clowec7up000ulsvs8tbd7stl"},{"post_id":"clowec7uj0008lsvs7nfihtw8","tag_id":"clowec7uo000slsvs7qq95hh8","_id":"clowec7us0017lsvsf5onhx7e"},{"post_id":"clowec7uj0008lsvs7nfihtw8","tag_id":"clowec7up000zlsvsgrlr21ls","_id":"clowec7ut0019lsvsgggrhm23"},{"post_id":"clowec7uk000clsvs3cvk8m9w","tag_id":"clowec7ur0014lsvs4txqabpf","_id":"clowec7uu001hlsvsb71rc813"},{"post_id":"clowec7uk000clsvs3cvk8m9w","tag_id":"clowec7ut001clsvsfiue9dvg","_id":"clowec7uv001klsvsehskbd83"},{"post_id":"clowec7ul000dlsvscteu0k9c","tag_id":"clowec7uo000slsvs7qq95hh8","_id":"clowec7uv001mlsvs0p48b0mx"},{"post_id":"clowec7um000hlsvsgtbh2g9d","tag_id":"clowec7uv001llsvsg5mpcer6","_id":"clowec7uw001tlsvs256hd3t7"},{"post_id":"clowec7um000hlsvsgtbh2g9d","tag_id":"clowec7uv001plsvscfb22yqx","_id":"clowec7uw001wlsvs9q1o0bs7"},{"post_id":"clowec7um000jlsvs9gtifd85","tag_id":"clowec7uo000slsvs7qq95hh8","_id":"clowec7uw001ylsvs379fhxlk"},{"post_id":"clowec7un000nlsvshqs8ezx5","tag_id":"clowec7uw001xlsvs653db4ot","_id":"clowec7ux0025lsvs8lpv9xai"},{"post_id":"clowec7un000nlsvshqs8ezx5","tag_id":"clowec7ux0021lsvsha328nlg","_id":"clowec7uy0028lsvs4yhg1n8n"},{"post_id":"clowec7un000plsvs10ydf94q","tag_id":"clowec7uw001xlsvs653db4ot","_id":"clowec7uz002dlsvs7bbpcf1r"},{"post_id":"clowec7un000plsvs10ydf94q","tag_id":"clowec7ux0021lsvsha328nlg","_id":"clowec7uz002glsvs4ltg0iz6"},{"post_id":"clowec7uo000tlsvs9svv9jst","tag_id":"clowec7uo000slsvs7qq95hh8","_id":"clowec7uz002klsvs0syw109p"},{"post_id":"clowec7uo000tlsvs9svv9jst","tag_id":"clowec7uz002hlsvsgjfq5vmq","_id":"clowec7uz002mlsvs38a9ek1y"},{"post_id":"clowec7up000vlsvs2wlv7xdf","tag_id":"clowec7uz002jlsvs4x1251e2","_id":"clowec7v0002plsvs5rxz8aba"},{"post_id":"clowec7up000vlsvs2wlv7xdf","tag_id":"clowec7uz002nlsvs6z9ibm1w","_id":"clowec7v0002qlsvs53qi016r"},{"post_id":"clowec7up000xlsvsbiwgf2if","tag_id":"clowec7uo000slsvs7qq95hh8","_id":"clowec7v0002slsvsenlv3eqo"},{"post_id":"clowec7up000xlsvsbiwgf2if","tag_id":"clowec7v0002olsvs5hwk87vg","_id":"clowec7v0002tlsvs061caksy"},{"post_id":"clowec7uq0010lsvs0lvg967q","tag_id":"clowec7v0002rlsvse9ql8uo3","_id":"clowec7v0002wlsvsagr5chiv"},{"post_id":"clowec7uq0010lsvs0lvg967q","tag_id":"clowec7v0002ulsvs9bsqhbx3","_id":"clowec7v0002xlsvs0u7w9m9e"},{"post_id":"clowec7uq0011lsvs8w5v68fp","tag_id":"clowec7v0002rlsvse9ql8uo3","_id":"clowec7v10030lsvsevhaeg6j"},{"post_id":"clowec7uq0011lsvs8w5v68fp","tag_id":"clowec7v0002ulsvs9bsqhbx3","_id":"clowec7v10031lsvs8yin1dr3"},{"post_id":"clowec7us0015lsvs2j3dc55k","tag_id":"clowec7v0002rlsvse9ql8uo3","_id":"clowec7v10034lsvsbxr5cf3f"},{"post_id":"clowec7us0015lsvs2j3dc55k","tag_id":"clowec7v0002ulsvs9bsqhbx3","_id":"clowec7v10035lsvsgokd7t5c"},{"post_id":"clowec7us0018lsvsfgue9g77","tag_id":"clowec7v0002rlsvse9ql8uo3","_id":"clowec7v20038lsvs9f662jme"},{"post_id":"clowec7us0018lsvsfgue9g77","tag_id":"clowec7v0002ulsvs9bsqhbx3","_id":"clowec7v20039lsvsgpxba9jt"},{"post_id":"clowec7ut001dlsvsh24ehvut","tag_id":"clowec7v0002rlsvse9ql8uo3","_id":"clowec7v2003blsvs4irqfksq"},{"post_id":"clowec7ut001dlsvsh24ehvut","tag_id":"clowec7v0002ulsvs9bsqhbx3","_id":"clowec7v2003clsvs5w9w56qr"},{"post_id":"clowec7v3003dlsvs525b4sdj","tag_id":"clowec7uo000slsvs7qq95hh8","_id":"clowec7v4003jlsvsb3hw9w7c"},{"post_id":"clowec7v3003dlsvs525b4sdj","tag_id":"clowec7v4003flsvs8vnk3oai","_id":"clowec7v4003klsvsdu4q15gu"},{"post_id":"clowec7v3003elsvsbb2b39qx","tag_id":"clowec7v4003ilsvs5yzcavb8","_id":"clowec7v4003mlsvs689i50dy"}],"Tag":[{"name":"汇编语言","_id":"clowec7ui0005lsvs33z35rth"},{"name":"Autohotkey","_id":"clowec7uk000alsvs9og7gr27"},{"name":"深度学习","_id":"clowec7ul000glsvsdzivhac0"},{"name":"Fliplt","_id":"clowec7un000mlsvs0eyyf8br"},{"name":"数据结构","_id":"clowec7uo000slsvs7qq95hh8"},{"name":"c语言","_id":"clowec7up000zlsvsgrlr21ls"},{"name":"PYTHON","_id":"clowec7ur0014lsvs4txqabpf"},{"name":"exe","_id":"clowec7ut001clsvsfiue9dvg"},{"name":"Web","_id":"clowec7uv001llsvsg5mpcer6"},{"name":"HTML","_id":"clowec7uv001plsvscfb22yqx"},{"name":"JAVA","_id":"clowec7uw001xlsvs653db4ot"},{"name":"程序设计","_id":"clowec7ux0021lsvsha328nlg"},{"name":"图","_id":"clowec7uz002hlsvsgjfq5vmq"},{"name":"Hexo","_id":"clowec7uz002jlsvs4x1251e2"},{"name":"部署","_id":"clowec7uz002nlsvs6z9ibm1w"},{"name":"分治法","_id":"clowec7v0002olsvs5hwk87vg"},{"name":"数字信号处理","_id":"clowec7v0002rlsvse9ql8uo3"},{"name":"算法","_id":"clowec7v0002ulsvs9bsqhbx3"},{"name":"排序","_id":"clowec7v4003flsvs8vnk3oai"},{"name":"Vue","_id":"clowec7v4003ilsvs5yzcavb8"}]}}