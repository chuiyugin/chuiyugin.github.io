<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NoteBook</title>
    <link href="/2022/09/04/Notebook/"/>
    <url>/2022/09/04/Notebook/</url>
    
    <content type="html"><![CDATA[<h1 id="My-Notebook"><a href="#My-Notebook" class="headerlink" title="My_Notebook"></a>My_Notebook</h1><h2 id="np-fromfile用法"><a href="#np-fromfile用法" class="headerlink" title="np.fromfile用法"></a>np.fromfile用法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">numpy.fromfile(file, dtype=<span class="hljs-built_in">float</span>, count=- <span class="hljs-number">1</span>, sep=<span class="hljs-string">&#x27;&#x27;</span>, offset=<span class="hljs-number">0</span>, *, like=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>从文本或二进制文件中的数据构造一个数组。</p><p>一种读取具有已知数据类型的二进制数据以及解析简单格式化的文本文件的高效方法。使用 tofile 方法写入的数据可以使用此函数读取。</p><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><ul><li><p><strong>file</strong>： 文件或 str 或路径</p><p>打开文件对象或文件名。</p></li><li><p><strong>dtype</strong>： 数据类型</p><p>返回数组的数据类型。对于二进制文件，它用于确定文件中项目的大小和字节顺序。支持大多数内置数字类型，并且可能支持扩展类型。</p></li><li><p><strong>count</strong>： int</p><p>要阅读的项目数。 <code>-1</code> 表示所有项目(即完整文件)。</p></li><li><p><strong>sep</strong>： str</p><p>如果文件是文本文件，则项目之间的分隔符。空(“”)分隔符表示文件应被视为二进制文件。分隔符中的空格 (“ “) 匹配零个或多个空白字符。仅由空格组成的分隔符必须至少匹配一个空格。</p></li><li><p><strong>offset</strong>： int</p><p>与文件当前位置的偏移量(以字节为单位)。默认为 0。仅允许用于二进制文件。</p></li><li><p><strong>like</strong>： array_like</p><p>允许创建不是NumPy 数组的数组的引用对象。如果作为<code>like</code> 传入的array-like 支持<code>__array_function__</code> 协议，则结果将由它定义。在这种情况下，它确保创建一个与通过此参数传入的对象兼容的数组对象。</p></li></ul><h2 id="np-shape的用法"><a href="#np-shape的用法" class="headerlink" title="np.shape的用法"></a>np.shape的用法</h2><p>shape函数是Numpy中的函数，它的功能是读取矩阵的长度，比如shape[0]就是读取矩阵第一维度的长度。</p><p>直接用.shape可以快速读取矩阵的形状，使用shape[0]读取矩阵第一维度的长度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>x=np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.shape)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>第一个是行数，第二个是列数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>x=np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(x.shape[<span class="hljs-number">0</span>])<br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p> shape[0]读取矩阵第一维度的长度，即数组的行数。 同理，shape[1]读取矩阵的列数。</p><h2 id="axis的概念"><a href="#axis的概念" class="headerlink" title="axis的概念"></a>axis的概念</h2><p>numpy数组中：</p><ul><li><p>一维数组拥有一个轴：axis=0；</p></li><li><p>二维数组拥有两个轴：axis=0，axis=1；</p></li><li><p>三维数组拥有三个轴：axis=0，axis=1，axis=2。</p></li><li><p>四维数组拥有三个轴：axis=0，axis=1，axis=2，axis=3。</p><p>说明： numpy数组都有<code>[]</code>标记，其对应关系：axis=0对应最外层的<code>[]</code>，axis=1对应第二外层的<code>[]</code>，…，axis=n对应第  n外层的<code>[]</code>。 </p></li></ul><h2 id="np-max-np-sum"><a href="#np-max-np-sum" class="headerlink" title="np.max()       np. sum()"></a>np.max()       np. sum()</h2><h3 id="np-max-np-min"><a href="#np-max-np-min" class="headerlink" title="np.max(),np.min()"></a>np.max(),np.min()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;a = np.array(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">12</span>))<br>&gt;&gt;&gt;b = a.reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br>&gt;&gt;&gt;b<br>array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>       [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">max</span>(b)  <span class="hljs-comment">#max number</span><br><span class="hljs-number">11</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">max</span>(b, axis=<span class="hljs-number">0</span>)   <span class="hljs-comment">#看结果是取出最大的一行</span><br>array([ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">max</span>(b, axis=<span class="hljs-number">1</span>) <span class="hljs-comment">#看结果是取出最大的一列</span><br>array([ <span class="hljs-number">3</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])<br><br>下面我们把数据改一下，看看是这个结果是怎么出来的，是每一行去最大的数，还是取每一行求和最大的数<br><span class="hljs-meta">&gt;&gt;&gt; </span>b = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">3</span>],<br>              [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],<br>              [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">max</span>(b, axis=<span class="hljs-number">0</span>)<br>array([ <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">11</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">max</span>(b, axis=<span class="hljs-number">1</span>)<br>array([<span class="hljs-number">30</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])<br>＃事实上：结果是每一行取出最大的那一个数（axis=<span class="hljs-number">1</span>）,每一列取出最大的数（axis=<span class="hljs-number">0</span>）             <br></code></pre></td></tr></table></figure><h3 id="np-sum"><a href="#np-sum" class="headerlink" title="np. sum()"></a>np. sum()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=[[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]] <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>a =  np.array(a)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>       [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>],<br>       [<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">sum</span>(a, axis=<span class="hljs-number">0</span>)  <span class="hljs-comment">#往x轴上投影</span><br>array([<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>np.<span class="hljs-built_in">sum</span>(a, axis=<span class="hljs-number">1</span>) ＃<span class="hljs-comment">#往y轴上投影</span><br>array([ <span class="hljs-number">4</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">12</span>])<br></code></pre></td></tr></table></figure><h2 id="numpy中切片-1-与-1："><a href="#numpy中切片-1-与-1：" class="headerlink" title="numpy中切片            :-1  与  -1："></a>numpy中切片            :-1  与  -1：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br>a<br>输出：<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#:-1的情况</span><br>y=a[:,:-<span class="hljs-number">1</span>]<br>y<br>输出：<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>       [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#-1:的情况</span><br>x=a[:,-<span class="hljs-number">1</span>:]<br>x<br>输出：<br>array([[<span class="hljs-number">3</span>],<br>       [<span class="hljs-number">5</span>],<br>       [<span class="hljs-number">6</span>]])<br></code></pre></td></tr></table></figure><h2 id="numpy-dot用法解释"><a href="#numpy-dot用法解释" class="headerlink" title="numpy dot用法解释"></a>numpy dot用法解释</h2><p>NumPy库中dot()函数语法定义：</p><p>import numpy as np</p><p>np.dot(a, b, out=None)  #该函数的作用是获取两个元素a,b的乘积.</p><p>数组的运算是元素级的，数组相乘的结果是各对应元素的积组成的数组，而对于矩阵而言，需要求的是点积，这里NumPy库提供了用于矩阵乘法的dot函数。</p><h3 id="1-只有两个数据为直接相乘。"><a href="#1-只有两个数据为直接相乘。" class="headerlink" title="1. 只有两个数据为直接相乘。"></a>1. 只有两个数据为直接相乘。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>np.dot(<span class="hljs-number">5</span>,<span class="hljs-number">8</span>)<br> <br><span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h3 id="2-如果arr1和arr都是一维数组，那么它返回的就是向量的内积。"><a href="#2-如果arr1和arr都是一维数组，那么它返回的就是向量的内积。" class="headerlink" title="2. 如果arr1和arr都是一维数组，那么它返回的就是向量的内积。"></a>2. 如果arr1和arr都是一维数组，那么它返回的就是向量的内积。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr1 = np.array([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>arr2 = np.array([<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br> <br><span class="hljs-meta">&gt;&gt;&gt; </span>np.dot(arr1,arr2)<br> <br><span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><h3 id="3-多维的数据为矩阵乘法"><a href="#3-多维的数据为矩阵乘法" class="headerlink" title="3.多维的数据为矩阵乘法"></a>3.多维的数据为矩阵乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>arr3 =  np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr3<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>       [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr4 = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>arr4<br>array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(arr3.shape,arr4.shape)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>) (<span class="hljs-number">3</span>,)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dot(arr3,arr4))  <span class="hljs-comment">#此时arr4当作一个3x1的列向量</span><br>[<span class="hljs-number">14</span> <span class="hljs-number">32</span> <span class="hljs-number">50</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(np.dot(arr4,arr3))  <span class="hljs-comment">#此时arr4当作一个1x3的行向量</span><br>[<span class="hljs-number">30</span> <span class="hljs-number">36</span> <span class="hljs-number">42</span>]<br></code></pre></td></tr></table></figure><h2 id="numpy-random-randn-的用法"><a href="#numpy-random-randn-的用法" class="headerlink" title="numpy.random.randn()的用法"></a>numpy.random.randn()的用法</h2><p>numpy.random.randn(d0,d1,…,dn)</p><ul><li>randn函数返回一个或一组样本，具有标准正态分布。</li><li>dn表格每个维度</li><li>返回值为指定维度的array</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.randn() <span class="hljs-comment"># 当没有参数时，返回单个数据</span><br><span class="hljs-comment">#输出：</span><br>-<span class="hljs-number">1.1241580894939212</span><br><br>np.random.randn(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">0.27795239</span>, -<span class="hljs-number">2.57882503</span>,  <span class="hljs-number">0.3817649</span> ,  <span class="hljs-number">1.42367345</span>],<br>       [-<span class="hljs-number">1.16724625</span>, -<span class="hljs-number">0.22408299</span>,  <span class="hljs-number">0.63006614</span>, -<span class="hljs-number">0.41714538</span>]])<br><br>np.random.randn(<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>) <span class="hljs-comment"># shape: 4*3*2</span><br><span class="hljs-comment">#输出：</span><br>array([[[ <span class="hljs-number">1.27820764</span>,  <span class="hljs-number">0.92479163</span>],<br>        [-<span class="hljs-number">0.15151257</span>,  <span class="hljs-number">1.3428253</span> ],<br>        [-<span class="hljs-number">1.30948998</span>,  <span class="hljs-number">0.15493686</span>]],<br> <br>       [[-<span class="hljs-number">1.49645411</span>, -<span class="hljs-number">0.27724089</span>],<br>        [ <span class="hljs-number">0.71590275</span>,  <span class="hljs-number">0.81377671</span>],<br>        [-<span class="hljs-number">0.71833341</span>,  <span class="hljs-number">1.61637676</span>]],<br> <br>       [[ <span class="hljs-number">0.52486563</span>, -<span class="hljs-number">1.7345101</span> ],<br>        [ <span class="hljs-number">1.24456943</span>, -<span class="hljs-number">0.10902915</span>],<br>        [ <span class="hljs-number">1.27292735</span>, -<span class="hljs-number">0.00926068</span>]],<br> <br>       [[ <span class="hljs-number">0.88303</span>   ,  <span class="hljs-number">0.46116413</span>],<br>        [ <span class="hljs-number">0.13305507</span>,  <span class="hljs-number">2.44968809</span>],<br>        [-<span class="hljs-number">0.73132153</span>, -<span class="hljs-number">0.88586716</span>]]])<br></code></pre></td></tr></table></figure><h2 id="面向对象的使用"><a href="#面向对象的使用" class="headerlink" title="面向对象的使用"></a>面向对象的使用</h2><h3 id="1-定义简单的类（只包含方法）"><a href="#1-定义简单的类（只包含方法）" class="headerlink" title="1.定义简单的类（只包含方法）"></a>1.定义简单的类（只包含方法）</h3><p>类名满足大驼峰命名法</p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662112351595.png" alt="1662112351595"></p><h3 id="2-创建对象"><a href="#2-创建对象" class="headerlink" title="2.创建对象"></a>2.创建对象</h3><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662112491807.png" alt="1662112491807"></p><h3 id="3-第一个程序"><a href="#3-第一个程序" class="headerlink" title="3.第一个程序"></a>3.第一个程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;eat&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drink</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;drink&quot;</span>)<br><br>tom = Cat()<br>tom.eat()<br>tom.drink()<br></code></pre></td></tr></table></figure><h3 id="4-self的含义"><a href="#4-self的含义" class="headerlink" title="4.self的含义"></a>4.self的含义</h3><p>由哪一个对象调用的方法，方法内的self就是哪一个对象的引用。</p><p>在方法内部可以通过  self.  来访问对象的属性，也可以通过  self.  调用其它的对象方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eat</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s eat&quot;</span> %self.name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">drink</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s drink&quot;</span> %self.name)<br><br>tom = Cat()<br>tom.name=<span class="hljs-string">&quot;Tom&quot;</span>  <span class="hljs-comment">#在对象外部增加属性，但是不推荐使用</span><br>tom.eat()<br>tom.drink()<br><br><br>lazy_cat =Cat()<br>lazy_cat.name=<span class="hljs-string">&quot;lazy_cat&quot;</span><br>lazy_cat.eat()<br>lazy_cat.drink()<br><br></code></pre></td></tr></table></figure><p>重新定义类，在里面加入self的内容。</p><p>注意：对象应该包含有哪些属性，应该封装在类的内部。</p><h3 id="5-初始化构造方法"><a href="#5-初始化构造方法" class="headerlink" title="5.初始化构造方法"></a>5.初始化构造方法</h3><p>当使用 类名() 创建对象时，会自动执行一下操作：</p><p>1.为对象在内存中 分配空间  —  创建对象</p><p>2.为对象的属性  设置初始值  —  初始化方法（init）</p><ul><li>这个初始化方法就是 <code>__init__</code> 方法,<code>__init__</code> 方法是对象的内置方法</li><li> <code>__init__</code> 方法是专门用来定义一个类具有哪些属性的方法！</li><li>在<code>__init__</code>方法来定义属性，self.属性名 = 属性的初始值，在创建类的时候就有默认属性</li><li>在<code>__init__</code>后加入形参就可以设定所创建对象的特定属性，创建对象更加灵活</li><li>在创建对象时，使用 类名(属性1，属性2，… )调用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,new_name</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个初始化方法&quot;</span>)<br><br>        <span class="hljs-comment">#self.属性名 = 属性的初始值</span><br>        self.name = new_name<br><span class="hljs-comment">#使用类名()创建对象的时候，会自动调用初始化方法__init__</span><br>car=Car(<span class="hljs-string">&quot;car&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    name = <span class="hljs-literal">None</span><br>    age = <span class="hljs-literal">None</span><br>    tel = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,name,age,tel</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个初始化方法&quot;</span>)<br>        <span class="hljs-comment">#self.属性名 = 属性的初始值</span><br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br><span class="hljs-comment">#使用类名()创建对象的时候，会自动调用初始化方法__init__</span><br>student=Student(<span class="hljs-string">&quot;simon&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;12345&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="6-常用内置方法"><a href="#6-常用内置方法" class="headerlink" title="6.常用内置方法"></a>6.常用内置方法</h3><h4 id="1-str-字符串方法"><a href="#1-str-字符串方法" class="headerlink" title="1. __str__字符串方法"></a>1. <code>__str__</code>字符串方法</h4><p>可以通过<code>__str__</code>字符串方法，控制类转换为字符串的行为，直接输出类对象的时候不再输出地址，而是转变成我们希望输出的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    name = <span class="hljs-literal">None</span><br>    age = <span class="hljs-literal">None</span><br>    tel = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,name,age,tel</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个初始化方法&quot;</span>)<br>        <span class="hljs-comment">#self.属性名 = 属性的初始值</span><br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;name:<span class="hljs-subst">&#123;self.name&#125;</span>,age:<span class="hljs-subst">&#123;self.age&#125;</span>&quot;</span><br><br><br><span class="hljs-comment">#使用类名()创建对象的时候，会自动调用初始化方法__init__</span><br>student=Student(<span class="hljs-string">&quot;simon&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;12345&quot;</span>)<br><br><span class="hljs-built_in">print</span>(student)<br><br><span class="hljs-comment">#输出：  name:simon,age:18</span><br></code></pre></td></tr></table></figure><h4 id="2-lt-小于符号的比较方法"><a href="#2-lt-小于符号的比较方法" class="headerlink" title="2.__lt__小于符号的比较方法"></a>2.<code>__lt__</code>小于符号的比较方法</h4><p>能够进行类对象中属性的比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>:</span><br><br>    name = <span class="hljs-literal">None</span><br>    age = <span class="hljs-literal">None</span><br>    tel = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self,name,age,tel</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这是一个初始化方法&quot;</span>)<br>        <span class="hljs-comment">#self.属性名 = 属性的初始值</span><br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__lt__</span>(<span class="hljs-params">self,other</span>):</span><br>        <span class="hljs-keyword">return</span> self.age &lt; other.age<br><br><span class="hljs-comment">#使用类名()创建对象的时候，会自动调用初始化方法__init__</span><br>student=Student(<span class="hljs-string">&quot;simon&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;12345&quot;</span>)<br>student_2=Student(<span class="hljs-string">&quot;scordingbig&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;12346&quot;</span>)<br><span class="hljs-built_in">print</span>(student&lt;student_2)<br><span class="hljs-built_in">print</span>(student&gt;student_2)<br><br><span class="hljs-comment">#输出：</span><br>     <span class="hljs-literal">True</span><br>     <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h4 id="3-le-小于等于符号的比较方法-和-eq-相等符号的比较方法"><a href="#3-le-小于等于符号的比较方法-和-eq-相等符号的比较方法" class="headerlink" title="3.__le__小于等于符号的比较方法   和    __eq__相等符号的比较方法"></a>3.<code>__le__</code>小于等于符号的比较方法   和    <code>__eq__</code>相等符号的比较方法</h4><p>与上述方法使用方法相同！</p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662171809898.png" alt="1662171809898"></p><h3 id="7-封装：将现实世界事物在类中描述为属性和方法"><a href="#7-封装：将现实世界事物在类中描述为属性和方法" class="headerlink" title="7.封装：将现实世界事物在类中描述为属性和方法"></a>7.封装：将现实世界事物在类中描述为属性和方法</h3><h4 id="1-定义一个类，内部含有私有成员变量和私有成员方法"><a href="#1-定义一个类，内部含有私有成员变量和私有成员方法" class="headerlink" title="1.定义一个类，内部含有私有成员变量和私有成员方法"></a>1.定义一个类，内部含有私有成员变量和私有成员方法</h4><ul><li><p>私有成员变量：变量名字前面加入 <code>__</code></p></li><li><p>私有成员方法：方法名字前面加入 <code>__</code></p></li><li><p>私有成员变量和私有成员方法无法被类对象直接使用，但是类中的其他成员是可以访问私有的内容</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>:</span><br><br>    __current_voltage = <span class="hljs-number">0.5</span>  <span class="hljs-comment">#当前手机运行电压</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__keep_single_core</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;让CPU保持单核模式运行&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_5g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> self.__current_voltage &gt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;5g ready&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.__keep_single_core()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;电量不足&quot;</span>)<br><br>phone = Phone()<br>phone.call_by_5g()<br><br><span class="hljs-comment">#输出：</span><br>让CPU保持单核模式运行<br>电量不足<br></code></pre></td></tr></table></figure><h3 id="8-继承"><a href="#8-继承" class="headerlink" title="8.继承"></a>8.继承</h3><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662173440701.png" alt="1662173440701"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#继承的基础语法</span><br><br><span class="hljs-comment">#单继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>:</span><br>    IMEI = <span class="hljs-literal">None</span> <span class="hljs-comment">#序列号</span><br>    producer = <span class="hljs-string">&quot;scordingbig&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4g通话&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone2022</span>(<span class="hljs-params">Phone</span>):</span><br>    face_id = <span class="hljs-string">&quot;10001&quot;</span>  <span class="hljs-comment">#面部识别ID</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_5g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2022年新功能：5G通话&quot;</span>)<br><br><br>phone = Phone2022()<br><span class="hljs-built_in">print</span>(phone.producer)<br>phone.call_by_4g()<br><span class="hljs-built_in">print</span>(phone.face_id)<br>phone.call_by_5g()<br><br><span class="hljs-comment">#输出：</span><br><span class="hljs-comment">#scordingbig</span><br><span class="hljs-comment">#4g通话</span><br><span class="hljs-comment">#10001</span><br><span class="hljs-comment">#2022年新功能：5G通话</span><br></code></pre></td></tr></table></figure><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662174063370.png" alt="1662174063370"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#继承的基础语法</span><br><br><span class="hljs-comment">#多继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>:</span><br>    IMEI = <span class="hljs-literal">None</span> <span class="hljs-comment">#序列号</span><br>    producer = <span class="hljs-string">&quot;scordingbig&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4g通话&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NFCReader</span>:</span><br>    nfc_type=<span class="hljs-string">&quot;第五代&quot;</span><br>    producer= <span class="hljs-string">&quot;scordingbig_2&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_card</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NFC读卡&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_card</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NFC写卡&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteCrl</span>:</span><br>    rc_type=<span class="hljs-string">&quot;红外遥控&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">control</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开启了红外遥控&quot;</span>)<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone2022</span>(<span class="hljs-params">Phone,NFCReader,RemoteCrl</span>):</span><br>    face_id = <span class="hljs-string">&quot;10001&quot;</span>  <span class="hljs-comment">#面部识别ID</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_5g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2022年新功能：5G通话&quot;</span>)<br><br>phone = Phone2022()<br><span class="hljs-built_in">print</span>(phone.producer)<br>phone.call_by_4g()<br><span class="hljs-built_in">print</span>(phone.face_id)<br>phone.call_by_5g()<br>phone.control()<br>phone.write_card()<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>在创建类中使用<code>pass</code>可以不需要额外增加语句。</li><li>对于同名的成员，按照继承顺序优先原则，先继承优先级高于后继承</li></ul><h4 id="复写"><a href="#复写" class="headerlink" title="复写"></a>复写</h4><p>子类继承父类的成员属性和成员方法后，如果对其”不满意“，那么可以进行复写。</p><p>使用方法：在子类中重新定义同名属性或者方法即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#复写</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>:</span><br>    IMEI = <span class="hljs-literal">None</span> <span class="hljs-comment">#序列号</span><br>    producer = <span class="hljs-string">&quot;scordingbig&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4g通话&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone2022</span>(<span class="hljs-params">Phone</span>):</span><br>    producer = <span class="hljs-string">&quot;scordingbig_1&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2022年新功能：5G通话&quot;</span>)<br><br>phone = Phone2022()<br><span class="hljs-built_in">print</span>(phone.producer)<br>phone.call_by_4g()<br></code></pre></td></tr></table></figure><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662175676520.png" alt="1662175676520"></p><p>单继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#复写</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>:</span><br>    IMEI = <span class="hljs-literal">None</span> <span class="hljs-comment">#序列号</span><br>    producer = <span class="hljs-string">&quot;scordingbig&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4g通话&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone2022</span>(<span class="hljs-params">Phone</span>):</span><br>    producer = <span class="hljs-string">&quot;scordingbig_1&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2022年新功能：5G通话&quot;</span>)<br><br>        <span class="hljs-comment">#调用父类的成员（方式1）</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;父类的厂商为：<span class="hljs-subst">&#123;Phone.producer&#125;</span>&quot;</span>)<br>        Phone.call_by_4g(self)<br><br>        <span class="hljs-comment"># 调用父类的成员（方式1）</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;父类的厂商为：<span class="hljs-subst">&#123;<span class="hljs-built_in">super</span>().producer&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">super</span>().call_by_4g()<br><br>phone = Phone2022()<br><span class="hljs-built_in">print</span>(phone.producer)<br>phone.call_by_4g()<br></code></pre></td></tr></table></figure><p>多继承：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#继承的基础语法</span><br><br><span class="hljs-comment">#多继承</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span>:</span><br>    IMEI = <span class="hljs-literal">None</span> <span class="hljs-comment">#序列号</span><br>    producer = <span class="hljs-string">&quot;scordingbig_1&quot;</span>  <span class="hljs-comment">#厂商</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_4g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;4g通话&quot;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NFCReader</span>:</span><br>    nfc_type=<span class="hljs-string">&quot;第五代&quot;</span><br>    producer= <span class="hljs-string">&quot;scordingbig_2&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_card</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NFC读卡&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_card</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;NFC写卡&quot;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteCrl</span>:</span><br>    rc_type=<span class="hljs-string">&quot;红外遥控&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">control</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;开启了红外遥控&quot;</span>)<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone2022</span>(<span class="hljs-params">Phone,NFCReader,RemoteCrl</span>):</span><br>    face_id = <span class="hljs-string">&quot;10001&quot;</span>  <span class="hljs-comment">#面部识别ID</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">call_by_5g</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2022年新功能：5G通话&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;父类的厂商1为：<span class="hljs-subst">&#123;Phone.producer&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;父类的厂商2为：<span class="hljs-subst">&#123;NFCReader.producer&#125;</span>&quot;</span>)<br><br><br>phone = Phone2022()<br><span class="hljs-built_in">print</span>(phone.producer)<br>phone.call_by_4g()<br><span class="hljs-built_in">print</span>(phone.face_id)<br>phone.call_by_5g()<br>phone.control()<br>phone.write_card()<br></code></pre></td></tr></table></figure><h3 id="9-类型注解"><a href="#9-类型注解" class="headerlink" title="9.类型注解"></a>9.类型注解</h3><h4 id="类型注解的语法"><a href="#类型注解的语法" class="headerlink" title="类型注解的语法"></a>类型注解的语法</h4><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662185401471.png" alt="1662185401471"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662185516636.png" alt="1662185516636"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662185690131.png" alt="1662185690131"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662185894953.png" alt="1662185894953"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662185937212.png" alt="1662185937212"></p><h4 id="函数（方法）的类型注解"><a href="#函数（方法）的类型注解" class="headerlink" title="函数（方法）的类型注解"></a>函数（方法）的类型注解</h4><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186118840.png" alt="1662186118840"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186189745.png" alt="1662186189745"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186231714.png" alt="1662186231714"></p><h4 id="Union联合类型注解"><a href="#Union联合类型注解" class="headerlink" title="Union联合类型注解"></a>Union联合类型注解</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186536535.png" alt="1662186536535"></h4><h3 id="10-多态"><a href="#10-多态" class="headerlink" title="10.多态"></a>10.多态</h3><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186687750.png" alt="1662186687750"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186721380.png" alt="1662186721380"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662186800346.png" alt="1662186800346"></p><p>  <img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662191061256.png" alt="1662191061256"></p><p><img src="C:\Users\scordingbig\AppData\Roaming\Typora\typora-user-images\1662191090029.png" alt="1662191090029">s</p><h2 id="Python-format-格式化函数"><a href="#Python-format-格式化函数" class="headerlink" title="Python format 格式化函数"></a>Python format 格式化函数</h2><p> Python2.6 开始，新增了一种格式化字符串的函数 **str.format()**，它增强了字符串格式化的功能。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)    <span class="hljs-comment"># 不设置指定位置，按默认顺序</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)  <span class="hljs-comment"># 设置指定位置</span><br><span class="hljs-string">&#x27;hello world&#x27;</span><br> <br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>)  <span class="hljs-comment"># 设置指定位置</span><br><span class="hljs-string">&#x27;world hello world&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="hljs-built_in">format</span>(name=<span class="hljs-string">&quot;菜鸟教程&quot;</span>, url=<span class="hljs-string">&quot;www.runoob.com&quot;</span>))<br> <br><span class="hljs-comment"># 通过字典设置参数</span><br>site = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;www.runoob.com&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="hljs-built_in">format</span>(**site))<br> <br><span class="hljs-comment"># 通过列表索引设置参数</span><br>my_list = [<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>, <span class="hljs-string">&#x27;www.runoob.com&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class="hljs-built_in">format</span>(my_list))  <span class="hljs-comment"># &quot;0&quot; 是必须的</span><br><br><span class="hljs-comment">#输出结果：</span><br>网站名：菜鸟教程, 地址 www.runoob.com<br>网站名：菜鸟教程, 地址 www.runoob.com<br>网站名：菜鸟教程, 地址 www.runoob.com<br></code></pre></td></tr></table></figure><p> 也可以向 <strong>str.format()</strong> 传入对象： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AssignValue</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, value</span>):</span><br>        self.value = value<br>my_value = AssignValue(<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;value 为: &#123;0.value&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(my_value))  <span class="hljs-comment"># &quot;0&quot; 是可选的</span><br><br><span class="hljs-comment">#输出结果：value 为: 6</span><br></code></pre></td></tr></table></figure><h2 id="np-newaxis作用"><a href="#np-newaxis作用" class="headerlink" title="np.newaxis作用"></a>np.newaxis作用</h2><p> np.newaxis的功能:插入新维度， 对于[: , np.newaxis] 和 [np.newaxis，：]是在np.newaxis这里增加1维。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>c = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(c.shape)<br>b=c[:,np.newaxis]<br><span class="hljs-built_in">print</span>(b.shape)<br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">3</span>,)<br>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br>[[<span class="hljs-number">1</span>]<br> [<span class="hljs-number">2</span>]<br> [<span class="hljs-number">3</span>]]<br></code></pre></td></tr></table></figure><h2 id="numpy-random中-shuffle和permutation"><a href="#numpy-random中-shuffle和permutation" class="headerlink" title="numpy.random中:shuffle和permutation"></a>numpy.random中:shuffle和permutation</h2><p>   shuffle与permutation都是对原来的数组进行重新洗牌（即随机打乱原来的元素顺序）,但有两处不同：<br>1.如果传给permutation一个数组，它会返回一个洗牌后的数组副本；而shuffle是直接在原来的数组上进行操作，对原来的数组进行洗牌，无返回值。<br>2.permutation可以传入一个整数，它会返回一个洗牌后的arange；而shuffle不能传入整数。<br>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">20</span>)<br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(a)<br><br>a = np.arange(<span class="hljs-number">20</span>)<br>b = np.random.permutation(a)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-built_in">print</span>(np.random.permutation(<span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><p> 输出： </p><p>[ 4 10 12  1 16 19  2 14 18 15  3  7  6 17 13  8  9 11  0  5]</p><p>[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]<br>[ 6  9  5 15  3 10 18 11 14  0 17 19 16  1  2 12  7  8 13  4]</p><p>[ 7  4 11 17  3 16 13 15  1  0 19  6 10  5  2 18  8  9 12 14]</p><h2 id="Python列表中for循环语句的用法"><a href="#Python列表中for循环语句的用法" class="headerlink" title="Python列表中for循环语句的用法"></a>Python列表中for循环语句的用法</h2><p>在列表中，for循环之前的是表达式，利用for循环生成表达式所显示的内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br>test_list = [i*i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><span class="hljs-built_in">print</span>(test_list)<br></code></pre></td></tr></table></figure><p>输出：[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</p><h2 id="Python的enumerate函数"><a href="#Python的enumerate函数" class="headerlink" title="Python的enumerate函数"></a>Python的enumerate函数</h2><p>Python 的 enumerate() 函数就像是一个神秘的黑箱，你无法简单地用一句话来概括这个函数的作用与用法。</p><p>enumerate() 函数属于非常有用的高级用法，而对于这一点，很多初学者甚至中级学者都没有意识到。这个函数的基本应用就是用来遍历一个集合对象，它在遍历的同时还可以得到当前元素的索引位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">names = [<span class="hljs-string">&quot;Alice&quot;</span>,<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;Carl&quot;</span>]<br><span class="hljs-keyword">for</span> index,value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(names):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;index&#125;</span>: <span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><p>0: Alices<br>1: Bob<br>2: Carl</p><h2 id="numpy-切片操作"><a href="#numpy-切片操作" class="headerlink" title="numpy  切片操作"></a>numpy  切片操作</h2><p>numpy在处理数据的时候，经常会有切片操作，如提取指定几行的数据或者几列的数据，本文记录一些典型的切片方法以备日后查看。 </p><h3 id="一维数组的切片"><a href="#一维数组的切片" class="headerlink" title="一维数组的切片"></a>一维数组的切片</h3><p>数组[<code>start:end:step</code>]<br>从start到end，以step为步长的元素<br>且：start &lt; end.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>b=np.random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,[<span class="hljs-number">10</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>b<br>array([<span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>])<br></code></pre></td></tr></table></figure><p> <strong>正向</strong>第i个元素到第j个元素： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>i=<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>j=<span class="hljs-number">8</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b[i:j]<br>array([<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>])<br></code></pre></td></tr></table></figure><p> 返回b[i],b[i+1],···，b[j-1]的元素 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>i=<span class="hljs-number">1</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>j=<span class="hljs-number">2</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>b[i:j]<br>array([<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><p> 我们发现是左闭右开，第j个元素不返回。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>b[::<span class="hljs-number">2</span>]<br>array([<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><p>以2位步长，取下标为2的倍数的元素。</p><p><strong>反向</strong> 倒数几个元素：<br>start和end为负数则是反向取元素，<br>取<strong>b[start+1]</strong> ，b[start+2],···,b[end]的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>b[-<span class="hljs-number">3</span>:-<span class="hljs-number">1</span>]<br>array([<span class="hljs-number">8</span>, <span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><h3 id="二维数组的切片"><a href="#二维数组的切片" class="headerlink" title="二维数组的切片"></a>二维数组的切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a=np.random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,size=[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">1</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>],<br>       [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]])<br></code></pre></td></tr></table></figure><p> 取 第i行到第j行： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a[<span class="hljs-number">2</span>:<span class="hljs-number">4</span>,:]<br>array([[<span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]])<br></code></pre></td></tr></table></figure><p> 第i列到第j列： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a[:,<span class="hljs-number">2</span>:<span class="hljs-number">4</span>]<br>array([[<span class="hljs-number">4</span>, <span class="hljs-number">9</span>],<br>       [<span class="hljs-number">6</span>, <span class="hljs-number">4</span>],<br>       [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>       [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>]])<br></code></pre></td></tr></table></figure><p> 我们可以发现，多维的切片是在中括号中用逗号运算符, 将不同维上的操作分开，分割开后每个维度上单独维护即可。 </p><h3 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h3><p> 另外 numpy中对切片元素的操作是会影响到原数组本身的！<br>例如沿用上例的a矩阵： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a[:<span class="hljs-number">1</span>,:<span class="hljs-number">1</span>]=[[<span class="hljs-number">100</span>]]<br><span class="hljs-meta">&gt;&gt;&gt; </span>a<br>array([[<span class="hljs-number">100</span>,   <span class="hljs-number">8</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">9</span>,   <span class="hljs-number">8</span>],<br>       [  <span class="hljs-number">4</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">6</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">2</span>],<br>       [  <span class="hljs-number">6</span>,   <span class="hljs-number">4</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">7</span>],<br>       [  <span class="hljs-number">4</span>,   <span class="hljs-number">9</span>,   <span class="hljs-number">3</span>,   <span class="hljs-number">5</span>,   <span class="hljs-number">9</span>]])<br></code></pre></td></tr></table></figure><h2 id="Reshape-函数常常出现的“-1”"><a href="#Reshape-函数常常出现的“-1”" class="headerlink" title="Reshape()函数常常出现的“-1”"></a>Reshape()函数常常出现的“-1”</h2><p>Reshape()函数中出现-1，意思就是，在这个函数中，若某一维度不定义大小则用“-1”，但是只能使用一次。</p><p>很好理解，对于一个已知的多维数组，你想改变它的形状，你可以选择直接根据已知元素数量确定好各个维度大小，这个-1无非是偷了个懒（个人理解，这个-1就是在不知元素个数时派上用场），当你确定好其它维度的硬性要求，计算机根据元素个数一除，就知道-1这个地方的值了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>x = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>              [<span class="hljs-number">4</span>，<span class="hljs-number">5</span>，<span class="hljs-number">6</span>],<br>              [<span class="hljs-number">7</span>，<span class="hljs-number">8</span>，<span class="hljs-number">9</span>],<br>              [<span class="hljs-number">10</span>，<span class="hljs-number">11</span>，<span class="hljs-number">12</span>]])<br><span class="hljs-comment">#第一个维度不限，无其它维度要求，那不就是一维</span><br>x.reshape(-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#结果是</span><br>([ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br><br><span class="hljs-comment">#第一个维度维数是2，第二个不限，那不就是平分</span><br>x.reshape(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#结果是</span><br>([[ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>],<br>  [<span class="hljs-number">7</span>，<span class="hljs-number">8</span>， <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<br><br><span class="hljs-comment">#第二个维度维数是2，第一个不限，那不就是两个两个到底。</span><br>x.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">#结果是: </span><br>([[ <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>],<br>  [ <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>],<br>  [ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>],<br>  [ <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>],<br>  [ <span class="hljs-number">9</span>, <span class="hljs-number">10</span>],<br>  [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<br></code></pre></td></tr></table></figure><h2 id="NumPy使用基础"><a href="#NumPy使用基础" class="headerlink" title="NumPy使用基础"></a>NumPy使用基础</h2><h3 id="创建NumPy数组"><a href="#创建NumPy数组" class="headerlink" title="创建NumPy数组"></a>创建NumPy数组</h3><p> 创建ndarray数组最简单的方式就是使用<code>array</code>函数，它接受一切序列型的对象（包括其他数组），然后产生一个新的含有传入数据的NumPy数组。下面通过实例体会下<code>array</code>、<code>arange</code>、<code>zeros</code>、<code>ones</code>四个主要函数的用法。 </p><ul><li><code>array</code>：创建嵌套序列（比如由一组等长列表组成的列表），并转换为一个多维数组。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入numpy</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 从list创建array </span><br>a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]  <span class="hljs-comment"># 创建简单的列表</span><br>b = np.array(a)    <span class="hljs-comment"># 将列表转换为数组</span><br>b<br><span class="hljs-comment">#输出：array([1, 2, 3, 4, 5, 6])</span><br></code></pre></td></tr></table></figure><ul><li><code>arange</code>：创建元素从0到10依次递增2的数组。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过np.arange创建</span><br><span class="hljs-comment"># 通过指定start, stop (不包括stop)，interval来产生一个1维的ndarray</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>a<br><span class="hljs-comment">#输出：array([0, 2, 4, 6, 8])</span><br></code></pre></td></tr></table></figure><ul><li><p><code>zeros</code>：创建指定长度或者形状的全0数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建全0的ndarray</span><br>a = np.zeros([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>])<br>a<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>       [<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>]])<br></code></pre></td></tr></table></figure><ul><li><p><code>ones</code>：创建指定长度或者形状的全1数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建全1的ndarray</span><br>a = np.ones([<span class="hljs-number">3</span>,<span class="hljs-number">3</span>])<br>a<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>],<br>       [<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]])<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="查看ndarray数组的属性"><a href="#查看ndarray数组的属性" class="headerlink" title="查看ndarray数组的属性"></a>查看ndarray数组的属性</h3><p>ndarray的属性包括<code>shape</code>、<code>dtype</code>、<code>size</code>和<code>ndim</code>等，通过如下代码可以查看ndarray数组的属性。</p><ul><li><code>shape</code>：数组的形状 ndarray.shape，1维数组（N, ），二维数组（M, N），三维数组（M, N, K）。</li><li><code>dtype</code>：数组的数据类型。</li><li><code>size</code>：数组中包含的元素个数 ndarray.size，其大小等于各个维度的长度的乘积。</li><li><code>ndim</code>：数组的维度大小，ndarray.ndim, 其大小等于ndarray.shape所包含元素的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入numpy</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a = np.ones([<span class="hljs-number">3</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a, dtype: &#123;&#125;, shape: &#123;&#125;, size: &#123;&#125;, ndim: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a.dtype, a.shape, a.size, a.ndim))<br><span class="hljs-comment">#输出：a, dtype: float64, shape: (3, 3), size: 9, ndim: 2</span><br></code></pre></td></tr></table></figure><h3 id="改变ndarray数组的数据类型和形状"><a href="#改变ndarray数组的数据类型和形状" class="headerlink" title="改变ndarray数组的数据类型和形状"></a>改变ndarray数组的数据类型和形状</h3><p> 创建ndarray之后，可以对其数据类型或形状进行修改，代码如下所示。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 转化数据类型</span><br>b = a.astype(np.int64)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b, dtype: &#123;&#125;, shape: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(b.dtype, b.shape))<br><br><span class="hljs-comment"># 改变形状</span><br>c = a.reshape([<span class="hljs-number">1</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c, dtype: &#123;&#125;, shape: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(c.dtype, c.shape))<br><span class="hljs-comment">#输出：</span><br>b, dtype: int64, shape: (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>c, dtype: float64, shape: (<span class="hljs-number">1</span>, <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><h3 id="ndarray数组的基本运算"><a href="#ndarray数组的基本运算" class="headerlink" title="ndarray数组的基本运算"></a>ndarray数组的基本运算</h3><p>ndarray数组可以像普通的数值型变量一样进行加减乘除操作，主要包含如下两种运算：</p><ul><li>标量和ndarray数组之间的运算</li><li>两个ndarray数组之间的运算</li></ul><h4 id="标量和ndarray数组之间的运算"><a href="#标量和ndarray数组之间的运算" class="headerlink" title="标量和ndarray数组之间的运算"></a>标量和ndarray数组之间的运算</h4><p>标量和ndarray数组之间的运算主要包括除法、乘法、加法和减法运算，具体代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标量除以数组，用标量除以数组的每一个元素</span><br>arr = np.array([[<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], [<span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>]])<br><span class="hljs-number">1.</span> / arr<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">1.</span>        , <span class="hljs-number">0.5</span>       , <span class="hljs-number">0.33333333</span>],<br>       [<span class="hljs-number">0.25</span>      , <span class="hljs-number">0.2</span>       , <span class="hljs-number">0.16666667</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标量乘以数组，用标量乘以数组的每一个元素</span><br>arr = np.array([[<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], [<span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>]])<br><span class="hljs-number">2.0</span> * arr<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">2.</span>,  <span class="hljs-number">4.</span>,  <span class="hljs-number">6.</span>],<br>       [ <span class="hljs-number">8.</span>, <span class="hljs-number">10.</span>, <span class="hljs-number">12.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标量加上数组，用标量加上数组的每一个元素</span><br>arr = np.array([[<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], [<span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>]])<br><span class="hljs-number">2.0</span> + arr<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">3.</span>, <span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>],<br>       [<span class="hljs-number">6.</span>, <span class="hljs-number">7.</span>, <span class="hljs-number">8.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 标量减去数组，用标量减去数组的每一个元素</span><br>arr = np.array([[<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], [<span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>]])<br><span class="hljs-number">2.0</span> - arr<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">1.</span>,  <span class="hljs-number">0.</span>, -<span class="hljs-number">1.</span>],<br>       [-<span class="hljs-number">2.</span>, -<span class="hljs-number">3.</span>, -<span class="hljs-number">4.</span>]])<br></code></pre></td></tr></table></figure><h4 id="两个ndarray数组之间的运算"><a href="#两个ndarray数组之间的运算" class="headerlink" title="两个ndarray数组之间的运算"></a>两个ndarray数组之间的运算</h4><p> 两个ndarray数组之间的运算主要包括减法、加法、乘法、除法和开根号运算，具体代码如下所示。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组 减去 数组， 用对应位置的元素相减</span><br>arr1 = np.array([[<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], [<span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>]])<br>arr2 = np.array([[<span class="hljs-number">11.</span>, <span class="hljs-number">12.</span>, <span class="hljs-number">13.</span>], [<span class="hljs-number">21.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">23.</span>]])<br>arr1 - arr2<br><span class="hljs-comment">#输出：</span><br>array([[-<span class="hljs-number">10.</span>, -<span class="hljs-number">10.</span>, -<span class="hljs-number">10.</span>],<br>       [-<span class="hljs-number">17.</span>, -<span class="hljs-number">17.</span>, -<span class="hljs-number">17.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组 加上 数组， 用对应位置的元素相加</span><br>arr1 = np.array([[<span class="hljs-number">1.</span>, <span class="hljs-number">2.</span>, <span class="hljs-number">3.</span>], [<span class="hljs-number">4.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">6.</span>]])<br>arr2 = np.array([[<span class="hljs-number">11.</span>, <span class="hljs-number">12.</span>, <span class="hljs-number">13.</span>], [<span class="hljs-number">21.</span>, <span class="hljs-number">22.</span>, <span class="hljs-number">23.</span>]])<br>arr1 + arr2<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">12.</span>, <span class="hljs-number">14.</span>, <span class="hljs-number">16.</span>],<br>       [<span class="hljs-number">25.</span>, <span class="hljs-number">27.</span>, <span class="hljs-number">29.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组 乘以 数组，用对应位置的元素相乘</span><br>arr1 * arr2<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">11.</span>,  <span class="hljs-number">24.</span>,  <span class="hljs-number">39.</span>],<br>       [ <span class="hljs-number">84.</span>, <span class="hljs-number">110.</span>, <span class="hljs-number">138.</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组 除以 数组，用对应位置的元素相除</span><br>arr1 / arr2<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">0.09090909</span>, <span class="hljs-number">0.16666667</span>, <span class="hljs-number">0.23076923</span>],<br>       [<span class="hljs-number">0.19047619</span>, <span class="hljs-number">0.22727273</span>, <span class="hljs-number">0.26086957</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组开根号，将每个位置的元素都开根号</span><br>arr ** <span class="hljs-number">0.5</span><br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">1.</span>        , <span class="hljs-number">1.41421356</span>, <span class="hljs-number">1.73205081</span>],<br>       [<span class="hljs-number">2.</span>        , <span class="hljs-number">2.23606798</span>, <span class="hljs-number">2.44948974</span>]])<br></code></pre></td></tr></table></figure><h3 id="ndarray数组的索引和切片"><a href="#ndarray数组的索引和切片" class="headerlink" title="ndarray数组的索引和切片"></a>ndarray数组的索引和切片</h3><p>在编写模型过程中，通常需要访问或者修改ndarray数组某个位置的元素，则需要使用ndarray数组的索引。有些情况下可能需要访问或者修改一些区域的元素，则需要使用ndarray数组的切片。</p><p>ndarray数组的索引和切片的使用方式与Python中的list类似。通过[ -n , n-1 ]的下标进行索引，通过内置的<code>slice</code>函数，设置其<code>start</code>,<code>stop</code>和<code>step</code>参数进行切片，从原数组中切割出一个新数组。</p><p>ndarray数组的索引是一个内容丰富的主题，因为选取数据子集或单个元素的方式有很多。下面从一维数组和多维数组两个维度介绍索引和切片的方法。</p><h4 id="一维ndarray数组的索引和切片"><a href="#一维ndarray数组的索引和切片" class="headerlink" title="一维ndarray数组的索引和切片"></a>一维ndarray数组的索引和切片</h4><p> 从表面上看，一维数组跟Python列表的功能类似，它们重要区别在于：数组切片产生的新数组，还是指向原来的内存区域，数据不会被复制，视图上的任何修改都会直接反映到源数组上。将一个标量值赋值给一个切片时，该值会自动传播到整个选区。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1维数组索引和切片</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>a[<span class="hljs-number">10</span>]<br><span class="hljs-comment">#输出：10</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>a = np.arange(<span class="hljs-number">30</span>)<br>b = a[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]<br>b<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#将一个标量值赋值给一个切片时，该值会自动传播到整个选区。</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>a[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>] = <span class="hljs-number">10</span><br>a<br><span class="hljs-comment">#输出：</span><br>array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>,<br>       <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组切片产生的新数组，还是指向原来的内存区域，数据不会被复制。</span><br><span class="hljs-comment"># 视图上的任何修改都会直接反映到源数组上。</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>arr_slice = a[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]<br>arr_slice[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>a, arr_slice<br><span class="hljs-comment">#输出：</span><br>(array([  <span class="hljs-number">0</span>,   <span class="hljs-number">1</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">3</span>, <span class="hljs-number">100</span>,   <span class="hljs-number">5</span>,   <span class="hljs-number">6</span>,   <span class="hljs-number">7</span>,   <span class="hljs-number">8</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">10</span>,  <span class="hljs-number">11</span>,  <span class="hljs-number">12</span>,<br>         <span class="hljs-number">13</span>,  <span class="hljs-number">14</span>,  <span class="hljs-number">15</span>,  <span class="hljs-number">16</span>,  <span class="hljs-number">17</span>,  <span class="hljs-number">18</span>,  <span class="hljs-number">19</span>,  <span class="hljs-number">20</span>,  <span class="hljs-number">21</span>,  <span class="hljs-number">22</span>,  <span class="hljs-number">23</span>,  <span class="hljs-number">24</span>,  <span class="hljs-number">25</span>,<br>         <span class="hljs-number">26</span>,  <span class="hljs-number">27</span>,  <span class="hljs-number">28</span>,  <span class="hljs-number">29</span>]), array([<span class="hljs-number">100</span>,   <span class="hljs-number">5</span>,   <span class="hljs-number">6</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过copy给新数组创建不同的内存空间</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>arr_slice = a[<span class="hljs-number">4</span>:<span class="hljs-number">7</span>]<br>arr_slice = np.copy(arr_slice)<br>arr_slice[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br>a, arr_slice<br><span class="hljs-comment">#输出：</span><br>(array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>,<br>        <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>]),<br> array([<span class="hljs-number">100</span>,   <span class="hljs-number">5</span>,   <span class="hljs-number">6</span>]))<br></code></pre></td></tr></table></figure><h4 id="多维ndarray数组的索引和切片"><a href="#多维ndarray数组的索引和切片" class="headerlink" title="多维ndarray数组的索引和切片"></a>多维ndarray数组的索引和切片</h4><p>多维ndarray数组的索引和切片具有如下特点：</p><ul><li>在多维数组中，各索引位置上的元素不再是标量而是多维数组。</li><li>以逗号隔开的索引列表来选取单个元素。</li><li>在多维数组中，如果省略了后面的索引，则返回对象会是一个维度低一点的ndarray。</li></ul><p>多维ndarray数组的索引代码如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个多维数组</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>arr3d = a.reshape(<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br>arr3d<br><span class="hljs-comment">#输出：</span><br>array([[[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>],<br>        [ <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>        [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>]],<br><br>       [[ <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>        [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>]],<br><br>       [[<span class="hljs-number">12</span>, <span class="hljs-number">13</span>],<br>        [<span class="hljs-number">14</span>, <span class="hljs-number">15</span>],<br>        [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>]],<br><br>       [[<span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>],<br>        [<span class="hljs-number">22</span>, <span class="hljs-number">23</span>]],<br><br>       [[<span class="hljs-number">24</span>, <span class="hljs-number">25</span>],<br>        [<span class="hljs-number">26</span>, <span class="hljs-number">27</span>],<br>        [<span class="hljs-number">28</span>, <span class="hljs-number">29</span>]]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 只有一个索引指标时，会在第0维上索引，后面的维度保持不变</span><br>arr3d[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br>       [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 两个索引指标</span><br>arr3d[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 两个索引指标</span><br>arr3d[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><p> 多维ndarray数组的切片代码如下所示。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个数组</span><br>a = np.arange(<span class="hljs-number">24</span>)<br>a<br><span class="hljs-comment">#输出：</span><br>array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>,<br>       <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># reshape成一个二维数组</span><br>a = a.reshape([<span class="hljs-number">6</span>, <span class="hljs-number">4</span>])<br>a<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>],<br>       [ <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>],<br>       [ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>],<br>       [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>],<br>       [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>       [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用for语句生成list</span><br>[k <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>)]<br><span class="hljs-comment">#输出：</span><br>[<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 结合上面列出的for语句的用法</span><br><span class="hljs-comment"># 使用for语句对数组进行切片</span><br><span class="hljs-comment"># 下面的代码会生成多个切片构成的list</span><br><span class="hljs-comment"># k in range(0, 6, 2) 决定了k的取值可以是0, 2, 4</span><br><span class="hljs-comment"># 产生的list的包含三个切片</span><br><span class="hljs-comment"># 第一个元素是a[0 : 0+2]，</span><br><span class="hljs-comment"># 第二个元素是a[2 : 2+2]，</span><br><span class="hljs-comment"># 第三个元素是a[4 : 4+2]</span><br>slices = [a[k:k+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>)]<br>slices<br><span class="hljs-comment">#输出：</span><br>[array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>        [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]]), array([[ <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>],<br>        [<span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>]]), array([[<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>],<br>        [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>]])]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">slices[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>       [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]])<br></code></pre></td></tr></table></figure><h3 id="ndarray数组的统计方法"><a href="#ndarray数组的统计方法" class="headerlink" title="ndarray数组的统计方法"></a>ndarray数组的统计方法</h3><p>可以通过数组上的一组数学函数对整个数组或某个轴向的数据进行统计计算。主要包括如下统计方法：</p><ul><li><code>mean</code>：计算算术平均数，零长度数组的mean为NaN。</li><li><code>std</code>和<code>var</code>：计算标准差和方差，自由度可调（默认为n）。</li><li><code>sum</code> ：对数组中全部或某轴向的元素求和，零长度数组的sum为0。</li><li><code>max</code>和<code>min</code>：计算最大值和最小值。</li><li><code>argmin</code>和<code>argmax</code>：分别为最大和最小元素的索引。</li><li><code>cumsum</code>：计算所有元素的累加。</li><li><code>cumprod</code>：计算所有元素的累积。</li></ul><hr><p><strong>说明：</strong></p><p>sum、mean以及标准差std等聚合计算既可以当做数组的实例方法调用，也可以当做NumPy函数使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算均值，使用arr.mean() 或 np.mean(arr)，二者是等价的</span><br>arr = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>], [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]])<br>arr.mean(), np.mean(arr)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">5.0</span>, <span class="hljs-number">5.0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求和</span><br>arr.<span class="hljs-built_in">sum</span>(), np.<span class="hljs-built_in">sum</span>(arr)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">45</span>, <span class="hljs-number">45</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求最大值</span><br>arr.<span class="hljs-built_in">max</span>(), np.<span class="hljs-built_in">max</span>(arr)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">9</span>, <span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求最小值</span><br>arr.<span class="hljs-built_in">min</span>(), np.<span class="hljs-built_in">min</span>(arr)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 指定计算的维度</span><br><span class="hljs-comment"># 沿着第1维求平均，也就是将[1, 2, 3]取平均等于2，[4, 5, 6]取平均等于5，[7, 8, 9]取平均等于8</span><br>arr.mean(axis = <span class="hljs-number">1</span>)<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">2.</span>, <span class="hljs-number">5.</span>, <span class="hljs-number">8.</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 沿着第0维求和，也就是将[1, 4, 7]求和等于12，[2, 5, 8]求和等于15，[3, 6, 9]求和等于18</span><br>arr.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 沿着第0维求最大值，也就是将[1, 4, 7]求最大值等于7，[2, 5, 8]求最大值等于8，[3, 6, 9]求最大值等于9</span><br>arr.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>)<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 沿着第1维求最小值，也就是将[1, 2, 3]求最小值等于1，[4, 5, 6]求最小值等于4，[7, 8, 9]求最小值等于7</span><br>arr.<span class="hljs-built_in">min</span>(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment">#输出：</span><br>array([<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算标准差</span><br>arr.std()<br><span class="hljs-comment">#输出:</span><br><span class="hljs-number">2.581988897471611</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 计算方差</span><br>arr.var()<br><span class="hljs-comment">#输出：</span><br><span class="hljs-number">6.666666666666667</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 找出最大元素的索引</span><br>arr.argmax(), arr.argmax(axis=<span class="hljs-number">0</span>), arr.argmax(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">8</span>, array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]), array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>]))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 找出最小元素的索引</span><br>arr.argmin(), arr.argmin(axis=<span class="hljs-number">0</span>), arr.argmin(axis=<span class="hljs-number">1</span>)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-number">0</span>, array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]), array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><h3 id="随机数np-random"><a href="#随机数np-random" class="headerlink" title="随机数np.random"></a>随机数np.random</h3><p> 主要介绍创建ndarray随机数组以及随机打乱顺序、随机选取元素等相关操作的方法。 </p><h3 id="创建随机ndarray数组"><a href="#创建随机ndarray数组" class="headerlink" title="创建随机ndarray数组"></a>创建随机ndarray数组</h3><p> 创建随机ndarray数组主要包含设置随机种子、均匀分布和正态分布三部分内容，具体代码如下所示。 </p><ul><li><strong>设置随机数种子</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以多次运行，观察程序输出结果是否一致</span><br><span class="hljs-comment"># 如果不设置随机数种子，观察多次运行输出结果是否一致</span><br>np.random.seed(<span class="hljs-number">10</span>)<br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">0.77132064</span>, <span class="hljs-number">0.02075195</span>, <span class="hljs-number">0.63364823</span>],<br>       [<span class="hljs-number">0.74880388</span>, <span class="hljs-number">0.49850701</span>, <span class="hljs-number">0.22479665</span>],<br>       [<span class="hljs-number">0.19806286</span>, <span class="hljs-number">0.76053071</span>, <span class="hljs-number">0.16911084</span>]])<br></code></pre></td></tr></table></figure><ul><li><strong>均匀分布</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成均匀分布随机数，随机数取值范围在[0, 1)之间</span><br>a = np.random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">0.08833981</span>, <span class="hljs-number">0.68535982</span>, <span class="hljs-number">0.95339335</span>],<br>       [<span class="hljs-number">0.00394827</span>, <span class="hljs-number">0.51219226</span>, <span class="hljs-number">0.81262096</span>],<br>       [<span class="hljs-number">0.61252607</span>, <span class="hljs-number">0.72175532</span>, <span class="hljs-number">0.29187607</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成均匀分布随机数，指定随机数取值范围和数组形状</span><br>a = np.random.uniform(low = -<span class="hljs-number">1.0</span>, high = <span class="hljs-number">1.0</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br>a<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">0.83554825</span>,  <span class="hljs-number">0.42915157</span>],<br>       [ <span class="hljs-number">0.08508874</span>, -<span class="hljs-number">0.7156599</span> ]])<br></code></pre></td></tr></table></figure><ul><li><strong>正态分布</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成标准正态分布随机数</span><br>a = np.random.randn(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>a<br><span class="hljs-comment">#输出：</span><br>array([[ <span class="hljs-number">1.484537</span>  , -<span class="hljs-number">1.07980489</span>, -<span class="hljs-number">1.97772828</span>],<br>       [-<span class="hljs-number">1.7433723</span> ,  <span class="hljs-number">0.26607016</span>,  <span class="hljs-number">2.38496733</span>],<br>       [ <span class="hljs-number">1.12369125</span>,  <span class="hljs-number">1.67262221</span>,  <span class="hljs-number">0.09914922</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成正态分布随机数，指定均值loc和方差scale</span><br>a = np.random.normal(loc = <span class="hljs-number">1.0</span>, scale = <span class="hljs-number">1.0</span>, size = (<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br>a<br><span class="hljs-comment">#输出：</span><br>array([[<span class="hljs-number">2.39799638</span>, <span class="hljs-number">0.72875201</span>, <span class="hljs-number">1.61320418</span>],<br>       [<span class="hljs-number">0.73268281</span>, <span class="hljs-number">0.45069099</span>, <span class="hljs-number">1.1327083</span> ],<br>       [<span class="hljs-number">0.52385799</span>, <span class="hljs-number">2.30847308</span>, <span class="hljs-number">1.19501328</span>]])<br></code></pre></td></tr></table></figure><h3 id="随机打乱ndarray数组顺序"><a href="#随机打乱ndarray数组顺序" class="headerlink" title="随机打乱ndarray数组顺序"></a>随机打乱ndarray数组顺序</h3><ul><li>随机打乱1维ndarray数组顺序，发现所有元素位置都被打乱了，代码如下所示。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成一维数组</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before random shuffle: &#x27;</span>, a)<br><span class="hljs-comment"># 打乱一维数组顺序</span><br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after random shuffle: &#x27;</span>, a)<br><span class="hljs-comment">#输出：</span><br>(<span class="hljs-string">&#x27;before random shuffle: &#x27;</span>, array([ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>,<br>       <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>]))<br>(<span class="hljs-string">&#x27;after random shuffle: &#x27;</span>, array([<span class="hljs-number">10</span>, <span class="hljs-number">21</span>, <span class="hljs-number">26</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">0</span>, <span class="hljs-number">23</span>,  <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>,  <span class="hljs-number">3</span>, <span class="hljs-number">25</span>,  <span class="hljs-number">5</span>, <span class="hljs-number">13</span>,<br>       <span class="hljs-number">14</span>, <span class="hljs-number">24</span>, <span class="hljs-number">29</span>,  <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">27</span>, <span class="hljs-number">16</span>, <span class="hljs-number">19</span>,  <span class="hljs-number">4</span>, <span class="hljs-number">22</span>,  <span class="hljs-number">8</span>]))<br></code></pre></td></tr></table></figure><ul><li>随机打乱2维ndarray数组顺序，发现只有行的顺序被打乱了，列顺序不变，代码如下所示。 </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成一维数组</span><br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">30</span>)<br><span class="hljs-comment"># 将一维数组转化成2维数组</span><br>a = a.reshape(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;before random shuffle: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-comment"># 打乱一维数组顺序</span><br>np.random.shuffle(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;after random shuffle: \n&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(a))<br><span class="hljs-comment">#输出：</span><br>before random shuffle: <br>[[ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>]<br> [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>]<br> [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]<br> [ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]<br> [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span>]<br> [<span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span>]<br> [<span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]<br> [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span>]<br> [<span class="hljs-number">24</span> <span class="hljs-number">25</span> <span class="hljs-number">26</span>]<br> [<span class="hljs-number">27</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span>]]<br>after random shuffle: <br>[[<span class="hljs-number">15</span> <span class="hljs-number">16</span> <span class="hljs-number">17</span>]<br> [<span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span>]<br> [<span class="hljs-number">27</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span>]<br> [ <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>]<br> [ <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span>]<br> [<span class="hljs-number">21</span> <span class="hljs-number">22</span> <span class="hljs-number">23</span>]<br> [<span class="hljs-number">18</span> <span class="hljs-number">19</span> <span class="hljs-number">20</span>]<br> [ <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>]<br> [ <span class="hljs-number">6</span>  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>]<br> [<span class="hljs-number">24</span> <span class="hljs-number">25</span> <span class="hljs-number">26</span>]]<br></code></pre></td></tr></table></figure><h3 id="随机选取元素"><a href="#随机选取元素" class="headerlink" title="随机选取元素"></a>随机选取元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 随机选取部分元素</span><br>a = np.arange(<span class="hljs-number">30</span>)<br>b = np.random.choice(a, size=<span class="hljs-number">5</span>)<br>b<br><span class="hljs-comment">#输出：</span><br>array([ <span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">12</span>,  <span class="hljs-number">5</span>,  <span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>PYTHON</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graph Counts</title>
    <link href="/2021/12/12/graph%20counts/"/>
    <url>/2021/12/12/graph%20counts/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p> <img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/4.png" alt=" ">  </p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/5.png" alt=" "></p><h3 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h3><p>•Each edge has weight of 1.</p><p>•Find shortest path for every two nodes using <strong>Floyd</strong> algorithm. Use length[][] to know shortest path length.</p><h3 id="示例邻接表"><a href="#示例邻接表" class="headerlink" title="示例邻接表"></a>示例邻接表</h3><p>0;1;2;4<br>1;0<br>2;0;4<br>3;4;6<br>4;0;2;3;5<br>5;4;6<br>6;3;5</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>​     导入邻接表放入一个二维数组中，根据该邻接表建立邻接矩阵，然后根据Floyd算法（从i号顶点到j号顶点只经过前k号点的最短路程）得到最短路径矩阵，最后根据DFS寻找连通子图。  </p><h3 id="输出结果展示"><a href="#输出结果展示" class="headerlink" title="输出结果展示"></a>输出结果展示</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/3.png" alt=" ">  </p><h3 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> ============================================================================</span><br><span class="hljs-comment"> Name        : GraphMatrix.c</span><br><span class="hljs-comment"> Author      : YUGIN CHUI（Xu yujian）</span><br><span class="hljs-comment"> Version     :</span><br><span class="hljs-comment"> Copyright   :</span><br><span class="hljs-comment"> Description : read a graph from file, which descibe the formation of the</span><br><span class="hljs-comment">      graph by vertices at the beginning of each line, followed</span><br><span class="hljs-comment">      by connected vertices.</span><br><span class="hljs-comment"> ============================================================================</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 999</span><br><br><span class="hljs-keyword">int</span> sub_graphs = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//打印矩阵函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **m, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>            m[i][j] == MAX ? <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3c &quot;</span>, <span class="hljs-string">&#x27;x&#x27;</span>) : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d &quot;</span>, m[i][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//Flyod函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Floyd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **A, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br><span class="hljs-comment">//TO-DO: implement Floyd algorithm</span><br><span class="hljs-keyword">int</span> i,j,k;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;size;k++)&#123;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;size;j++) &#123;<br>         <span class="hljs-keyword">if</span>(A[i][k] + A[k][j] &lt; A[i][j])&#123;<br>             A[i][j] =  A[i][k] + A[k][j];<br>         &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//DFS函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **A,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> *visit,<span class="hljs-keyword">int</span> num_nodes)</span></span>&#123;<br>    visit[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;num_nodes;j++)&#123;<br>        <span class="hljs-keyword">if</span>(A[i][j] == <span class="hljs-number">1</span> &amp;&amp; visit[j] == <span class="hljs-number">0</span>)<br>            DFS( A, j, visit, num_nodes);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//DFSTravel函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTravel</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **A,<span class="hljs-keyword">int</span> *visit,<span class="hljs-keyword">int</span> num_nodes,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    DFS(A, e, visit, num_nodes);<br>    sub_graphs++;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, k, num_nodes;<br>    <span class="hljs-keyword">int</span> **word;<br>    <span class="hljs-keyword">int</span> **M;<br>    <span class="hljs-keyword">int</span> *count;<br><br>    word = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span> *) * <span class="hljs-number">255</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">255</span>; i++) &#123;<br>        word[i] = (<span class="hljs-keyword">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">255</span>);<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">255</span>; j++)<br>            word[i][j] = <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//read graph from file.txt, store data in word[][]</span><br>    FILE *fp;<br>    fp = fopen(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can not open data file\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (fp != <span class="hljs-literal">NULL</span>) &#123;<br>        i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!feof(fp)) &#123;<br>            <span class="hljs-keyword">char</span> *buff = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">255</span>);<br>            <span class="hljs-keyword">char</span> *c = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>            j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s&quot;</span>, buff);<br><br>            <span class="hljs-comment">//the while loop get rid of symbols like , . -</span><br>            <span class="hljs-keyword">while</span> (buff[x] != <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(buff[x])) &#123;<br>                    c[<span class="hljs-number">0</span>] = buff[x];<br>                    word[i][j] = atoi(c);<br>                    j++;<br>                &#125;<br>                x++;<br>            &#125;<br>            i++;<br>        &#125;<br>        num_nodes = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of nodes: %d\n&quot;</span>, num_nodes);<br>    &#125;<br><br><span class="hljs-comment">//PrintMatrix(word, num_nodes);</span><br><br><span class="hljs-comment">// initialize M[][] with all MAX values, TYPICAL code example for initialing 2D matrix.</span><br>    M = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span> *) * num_nodes);<br>    <span class="hljs-keyword">int</span> node;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num_nodes; i++) &#123;<br>        M[i] = (<span class="hljs-keyword">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * num_nodes);<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_nodes; j++) &#123;<br>            M[i][j] = MAX;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//build M[][] with the value read from file.txt</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num_nodes; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_nodes; j++) &#123;<br>            <span class="hljs-keyword">if</span> (word[i][j] != <span class="hljs-number">-1</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//TO-DO: assign value=1 to correct index of M[][]</span><br>                M[i][word[i][j]] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;matrix: \n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br>    <span class="hljs-comment">//利用DFS寻找连通子图代码段</span><br>    <span class="hljs-keyword">int</span> visit[num_nodes];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_nodes;i++)&#123;<br>        visit[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>        DFSTravel(M,visit,num_nodes,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;num_nodes;j++) &#123;<br>            <span class="hljs-keyword">if</span> (visit[j] == <span class="hljs-number">0</span>)<br>                DFSTravel(M, visit, num_nodes, j);<br>        &#125;<br><br>    <span class="hljs-comment">//Flyod求解</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; (num_nodes - <span class="hljs-number">3</span>); k++)<br>        Floyd(M, num_nodes);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Shortest path matrix between vertices\n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br><span class="hljs-comment">//count is used for output number of pairs in each distance</span><br>    count = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span> *) * (num_nodes<span class="hljs-number">-1</span>)); <span class="hljs-comment">//Furthest distance is (num of nodes -1)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_nodes<span class="hljs-number">-1</span>;i++) count[i]=<span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//count number of subgraphs in num_graphs, and number of node-pairs in count[], e.g. node pairs in distance</span><br><span class="hljs-comment">//TO-DO: assign count[] values, and update sum</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num_nodes; i++)&#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_nodes; j++)&#123;<br><span class="hljs-comment">//TO-DO: assign count[] values, and update sum</span><br>        <span class="hljs-keyword">if</span>(j&gt;i) &#123;<br>            count[M[i][j]]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of connected sub-graphs: %d\n&quot;</span>,sub_graphs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%8s | %8s\n&quot;</span>,<span class="hljs-string">&quot;Distance&quot;</span>,<span class="hljs-string">&quot;Number of node-pairs&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_nodes<span class="hljs-number">-1</span>;i++)<br><span class="hljs-keyword">if</span>(count[i]&gt;<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%8d | %8d\n&quot;</span>, i, count[i]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Points</title>
    <link href="/2021/12/12/points/"/>
    <url>/2021/12/12/points/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p> <img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/7.png" alt=" ">  </p><h3 id="示例输入"><a href="#示例输入" class="headerlink" title="示例输入"></a>示例输入</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一个输入为有几个点，其下输入为点的坐标<br><span class="hljs-number">3</span><br><br><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>​        本次示例程序使用10000个点来测试分治法的效率，利用分治法求10000个点中的最小点对，首先将一万个点按照x的大小从小到大排序，若x相同，则按照y的大小排序，得到有序排列的一万个点，再取数组中间值的元素将一万个点分为s1和s2两部分，先分别求出s1和s2两部分的最小点对取其最小值，再与跨越s1和s2的点对距离进行对比，这里有筛选条件为当奋力在s1和s2两边的点如果x轴或者y轴到中间点的距离必须小于或等于s1与s2两部分点的最小值，即形成一个矩形内取点，通过不断递归得到最小点对。设置全局变量记录最小点对的坐标即可，经测试可以在1s内得到最小点对。  </p><h3 id="示例结果"><a href="#示例结果" class="headerlink" title="示例结果"></a>示例结果</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/6.png" alt=" "></p><h3 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 99999</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10000</span><br><br><span class="hljs-keyword">int</span> m,t;<br><span class="hljs-keyword">int</span> temp[N];<span class="hljs-comment">//储存宽度为d的点</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">double</span> x;<br>    <span class="hljs-keyword">double</span> y;<br>&#125;point[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compar</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span><span class="hljs-comment">//用来比较两个元素的函数，即函数指针（回调函数）</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">A</span> =</span> *(struct node*)a;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">B</span> =</span> *(struct node*)b;<br>    <span class="hljs-keyword">if</span> (A.x != B.x)<br>        <span class="hljs-keyword">return</span> A.x - B.x;<span class="hljs-comment">//按照x从小到大的顺序排序</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> A.y - B.y;<span class="hljs-comment">//当x相等的时候，按照y的从大到小的顺序排序</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Min_distance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> left, <span class="hljs-keyword">double</span> right)</span><span class="hljs-comment">//返回距离的大小关系</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> left &lt; right ? left : right;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span><span class="hljs-comment">//计算两点距离的函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((point[left].x - point[right].x) * (point[left].x - point[right].x) + ((point[left].y - point[right].y) * (point[left].y - point[right].y)));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Closest_Pair</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> End_dis = INF;<span class="hljs-comment">//距离的初始值,无穷大</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (left == right)<span class="hljs-comment">//只有一个点的时候，返回无穷大</span><br>        <span class="hljs-keyword">return</span> End_dis;<br><br>    <span class="hljs-keyword">if</span> (right - left == <span class="hljs-number">1</span>)<span class="hljs-comment">// 刚好两个点的时候，返回两点的距离</span><br>        <span class="hljs-keyword">return</span> distance(left, right);<br><br>    <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<span class="hljs-comment">//大于或等于三个点的时候</span><br><br>    <span class="hljs-keyword">double</span> distance_left = Closest_Pair(left, mid);<span class="hljs-comment">//左边递归</span><br>    <span class="hljs-keyword">double</span> distancer_ight = Closest_Pair(mid + <span class="hljs-number">1</span>, right);<span class="hljs-comment">//右边递归</span><br><br>    End_dis = Min_distance(distance_left, distancer_ight);<span class="hljs-comment">//比较左右两边点对距离，找出其中的最小值</span><br><br><br>    <span class="hljs-keyword">for</span> (i = left; i &lt;= right; i++)<span class="hljs-comment">//找出符合要求的距离mid横坐标小于等于d的点</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(point[mid].x - point[i].x) &lt;= End_dis)<br>            temp[k++] = i;<span class="hljs-comment">//temp用于储存符合要求的点的序号</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= k - <span class="hljs-number">1</span>; i++)<span class="hljs-comment">//通过纵坐标寻找最短距离</span><br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt;= k - <span class="hljs-number">1</span> &amp;&amp; j &lt; i + <span class="hljs-number">7</span>; j++)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(point[temp[j]].y - point[temp[i]].y) &lt; End_dis)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(End_dis&gt;=distance(temp[i], temp[j]))<br>                &#123;<br>                    m=temp[i];<br>                    t=temp[j];<br>                &#125;<br>                <span class="hljs-keyword">else</span> m = left,t = right;<br>                End_dis = Min_distance(End_dis, distance(temp[i], temp[j]));<br>            &#125;<br>    <span class="hljs-keyword">return</span> End_dis;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start</span>, <span class="hljs-title">end</span>;</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">double</span> a;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf %lf&quot;</span>, &amp;point[i].x, &amp;point[i].y);<br>        gettimeofday(&amp;start, <span class="hljs-literal">NULL</span>);<br>        qsort(point, n, <span class="hljs-keyword">sizeof</span>(point[<span class="hljs-number">0</span>]), compar);<br>        a = Closest_Pair(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>        gettimeofday(&amp;end, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the shortest distance is:%.10lf\n&quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the co-ordinates of the pair of points is:\n%.10lf %.10lf\n&quot;</span>,point[m].x,point[m].y);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf %.10lf\n&quot;</span>,point[t].x,point[t].y);<br>        <span class="hljs-keyword">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class="hljs-number">1000000.0</span> + end.tv_usec - start.tv_usec;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.ld ms elapsed\n&quot;</span>, elapsed);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>分治法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序算法与冒泡排序算法的比较</title>
    <link href="/2021/11/23/sort/"/>
    <url>/2021/11/23/sort/</url>
    
    <content type="html"><![CDATA[<h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p><strong>1.冒泡排序：</strong></p><p>​       </p><hr><p>　   交换排序顾名思义就是通过元素的两两比较，判断是否符合要求，如过不符合就交换位置来达到排序的目的。冒泡排序名字的由来就是因为在交换过程中，类似水冒泡，小（大）的元素经过不断的交换由水底慢慢的浮到水的顶端。</p><p>　   冒泡排序的思想就是利用的比较交换，利用循环将第 i 小或者大的元素归位，归位操作利用的是对 n 个元素中相邻的两个进行比较，如果顺序正确就不交换，如果顺序错误就进行位置的交换。通过重复的循环访问数组，直到没有可以交换的元素，那么整个排序就已经完成了。</p><p>​       冒泡排序性能分析：</p><p>1.空间效率：仅使用常数个辅助单元，空间复杂度为Ο(1)。</p><p>2.时间效率：最坏情况与平均情况均为Ο(n²)。</p><hr><p><strong>2.快速排序：</strong></p><p>​        </p><p>​        快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>​        快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><hr><p>实现步骤：</p><p>1.从数列中挑出一个元素，称为 “基准”（pivot）;</p><p>2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元 素比基准值大的摆在基准的                 后面（相同的数可以到任一边）。在这个 分区退出之后，该基准就处于数列的中间位置。这个称为分区操   作；</p><p>3.递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><hr><p>​           快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><hr><h4 id="效率对比"><a href="#效率对比" class="headerlink" title="效率对比"></a>效率对比</h4><h5 id="生成了一万个随机数后利用两种排序法的时间对比"><a href="#生成了一万个随机数后利用两种排序法的时间对比" class="headerlink" title="生成了一万个随机数后利用两种排序法的时间对比"></a>生成了一万个随机数后利用两种排序法的时间对比</h5><h6 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法:"></a>快速排序算法:</h6><p>​         <img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/1.png" alt="快速排序时间">  </p><h6 id="冒泡排序算法："><a href="#冒泡排序算法：" class="headerlink" title="冒泡排序算法："></a>冒泡排序算法：</h6><p>​          <img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/2.png" alt="冒泡排序时间">  </p><hr><h4 id="完整代码实现"><a href="#完整代码实现" class="headerlink" title="完整代码实现"></a>完整代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-comment">//数组两个元素交换函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125;<br><br><span class="hljs-comment">//快速排序算法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left&gt;=right)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> pivot = a[right];<br>     <span class="hljs-keyword">int</span> m=left,n=right<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(m&lt;n)&#123;<br>        <span class="hljs-keyword">while</span>(a[m] &lt; pivot &amp;&amp; m&lt;n)<br>            m++;<br>        <span class="hljs-keyword">while</span>(a[n] &gt;= pivot &amp;&amp; m&lt;n)<br>            n--;<br>        swap(&amp;a[m], &amp;a[n]);<br>    &#125;<br>        <span class="hljs-keyword">if</span>(a[m]&gt;=a[right])<br>            swap(&amp;a[m], &amp;a[right]);<br>        <span class="hljs-keyword">else</span><br>            m++;<br>        <span class="hljs-keyword">if</span>(m)<br>            Quicksort(a, left, m - <span class="hljs-number">1</span>);<br>            Quicksort(a, m + <span class="hljs-number">1</span>, right);<br><br>&#125;<br><br><span class="hljs-comment">//快速排序算法标准接口</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Quick_Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    Quicksort(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">//冒泡算法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Bubble_Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i ,p ;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(p=n<span class="hljs-number">-1</span>;p&gt;=<span class="hljs-number">0</span>;p--)&#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;p;i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i] &gt; a[i+<span class="hljs-number">1</span>])&#123;<br>                swap(&amp;a[i],&amp;a[i+<span class="hljs-number">1</span>]);<br>                flag = <span class="hljs-number">1</span>;<span class="hljs-comment">//标识发生变化</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//全程无交换</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start</span>, <span class="hljs-title">end</span>;</span><br>    gettimeofday(&amp;start, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">int</span> L[<span class="hljs-number">10000</span>];<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br>        L[i] = rand();<br>    &#125;<br>    <span class="hljs-comment">//Quick_Sort(L,10000);</span><br>    <span class="hljs-comment">//printf(&quot;the quick complete in &quot;);</span><br>    Bubble_Sort(L,<span class="hljs-number">10000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the bubble complete in &quot;</span>);<br>    gettimeofday(&amp;end, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class="hljs-number">1000000.0</span> + end.tv_usec - start.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.ld ms elapsed\n&quot;</span>, elapsed);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>​         <strong>快速排序算法在运行时间上明显少于冒泡排序算法运行时间。</strong>  </p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用循环队列求解约瑟夫环问题</title>
    <link href="/2021/11/20/Josephus/"/>
    <url>/2021/11/20/Josephus/</url>
    
    <content type="html"><![CDATA[<h4 id="循环队列求解约瑟夫环完整代码"><a href="#循环队列求解约瑟夫环完整代码" class="headerlink" title="循环队列求解约瑟夫环完整代码"></a>循环队列求解约瑟夫环完整代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE 1</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Status;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode, *Linklist;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQuene</span>&#123;</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">front</span>;</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">rear</span>;</span><br>&#125;LinkQuene;<br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function">Status <span class="hljs-title">init</span><span class="hljs-params">(LinkQuene q)</span></span>&#123;<br>   q.front = q.rear = (Linklist*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>   <span class="hljs-keyword">if</span>(q.front!=q.rear)&#123;<br>       <span class="hljs-keyword">return</span> ERROR;<br>   &#125;<br>   q.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//插入约瑟夫环（人数为x，按顺序编号）</span><br><span class="hljs-function">Status <span class="hljs-title">insert</span><span class="hljs-params">(LinkQuene *q,ElemType x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    Linklist p;<br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(i = x;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        Linklist s;<br>        s = (Linklist)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        <span class="hljs-keyword">if</span>(!s)&#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        s-&gt;data = i;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            q-&gt;front = s;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==x)&#123;<br>            q-&gt;rear = s;<br>        &#125;<br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s;<br>        q-&gt;rear-&gt;next = q-&gt;front;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//出列操作</span><br><span class="hljs-function">Linklist *<span class="hljs-title">out</span><span class="hljs-params">(LinkQuene *q)</span></span>&#123;<br>    Linklist s;<br>    s = q-&gt;front;<br>    q-&gt;front = s-&gt;next;<br>    q-&gt;rear-&gt;next = q-&gt;front;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-comment">//入列操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">(LinkQuene *q,Linklist s)</span></span>&#123;<br>    q-&gt;rear-&gt;next = s;<br>    s-&gt;next = q-&gt;front;<br>    q-&gt;rear = s;<br>&#125;<br><span class="hljs-comment">//约瑟夫环操作函数</span><br><span class="hljs-function">Status <span class="hljs-title">Josephus</span><span class="hljs-params">(LinkQuene q,Linklist p,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">if</span>(i&gt;x)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)&#123;<br>            q.front = q.front-&gt;next;<br>            q.rear = q.rear-&gt;next;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(q.front!=q.rear)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;m;j++)&#123;<br>            p=out(&amp;q);<br>            in(&amp;q,p);<br>        &#125;<br>        p=out(&amp;q);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the number of dead people is %d\n&quot;</span>,p-&gt;data);<br>        <span class="hljs-built_in">free</span>(p);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the number of avoiding execution is %d&quot;</span>,q.front-&gt;data);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,i,m;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;how much people:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the starting point:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;how much people to skip:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>    LinkQuene q;<br>    Linklist *p;<br>    init(q);<br>    insert(&amp;q,x);<br>    Josephus(q,p,x,i,m);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/20/hello-world/"/>
    <url>/2021/11/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! </p><h3 id="Some-useful-code"><a href="#Some-useful-code" class="headerlink" title="Some useful code"></a>Some useful code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;chuiyugin&quot;</span><br>git config --global user.email 1726123207@qq.com<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
