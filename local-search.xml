<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA程序设计实验练习二</title>
    <link href="/2022/10/28/exercise2/"/>
    <url>/2022/10/28/exercise2/</url>
    
    <content type="html"><![CDATA[<h1 id="实验题目"><a class="markdownIt-Anchor" href="#实验题目"></a> 实验题目</h1><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目：</h2><p>模拟实现以下商品管理业务系统，商品管理系统的整体功能有：</p><blockquote><p>注：商品数据存储在一个数据库中(用静态HashMap来模拟)，MySQL</p></blockquote><p>1、用户可以通过输入商品信息来向库中添加商品，如：</p><p><strong>idname,price,库存数量  p01,透明胶带,8.8,1000</strong></p><p>2、用户可以查看数据库中所有的商品</p><p>3、用户可以通过输入一个id来查看一个商品</p><p>4、用户可以通过输入一个name来查看一个商品</p><p>5、用户可以通过输入一个价格范围（比如： 100-&gt;200）来查看符合条件的商品</p><p>6、用户可以通过输入一个id来从数据库中删除一个商品</p><p>额外添加的需求:</p><p>7、用户可以通过指定一个id来修改一个商品的名称</p><p>8、用户可以通过制定一个id来修改一个商品的价格</p><p>9、用户可以通过制定一个id来修改一个商品的库存数量</p><p>要求：</p><p>a、整个程序要分成：交互层、 业务逻辑（service）层、 数据访问（dao）层</p><p>b、交互层和service层之间要用“面向接口编程”的模式来写</p><p>c、业务逻辑层和dao层之间要用“面向接口编程”的模式来写</p><blockquote><p>注：交互层打印菜单的过程很麻烦，可以不写交互层，只要完成service层的接口及实现类， dao层的接口及实现类即可。</p></blockquote><h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><ul><li>需要完成这个项目，不仅需要有一定的Java基础知识，还需要掌握一定的数据库的操作和Java GUI的设计，对于这方面内容，推荐读者阅读《MySql必知必会》这本书入门数据库的基本操作。在构建项目的时候还需要勤查百度和相关文档。为了让没有相关基础的读者快速掌握关于该项目中的一些简单操作，在此推荐B站中的三个视频供大家参考：</li><li>Java图像界面编程：<a href="https://www.bilibili.com/video/BV1wh411d7it/?p=51">Java图形界面编程</a></li><li>MySQL数据库SQL语言入门：<a href="https://www.bilibili.com/video/BV1YY411s7Nk/?vd_source=ef77f99dbf6da2761d373027f1ca87d7">MySQL数据库SQL语言入门</a></li><li>Java语言连接操作MySQL数据库，JDBC技术：<a href="https://www.bilibili.com/video/BV13F411z7Ls/?vd_source=ef77f99dbf6da2761d373027f1ca87d7">Java语言连接操作MySQL数据库，JDBC技术</a></li><li>当然，视频的作用只是辅助快速入门，关键还是需要多查询文档和百度。</li></ul><h3 id="程序设计"><a class="markdownIt-Anchor" href="#程序设计"></a> 程序设计</h3><ul><li>首先建立与数据库的连接并获取数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">getData</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过id和name搜索</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  List&lt;Object&gt; <span class="hljs-title">search</span><span class="hljs-params">(String My_id)</span> </span>&#123;<br><br>        <span class="hljs-comment">//创建列表</span><br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultset = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//System.out.println(&quot;输入要搜索商品的id或者name：&quot;);</span><br>        <span class="hljs-comment">//Scanner sc1 = new Scanner(System.in);</span><br>        <span class="hljs-comment">//String search = sc1.nextLine();</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br><br>                statement = connection.createStatement();<br>                String sql = <span class="hljs-string">&quot;select * from goods where id =? or name = ?&quot;</span>;<br>                ps=connection.prepareStatement(sql);<span class="hljs-comment">//添加数据预处理</span><br>                ps.setString(<span class="hljs-number">1</span>, My_id);<br>                ps.setString(<span class="hljs-number">2</span>, My_id);<br>                resultset = ps.executeQuery();<br><br>                <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(resultset.next())&#123;<br>                    String id = resultset.getString(<span class="hljs-string">&quot;id&quot;</span>);<br>                    list.add(i,id);<br>                    i++;<br>                    String name = resultset.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                    list.add(i,name);<br>                    i++;<br>                    <span class="hljs-keyword">int</span> price = resultset.getInt(<span class="hljs-string">&quot;price&quot;</span>);<br>                    list.add(i,price);<br>                    i++;<br>                    <span class="hljs-keyword">int</span> num = resultset.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                    list.add(i,num);<br>                    i++;<br>                    <span class="hljs-comment">//System.out.println(&quot;id:&quot;+id+&quot;   &quot;+&quot;name:&quot;+name+&quot;   &quot;+&quot;price:&quot;+price+&quot;   &quot;+&quot;num:&quot;+num);</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">            关闭连接</span><br><span class="hljs-comment">            */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(AutoCloseable autoCloseable)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(autoCloseable != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>向数据库中添加数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> service;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">addData</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    添加数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addData</span><span class="hljs-params">(String id,String name,<span class="hljs-keyword">int</span> price,<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultset = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br><br><span class="hljs-comment">//                if(connection != null)&#123;</span><br><span class="hljs-comment">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class="hljs-comment">//                    connection.close();</span><br><span class="hljs-comment">//                &#125;</span><br>                statement = connection.createStatement();<br>                resultset =  statement.executeQuery(<span class="hljs-string">&quot;select * from goods&quot;</span>);<br>                String sql;<br>                sql=<span class="hljs-string">&quot;INSERT INTO goods VALUES(?,?,?,?)&quot;</span>;<span class="hljs-comment">//向goods表里添加数据</span><br>                ps=connection.prepareStatement(sql);<span class="hljs-comment">//添加数据预处理</span><br>                ps.setString(<span class="hljs-number">1</span>, id);<br>                ps.setString(<span class="hljs-number">2</span>, name);<br>                ps.setInt(<span class="hljs-number">3</span>, price);<br>                ps.setInt(<span class="hljs-number">4</span>, num);<br>                ps.executeUpdate();<span class="hljs-comment">//执行添加数据</span><br>                System.out.println(<span class="hljs-string">&quot;添加&quot;</span>+id+<span class="hljs-string">&quot;数据成功！&quot;</span>);<br>                <span class="hljs-comment">// 完成后关闭</span><br>                ps.close();<br>                statement.close();<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">            关闭连接</span><br><span class="hljs-comment">            */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(AutoCloseable autoCloseable)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(autoCloseable != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>更改数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> gui.service;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">changeData</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">            修改</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(String My_id,String My_name ,<span class="hljs-keyword">int</span> My_price,<span class="hljs-keyword">int</span> My_num)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultset = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br><br><span class="hljs-comment">//                if(connection != null)&#123;</span><br><span class="hljs-comment">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class="hljs-comment">//                    connection.close();</span><br><span class="hljs-comment">//                &#125;</span><br>                statement = connection.createStatement();<br><br>                <span class="hljs-comment">//拼接字符串，直接使用？会自动加上单引号。</span><br>                String sql1 = <span class="hljs-string">&quot;UPDATE goods SET &quot;</span>;<br>                String sql2 = <span class="hljs-string">&quot;name = ? &quot;</span>;<br>                String sql3 = <span class="hljs-string">&quot;,price = ? ,&quot;</span>;<br>                String sql4 = <span class="hljs-string">&quot;num = ?&quot;</span>;<br>                String sql5 = <span class="hljs-string">&quot; WHERE id=?&quot;</span>;<br>                String sql6 = sql1+sql2+sql3+sql4+sql5;<br><br>                ps=connection.prepareStatement(sql6);<span class="hljs-comment">//添加数据预处理</span><br>                ps.setString(<span class="hljs-number">1</span>, My_name);<br>                    ps.setInt(<span class="hljs-number">2</span>, My_price);<br>                    ps.setInt(<span class="hljs-number">3</span>, My_num);<br>                    ps.setString(<span class="hljs-number">4</span>, My_id);<br>                    ps.executeUpdate();<span class="hljs-comment">//执行修改数据</span><br><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>            close(ps);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">               关闭连接</span><br><span class="hljs-comment">               */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(AutoCloseable autoCloseable)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(autoCloseable != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> gui.service;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">delData</span> </span>&#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">      删除数据</span><br><span class="hljs-comment">       */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del_data</span><span class="hljs-params">(String My_id)</span> </span>&#123;<br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultset = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br><br><span class="hljs-comment">//                if(connection != null)&#123;</span><br><span class="hljs-comment">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class="hljs-comment">//                    connection.close();</span><br><span class="hljs-comment">//                &#125;</span><br>                statement = connection.createStatement();<br>                resultset =  statement.executeQuery(<span class="hljs-string">&quot;select * from goods&quot;</span>);<br>                String sql;<br>                sql=<span class="hljs-string">&quot;DELETE FROM goods WHERE id=?&quot;</span>;<span class="hljs-comment">//向goods表里删除数据</span><br>                ps=connection.prepareStatement(sql);<span class="hljs-comment">//添加数据预处理</span><br>                ps.setString(<span class="hljs-number">1</span>,My_id);<span class="hljs-comment">//第1个问号的值</span><br>                ps.executeUpdate();<span class="hljs-comment">//执行添加数据</span><br>                System.out.println(<span class="hljs-string">&quot;删除&quot;</span>+My_id+<span class="hljs-string">&quot;数据成功！&quot;</span>);<br>                <span class="hljs-comment">// 完成后关闭</span><br>                ps.close();<br>                statement.close();<br>                connection.close();<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     关闭连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(AutoCloseable autoCloseable)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(autoCloseable != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>筛选数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> gui.service;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chooseData</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        通过id和name搜索</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Object&gt; <span class="hljs-title">search</span><span class="hljs-params">(String My_data)</span> </span>&#123;<br><br>        <span class="hljs-comment">//创建列表</span><br>        List&lt;Object&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Object&gt;();<br><br>        Connection connection = <span class="hljs-keyword">null</span>;<br>        Statement statement = <span class="hljs-keyword">null</span>;<br>        ResultSet resultset = <span class="hljs-keyword">null</span>;<br>        PreparedStatement ps = <span class="hljs-keyword">null</span>;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br><br>                connection = DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/goods&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;1234&quot;</span>);<br><br><span class="hljs-comment">//                if(connection != null)&#123;</span><br><span class="hljs-comment">//                    System.out.println(&quot;连接成功&quot;+connection);</span><br><span class="hljs-comment">//                    connection.close();</span><br><span class="hljs-comment">//                &#125;</span><br>                statement = connection.createStatement();<br>                String sql = <span class="hljs-string">&quot;select * from goods where id =? or name = ?&quot;</span>;<br>                ps=connection.prepareStatement(sql);<span class="hljs-comment">//添加数据预处理</span><br>                ps.setString(<span class="hljs-number">1</span>, My_data);<br>                ps.setString(<span class="hljs-number">2</span>, My_data);<br>                resultset = ps.executeQuery();<br><br>                <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span>(resultset.next())&#123;<br>                    String id = resultset.getString(<span class="hljs-string">&quot;id&quot;</span>);<br>                    list.add(i,id);<br>                    i++;<br>                    String name = resultset.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                    list.add(i,name);<br>                    i++;<br>                    <span class="hljs-keyword">int</span> price = resultset.getInt(<span class="hljs-string">&quot;price&quot;</span>);<br>                    list.add(i,price);<br>                    i++;<br>                    <span class="hljs-keyword">int</span> num = resultset.getInt(<span class="hljs-string">&quot;num&quot;</span>);<br>                    list.add(i,num);<br>                    i++;<br>                    <span class="hljs-comment">//System.out.println(&quot;id:&quot;+id+&quot;   &quot;+&quot;name:&quot;+name+&quot;   &quot;+&quot;price:&quot;+price+&quot;   &quot;+&quot;num:&quot;+num);</span><br>                &#125;<br><br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            close(connection);<br>            close(statement);<br>            close(resultset);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">               关闭连接</span><br><span class="hljs-comment">               */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(AutoCloseable autoCloseable)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(autoCloseable != <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                autoCloseable.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="项目展示"><a class="markdownIt-Anchor" href="#项目展示"></a> 项目展示</h3><ul><li>登录界面                   用户名:root                    密码:1234</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui1.png" alt=" " /></p><ul><li>数据管理界面，基本功能模块和数据表格显示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui2.png" alt=" " /></p><ul><li>添加数据功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui3.png" alt=" " /></p><ul><li>修改数据功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui4.png" alt=" " /></p><ul><li>数据筛选功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui5.png" alt=" " /></p><ul><li>页眉部分拓展功能</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui.png" alt=" " /></p><ul><li>关于作者界面</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/gui6.png" alt=" " /></p><h3 id="项目下载"><a class="markdownIt-Anchor" href="#项目下载"></a> 项目下载</h3><ul><li><p>由于本项目代码量巨大，详细工程就不展示在本博客中，同时为了促进大家相互学习和共同进步，在此提供公开版项目供大家使用，一起进步！</p></li><li><p>公开版项目是精简了一些冗余的外观，尽量保留原汁原味JavaGUI，更加关注后台数据处理和交互的过程！读者可以根据初始GUI进行深度定制，随时随地制作出合你心意的作品。鉴于本人水平有限，本项目依然有很多不足之处，欢迎大家在下方评论区留言指正！</p></li><li><p>本公开版项目能够直接运行Main.java即可，若连接数据库，读者需要首先自行在本机安装MySql并将相关内容在service文件夹即业务逻辑层修改部分代码才可完美运行。</p></li><li><p>本项目所有功能已经测试通过，如仍然有Bug欢迎指正！</p></li><li><p>下载连接：<a href="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-bc82cde5-9df0-4e04-8d4f-a0e9e1bd241b/9220f08e-f2ed-484f-b9b1-60f13b8ea3ba.zip">公开版项目点此下载</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号的时域处理</title>
    <link href="/2022/10/13/signal_2/"/>
    <url>/2022/10/13/signal_2/</url>
    
    <content type="html"><![CDATA[<h1 id="信号的时域处理"><a class="markdownIt-Anchor" href="#信号的时域处理"></a> <strong>信号的时域处理</strong></h1><h2 id="第一问"><a class="markdownIt-Anchor" href="#第一问"></a> 第一问</h2><h2 id="要求"><a class="markdownIt-Anchor" href="#要求"></a> 要求</h2><p>① 选择子作业１中的音频信号，自行给定滤波器的<strong>系统函数</strong>，采用<strong>差分方程方法</strong>对音频信号进行滤波处理，<strong>比较滤波前后信号的波形</strong>和回放的效果。</p><h2 id="实验原理"><a class="markdownIt-Anchor" href="#实验原理"></a> 实验原理</h2><ul><li>对于直接I型的<strong>IIR滤波器</strong>(<strong>无限长单位冲激响应滤波器</strong>)的系统函数为：</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>Y</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><mrow><mi>X</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><mfrac><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">H(z)=\frac{Y(z)}{X(z)}=\frac{\sum _{k=0}^{M}b_{k}z^{-k}}{1-\sum _{k=1}^{N}a_{k}z^{-k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.841882em;vertical-align:-1.170941em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.670941em;"><span style="top:-2.128769em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751079999999999em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.6897100000000003em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.170941em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li>其对应的<strong>差分方程</strong>为：</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msub><mi>a</mi><mi>k</mi></msub><mi>y</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo><mo>+</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><mi>x</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(n)=\sum _{k=1}^{N}a_{k}y(n-k)+\sum _{k=0}^{M}b_{k}x(n-k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></span></p><ul><li>由此，我们只需要求出对应的<strong>差分方程系数</strong>就能够确定一个IIR滤波器。</li></ul><h3 id="巴特沃斯滤波器的设计"><a class="markdownIt-Anchor" href="#巴特沃斯滤波器的设计"></a> 巴特沃斯滤波器的设计</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/butterworth.png" alt=" " /></p><ul><li>比较经典的<strong>IIR滤波器</strong>有<strong>巴特沃斯滤波器</strong>，我们可以根据我们所需要设计的需求来确定<strong>通带截止频率</strong>和<strong>阻带截止频率</strong>以及<strong>通带最大衰减分贝</strong>和<strong>阻带最小衰减分贝</strong>，运用<strong>Matlab</strong>完善的函数运算功能就能够确定出巴特沃斯滤波器的对应的<strong>差分方程系数</strong>。</li></ul><h2 id="程序设计"><a class="markdownIt-Anchor" href="#程序设计"></a> 程序设计</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear;<br><br><span class="hljs-comment">%声音信号的采样</span><br>[x,Fs] = audioread(<span class="hljs-string">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<span class="hljs-comment">%转置</span><br>n=<span class="hljs-built_in">length</span>(x);<span class="hljs-comment">%获取x的采样点数</span><br>dt=<span class="hljs-number">1</span>/Fs;<span class="hljs-comment">%求采样间隔</span><br>time=(<span class="hljs-number">0</span>:n<span class="hljs-number">-1</span>)*dt;<span class="hljs-comment">%采样时间点</span><br>subplot(<span class="hljs-number">221</span>);<br><span class="hljs-built_in">plot</span>(time,x);<br>title(<span class="hljs-string">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;时间/s&#x27;</span>);<br><br><span class="hljs-comment">%原始信号fft变换</span><br>f_<span class="hljs-built_in">true</span>=time*Fs/<span class="hljs-built_in">length</span>(time);<br>k=fft(x,<span class="hljs-built_in">length</span>(time));<br>k(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(k)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class="hljs-built_in">true</span>*Fs/<span class="hljs-number">1e3</span>;<br>l(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(l)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class="hljs-number">222</span>);<br><span class="hljs-built_in">plot</span>(l,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%巴特沃斯滤波器设计</span><br>wp=<span class="hljs-number">2</span>*<span class="hljs-number">7760</span>/Fs;<span class="hljs-comment">%通带截止频率（数字滤波器作归一化变换）</span><br>ws=<span class="hljs-number">2</span>*<span class="hljs-number">8000</span>/Fs;<span class="hljs-comment">%阻带截止频率（数字滤波器作归一化变换）</span><br>Rp=<span class="hljs-number">2</span>;<span class="hljs-comment">%通带最大衰减2dB</span><br>As=<span class="hljs-number">30</span>;<span class="hljs-comment">%阻带最小衰减30dB</span><br>[N,wc]=buttord(wp,ws,Rp,As);<span class="hljs-comment">%求滤波器的阶数N与3dB截止频率wc</span><br>[b,a]=butter(N,wc);<span class="hljs-comment">%得到差分方程系数</span><br>y=filter(b,a,x);<span class="hljs-comment">%滤波</span><br>subplot(<span class="hljs-number">223</span>);<br><span class="hljs-built_in">plot</span>(time,y);<br>title(<span class="hljs-string">&#x27;直接法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;时间/s&#x27;</span>);<br><br><span class="hljs-comment">%滤波后信号fft变换</span><br>f_<span class="hljs-built_in">true</span>=time*Fs/<span class="hljs-built_in">length</span>(time);<br>k=fft(y,<span class="hljs-built_in">length</span>(time));<br>k(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(k)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class="hljs-built_in">true</span>*Fs/<span class="hljs-number">1e3</span>;<br>l(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(l)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class="hljs-number">224</span>);<br><span class="hljs-built_in">plot</span>(l,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;直接法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%绘制归一化滤波器参数</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br>freqz(b,a);<br><br><span class="hljs-comment">%写入和试听音频</span><br>audiowrite(<span class="hljs-string">&#x27;direct.wav&#x27;</span>,y,Fs);<br></code></pre></td></tr></table></figure><h2 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h2><ul><li><strong>巴特沃斯滤波器</strong>归一化频率<strong>幅频响应</strong>和<strong>相频响应</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR%E5%B9%85%E9%A2%91%E5%93%8D%E5%BA%94.png" alt=" " /></p><ul><li><strong>巴特沃斯滤波器</strong>滤波效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/IIR%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="" /></p><h2 id="分析总结"><a class="markdownIt-Anchor" href="#分析总结"></a> 分析总结</h2><ul><li>首先对原始音频信号进行<strong>快速傅里叶变换</strong>观察其频谱，发现在<strong>8kHz-9.5kHz</strong>有<strong>高频噪声信号</strong>。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于<strong>差分方程法</strong>，我们选择<strong>IIR型</strong>中的<strong>巴特沃斯滤波器</strong>。经过多次测试，发现设置<strong>通带截止频率</strong>为7.76kHz，<strong>阻带截止频率</strong>为8kHz，<strong>通带最大衰减</strong>2dB，<strong>阻带最小衰减</strong>30dB。通过运算后得到滤波器系统函数的<strong>分子、分母多项式系数</strong>向量b和向量a，即为<strong>差分方程的系数</strong>。根据系统函数直接运算得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。</li></ul><h2 id="第二问"><a class="markdownIt-Anchor" href="#第二问"></a> 第二问</h2><h2 id="要求-2"><a class="markdownIt-Anchor" href="#要求-2"></a> 要求</h2><p>②  选择子作业１中的音频信号，自行给定滤波器的<strong>系统函数</strong>，采用<strong>时域线性卷积</strong>对音频信号进行滤波处理，<strong>比较滤波前后信号的波形</strong>和回放的效果。</p><h2 id="实验原理-2"><a class="markdownIt-Anchor" href="#实验原理-2"></a> 实验原理</h2><ul><li>对于FIR数字滤波器（有限长单位冲激响应滤波器），由于</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>z</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><msub><mi>b</mi><mi>k</mi></msub><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup><mo>=</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mi>M</mi></munderover><mi>h</mi><mrow><mo fence="true">[</mo><mi>k</mi><mo fence="true">]</mo></mrow><msup><mi>z</mi><mrow><mo>−</mo><mi>k</mi></mrow></msup></mrow><annotation encoding="application/x-tex">H(z)=\sum _{k=0}^{M}b_{k}z^{-k}=\sum _{k=0}^{M}h\left[ k \right] z^{-k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.1304490000000005em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.300005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>因此设计FIR数字滤波器时，我们只需要求出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo stretchy="false">[</mo><mi>k</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">h[k]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">h</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">]</span></span></span></span>，即滤波器的单位冲激响应，与音频信号进行卷积后得到滤除高频噪声的音频信号。</li></ul><h2 id="程序设计-2"><a class="markdownIt-Anchor" href="#程序设计-2"></a> 程序设计</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear;<br><br><span class="hljs-comment">%声音信号的采样</span><br>[x,Fs] = audioread(<span class="hljs-string">&#x27;Carmen_overture_noisy_8k_9.5k.wav&#x27;</span>);<br>x=x.&#x27;;<br>n=<span class="hljs-built_in">length</span>(x);<span class="hljs-comment">%获取x的采样点数</span><br>dt=<span class="hljs-number">1</span>/Fs;<span class="hljs-comment">%求采样间隔</span><br>time=(<span class="hljs-number">0</span>:n<span class="hljs-number">-1</span>)*dt;<span class="hljs-comment">%采样时间点</span><br>subplot(<span class="hljs-number">221</span>);<br><span class="hljs-built_in">plot</span>(time,x);<br>title(<span class="hljs-string">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;时间/s&#x27;</span>);<br><br><span class="hljs-comment">%原始信号fft变换</span><br>f_<span class="hljs-built_in">true</span>=time*Fs/<span class="hljs-built_in">length</span>(time);<br>k=fft(x,<span class="hljs-built_in">length</span>(time));<br>k(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(k)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class="hljs-built_in">true</span>*Fs/<span class="hljs-number">1e3</span>;<br>l(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(l)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半;</span><br>subplot(<span class="hljs-number">222</span>);<br><span class="hljs-built_in">plot</span>(l,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%fir（默认汉宁窗）滤波器设计</span><br>h=fir1(<span class="hljs-number">3000</span>,<span class="hljs-number">7.99e3</span>*<span class="hljs-number">2</span>/<span class="hljs-number">22.05e3</span>);<br>y = conv(x,h);<span class="hljs-comment">%卷积运算</span><br>y(:,<span class="hljs-built_in">length</span>(x)+<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(y)) = [];<span class="hljs-comment">%将卷积后信号的长度变换为原信号长度</span><br>subplot(<span class="hljs-number">223</span>);<br><span class="hljs-built_in">plot</span>(time,y);<br>title(<span class="hljs-string">&#x27;卷积法滤波后声音信号时域波形&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;时间/s&#x27;</span>);<br><br><span class="hljs-comment">%滤波后信号fft变换</span><br>f_<span class="hljs-built_in">true</span>=time*Fs/<span class="hljs-built_in">length</span>(time);<br>k=fft(y,<span class="hljs-built_in">length</span>(time));<br>k(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(k)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>l=f_<span class="hljs-built_in">true</span>*Fs/<span class="hljs-number">1e3</span>;<br>l(:,<span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">length</span>(l)/<span class="hljs-number">2</span>):<span class="hljs-keyword">end</span>) = [];<span class="hljs-comment">%去掉快速傅里叶变换对称的一半</span><br>subplot(<span class="hljs-number">224</span>);<br><span class="hljs-built_in">plot</span>(l,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;卷积法滤波后声音信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%试听和写入信号</span><br> audiowrite(<span class="hljs-string">&#x27;fir_conv.wav&#x27;</span>,y,Fs);<br> <br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>);<br>stem(h,<span class="hljs-string">&#x27;.&#x27;</span>);<br>title(<span class="hljs-string">&#x27;FIR单位冲激响应&#x27;</span>)<br>axis([<span class="hljs-number">1460</span> <span class="hljs-number">1540</span> <span class="hljs-number">-0.3</span> <span class="hljs-number">0.8</span>]);<br></code></pre></td></tr></table></figure><h2 id="实验结果-2"><a class="markdownIt-Anchor" href="#实验结果-2"></a> 实验结果</h2><ul><li><strong>Hamming窗函数</strong>(单位冲激响应)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%8D%95%E4%BD%8D%E5%86%B2%E6%BF%80%E5%93%8D%E5%BA%94.png" alt="" /></p><ul><li><strong>Hamming窗函数</strong>滤波效果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/FIR%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="" /></p><h2 id="分析总结-2"><a class="markdownIt-Anchor" href="#分析总结-2"></a> 分析总结</h2><ul><li>首先对原始音频信号进行<strong>快速傅里叶变换</strong>观察其频谱，发现在<strong>8kHz-9.5kHz</strong>有<strong>高频噪声信号</strong>。因此，滤波器理论截止频率应该在8kHz。查阅资料，对于<strong>时域卷积法</strong>，我们选择<strong>FIR型</strong>中的<strong>Hamming窗</strong>。经过多次测试，发现设置<strong>3000阶</strong>的<strong>幅值3dB衰减对应频率在7.99kHz</strong>时效果较好。通过运算后得到滤波器的部分单位冲激响应如上图所示。根据<strong>单位冲激响应</strong>直接和<strong>时域波形</strong>进行<strong>卷积运算</strong>得到滤波效果如上图所示，试听生成的音频发现高频噪声已经滤去。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数字信号处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字信号处理</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA程序设计实验练习一</title>
    <link href="/2022/09/29/exercise1/"/>
    <url>/2022/09/29/exercise1/</url>
    
    <content type="html"><![CDATA[<h1 id="实验题目"><a class="markdownIt-Anchor" href="#实验题目"></a> 实验题目</h1><h2 id="题目一"><a class="markdownIt-Anchor" href="#题目一"></a> 题目一</h2><h3 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目：</h3><p>定义一个数组类，编写成员函数实现以下功能：</p><ol><li><p>随机生成函数RandomArray（int n, int max）:随机生成一个一维整数数组，数组长度为n，元素值不超过max；</p></li><li><p>判断函数CheckOrder（）：判断数组中元素是否按升序排练，若是返回1，否返回0；</p></li><li><p>数组和函数Sum（）：计算数组和。</p></li><li><p>判断某个元素函数CheckKey（int key）：找到数组中的某个值（key），若有返回1，无返回0；</p></li><li><p>编写main函数，调用测试以上功能；</p></li></ol><h3 id="运行结果"><a class="markdownIt-Anchor" href="#运行结果"></a> 运行结果：</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java1.png" alt=" " /></p><h3 id="源代码"><a class="markdownIt-Anchor" href="#源代码"></a> 源代码：</h3><ul><li>定义数组类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Array</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> max;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Array</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Array</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> max)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.n=n;<br>        <span class="hljs-keyword">this</span>.max=max;<br>        <span class="hljs-comment">//arr = new int[n];</span><br>    &#125;<br><br>    <span class="hljs-comment">//生成随机数</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getRandomNumberInRange</span><span class="hljs-params">(<span class="hljs-keyword">int</span> min, <span class="hljs-keyword">int</span> max)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (min &gt;= max) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;max must be greater than min&quot;</span>);<br>        &#125;<br>        Random r = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">return</span> r.nextInt((max - min) + <span class="hljs-number">1</span>) + min;<br>    &#125;<br><br>    <span class="hljs-comment">//随机数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RandomArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> max)</span></span>&#123;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            <span class="hljs-comment">//public int[] arr = new int[n];</span><br>            arr[i]=getRandomNumberInRange(<span class="hljs-number">0</span>,max);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;元素值不超过 &quot;</span>+max);<br>        System.out.println(<span class="hljs-string">&quot;数组长度是 &quot;</span>+arr.length);<br>    &#125;<br><br>    <span class="hljs-comment">//判断升序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CheckOrder</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> right1 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(arr[i]&gt;arr[i+<span class="hljs-number">1</span>])<br>            &#123;<br>              right1=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> right1=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right1;<br>    &#125;<br><br>    <span class="hljs-comment">//计算和</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> sum1=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            sum1+=arr[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum1;<br>    &#125;<br><br>    <span class="hljs-comment">//判断函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">CheckKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> right1=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(arr[i]==key)<br>            &#123;<br>                right1=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> right1=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right1;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// write your code here</span><br>        Array array = <span class="hljs-keyword">new</span> Array(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);<br>        array.RandomArray(<span class="hljs-number">5</span>,<span class="hljs-number">50</span>);<br>        System.out.println(<span class="hljs-string">&quot;判断数组是否有值 &quot;</span>+array.CheckKey(<span class="hljs-number">1</span>));<br>        System.out.println(<span class="hljs-string">&quot;判断数组是否升序 &quot;</span>+array.CheckOrder());<br>        System.out.println(<span class="hljs-string">&quot;数组元素的和 &quot;</span>+array.sum());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目二"><a class="markdownIt-Anchor" href="#题目二"></a> 题目二</h2><h3 id="题目-2"><a class="markdownIt-Anchor" href="#题目-2"></a> 题目：</h3><p>编写程序，求圆柱体的体积CylinderVolume:</p><ol><li><p>设计一个计算圆面积的接口area，包含计算面积的方法bottomArea；</p></li><li><p>设计一个圆柱体类Cylinder实现接口area，包含</p></li></ol><ul><li><p>包含成员变量：高度，半径；</p></li><li><p>实现构造方法，对成员变量进行赋值；</p></li><li><p>实现圆柱体底面积成员方法area；</p></li><li><p>实现计算圆柱体体积的成员方法volume；</p></li></ul><ol start="3"><li>编写测试类计算圆柱体体积。</li></ol><h3 id="运行结果-2"><a class="markdownIt-Anchor" href="#运行结果-2"></a> 运行结果：</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java2.png" alt=" " /></p><h3 id="源代码-2"><a class="markdownIt-Anchor" href="#源代码-2"></a> 源代码：</h3><ul><li>计算圆面积的接口area</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">area</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">bottomArea</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>圆柱体类Cylinder</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cylinder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">area</span></span>&#123;<br><br>    <span class="hljs-comment">//成员属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> h;<span class="hljs-comment">//高度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> r;<span class="hljs-comment">//半径</span><br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cylinder</span><span class="hljs-params">()</span></span>&#123;<br>    &#125;<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cylinder</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h,<span class="hljs-keyword">int</span> r)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.r=r;<br>        <span class="hljs-keyword">this</span>.h=h;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">area</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI*r*r;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">volume</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI*r*r*h;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">bottomArea</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI*r*r;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// write your code here</span><br>        <span class="hljs-keyword">int</span> h=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> r=<span class="hljs-number">2</span>;<br>        Cylinder cylinder = <span class="hljs-keyword">new</span> Cylinder(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;高度&quot;</span>+h+<span class="hljs-string">&quot; 半径&quot;</span>+r);<span class="hljs-comment">//接口方法</span><br>        System.out.println(<span class="hljs-string">&quot;接口方法面积&quot;</span>+cylinder.bottomArea());<span class="hljs-comment">//接口方法</span><br>        System.out.println(<span class="hljs-string">&quot;成员方法面积&quot;</span>+cylinder.area());<span class="hljs-comment">//成员方法</span><br>        System.out.println(<span class="hljs-string">&quot;成员方法体积&quot;</span>+cylinder.volume());<span class="hljs-comment">//成员方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目三"><a class="markdownIt-Anchor" href="#题目三"></a> 题目三</h2><h3 id="题目-3"><a class="markdownIt-Anchor" href="#题目-3"></a> 题目：</h3><ol><li>定义一个父类Animal类</li></ol><p>属性：kind(种类)</p><p>方法：创建带参（kind为参数）构造方法</p><p>创建cry():void方法</p><ol start="2"><li>编写三个具体的子类Cat类、Dog类、Sheep类</li></ol><p>分别重写父类中的 cry() 方法，输出信息分别为</p><p>Cat类：小猫的叫声：喵喵喵~~~</p><p>Dog类：小狗的叫声：汪汪汪~~~</p><p>Sheep类：小羊的叫声：咩咩咩~~~</p><ol start="3"><li>编写测试类，首先生成长度为5的父类对象数组，然后通过循环依次向数组中存入数据，现设定存储规则为：</li></ol><p>a) 每次随机产生一个0~2的正整数</p><p>b) 若数值为 0，则生成一个 Cat 类的对象，存入数组</p><p>c) 若数值为 1，则生成一个 Dog 类的对象，存入数组</p><p>d) 若数值为 2，则生成一个 Sheep 类的对象，存入数组</p><p>最后循环输出数组成员，并分别调用 cry() 方法。</p><h3 id="运行结果-3"><a class="markdownIt-Anchor" href="#运行结果-3"></a> 运行结果:</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/java3.png" alt=" " /></p><h3 id="源代码-3"><a class="markdownIt-Anchor" href="#源代码-3"></a> 源代码：</h3><ul><li>父类（动物）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> String kind;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(String kind)</span></span>&#123;<br>          <span class="hljs-keyword">this</span>.kind=kind;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span><span class="hljs-params">()</span></span>&#123;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类（猫）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(String kind)</span></span>&#123;<br>       <span class="hljs-keyword">super</span>(kind);<br>   &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-keyword">this</span>.kind+<span class="hljs-string">&quot;的叫声：喵喵喵~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类（狗）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(String kind)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(kind);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.kind+<span class="hljs-string">&quot;的叫声：汪汪汪~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>子类（羊）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sheep</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sheep</span><span class="hljs-params">(String kind)</span></span>&#123;<br>        <span class="hljs-keyword">super</span>(kind);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cry</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-keyword">this</span>.kind+<span class="hljs-string">&quot;的叫声：咩咩咩~~~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>主函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.company;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// write your code here</span><br>         Animal[] animal = <span class="hljs-keyword">new</span> Animal[<span class="hljs-number">5</span>];<span class="hljs-comment">//生成5个数组</span><br>        <span class="hljs-comment">//System.out.println(animal.length);</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;animal.length;i++)<br>       &#123;<br>           <span class="hljs-keyword">int</span> num = <span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">3</span>);<br>           <span class="hljs-keyword">if</span>(num==<span class="hljs-number">0</span>)<br>           &#123;<br>             animal[i] = <span class="hljs-keyword">new</span> Cat(<span class="hljs-string">&quot;cat&quot;</span>+i);<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num==<span class="hljs-number">1</span>)<br>           &#123;<br>               animal[i] =<span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&quot;dog&quot;</span>+i);<br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num==<span class="hljs-number">2</span>)<br>           &#123;<br>               animal[i] =<span class="hljs-keyword">new</span> Sheep(<span class="hljs-string">&quot;sheep&quot;</span>+i);<br>           &#125;<br>       &#125;<br>        <span class="hljs-keyword">for</span>(Animal j:animal)<br>        &#123;<br>            j.cry();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>程序设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信号的采样与重建</title>
    <link href="/2022/09/22/signal_1/"/>
    <url>/2022/09/22/signal_1/</url>
    
    <content type="html"><![CDATA[<h1 id="信号的采样与重建"><a class="markdownIt-Anchor" href="#信号的采样与重建"></a> <strong>信号的采样与重建</strong></h1><h2 id="第一问"><a class="markdownIt-Anchor" href="#第一问"></a> 第一问</h2><h3 id="要求"><a class="markdownIt-Anchor" href="#要求"></a> 要求</h3><p>①固定采样频率500 kHz，分别对100 kHz、250 kHz、400 kHz的正弦波信号（幅度，相位自定义）进行采样和重建，分析比较原信号与重建信号的波形；</p><h3 id="程序设计"><a class="markdownIt-Anchor" href="#程序设计"></a> 程序设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear<br><span class="hljs-comment">%参数设定</span><br>f1 = <span class="hljs-number">100000</span>;<span class="hljs-comment">%信号频率</span><br>fs = <span class="hljs-number">500000</span>;<span class="hljs-comment">%采样频率</span><br>dt = <span class="hljs-number">1</span>/fs; <span class="hljs-comment">% 采样间隔，采样间隔可以理解为采样信号的周期，周期 = 1/频率</span><br>Tf = <span class="hljs-number">1</span>/f1; <span class="hljs-comment">%  一个信号周期的时间</span><br><br><span class="hljs-comment">%可得参数</span><br>t = <span class="hljs-built_in">linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>*Tf,<span class="hljs-number">1000</span>*<span class="hljs-number">20</span>); <span class="hljs-comment">% 原信号每个周期内的点数为1000个点</span><br>f_ori = <span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span> * <span class="hljs-built_in">pi</span> * f1 * t) ;<br><span class="hljs-comment">%figure(1);</span><br>subplot(<span class="hljs-number">221</span>);<br><span class="hljs-built_in">plot</span>(t, f_ori);title(strcat(num2str(f1/<span class="hljs-number">1000</span>),<span class="hljs-string">&#x27;kHz原始信号&#x27;</span>));xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>);<br><br><span class="hljs-comment">%采样</span><br>t2  = <span class="hljs-number">0</span>:dt:t(<span class="hljs-keyword">end</span>); <span class="hljs-comment">% 整个信号时间范围内采样</span><br>f_sam =  <span class="hljs-built_in">cos</span>(<span class="hljs-number">2</span> * <span class="hljs-built_in">pi</span> * f1 * t2) ;<br><span class="hljs-comment">%figure(2);</span><br>subplot(<span class="hljs-number">222</span>);<br>stem(t2, f_sam,<span class="hljs-string">&#x27;.&#x27;</span>);title(<span class="hljs-string">&#x27;采样信号(500kHz采样率)&#x27;</span>);xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>);<br><br><span class="hljs-comment">%fft变换</span><br>f_<span class="hljs-built_in">true</span>=t2*fs/<span class="hljs-built_in">length</span>(t2);<br>k=fft(f_sam,<span class="hljs-built_in">length</span>(t2));<br><span class="hljs-comment">%figure(3);</span><br>subplot(<span class="hljs-number">223</span>);<br>stem(f_<span class="hljs-built_in">true</span>*fs/<span class="hljs-number">1e3</span>,<span class="hljs-built_in">abs</span>(k),<span class="hljs-string">&#x27;.&#x27;</span>);title(<span class="hljs-string">&#x27;采样信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%恢复</span><br>y = [];<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(t)<br>    x = t(<span class="hljs-built_in">i</span>);<br>    h = sinc((x - t2).*fs);<br>    g = <span class="hljs-built_in">dot</span>(f_sam, h);<span class="hljs-comment">%向量相乘</span><br>    y = [y,g];<br><span class="hljs-keyword">end</span><br>subplot(<span class="hljs-number">224</span>);<br><span class="hljs-comment">%figure(4);</span><br><span class="hljs-built_in">plot</span>(t, y);title(<span class="hljs-string">&#x27;恢复信号&#x27;</span>);xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="实验结果"><a class="markdownIt-Anchor" href="#实验结果"></a> 实验结果</h3><ul><li><p>100kHz原始信号</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/100k_1.png" alt=" " /></p></li><li><p>250kHz原始信号</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/250k_1.png" alt=" " /></p></li><li><p>400kHz原始信号</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/400k_1.png" alt=" " /></p></li></ul><h3 id="分析总结"><a class="markdownIt-Anchor" href="#分析总结"></a> 分析总结</h3><ul><li>从上述图像中可以看出，当固定采样频率500kHz时，对于100kHz的信号采样并进行傅里叶变换后可以看出幅频特性较为准确，因为满足奈奎斯特采样定律，采样频率大于原始信号频率的两倍以上，处于过采样状态。当使用上述采样率采集250kHz的信号时出现了幅值一定的失真，此时处于临界采样状态。当使用上述采样率采集400kHz的信号时出现了幅值和频率的失真，此时处于欠采样状态。</li><li>上述程序设计中使用<code>dot</code>函数，具有一定创新性。</li></ul><h2 id="第二问"><a class="markdownIt-Anchor" href="#第二问"></a> 第二问</h2><h3 id="要求-2"><a class="markdownIt-Anchor" href="#要求-2"></a> 要求</h3><p>②采集一段音频信号，分别用欠采样、临界采样和过采样对信号进行重采样，并重建原音频信号，分析比较重建信号与原信号的差别。</p><h3 id="程序设计-2"><a class="markdownIt-Anchor" href="#程序设计-2"></a> 程序设计</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs matlab">clear<br><span class="hljs-comment">%声音信号的采样</span><br>[x,Fs] = audioread(<span class="hljs-string">&#x27;oba.mp3&#x27;</span>);<br>x=x(:,<span class="hljs-number">1</span>);<span class="hljs-comment">%由于x是双声道，所以取它的左声道</span><br>x = resample(x,<span class="hljs-number">13000</span>,Fs) ; <span class="hljs-comment">%重新采样</span><br>x=x.&#x27;;<br>Fs=<span class="hljs-number">13000</span>;<br>n=<span class="hljs-built_in">length</span>(x);<span class="hljs-comment">%获取x的采样点数</span><br>dt=<span class="hljs-number">1</span>/Fs;<span class="hljs-comment">%求采样间隔</span><br>time=(<span class="hljs-number">0</span>:n<span class="hljs-number">-1</span>)*dt;<span class="hljs-comment">%采样时间点</span><br><span class="hljs-comment">%figure(1);</span><br>subplot(<span class="hljs-number">321</span>);<br><span class="hljs-built_in">plot</span>(time,x);<br>title(<span class="hljs-string">&#x27;原始声音信号时域波形&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;时间/s&#x27;</span>);<br><br><span class="hljs-comment">%原始信号fft变换</span><br>f_<span class="hljs-built_in">true</span>=time*Fs/<span class="hljs-built_in">length</span>(time);<br>k=fft(x,<span class="hljs-built_in">length</span>(time));<br><span class="hljs-comment">%figure(2);</span><br>subplot(<span class="hljs-number">322</span>);<br><span class="hljs-built_in">plot</span>(f_<span class="hljs-built_in">true</span>*Fs/<span class="hljs-number">1e3</span>,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;原始声音信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%对原始信号进行采样</span><br>fs=Fs/<span class="hljs-number">2</span>; <span class="hljs-comment">%新的采样率</span><br>y = resample(x,fs,Fs) ; <span class="hljs-comment">%从x中第一个元素开始采样(奇采样)</span><br>n_sam=<span class="hljs-built_in">length</span>(y);<span class="hljs-comment">%获取y的采样点数</span><br>dt_sam=<span class="hljs-number">1</span>/fs;<span class="hljs-comment">%求采样间隔</span><br>time_sam=(<span class="hljs-number">0</span>:n_sam<span class="hljs-number">-1</span>)*dt_sam;<span class="hljs-comment">%新的采样时间点</span><br><span class="hljs-comment">%figure(3);</span><br>subplot(<span class="hljs-number">323</span>);<br><span class="hljs-built_in">plot</span>(time_sam,y);<br>title(<span class="hljs-string">&#x27;过采样信号时域波形&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;时间/s&#x27;</span>);<br><br><span class="hljs-comment">%采样信号fft变换</span><br>f_<span class="hljs-built_in">true</span>_sam=time_sam*Fs/<span class="hljs-built_in">length</span>(time_sam);<br>k=fft(y,<span class="hljs-built_in">length</span>(time_sam));<br><span class="hljs-comment">%figure(4);</span><br>subplot(<span class="hljs-number">324</span>);<br><span class="hljs-built_in">plot</span>(f_<span class="hljs-built_in">true</span>_sam*fs/<span class="hljs-number">1e3</span>,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;过采样信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%重建信号</span><br>z = [];<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span> : <span class="hljs-built_in">length</span>(x)<br>    m = time(<span class="hljs-built_in">i</span>);<br>    h = sinc((m - time_sam).*fs);<br>    g=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:<span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(y)<br>        s=y(<span class="hljs-built_in">j</span>)*h(<span class="hljs-built_in">j</span>);<br>        g=g+s;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">%g = dot(y, h);%向量相乘</span><br>    z = [z,g];<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%figure(5);</span><br>subplot(<span class="hljs-number">325</span>);<br><span class="hljs-built_in">plot</span>(time, z);title(<span class="hljs-string">&#x27;重建声音信号&#x27;</span>);xlabel(<span class="hljs-string">&#x27;t/s&#x27;</span>);<br><br><span class="hljs-comment">%重建信号fft变换</span><br>f_<span class="hljs-built_in">true</span>=time*Fs/<span class="hljs-built_in">length</span>(time);<br>k=fft(z,<span class="hljs-built_in">length</span>(time));<br><span class="hljs-comment">%figure(6);</span><br>subplot(<span class="hljs-number">326</span>);<br><span class="hljs-built_in">plot</span>(f_<span class="hljs-built_in">true</span>*Fs/<span class="hljs-number">1e3</span>,<span class="hljs-built_in">abs</span>(k));title(<span class="hljs-string">&#x27;重建声音信号傅里叶变换&#x27;</span>);xlabel(<span class="hljs-string">&#x27;kHz&#x27;</span>);<br><br><span class="hljs-comment">%试听和写入信号</span><br> sound(z,Fs);<br> audiowrite(<span class="hljs-string">&#x27;over_sampling.wav&#x27;</span>,z,Fs);<br></code></pre></td></tr></table></figure><h3 id="实验结果-2"><a class="markdownIt-Anchor" href="#实验结果-2"></a> 实验结果</h3><ul><li><p>临界采样</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/critical_sampling.png" alt=" " /></p></li><li><p>欠采样</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/under_sampling.png" alt=" " /></p></li><li><p>过采样</p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/over_sampling.png" alt=" " /></p></li></ul><h3 id="分析总结-2"><a class="markdownIt-Anchor" href="#分析总结-2"></a> 分析总结</h3><ul><li>首先对音频信号进行快速傅里叶变换和查阅人类发出声音的频率范围确定最高频率，此处取6.5kHz采样率作为临界采样率，由此可以得知低于6.5kHz采样率为欠采样，高于6.5kHz采样率为过采样。</li><li>按照上述分析理论进行设计并测试，对比其傅里叶变换频谱图看出符合上述理论，对比试听恢复的声音信号（见附件），可以听到临界采样恢复的声音信号和过采样恢复的声音信号与原信号差别不大，而欠采样的信号与原信号相比有较大失真，与奈奎斯特采样定理的理论相符合。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数字信号处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字信号处理</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包.exe应用程序</title>
    <link href="/2022/09/06/Myexe/"/>
    <url>/2022/09/06/Myexe/</url>
    
    <content type="html"><![CDATA[<h1 id="打包exe应用程序"><a class="markdownIt-Anchor" href="#打包exe应用程序"></a> 打包.exe应用程序</h1><h2 id="用python打包exe应用程序-pyinstaller"><a class="markdownIt-Anchor" href="#用python打包exe应用程序-pyinstaller"></a> 用python打包exe应用程序-PyInstaller</h2><h3 id="1-pyinstaller简介"><a class="markdownIt-Anchor" href="#1-pyinstaller简介"></a> <strong>1、PyInstaller简介</strong></h3><p>PyInstaller是一个跨平台的Python应用打包工具，支持 Windows/Linux/MacOS三大主流平台，能够把 Python 脚本及其所在的 Python 解释器打包成可执行文件，从而允许最终用户在无需安装 Python 的情况下执行应用程序。<br />PyInstaller 制作出来的执行文件并不是跨平台的，如果需要为不同平台打包，就要在相应平台上运行PyInstaller进行打包。</p><h3 id="2-pyinstaller安装"><a class="markdownIt-Anchor" href="#2-pyinstaller安装"></a> <strong>2、PyInstaller安装</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple Pyinstaller<br></code></pre></td></tr></table></figure><h3 id="3参数含义"><a class="markdownIt-Anchor" href="#3参数含义"></a> 3.参数含义</h3><p><strong>-F</strong> 表示生成单个可执行文件</p><p><strong>-w</strong> 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！</p><p><strong>-p</strong> 表示你自己自定义需要加载的类路径，一般情况下用不到</p><p><strong>-i</strong> 表示可执行文件的图标</p><h3 id="4示例"><a class="markdownIt-Anchor" href="#4示例"></a> 4.示例</h3><p>在<code>.py</code>和<code>.ico</code>文件夹下打开终端</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">pyinstaller -F -<span class="hljs-selector-tag">i</span> ./fac<span class="hljs-selector-class">.ico</span> tree.py<br></code></pre></td></tr></table></figure><p>这个时候多了很多文件和文件夹，dist目录就是我们打包好的地方。使用-w只生成<code>.exe</code>文件</p><h2 id="python使得exe文件运行完保留"><a class="markdownIt-Anchor" href="#python使得exe文件运行完保留"></a> PYTHON使得.exe文件运行完保留</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>os.system(<span class="hljs-string">&quot;pause&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="c使得exe文件运行完保留"><a class="markdownIt-Anchor" href="#c使得exe文件运行完保留"></a> C++使得.exe文件运行完保留</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;Pause&quot;</span>);<span class="hljs-comment">//生成的exe运行完程序保留，点任意键结束</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>可执行文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PYTHON</tag>
      
      <tag>exe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graph Counts</title>
    <link href="/2021/12/12/graph%20counts/"/>
    <url>/2021/12/12/graph%20counts/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/4.png" alt=" " /></p><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/5.png" alt=" " /></p><h3 id="hints"><a class="markdownIt-Anchor" href="#hints"></a> Hints</h3><p>•Each edge has weight of 1.</p><p>•Find shortest path for every two nodes using <strong>Floyd</strong> algorithm. Use length[][] to know shortest path length.</p><h3 id="示例邻接表"><a class="markdownIt-Anchor" href="#示例邻接表"></a> 示例邻接表</h3><p>0;1;2;4<br />1;0<br />2;0;4<br />3;4;6<br />4;0;2;3;5<br />5;4;6<br />6;3;5</p><h3 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h3><p>​     导入邻接表放入一个二维数组中，根据该邻接表建立邻接矩阵，然后根据Floyd算法（从i号顶点到j号顶点只经过前k号点的最短路程）得到最短路径矩阵，最后根据DFS寻找连通子图。</p><h3 id="输出结果展示"><a class="markdownIt-Anchor" href="#输出结果展示"></a> 输出结果展示</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/3.png" alt=" " /></p><h3 id="完整代码实现"><a class="markdownIt-Anchor" href="#完整代码实现"></a> 完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> ============================================================================</span><br><span class="hljs-comment"> Name        : GraphMatrix.c</span><br><span class="hljs-comment"> Author      : YUGIN CHUI（Xu yujian）</span><br><span class="hljs-comment"> Version     :</span><br><span class="hljs-comment"> Copyright   :</span><br><span class="hljs-comment"> Description : read a graph from file, which descibe the formation of the</span><br><span class="hljs-comment">      graph by vertices at the beginning of each line, followed</span><br><span class="hljs-comment">      by connected vertices.</span><br><span class="hljs-comment"> ============================================================================</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctype.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX 999</span><br><br><span class="hljs-keyword">int</span> sub_graphs = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//打印矩阵函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **m, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; size; j++)<br>            m[i][j] == MAX ? <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3c &quot;</span>, <span class="hljs-string">&#x27;x&#x27;</span>) : <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%3d &quot;</span>, m[i][j]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//Flyod函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Floyd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **A, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br><span class="hljs-comment">//TO-DO: implement Floyd algorithm</span><br><span class="hljs-keyword">int</span> i,j,k;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;size;k++)&#123;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;size;j++) &#123;<br>         <span class="hljs-keyword">if</span>(A[i][k] + A[k][j] &lt; A[i][j])&#123;<br>             A[i][j] =  A[i][k] + A[k][j];<br>         &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//DFS函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **A,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> *visit,<span class="hljs-keyword">int</span> num_nodes)</span></span>&#123;<br>    visit[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;num_nodes;j++)&#123;<br>        <span class="hljs-keyword">if</span>(A[i][j] == <span class="hljs-number">1</span> &amp;&amp; visit[j] == <span class="hljs-number">0</span>)<br>            DFS( A, j, visit, num_nodes);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//DFSTravel函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFSTravel</span><span class="hljs-params">(<span class="hljs-keyword">int</span> **A,<span class="hljs-keyword">int</span> *visit,<span class="hljs-keyword">int</span> num_nodes,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    DFS(A, e, visit, num_nodes);<br>    sub_graphs++;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i, j, k, num_nodes;<br>    <span class="hljs-keyword">int</span> **word;<br>    <span class="hljs-keyword">int</span> **M;<br>    <span class="hljs-keyword">int</span> *count;<br><br>    word = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span> *) * <span class="hljs-number">255</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">255</span>; i++) &#123;<br>        word[i] = (<span class="hljs-keyword">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * <span class="hljs-number">255</span>);<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">255</span>; j++)<br>            word[i][j] = <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//read graph from file.txt, store data in word[][]</span><br>    FILE *fp;<br>    fp = fopen(<span class="hljs-string">&quot;file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (fp == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;can not open data file\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> (fp != <span class="hljs-literal">NULL</span>) &#123;<br>        i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!feof(fp)) &#123;<br>            <span class="hljs-keyword">char</span> *buff = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">255</span>);<br>            <span class="hljs-keyword">char</span> *c = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">char</span>));<br>            j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%s&quot;</span>, buff);<br><br>            <span class="hljs-comment">//the while loop get rid of symbols like , . -</span><br>            <span class="hljs-keyword">while</span> (buff[x] != <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(buff[x])) &#123;<br>                    c[<span class="hljs-number">0</span>] = buff[x];<br>                    word[i][j] = atoi(c);<br>                    j++;<br>                &#125;<br>                x++;<br>            &#125;<br>            i++;<br>        &#125;<br>        num_nodes = i;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of nodes: %d\n&quot;</span>, num_nodes);<br>    &#125;<br><br><span class="hljs-comment">//PrintMatrix(word, num_nodes);</span><br><br><span class="hljs-comment">// initialize M[][] with all MAX values, TYPICAL code example for initialing 2D matrix.</span><br>    M = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span> *) * num_nodes);<br>    <span class="hljs-keyword">int</span> node;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num_nodes; i++) &#123;<br>        M[i] = (<span class="hljs-keyword">int</span> *) <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * num_nodes);<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_nodes; j++) &#123;<br>            M[i][j] = MAX;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//build M[][] with the value read from file.txt</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num_nodes; i++) &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_nodes; j++) &#123;<br>            <span class="hljs-keyword">if</span> (word[i][j] != <span class="hljs-number">-1</span> &amp;&amp; j &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//TO-DO: assign value=1 to correct index of M[][]</span><br>                M[i][word[i][j]] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;matrix: \n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br>    <span class="hljs-comment">//利用DFS寻找连通子图代码段</span><br>    <span class="hljs-keyword">int</span> visit[num_nodes];<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_nodes;i++)&#123;<br>        visit[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>        DFSTravel(M,visit,num_nodes,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;num_nodes;j++) &#123;<br>            <span class="hljs-keyword">if</span> (visit[j] == <span class="hljs-number">0</span>)<br>                DFSTravel(M, visit, num_nodes, j);<br>        &#125;<br><br>    <span class="hljs-comment">//Flyod求解</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; (num_nodes - <span class="hljs-number">3</span>); k++)<br>        Floyd(M, num_nodes);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Shortest path matrix between vertices\n&quot;</span>);<br>    PrintMatrix(M, num_nodes);<br><br><span class="hljs-comment">//count is used for output number of pairs in each distance</span><br>    count = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span> *) * (num_nodes<span class="hljs-number">-1</span>)); <span class="hljs-comment">//Furthest distance is (num of nodes -1)</span><br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_nodes<span class="hljs-number">-1</span>;i++) count[i]=<span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//count number of subgraphs in num_graphs, and number of node-pairs in count[], e.g. node pairs in distance</span><br><span class="hljs-comment">//TO-DO: assign count[] values, and update sum</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; num_nodes; i++)&#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; num_nodes; j++)&#123;<br><span class="hljs-comment">//TO-DO: assign count[] values, and update sum</span><br>        <span class="hljs-keyword">if</span>(j&gt;i) &#123;<br>            count[M[i][j]]++;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number of connected sub-graphs: %d\n&quot;</span>,sub_graphs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%8s | %8s\n&quot;</span>,<span class="hljs-string">&quot;Distance&quot;</span>,<span class="hljs-string">&quot;Number of node-pairs&quot;</span>);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;num_nodes<span class="hljs-number">-1</span>;i++)<br><span class="hljs-keyword">if</span>(count[i]&gt;<span class="hljs-number">0</span>)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%8d | %8d\n&quot;</span>, i, count[i]);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Points</title>
    <link href="/2021/12/12/points/"/>
    <url>/2021/12/12/points/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/7.png" alt=" " /></p><h3 id="示例输入"><a class="markdownIt-Anchor" href="#示例输入"></a> 示例输入</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一个输入为有几个点，其下输入为点的坐标<br><span class="hljs-number">3</span><br><br><span class="hljs-number">1</span> <span class="hljs-number">1</span><br><br><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><br><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h3><p>​        本次示例程序使用10000个点来测试分治法的效率，利用分治法求10000个点中的最小点对，首先将一万个点按照x的大小从小到大排序，若x相同，则按照y的大小排序，得到有序排列的一万个点，再取数组中间值的元素将一万个点分为s1和s2两部分，先分别求出s1和s2两部分的最小点对取其最小值，再与跨越s1和s2的点对距离进行对比，这里有筛选条件为当奋力在s1和s2两边的点如果x轴或者y轴到中间点的距离必须小于或等于s1与s2两部分点的最小值，即形成一个矩形内取点，通过不断递归得到最小点对。设置全局变量记录最小点对的坐标即可，经测试可以在1s内得到最小点对。</p><h3 id="示例结果"><a class="markdownIt-Anchor" href="#示例结果"></a> 示例结果</h3><p><img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/6.png" alt=" " /></p><h3 id="完整代码实现"><a class="markdownIt-Anchor" href="#完整代码实现"></a> 完整代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 99999</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10000</span><br><br><span class="hljs-keyword">int</span> m,t;<br><span class="hljs-keyword">int</span> temp[N];<span class="hljs-comment">//储存宽度为d的点</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">double</span> x;<br>    <span class="hljs-keyword">double</span> y;<br>&#125;point[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compar</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* a, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span>* b)</span><span class="hljs-comment">//用来比较两个元素的函数，即函数指针（回调函数）</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">A</span> =</span> *(struct node*)a;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> <span class="hljs-title">B</span> =</span> *(struct node*)b;<br>    <span class="hljs-keyword">if</span> (A.x != B.x)<br>        <span class="hljs-keyword">return</span> A.x - B.x;<span class="hljs-comment">//按照x从小到大的顺序排序</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> A.y - B.y;<span class="hljs-comment">//当x相等的时候，按照y的从大到小的顺序排序</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Min_distance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> left, <span class="hljs-keyword">double</span> right)</span><span class="hljs-comment">//返回距离的大小关系</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> left &lt; right ? left : right;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span><span class="hljs-comment">//计算两点距离的函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sqrt</span>((point[left].x - point[right].x) * (point[left].x - point[right].x) + ((point[left].y - point[right].y) * (point[left].y - point[right].y)));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">Closest_Pair</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">double</span> End_dis = INF;<span class="hljs-comment">//距离的初始值,无穷大</span><br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (left == right)<span class="hljs-comment">//只有一个点的时候，返回无穷大</span><br>        <span class="hljs-keyword">return</span> End_dis;<br><br>    <span class="hljs-keyword">if</span> (right - left == <span class="hljs-number">1</span>)<span class="hljs-comment">// 刚好两个点的时候，返回两点的距离</span><br>        <span class="hljs-keyword">return</span> distance(left, right);<br><br>    <span class="hljs-keyword">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<span class="hljs-comment">//大于或等于三个点的时候</span><br><br>    <span class="hljs-keyword">double</span> distance_left = Closest_Pair(left, mid);<span class="hljs-comment">//左边递归</span><br>    <span class="hljs-keyword">double</span> distancer_ight = Closest_Pair(mid + <span class="hljs-number">1</span>, right);<span class="hljs-comment">//右边递归</span><br><br>    End_dis = Min_distance(distance_left, distancer_ight);<span class="hljs-comment">//比较左右两边点对距离，找出其中的最小值</span><br><br><br>    <span class="hljs-keyword">for</span> (i = left; i &lt;= right; i++)<span class="hljs-comment">//找出符合要求的距离mid横坐标小于等于d的点</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(point[mid].x - point[i].x) &lt;= End_dis)<br>            temp[k++] = i;<span class="hljs-comment">//temp用于储存符合要求的点的序号</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= k - <span class="hljs-number">1</span>; i++)<span class="hljs-comment">//通过纵坐标寻找最短距离</span><br>        <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt;= k - <span class="hljs-number">1</span> &amp;&amp; j &lt; i + <span class="hljs-number">7</span>; j++)<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(point[temp[j]].y - point[temp[i]].y) &lt; End_dis)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(End_dis&gt;=distance(temp[i], temp[j]))<br>                &#123;<br>                    m=temp[i];<br>                    t=temp[j];<br>                &#125;<br>                <span class="hljs-keyword">else</span> m = left,t = right;<br>                End_dis = Min_distance(End_dis, distance(temp[i], temp[j]));<br>            &#125;<br>    <span class="hljs-keyword">return</span> End_dis;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start</span>, <span class="hljs-title">end</span>;</span><br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    <span class="hljs-keyword">double</span> a;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf %lf&quot;</span>, &amp;point[i].x, &amp;point[i].y);<br>        gettimeofday(&amp;start, <span class="hljs-literal">NULL</span>);<br>        qsort(point, n, <span class="hljs-keyword">sizeof</span>(point[<span class="hljs-number">0</span>]), compar);<br>        a = Closest_Pair(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>        gettimeofday(&amp;end, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the shortest distance is:%.10lf\n&quot;</span>, a);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the co-ordinates of the pair of points is:\n%.10lf %.10lf\n&quot;</span>,point[m].x,point[m].y);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.10lf %.10lf\n&quot;</span>,point[t].x,point[t].y);<br>        <span class="hljs-keyword">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class="hljs-number">1000000.0</span> + end.tv_usec - start.tv_usec;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.ld ms elapsed\n&quot;</span>, elapsed);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>分治法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序算法与冒泡排序算法的比较</title>
    <link href="/2021/11/23/sort/"/>
    <url>/2021/11/23/sort/</url>
    
    <content type="html"><![CDATA[<h4 id="原理分析"><a class="markdownIt-Anchor" href="#原理分析"></a> 原理分析</h4><p><strong>1.冒泡排序：</strong></p><p>​</p><hr /><p>交换排序顾名思义就是通过元素的两两比较，判断是否符合要求，如过不符合就交换位置来达到排序的目的。冒泡排序名字的由来就是因为在交换过程中，类似水冒泡，小（大）的元素经过不断的交换由水底慢慢的浮到水的顶端。</p><p>冒泡排序的思想就是利用的比较交换，利用循环将第 i 小或者大的元素归位，归位操作利用的是对 n 个元素中相邻的两个进行比较，如果顺序正确就不交换，如果顺序错误就进行位置的交换。通过重复的循环访问数组，直到没有可以交换的元素，那么整个排序就已经完成了。</p><p>​       冒泡排序性能分析：</p><p>1.空间效率：仅使用常数个辅助单元，空间复杂度为Ο(1)。</p><p>2.时间效率：最坏情况与平均情况均为Ο(n²)。</p><hr /><p><strong>2.快速排序：</strong></p><p>​</p><p>​        快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p><p>​        快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。</p><hr /><p>实现步骤：</p><p>1.从数列中挑出一个元素，称为 “基准”（pivot）;</p><p>2.重新排序数列，所有元素比基准值小的摆放在基准前面，所有元 素比基准值大的摆在基准的                 后面（相同的数可以到任一边）。在这个 分区退出之后，该基准就处于数列的中间位置。这个称为分区操   作；</p><p>3.递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</p><hr /><p>​           快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><hr /><h4 id="效率对比"><a class="markdownIt-Anchor" href="#效率对比"></a> 效率对比</h4><h5 id="生成了一万个随机数后利用两种排序法的时间对比"><a class="markdownIt-Anchor" href="#生成了一万个随机数后利用两种排序法的时间对比"></a> 生成了一万个随机数后利用两种排序法的时间对比</h5><h6 id="快速排序算法"><a class="markdownIt-Anchor" href="#快速排序算法"></a> 快速排序算法:</h6><p>​         <img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/1.png" alt="快速排序时间" /></p><h6 id="冒泡排序算法"><a class="markdownIt-Anchor" href="#冒泡排序算法"></a> 冒泡排序算法：</h6><p>​          <img src="https://cdn.jsdelivr.net/gh/chuiyugin/imgbed/2.png" alt="冒泡排序时间" /></p><hr /><h4 id="完整代码实现"><a class="markdownIt-Anchor" href="#完整代码实现"></a> 完整代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/time.h&gt;</span></span><br><br><span class="hljs-comment">//数组两个元素交换函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> *b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    t=*a;<br>    *a=*b;<br>    *b=t;<br>&#125;<br><br><span class="hljs-comment">//快速排序算法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Quicksort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(left&gt;=right)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> pivot = a[right];<br>     <span class="hljs-keyword">int</span> m=left,n=right<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(m&lt;n)&#123;<br>        <span class="hljs-keyword">while</span>(a[m] &lt; pivot &amp;&amp; m&lt;n)<br>            m++;<br>        <span class="hljs-keyword">while</span>(a[n] &gt;= pivot &amp;&amp; m&lt;n)<br>            n--;<br>        swap(&amp;a[m], &amp;a[n]);<br>    &#125;<br>        <span class="hljs-keyword">if</span>(a[m]&gt;=a[right])<br>            swap(&amp;a[m], &amp;a[right]);<br>        <span class="hljs-keyword">else</span><br>            m++;<br>        <span class="hljs-keyword">if</span>(m)<br>            Quicksort(a, left, m - <span class="hljs-number">1</span>);<br>            Quicksort(a, m + <span class="hljs-number">1</span>, right);<br><br>&#125;<br><br><span class="hljs-comment">//快速排序算法标准接口</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Quick_Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    Quicksort(a,<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">//冒泡算法</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Bubble_Sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a,<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i ,p ;<br>    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(p=n<span class="hljs-number">-1</span>;p&gt;=<span class="hljs-number">0</span>;p--)&#123;<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;p;i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i] &gt; a[i+<span class="hljs-number">1</span>])&#123;<br>                swap(&amp;a[i],&amp;a[i+<span class="hljs-number">1</span>]);<br>                flag = <span class="hljs-number">1</span>;<span class="hljs-comment">//标识发生变化</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//全程无交换</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//主函数</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">start</span>, <span class="hljs-title">end</span>;</span><br>    gettimeofday(&amp;start, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">int</span> L[<span class="hljs-number">10000</span>];<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br>        L[i] = rand();<br>    &#125;<br>    <span class="hljs-comment">//Quick_Sort(L,10000);</span><br>    <span class="hljs-comment">//printf(&quot;the quick complete in &quot;);</span><br>    Bubble_Sort(L,<span class="hljs-number">10000</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the bubble complete in &quot;</span>);<br>    gettimeofday(&amp;end, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">long</span> elapsed = (end.tv_sec - start.tv_sec)*<span class="hljs-number">1000000.0</span> + end.tv_usec - start.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.ld ms elapsed\n&quot;</span>, elapsed);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h4><p>​         <strong>快速排序算法在运行时间上明显少于冒泡排序算法运行时间。</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用循环队列求解约瑟夫环问题</title>
    <link href="/2021/11/20/Josephus/"/>
    <url>/2021/11/20/Josephus/</url>
    
    <content type="html"><![CDATA[<h4 id="循环队列求解约瑟夫环完整代码"><a class="markdownIt-Anchor" href="#循环队列求解约瑟夫环完整代码"></a> 循环队列求解约瑟夫环完整代码</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ERROR 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE 1</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Status;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    ElemType data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode, *Linklist;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkQuene</span>&#123;</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">front</span>;</span><br>     <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> *<span class="hljs-title">rear</span>;</span><br>&#125;LinkQuene;<br><span class="hljs-comment">//初始化队列</span><br><span class="hljs-function">Status <span class="hljs-title">init</span><span class="hljs-params">(LinkQuene q)</span></span>&#123;<br>   q.front = q.rear = (Linklist*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>   <span class="hljs-keyword">if</span>(q.front!=q.rear)&#123;<br>       <span class="hljs-keyword">return</span> ERROR;<br>   &#125;<br>   q.front-&gt;next = <span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br><span class="hljs-comment">//插入约瑟夫环（人数为x，按顺序编号）</span><br><span class="hljs-function">Status <span class="hljs-title">insert</span><span class="hljs-params">(LinkQuene *q,ElemType x)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    Linklist p;<br>    p-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(i = x;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>        Linklist s;<br>        s = (Linklist)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>        <span class="hljs-keyword">if</span>(!s)&#123;<br>            <span class="hljs-keyword">return</span> ERROR;<br>        &#125;<br>        s-&gt;data = i;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            q-&gt;front = s;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i==x)&#123;<br>            q-&gt;rear = s;<br>        &#125;<br>        s-&gt;next = p-&gt;next;<br>        p-&gt;next = s;<br>        q-&gt;rear-&gt;next = q-&gt;front;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//出列操作</span><br><span class="hljs-function">Linklist *<span class="hljs-title">out</span><span class="hljs-params">(LinkQuene *q)</span></span>&#123;<br>    Linklist s;<br>    s = q-&gt;front;<br>    q-&gt;front = s-&gt;next;<br>    q-&gt;rear-&gt;next = q-&gt;front;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-comment">//入列操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">in</span><span class="hljs-params">(LinkQuene *q,Linklist s)</span></span>&#123;<br>    q-&gt;rear-&gt;next = s;<br>    s-&gt;next = q-&gt;front;<br>    q-&gt;rear = s;<br>&#125;<br><span class="hljs-comment">//约瑟夫环操作函数</span><br><span class="hljs-function">Status <span class="hljs-title">Josephus</span><span class="hljs-params">(LinkQuene q,Linklist p,<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> j;<br>    <span class="hljs-keyword">if</span>(i&gt;x)&#123;<br>        <span class="hljs-keyword">return</span> ERROR;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;i;j++)&#123;<br>            q.front = q.front-&gt;next;<br>            q.rear = q.rear-&gt;next;<br>        &#125;<br>    <span class="hljs-keyword">while</span>(q.front!=q.rear)&#123;<br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">1</span>;j&lt;m;j++)&#123;<br>            p=out(&amp;q);<br>            in(&amp;q,p);<br>        &#125;<br>        p=out(&amp;q);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the number of dead people is %d\n&quot;</span>,p-&gt;data);<br>        <span class="hljs-built_in">free</span>(p);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the number of avoiding execution is %d&quot;</span>,q.front-&gt;data);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> x,i,m;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;how much people:\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;the starting point:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;how much people to skip:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;m);<br>    LinkQuene q;<br>    Linklist *p;<br>    init(q);<br>    insert(&amp;q,x);<br>    Josephus(q,p,x,i,m);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/20/hello-world/"/>
    <url>/2021/11/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p><h3 id="some-useful-code"><a class="markdownIt-Anchor" href="#some-useful-code"></a> Some useful code</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;chuiyugin&quot;</span><br>git config --global user.email 1726123207@qq.com<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HEXO部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
